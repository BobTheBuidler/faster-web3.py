def print_header(logger, num_calls):
    logger :: object
    num_calls :: int
    r0, r1, r2, r3, r4, r5, r6, r7, r8, r9 :: str
    r10 :: object[6]
    r11 :: object_ptr
    r12 :: object
    r13, r14 :: str
    r15 :: object[2]
    r16 :: object_ptr
    r17 :: object
    r18, r19 :: str
    r20 :: object[2]
    r21 :: object_ptr
    r22 :: object
    r23 :: None
L0:
    r0 = '|{:^26}|{:^20}|{:^20}|{:^20}|{:^20}|'
    r1 = 'Method ('
    r2 = CPyTagged_Str(num_calls)
    if is_error(r2) goto L7 (error at print_header:13) else goto L1
L1:
    r3 = ' calls)'
    r4 = CPyStr_Build(3, r1, r2, r3)
    dec_ref r2
    if is_error(r4) goto L7 (error at print_header:13) else goto L2
L2:
    r5 = 'HTTPProvider'
    r6 = 'AsyncHTTProvider'
    r7 = 'IPCProvider'
    r8 = 'WebSocketProvider'
    r9 = 'format'
    r10 = [r0, r4, r5, r6, r7, r8]
    r11 = load_address r10
    r12 = PyObject_VectorcallMethod(r9, r11, 9223372036854775814, 0)
    if is_error(r12) goto L8 (error at print_header:12) else goto L3
L3:
    dec_ref r4
    r13 = cast(str, r12)
    if is_error(r13) goto L7 (error at print_header:12) else goto L4
L4:
    r14 = 'info'
    r15 = [logger, r13]
    r16 = load_address r15
    r17 = PyObject_VectorcallMethod(r14, r16, 9223372036854775810, 0)
    if is_error(r17) goto L9 (error at print_header:11) else goto L10
L5:
    dec_ref r13
    r18 = '----------------------------------------------------------------------------------------------------------------'
    r19 = 'info'
    r20 = [logger, r18]
    r21 = load_address r20
    r22 = PyObject_VectorcallMethod(r19, r21, 9223372036854775810, 0)
    if is_error(r22) goto L7 (error at print_header:20) else goto L11
L6:
    return 1
L7:
    r23 = <error> :: None
    return r23
L8:
    dec_ref r4
    goto L7
L9:
    dec_ref r13
    goto L7
L10:
    dec_ref r17
    goto L5
L11:
    dec_ref r22
    goto L6

def print_entry(logger, method_benchmarks):
    logger :: object
    method_benchmarks :: dict
    r0, r1 :: str
    r2 :: object
    r3 :: str
    r4 :: object
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: str
    r10 :: object
    r11 :: str
    r12 :: object[6]
    r13 :: object_ptr
    r14 :: object
    r15, r16 :: str
    r17 :: object[2]
    r18 :: object_ptr
    r19 :: object
    r20 :: None
L0:
    r0 = '|{:^26}|{:^20.10}|{:^20.10}|{:^20.10}|{:^20.10}|'
    r1 = 'name'
    r2 = CPyDict_GetItem(method_benchmarks, r1)
    if is_error(r2) goto L9 (error at print_entry:29) else goto L1
L1:
    r3 = 'HTTPProvider'
    r4 = CPyDict_GetItem(method_benchmarks, r3)
    if is_error(r4) goto L10 (error at print_entry:30) else goto L2
L2:
    r5 = 'AsyncHTTPProvider'
    r6 = CPyDict_GetItem(method_benchmarks, r5)
    if is_error(r6) goto L11 (error at print_entry:31) else goto L3
L3:
    r7 = 'IPCProvider'
    r8 = CPyDict_GetItem(method_benchmarks, r7)
    if is_error(r8) goto L12 (error at print_entry:32) else goto L4
L4:
    r9 = 'WebSocketProvider'
    r10 = CPyDict_GetItem(method_benchmarks, r9)
    if is_error(r10) goto L13 (error at print_entry:33) else goto L5
L5:
    r11 = 'format'
    r12 = [r0, r2, r4, r6, r8, r10]
    r13 = load_address r12
    r14 = PyObject_VectorcallMethod(r11, r13, 9223372036854775814, 0)
    if is_error(r14) goto L14 (error at print_entry:28) else goto L6
L6:
    dec_ref r2
    dec_ref r4
    dec_ref r6
    dec_ref r8
    dec_ref r10
    r15 = cast(str, r14)
    if is_error(r15) goto L9 (error at print_entry:28) else goto L7
L7:
    r16 = 'info'
    r17 = [logger, r15]
    r18 = load_address r17
    r19 = PyObject_VectorcallMethod(r16, r18, 9223372036854775810, 0)
    if is_error(r19) goto L15 (error at print_entry:27) else goto L16
L8:
    dec_ref r15
    return 1
L9:
    r20 = <error> :: None
    return r20
L10:
    dec_ref r2
    goto L9
L11:
    dec_ref r2
    dec_ref r4
    goto L9
L12:
    dec_ref r2
    dec_ref r4
    dec_ref r6
    goto L9
L13:
    dec_ref r2
    dec_ref r4
    dec_ref r6
    dec_ref r8
    goto L9
L14:
    dec_ref r2
    dec_ref r4
    dec_ref r6
    dec_ref r8
    dec_ref r10
    goto L9
L15:
    dec_ref r15
    goto L9
L16:
    dec_ref r19
    goto L8

def print_footer(logger):
    logger :: object
    r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: None
L0:
    r0 = '----------------------------------------------------------------------------------------------------------------'
    r1 = 'info'
    r2 = [logger, r0]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L2 (error at print_footer:39) else goto L3
L1:
    return 1
L2:
    r5 = <error> :: None
    return r5
L3:
    dec_ref r4
    goto L1

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Logger',)
    r6 = 'logging'
    r7 = faster_web3.tools.benchmark.reporting.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    logging = r8 :: module
    dec_ref r8
    r9 = ('Any', 'Dict')
    r10 = 'typing'
    r11 = faster_web3.tools.benchmark.reporting.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L6 (error at <module>:4) else goto L5
L5:
    typing = r12 :: module
    dec_ref r12
    return 1
L6:
    r13 = <error> :: None
    return r13

def construct_user_agent(module, class_name):
    module, class_name :: str
    r0, r1 :: object
    r2 :: str
    r3 :: dict
    r4 :: object
    r5 :: str
    r6 :: dict
    r7 :: str
    r8 :: object
    r9, r10, r11, r12, r13 :: str
L0:
    r0 = ('__version__',)
    r1 = ('web3_version',)
    r2 = 'faster_web3'
    r3 = faster_web3._utils.http.globals :: static
    r4 = CPyImport_ImportFromMany(r2, r0, r1, r3)
    if is_error(r4) goto L5 (error at construct_user_agent:11) else goto L1
L1:
    faster_web3 = r4 :: module
    dec_ref r4
    r5 = 'faster_web3.py/'
    r6 = faster_web3._utils.http.globals :: static
    r7 = 'web3_version'
    r8 = CPyDict_GetItem(r6, r7)
    if is_error(r8) goto L5 (error at construct_user_agent:15) else goto L2
L2:
    r9 = cast(str, r8)
    if is_error(r9) goto L5 (error at construct_user_agent:15) else goto L3
L3:
    r10 = '/'
    r11 = '.'
    r12 = CPyStr_Build(6, r5, r9, r10, module, r11, class_name)
    dec_ref r9
    if is_error(r12) goto L5 (error at construct_user_agent:15) else goto L4
L4:
    return r12
L5:
    r13 = <error> :: str
    return r13

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: dict
    r10 :: str
    r11 :: object
    r12 :: i32
    r13 :: bit
    r14 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = faster_web3._utils.http.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = faster_web3._utils.http.globals :: static
    r10 = 'DEFAULT_HTTP_TIMEOUT'
    r11 = box(float, 30.0)
    r12 = CPyDict_SetItem(r9, r10, r11)
    dec_ref r11
    r13 = r12 >= 0 :: signed
    if not r13 goto L6 (error at <module>:4) else goto L5 :: bool
L5:
    return 1
L6:
    r14 = <error> :: None
    return r14

def SimpleCache.__init__(self, size):
    self :: faster_web3.utils.caching.SimpleCache
    size :: int
    r0 :: bool
    r1 :: dict
    r2 :: str
    r3, r4 :: object
    r5 :: dict
    r6 :: bool
    r7 :: None
L0:
    if is_error(size) goto L1 else goto L9
L1:
    size = 200
L2:
    self._size = size; r0 = is_error
    if not r0 goto L8 (error at __init__:34) else goto L3 :: bool
L3:
    r1 = faster_web3.utils.caching.globals :: static
    r2 = 'OrderedDict'
    r3 = CPyDict_GetItem(r1, r2)
    if is_error(r3) goto L8 (error at __init__:35) else goto L4
L4:
    r4 = PyObject_Vectorcall(r3, 0, 0, 0)
    dec_ref r3
    if is_error(r4) goto L8 (error at __init__:35) else goto L5
L5:
    r5 = cast(dict, r4)
    if is_error(r5) goto L8 (error at __init__:35) else goto L6
L6:
    self._data = r5; r6 = is_error
    if not r6 goto L8 (error at __init__:35) else goto L7 :: bool
L7:
    return 1
L8:
    r7 = <error> :: None
    return r7
L9:
    inc_ref size :: int
    goto L2

def SimpleCache.__contains__(self, key):
    self :: faster_web3.utils.caching.SimpleCache
    key :: str
    r0 :: dict
    r1 :: i32
    r2 :: bit
    r3, r4 :: bool
L0:
    r0 = self._data
    if is_error(r0) goto L3 (error at __contains__:38) else goto L1
L1:
    r1 = PyDict_Contains(r0, key)
    dec_ref r0
    r2 = r1 >= 0 :: signed
    if not r2 goto L3 (error at __contains__:38) else goto L2 :: bool
L2:
    r3 = truncate r1: i32 to builtins.bool
    return r3
L3:
    r4 = <error> :: bool
    return r4

def SimpleCache.__len__(self):
    self :: faster_web3.utils.caching.SimpleCache
    r0 :: dict
    r1 :: native_int
    r2 :: short_int
    r3 :: int
L0:
    r0 = self._data
    if is_error(r0) goto L2 (error at __len__:41) else goto L1
L1:
    r1 = PyDict_Size(r0)
    dec_ref r0
    r2 = r1 << 1
    return r2
L2:
    r3 = <error> :: int
    return r3

def SimpleCache.cache(self, key, value):
    self :: faster_web3.utils.caching.SimpleCache
    key :: str
    value :: object
    r0, r1 :: dict
    r2 :: i32
    r3 :: bit
    r4, r5 :: bool
    r6 :: dict
    r7 :: native_int
    r8 :: short_int
    r9 :: int
    r10 :: native_int
    r11 :: bit
    r12 :: native_int
    r13, r14, r15, r16 :: bit
    r17 :: dict
    r18 :: str
    r19 :: object
    r20 :: object[2]
    r21 :: object_ptr
    r22, r23 :: object
    r24 :: tuple[str, object]
    r25 :: str
    r26 :: object
    r27 :: str
    r28 :: object
    r29 :: i32
    r30 :: bit
    r31 :: dict
    r32 :: i32
    r33 :: bit
    r34 :: native_int
    r35 :: short_int
    r36 :: bit
    r37 :: union[dict, None]
    r38 :: object
    r39, r40 :: tuple[object, union[dict, None]]
L0:
    r0 = PyDict_New()
    if is_error(r0) goto L20 (error at cache:44) else goto L1
L1:
    r1 = self._data
    if is_error(r1) goto L21 (error at cache:49) else goto L2
L2:
    r2 = PyDict_Contains(r1, key)
    dec_ref r1
    r3 = r2 >= 0 :: signed
    if not r3 goto L21 (error at cache:49) else goto L3 :: bool
L3:
    r4 = truncate r2: i32 to builtins.bool
    r5 = r4 ^ 1
    if r5 goto L4 else goto L14 :: bool
L4:
    r6 = self._data
    if is_error(r6) goto L21 (error at cache:50) else goto L5
L5:
    r7 = PyDict_Size(r6)
    dec_ref r6
    r8 = r7 << 1
    r9 = borrow self._size
    if is_error(r9) goto L21 (error at cache:50) else goto L6
L6:
    r10 = r8 & 1
    r11 = r10 != 0
    if r11 goto L8 else goto L7 :: bool
L7:
    r12 = r9 & 1
    r13 = r12 != 0
    if r13 goto L8 else goto L9 :: bool
L8:
    r14 = CPyTagged_IsLt_(r8, r9)
    r15 = r14 ^ 1
    if r15 goto L10 else goto L14 :: bool
L9:
    r16 = r8 >= r9 :: signed
    if r16 goto L10 else goto L14 :: bool
L10:
    r17 = self._data
    if is_error(r17) goto L21 (error at cache:51) else goto L11
L11:
    r18 = 'popitem'
    r19 = box(bool, 0)
    r20 = [r17, r19]
    r21 = load_address r20
    r22 = ('last',)
    r23 = PyObject_VectorcallMethod(r18, r21, 9223372036854775809, r22)
    if is_error(r23) goto L22 (error at cache:51) else goto L12
L12:
    dec_ref r17
    r24 = unbox(tuple[str, object], r23)
    dec_ref r23
    if is_error(r24) goto L21 (error at cache:51) else goto L13
L13:
    r25 = borrow r24[0]
    r26 = borrow r24[1]
    r27 = unborrow r25
    r28 = unborrow r26
    r29 = CPyDict_SetItem(r0, r27, r28)
    dec_ref r27
    dec_ref r28
    r30 = r29 >= 0 :: signed
    if not r30 goto L21 (error at cache:52) else goto L4 :: bool
L14:
    r31 = self._data
    if is_error(r31) goto L21 (error at cache:53) else goto L15
L15:
    r32 = CPyDict_SetItem(r31, key, value)
    dec_ref r31
    r33 = r32 >= 0 :: signed
    if not r33 goto L21 (error at cache:53) else goto L16 :: bool
L16:
    r34 = PyDict_Size(r0)
    r35 = r34 << 1
    r36 = r35 != 0
    if r36 goto L17 else goto L23 :: bool
L17:
    r37 = r0
    goto L19
L18:
    r38 = box(None, 1)
    inc_ref r38
    r37 = r38
L19:
    inc_ref value
    r39 = (value, r37)
    return r39
L20:
    r40 = <error> :: tuple[object, union[dict, None]]
    return r40
L21:
    dec_ref r0
    goto L20
L22:
    dec_ref r0
    dec_ref r17
    goto L20
L23:
    dec_ref r0
    goto L18

def SimpleCache.get_cache_entry(self, key):
    self :: faster_web3.utils.caching.SimpleCache
    key :: str
    r0 :: dict
    r1 :: i32
    r2 :: bit
    r3 :: bool
    r4 :: dict
    r5 :: object
    r6 :: union[object, None]
    r7 :: object
    r8 :: union[object, None]
L0:
    r0 = self._data
    if is_error(r0) goto L8 (error at get_cache_entry:60) else goto L1
L1:
    r1 = PyDict_Contains(r0, key)
    dec_ref r0
    r2 = r1 >= 0 :: signed
    if not r2 goto L8 (error at get_cache_entry:60) else goto L2 :: bool
L2:
    r3 = truncate r1: i32 to builtins.bool
    if r3 goto L3 else goto L6 :: bool
L3:
    r4 = self._data
    if is_error(r4) goto L8 (error at get_cache_entry:60) else goto L4
L4:
    r5 = CPyDict_GetItem(r4, key)
    dec_ref r4
    if is_error(r5) goto L8 (error at get_cache_entry:60) else goto L5
L5:
    r6 = r5
    goto L7
L6:
    r7 = box(None, 1)
    inc_ref r7
    r6 = r7
L7:
    return r6
L8:
    r8 = <error> :: union[object, None]
    return r8

def SimpleCache.clear(self):
    self :: faster_web3.utils.caching.SimpleCache
    r0 :: dict
    r1 :: bit
    r2 :: None
L0:
    r0 = self._data
    if is_error(r0) goto L3 (error at clear:63) else goto L1
L1:
    r1 = CPyDict_Clear(r0)
    dec_ref r0
    if not r1 goto L3 (error at clear:63) else goto L2 :: bool
L2:
    return 1
L3:
    r2 = <error> :: None
    return r2

def SimpleCache.items(self):
    self :: faster_web3.utils.caching.SimpleCache
    r0 :: dict
    r1, r2 :: list
L0:
    r0 = self._data
    if is_error(r0) goto L3 (error at items:66) else goto L1
L1:
    r1 = CPyDict_Items(r0)
    dec_ref r0
    if is_error(r1) goto L3 (error at items:66) else goto L2
L2:
    return r1
L3:
    r2 = <error> :: list
    return r2

def SimpleCache.pop(self, key):
    self :: faster_web3.utils.caching.SimpleCache
    key :: str
    r0 :: dict
    r1 :: i32
    r2 :: bit
    r3, r4 :: bool
    r5 :: object
    r6 :: dict
    r7 :: str
    r8 :: object[2]
    r9 :: object_ptr
    r10 :: object
    r11 :: union[object, None]
L0:
    r0 = self._data
    if is_error(r0) goto L7 (error at pop:69) else goto L1
L1:
    r1 = PyDict_Contains(r0, key)
    dec_ref r0
    r2 = r1 >= 0 :: signed
    if not r2 goto L7 (error at pop:69) else goto L2 :: bool
L2:
    r3 = truncate r1: i32 to builtins.bool
    r4 = r3 ^ 1
    if r4 goto L3 else goto L4 :: bool
L3:
    r5 = box(None, 1)
    inc_ref r5
    return r5
L4:
    r6 = self._data
    if is_error(r6) goto L7 (error at pop:72) else goto L5
L5:
    r7 = 'pop'
    r8 = [r6, key]
    r9 = load_address r8
    r10 = PyObject_VectorcallMethod(r7, r9, 9223372036854775810, 0)
    if is_error(r10) goto L8 (error at pop:72) else goto L6
L6:
    dec_ref r6
    return r10
L7:
    r11 = <error> :: union[object, None]
    return r11
L8:
    dec_ref r6
    goto L7

def SimpleCache.popitem(self, last):
    self :: faster_web3.utils.caching.SimpleCache
    last :: bool
    r0 :: dict
    r1 :: str
    r2 :: object
    r3 :: object[2]
    r4 :: object_ptr
    r5, r6 :: object
    r7, r8 :: tuple[str, object]
L0:
    if is_error(last) goto L1 else goto L2
L1:
    last = 1
L2:
    r0 = self._data
    if is_error(r0) goto L6 (error at popitem:75) else goto L3
L3:
    r1 = 'popitem'
    r2 = box(bool, last)
    r3 = [r0, r2]
    r4 = load_address r3
    r5 = ('last',)
    r6 = PyObject_VectorcallMethod(r1, r4, 9223372036854775809, r5)
    if is_error(r6) goto L7 (error at popitem:75) else goto L4
L4:
    dec_ref r0
    r7 = unbox(tuple[str, object], r6)
    dec_ref r6
    if is_error(r7) goto L6 (error at popitem:75) else goto L5
L5:
    return r7
L6:
    r8 = <error> :: tuple[str, object]
    return r8
L7:
    dec_ref r0
    goto L6

def SimpleCache.is_full(self):
    self :: faster_web3.utils.caching.SimpleCache
    r0 :: dict
    r1 :: native_int
    r2 :: short_int
    r3 :: int
    r4 :: native_int
    r5 :: bit
    r6 :: native_int
    r7, r8, r9 :: bit
    r10 :: bool
    r11 :: bit
    r12 :: bool
L0:
    r0 = self._data
    if is_error(r0) goto L7 (error at is_full:78) else goto L1
L1:
    r1 = PyDict_Size(r0)
    dec_ref r0
    r2 = r1 << 1
    r3 = borrow self._size
    if is_error(r3) goto L7 (error at is_full:78) else goto L2
L2:
    r4 = r2 & 1
    r5 = r4 != 0
    if r5 goto L4 else goto L3 :: bool
L3:
    r6 = r3 & 1
    r7 = r6 != 0
    if r7 goto L4 else goto L5 :: bool
L4:
    r8 = CPyTagged_IsLt_(r2, r3)
    r9 = r8 ^ 1
    r10 = r9
    goto L6
L5:
    r11 = r2 >= r3 :: signed
    r10 = r11
L6:
    return r10
L7:
    r12 = <error> :: bool
    return r12

def async_await_and_popitem_SimpleCache_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: object
    r8 :: str
    r9, r10 :: object
    r11 :: float
    r12 :: bit
    r13 :: bool
    r14 :: object
    r15 :: float
    r16 :: bit
    r17 :: float
    r18 :: bit
    r19 :: object
    r20 :: float
    r21 :: bool
    r22, r23 :: object
    r24 :: str
    r25, r26 :: object
    r27 :: object[1]
    r28 :: object_ptr
    r29, r30 :: object
    r31 :: bool
    r32, r33, r34, r35, r36 :: object
    r37 :: bool
    r38 :: object
    r39 :: bool
    r40 :: object
    r41 :: bit
    r42 :: tuple[object, object, object]
    r43 :: bool
    r44 :: object_ptr
    r45 :: object
    r46 :: bool
    r47, r48, r49 :: tuple[object, object, object]
    r50 :: bit
    r51, r52, r53 :: object
    r54 :: faster_web3.utils.caching.SimpleCache
    r55 :: bool
    r56 :: tuple[str, object]
    r57 :: object
    r58 :: bool
    r59 :: tuple[object, object, object]
    r60 :: bool
    r61 :: object
    r62 :: str
    r63 :: object
    r64 :: bit
    r65 :: object
    r66 :: str
    r67, r68 :: object
    r69 :: float
    r70 :: bit
    r71 :: bool
    r72 :: object
    r73 :: float
    r74 :: bit
    r75 :: float
    r76 :: bit
    r77 :: object
    r78 :: bit
    r79 :: object
    r80 :: str
    r81 :: object
    r82 :: str
    r83 :: object
    r84 :: object[1]
    r85 :: object_ptr
    r86 :: object
    r87 :: float
    r88 :: bit
    r89 :: float
    r90 :: bit
    r91 :: object
    r92 :: float
    r93 :: bit
    r94 :: object
    r95 :: float
    r96 :: object
    r97 :: str
    r98, r99 :: object
    r100 :: object[1]
    r101 :: object_ptr
    r102, r103 :: object
    r104 :: bool
    r105, r106, r107, r108, r109 :: object
    r110 :: bool
    r111 :: object
    r112 :: bool
    r113 :: object
    r114 :: bit
    r115 :: tuple[object, object, object]
    r116 :: bool
    r117 :: object_ptr
    r118 :: object
    r119 :: bool
    r120, r121, r122 :: tuple[object, object, object]
    r123 :: bit
    r124, r125, r126 :: object
    r127, r128 :: tuple[object, object, object]
    r129 :: bit
    r130 :: object
    r131 :: bool
    r132, r133, r134 :: bit
    r135 :: bool
    r136 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L119
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L124 (error at async_await_and_popitem:82) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = time :: module
    r8 = 'time'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L124 (error at async_await_and_popitem:85) else goto L5
L5:
    r10 = PyObject_Vectorcall(r9, 0, 0, 0)
    dec_ref r9
    if is_error(r10) goto L124 (error at async_await_and_popitem:85) else goto L6
L6:
    r11 = unbox(float, r10)
    dec_ref r10
    r12 = r11 == -113.0
    if r12 goto L8 else goto L7 :: bool
L7:
    __mypyc_self__.__mypyc_generator_attribute__start = r11; r13 = is_error
    if not r13 goto L124 (error at async_await_and_popitem:85) else goto L9 :: bool
L8:
    r14 = PyErr_Occurred()
    if not is_error(r14) goto L124 (error at async_await_and_popitem:85) else goto L7
L9:
    r15 = __mypyc_self__.__mypyc_generator_attribute__start
    r16 = r15 == -113.0
    if r16 goto L11 else goto L10 :: bool
L10:
    r17 = __mypyc_self__.__mypyc_generator_attribute__timeout
    r18 = r17 == -113.0
    if r18 goto L13 else goto L12 :: bool
L11:
    r19 = PyErr_Occurred()
    if not is_error(r19) goto L124 (error at async_await_and_popitem:86) else goto L10
L12:
    r20 = r15 + r17
    __mypyc_self__.__mypyc_generator_attribute__end_time = r20; r21 = is_error
    if not r21 goto L124 (error at async_await_and_popitem:86) else goto L14 :: bool
L13:
    r22 = PyErr_Occurred()
    if not is_error(r22) goto L124 (error at async_await_and_popitem:86) else goto L12
L14:
    if 1 goto L15 else goto L114 :: bool
L15:
    r23 = asyncio :: module
    r24 = 'sleep'
    r25 = CPyObject_GetAttr(r23, r24)
    if is_error(r25) goto L124 (error at async_await_and_popitem:88) else goto L16
L16:
    r26 = object 0
    r27 = [r26]
    r28 = load_address r27
    r29 = PyObject_Vectorcall(r25, r28, 1, 0)
    dec_ref r25
    if is_error(r29) goto L124 (error at async_await_and_popitem:88) else goto L17
L17:
    r30 = CPy_GetCoro(r29)
    dec_ref r29
    if is_error(r30) goto L124 (error at async_await_and_popitem:88) else goto L18
L18:
    __mypyc_self__.__mypyc_temp__0 = r30; r31 = is_error
    if not r31 goto L124 (error at async_await_and_popitem:-1) else goto L19 :: bool
L19:
    r32 = __mypyc_self__.__mypyc_temp__0
    if is_error(r32) goto L124 (error at async_await_and_popitem:-1) else goto L20
L20:
    r33 = CPyIter_Next(r32)
    dec_ref r32
    if is_error(r33) goto L21 else goto L23
L21:
    r34 = CPy_FetchStopIterationValue()
    if is_error(r34) goto L124 (error at async_await_and_popitem:88) else goto L22
L22:
    r35 = r34
    dec_ref r35
    r36 = <error> :: object
    __mypyc_self__.__mypyc_temp__0 = r36; r37 = is_error
    if not r37 goto L124 (error at async_await_and_popitem:88) else goto L45 :: bool
L23:
    r38 = r33
L24:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r38
L25:
    r40 = load_address _Py_NoneStruct
    r41 = type != r40
    if r41 goto L26 else goto L125 :: bool
L26:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L29 (error at async_await_and_popitem:88) else goto L126 :: bool
L27:
    unreachable
L28:
    inc_ref arg
    goto L40
L29:
    r42 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__1 = r42; r43 = is_error
    if not r43 goto L127 (error at async_await_and_popitem:-1) else goto L30 :: bool
L30:
    r44 = load_address r1
    r45 = __mypyc_self__.__mypyc_temp__0
    if is_error(r45) goto L127 (error at async_await_and_popitem:-1) else goto L31
L31:
    r46 = CPy_YieldFromErrorHandle(r45, r44)
    dec_ref r45
    if is_error(r46) goto L127 (error at async_await_and_popitem:88) else goto L32
L32:
    if r46 goto L35 else goto L33 :: bool
L33:
    r38 = r1
    r47 = __mypyc_self__.__mypyc_temp__1
    if is_error(r47) goto L128 (error at async_await_and_popitem:-1) else goto L34
L34:
    CPy_RestoreExcInfo(r47)
    dec_ref r47
    goto L24
L35:
    r35 = r1
    dec_ref r35
    r48 = __mypyc_self__.__mypyc_temp__1
    if is_error(r48) goto L37 (error at async_await_and_popitem:-1) else goto L36
L36:
    CPy_RestoreExcInfo(r48)
    dec_ref r48
    goto L45
L37:
    r49 = __mypyc_self__.__mypyc_temp__1
    if is_error(r49) goto L124 (error at async_await_and_popitem:-1) else goto L38
L38:
    CPy_RestoreExcInfo(r49)
    dec_ref r49
    r50 = CPy_KeepPropagating()
    if not r50 goto L124 else goto L39 :: bool
L39:
    unreachable
L40:
    r51 = __mypyc_self__.__mypyc_temp__0
    if is_error(r51) goto L129 (error at async_await_and_popitem:-1) else goto L41
L41:
    r52 = CPyIter_Send(r51, arg)
    dec_ref r51
    dec_ref arg
    if is_error(r52) goto L43 else goto L42
L42:
    r38 = r52
    goto L24
L43:
    r53 = CPy_FetchStopIterationValue()
    if is_error(r53) goto L124 (error at async_await_and_popitem:88) else goto L44
L44:
    r35 = r53
    dec_ref r35
L45:
    r54 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r54) goto L53 (error at async_await_and_popitem:90) else goto L46
L46:
    r55 = __mypyc_self__.__mypyc_generator_attribute__last
    if is_error(r55) goto L130 (error at async_await_and_popitem:90) else goto L47
L47:
    r56 = r54.popitem(r55)
    dec_ref r54
    if is_error(r56) goto L53 (error at async_await_and_popitem:90) else goto L48
L48:
    r57 = box(tuple[str, object], r56)
    __mypyc_self__.__mypyc_next_label__ = -1
L49:
    if is_error(stop_iter_ptr) goto L50 else goto L52
L50:
    CPyGen_SetStopIterationValue(r57)
    dec_ref r57
    if not 0 goto L124 else goto L51 :: bool
L51:
    unreachable
L52:
    set_mem stop_iter_ptr, r57 :: builtins.object*
    return 0
L53:
    r59 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__2 = r59; r60 = is_error
    if not r60 goto L111 (error at async_await_and_popitem:-1) else goto L54 :: bool
L54:
    r61 = builtins :: module
    r62 = 'KeyError'
    r63 = CPyObject_GetAttr(r61, r62)
    if is_error(r63) goto L111 (error at async_await_and_popitem:91) else goto L55
L55:
    r64 = CPy_ExceptionMatches(r63)
    dec_ref r63
    if r64 goto L56 else goto L107 :: bool
L56:
    r65 = time :: module
    r66 = 'time'
    r67 = CPyObject_GetAttr(r65, r66)
    if is_error(r67) goto L111 (error at async_await_and_popitem:92) else goto L57
L57:
    r68 = PyObject_Vectorcall(r67, 0, 0, 0)
    dec_ref r67
    if is_error(r68) goto L111 (error at async_await_and_popitem:92) else goto L58
L58:
    r69 = unbox(float, r68)
    dec_ref r68
    r70 = r69 == -113.0
    if r70 goto L60 else goto L59 :: bool
L59:
    __mypyc_self__.__mypyc_generator_attribute__now = r69; r71 = is_error
    if not r71 goto L111 (error at async_await_and_popitem:92) else goto L61 :: bool
L60:
    r72 = PyErr_Occurred()
    if not is_error(r72) goto L111 (error at async_await_and_popitem:92) else goto L59
L61:
    r73 = __mypyc_self__.__mypyc_generator_attribute__now
    r74 = r73 == -113.0
    if r74 goto L63 else goto L62 :: bool
L62:
    r75 = __mypyc_self__.__mypyc_generator_attribute__end_time
    r76 = r75 == -113.0
    if r76 goto L65 else goto L64 :: bool
L63:
    r77 = PyErr_Occurred()
    if not is_error(r77) goto L111 (error at async_await_and_popitem:93) else goto L62
L64:
    r78 = r73 >= r75
    if r78 goto L66 else goto L70 :: bool
L65:
    r79 = PyErr_Occurred()
    if not is_error(r79) goto L111 (error at async_await_and_popitem:93) else goto L64
L66:
    r80 = 'Timeout waiting for item to be available'
    r81 = asyncio :: module
    r82 = 'TimeoutError'
    r83 = CPyObject_GetAttr(r81, r82)
    if is_error(r83) goto L111 (error at async_await_and_popitem:94) else goto L67
L67:
    r84 = [r80]
    r85 = load_address r84
    r86 = PyObject_Vectorcall(r83, r85, 1, 0)
    dec_ref r83
    if is_error(r86) goto L111 (error at async_await_and_popitem:94) else goto L68
L68:
    CPy_Raise(r86)
    dec_ref r86
    if not 0 goto L111 (error at async_await_and_popitem:94) else goto L69 :: bool
L69:
    unreachable
L70:
    r87 = __mypyc_self__.__mypyc_generator_attribute__end_time
    r88 = r87 == -113.0
    if r88 goto L72 else goto L71 :: bool
L71:
    r89 = __mypyc_self__.__mypyc_generator_attribute__now
    r90 = r89 == -113.0
    if r90 goto L74 else goto L73 :: bool
L72:
    r91 = PyErr_Occurred()
    if not is_error(r91) goto L111 (error at async_await_and_popitem:97) else goto L71
L73:
    r92 = r87 - r89
    r93 = r92 < 0.1
    if r93 goto L75 else goto L76 :: bool
L74:
    r94 = PyErr_Occurred()
    if not is_error(r94) goto L111 (error at async_await_and_popitem:97) else goto L73
L75:
    r95 = r92
    goto L77
L76:
    r95 = 0.1
L77:
    r96 = asyncio :: module
    r97 = 'sleep'
    r98 = CPyObject_GetAttr(r96, r97)
    if is_error(r98) goto L111 (error at async_await_and_popitem:97) else goto L78
L78:
    r99 = box(float, r95)
    r100 = [r99]
    r101 = load_address r100
    r102 = PyObject_Vectorcall(r98, r101, 1, 0)
    dec_ref r98
    if is_error(r102) goto L131 (error at async_await_and_popitem:97) else goto L79
L79:
    dec_ref r99
    r103 = CPy_GetCoro(r102)
    dec_ref r102
    if is_error(r103) goto L111 (error at async_await_and_popitem:97) else goto L80
L80:
    __mypyc_self__.__mypyc_temp__3 = r103; r104 = is_error
    if not r104 goto L111 (error at async_await_and_popitem:-1) else goto L81 :: bool
L81:
    r105 = __mypyc_self__.__mypyc_temp__3
    if is_error(r105) goto L111 (error at async_await_and_popitem:-1) else goto L82
L82:
    r106 = CPyIter_Next(r105)
    dec_ref r105
    if is_error(r106) goto L83 else goto L85
L83:
    r107 = CPy_FetchStopIterationValue()
    if is_error(r107) goto L111 (error at async_await_and_popitem:97) else goto L84
L84:
    r108 = r107
    dec_ref r108
    r109 = <error> :: object
    __mypyc_self__.__mypyc_temp__3 = r109; r110 = is_error
    if not r110 goto L111 (error at async_await_and_popitem:97) else goto L109 :: bool
L85:
    r111 = r106
L86:
    __mypyc_self__.__mypyc_next_label__ = 2
    return r111
L87:
    r113 = load_address _Py_NoneStruct
    r114 = type != r113
    if r114 goto L88 else goto L132 :: bool
L88:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L91 (error at async_await_and_popitem:97) else goto L133 :: bool
L89:
    unreachable
L90:
    inc_ref arg
    goto L102
L91:
    r115 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__4 = r115; r116 = is_error
    if not r116 goto L134 (error at async_await_and_popitem:-1) else goto L92 :: bool
L92:
    r117 = load_address r3
    r118 = __mypyc_self__.__mypyc_temp__3
    if is_error(r118) goto L134 (error at async_await_and_popitem:-1) else goto L93
L93:
    r119 = CPy_YieldFromErrorHandle(r118, r117)
    dec_ref r118
    if is_error(r119) goto L134 (error at async_await_and_popitem:97) else goto L94
L94:
    if r119 goto L97 else goto L95 :: bool
L95:
    r111 = r3
    r120 = __mypyc_self__.__mypyc_temp__4
    if is_error(r120) goto L135 (error at async_await_and_popitem:-1) else goto L96
L96:
    CPy_RestoreExcInfo(r120)
    dec_ref r120
    goto L86
L97:
    r108 = r3
    dec_ref r108
    r121 = __mypyc_self__.__mypyc_temp__4
    if is_error(r121) goto L99 (error at async_await_and_popitem:-1) else goto L98
L98:
    CPy_RestoreExcInfo(r121)
    dec_ref r121
    goto L109
L99:
    r122 = __mypyc_self__.__mypyc_temp__4
    if is_error(r122) goto L111 (error at async_await_and_popitem:-1) else goto L100
L100:
    CPy_RestoreExcInfo(r122)
    dec_ref r122
    r123 = CPy_KeepPropagating()
    if not r123 goto L111 else goto L101 :: bool
L101:
    unreachable
L102:
    r124 = __mypyc_self__.__mypyc_temp__3
    if is_error(r124) goto L136 (error at async_await_and_popitem:-1) else goto L103
L103:
    r125 = CPyIter_Send(r124, arg)
    dec_ref r124
    dec_ref arg
    if is_error(r125) goto L105 else goto L104
L104:
    r111 = r125
    goto L86
L105:
    r126 = CPy_FetchStopIterationValue()
    if is_error(r126) goto L111 (error at async_await_and_popitem:97) else goto L106
L106:
    r108 = r126
    dec_ref r108
    goto L109
L107:
    CPy_Reraise()
    if not 0 goto L111 else goto L108 :: bool
L108:
    unreachable
L109:
    r127 = __mypyc_self__.__mypyc_temp__2
    if is_error(r127) goto L124 (error at async_await_and_popitem:-1) else goto L110
L110:
    CPy_RestoreExcInfo(r127)
    dec_ref r127
    goto L14
L111:
    r128 = __mypyc_self__.__mypyc_temp__2
    if is_error(r128) goto L124 (error at async_await_and_popitem:-1) else goto L112
L112:
    CPy_RestoreExcInfo(r128)
    dec_ref r128
    r129 = CPy_KeepPropagating()
    if not r129 goto L124 else goto L113 :: bool
L113:
    unreachable
L114:
    r130 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L115:
    if is_error(stop_iter_ptr) goto L116 else goto L118
L116:
    CPyGen_SetStopIterationValue(r130)
    if not 0 goto L124 else goto L117 :: bool
L117:
    unreachable
L118:
    inc_ref r130
    set_mem stop_iter_ptr, r130 :: builtins.object*
    return 0
L119:
    r132 = r4 == 0
    if r132 goto L137 else goto L120 :: bool
L120:
    r133 = r4 == 1
    if r133 goto L138 else goto L139 :: bool
L121:
    r134 = r4 == 2
    if r134 goto L87 else goto L140 :: bool
L122:
    r135 = raise StopIteration
    if not r135 goto L124 (error at async_await_and_popitem:82) else goto L123 :: bool
L123:
    unreachable
L124:
    r136 = <error> :: object
    return r136
L125:
    xdec_ref r1
    goto L28
L126:
    xdec_ref r1
    goto L27
L127:
    xdec_ref r1
    goto L37
L128:
    dec_ref r38
    goto L37
L129:
    dec_ref arg
    goto L124
L130:
    dec_ref r54
    goto L53
L131:
    dec_ref r99
    goto L111
L132:
    xdec_ref r3
    goto L90
L133:
    xdec_ref r3
    goto L89
L134:
    xdec_ref r3
    goto L99
L135:
    dec_ref r111
    goto L99
L136:
    dec_ref arg
    goto L111
L137:
    xdec_ref r1
    xdec_ref r3
    goto L1
L138:
    xdec_ref r3
    goto L25
L139:
    xdec_ref r1
    goto L121
L140:
    xdec_ref r3
    goto L122

def async_await_and_popitem_SimpleCache_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_await_and_popitem_SimpleCache_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_await_and_popitem_SimpleCache_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_await_and_popitem_SimpleCache_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_await_and_popitem_SimpleCache_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_await_and_popitem_SimpleCache_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = async_await_and_popitem_SimpleCache_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def async_await_and_popitem_SimpleCache_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def async_await_and_popitem_SimpleCache_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def SimpleCache.async_await_and_popitem(self, last, timeout, __bitmap):
    self :: faster_web3.utils.caching.SimpleCache
    last :: bool
    timeout :: float
    __bitmap, r0 :: u32
    r1 :: bit
    r2 :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    r3, r4, r5, r6 :: bool
    r7 :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
L0:
    if is_error(last) goto L1 else goto L2
L1:
    last = 1
L2:
    r0 = __bitmap & 1
    r1 = r0 == 0
    if r1 goto L3 else goto L4 :: bool
L3:
    timeout = 10.0
L4:
    r2 = async_await_and_popitem_SimpleCache_gen()
    if is_error(r2) goto L9 (error at async_await_and_popitem:82) else goto L5
L5:
    r2.__mypyc_next_label__ = 0
    inc_ref self
    r2.__mypyc_generator_attribute__self = self; r4 = is_error
    if not r4 goto L10 (error at async_await_and_popitem:82) else goto L6 :: bool
L6:
    r2.__mypyc_generator_attribute__last = last; r5 = is_error
    if not r5 goto L10 (error at async_await_and_popitem:82) else goto L7 :: bool
L7:
    r2.__mypyc_generator_attribute__timeout = timeout; r6 = is_error
    if not r6 goto L10 (error at async_await_and_popitem:82) else goto L8 :: bool
L8:
    return r2
L9:
    r7 = <error> :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    return r7
L10:
    dec_ref r2
    goto L9

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: object_ptr
    r6 :: object_ptr[1]
    r7 :: c_ptr
    r8 :: native_int[1]
    r9 :: c_ptr
    r10 :: object
    r11 :: dict
    r12, r13 :: str
    r14 :: bit
    r15 :: object
    r16 :: str
    r17 :: dict
    r18, r19 :: object
    r20 :: str
    r21 :: dict
    r22 :: object
    r23 :: object_ptr
    r24 :: object_ptr[1]
    r25 :: c_ptr
    r26 :: native_int[1]
    r27 :: c_ptr
    r28 :: object
    r29 :: dict
    r30, r31 :: str
    r32 :: bit
    r33 :: object
    r34 :: str
    r35 :: dict
    r36 :: object
    r37 :: str
    r38 :: dict
    r39 :: str
    r40 :: object
    r41 :: object[1]
    r42 :: object_ptr
    r43 :: object
    r44 :: dict
    r45 :: str
    r46 :: i32
    r47 :: bit
    r48 :: object
    r49 :: str
    r50 :: object
    r51 :: tuple
    r52, r53 :: object
    r54 :: str
    r55 :: bool
    r56, r57 :: str
    r58 :: object
    r59 :: object[2]
    r60 :: object_ptr
    r61 :: object
    r62, r63, r64, r65 :: dict
    r66 :: object
    r67 :: str
    r68 :: i32
    r69 :: bit
    r70, r71 :: str
    r72 :: i32
    r73 :: bit
    r74 :: object
    r75 :: str
    r76 :: i32
    r77 :: bit
    r78, r79 :: str
    r80 :: i32
    r81 :: bit
    r82, r83 :: str
    r84 :: i32
    r85 :: bit
    r86, r87 :: str
    r88 :: i32
    r89 :: bit
    r90, r91 :: str
    r92 :: i32
    r93 :: bit
    r94 :: object[3]
    r95 :: object_ptr
    r96 :: object
    r97 :: dict
    r98 :: str
    r99 :: object
    r100 :: object[1]
    r101 :: object_ptr
    r102 :: object
    r103 :: dict
    r104 :: str
    r105 :: i32
    r106 :: bit
    r107 :: object
    r108 :: str
    r109 :: object
    r110 :: str
    r111 :: object
    r112 :: dict
    r113 :: str
    r114 :: object
    r115 :: dict
    r116 :: str
    r117, r118 :: object
    r119 :: tuple
    r120 :: str
    r121, r122 :: object
    r123 :: bool
    r124, r125, r126, r127 :: str
    r128 :: tuple
    r129 :: i32
    r130 :: bit
    r131 :: dict
    r132 :: str
    r133 :: i32
    r134 :: bit
    r135 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L45 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address asyncio :: module
    r6 = [r5]
    r7 = load_address r6
    r8 = [1]
    r9 = load_address r8
    r10 = (('asyncio', 'asyncio', 'asyncio'),)
    r11 = faster_web3.utils.caching.globals :: static
    r12 = 'faster_web3/utils/caching.py'
    r13 = '<module>'
    r14 = CPyImport_ImportMany(r10, r7, r11, r12, r13, r9)
    if not r14 goto L45 else goto L4 :: bool
L4:
    r15 = ('OrderedDict',)
    r16 = 'collections'
    r17 = faster_web3.utils.caching.globals :: static
    r18 = CPyImport_ImportFromMany(r16, r15, r15, r17)
    if is_error(r18) goto L45 (error at <module>:2) else goto L5
L5:
    collections = r18 :: module
    dec_ref r18
    r19 = ('Enum',)
    r20 = 'enum'
    r21 = faster_web3.utils.caching.globals :: static
    r22 = CPyImport_ImportFromMany(r20, r19, r19, r21)
    if is_error(r22) goto L45 (error at <module>:5) else goto L6
L6:
    enum = r22 :: module
    dec_ref r22
    r23 = load_address time :: module
    r24 = [r23]
    r25 = load_address r24
    r26 = [8]
    r27 = load_address r26
    r28 = (('time', 'time', 'time'),)
    r29 = faster_web3.utils.caching.globals :: static
    r30 = 'faster_web3/utils/caching.py'
    r31 = '<module>'
    r32 = CPyImport_ImportMany(r28, r25, r29, r30, r31, r27)
    if not r32 goto L45 else goto L7 :: bool
L7:
    r33 = ('Any', 'Dict', 'Final', 'Generic', 'List', 'Optional', 'Tuple', 'TypeVar', 'final')
    r34 = 'typing'
    r35 = faster_web3.utils.caching.globals :: static
    r36 = CPyImport_ImportFromMany(r34, r33, r33, r35)
    if is_error(r36) goto L45 (error at <module>:9) else goto L8
L8:
    typing = r36 :: module
    dec_ref r36
    r37 = 'T'
    r38 = faster_web3.utils.caching.globals :: static
    r39 = 'TypeVar'
    r40 = CPyDict_GetItem(r38, r39)
    if is_error(r40) goto L45 (error at <module>:22) else goto L9
L9:
    r41 = [r37]
    r42 = load_address r41
    r43 = PyObject_Vectorcall(r40, r42, 1, 0)
    dec_ref r40
    if is_error(r43) goto L45 (error at <module>:22) else goto L10
L10:
    r44 = faster_web3.utils.caching.globals :: static
    r45 = 'T'
    r46 = CPyDict_SetItem(r44, r45, r43)
    dec_ref r43
    r47 = r46 >= 0 :: signed
    if not r47 goto L45 (error at <module>:22) else goto L11 :: bool
L11:
    r48 = enum :: module
    r49 = 'Enum'
    r50 = CPyObject_GetAttr(r48, r49)
    if is_error(r50) goto L45 (error at <module>:26) else goto L12
L12:
    r51 = PyTuple_Pack(1, r50)
    dec_ref r50
    if is_error(r51) goto L45 (error at <module>:26) else goto L13
L13:
    r52 = load_address PyType_Type
    r53 = CPy_CalculateMetaclass(r52, r51)
    if is_error(r53) goto L46 (error at <module>:26) else goto L14
L14:
    r54 = '__prepare__'
    r55 = PyObject_HasAttr(r53, r54)
    if r55 goto L15 else goto L19 :: bool
L15:
    r56 = 'RequestCacheValidationThreshold'
    r57 = '__prepare__'
    r58 = CPyObject_GetAttr(r53, r57)
    if is_error(r58) goto L46 (error at <module>:26) else goto L16
L16:
    r59 = [r56, r51]
    r60 = load_address r59
    r61 = PyObject_Vectorcall(r58, r60, 2, 0)
    dec_ref r58
    if is_error(r61) goto L46 (error at <module>:26) else goto L17
L17:
    r62 = cast(dict, r61)
    if is_error(r62) goto L46 (error at <module>:26) else goto L18
L18:
    r63 = r62
    goto L21
L19:
    r64 = PyDict_New()
    if is_error(r64) goto L46 (error at <module>:26) else goto L20
L20:
    r63 = r64
L21:
    r65 = PyDict_New()
    if is_error(r65) goto L47 (error at <module>:26) else goto L22
L22:
    r66 = load_address PyUnicode_Type
    r67 = 'FINALIZED'
    r68 = PyDict_SetItem(r65, r67, r66)
    r69 = r68 >= 0 :: signed
    if not r69 goto L48 (error at <module>:27) else goto L23 :: bool
L23:
    r70 = 'finalized'
    r71 = 'FINALIZED'
    r72 = CPyDict_SetItem(r63, r71, r70)
    r73 = r72 >= 0 :: signed
    if not r73 goto L48 (error at <module>:27) else goto L24 :: bool
L24:
    r74 = load_address PyUnicode_Type
    r75 = 'SAFE'
    r76 = PyDict_SetItem(r65, r75, r74)
    r77 = r76 >= 0 :: signed
    if not r77 goto L48 (error at <module>:28) else goto L25 :: bool
L25:
    r78 = 'safe'
    r79 = 'SAFE'
    r80 = CPyDict_SetItem(r63, r79, r78)
    r81 = r80 >= 0 :: signed
    if not r81 goto L48 (error at <module>:28) else goto L26 :: bool
L26:
    r82 = 'RequestCacheValidationThreshold'
    r83 = '__annotations__'
    r84 = CPyDict_SetItem(r63, r83, r65)
    dec_ref r65
    r85 = r84 >= 0 :: signed
    if not r85 goto L47 (error at <module>:26) else goto L27 :: bool
L27:
    r86 = 'mypyc filler docstring'
    r87 = '__doc__'
    r88 = CPyDict_SetItem(r63, r87, r86)
    r89 = r88 >= 0 :: signed
    if not r89 goto L47 (error at <module>:26) else goto L28 :: bool
L28:
    r90 = 'faster_web3.utils.caching'
    r91 = '__module__'
    r92 = CPyDict_SetItem(r63, r91, r90)
    r93 = r92 >= 0 :: signed
    if not r93 goto L47 (error at <module>:26) else goto L29 :: bool
L29:
    r94 = [r82, r51, r63]
    r95 = load_address r94
    r96 = PyObject_Vectorcall(r53, r95, 3, 0)
    if is_error(r96) goto L47 (error at <module>:26) else goto L30
L30:
    dec_ref r51
    dec_ref r63
    r97 = faster_web3.utils.caching.globals :: static
    r98 = 'final'
    r99 = CPyDict_GetItem(r97, r98)
    if is_error(r99) goto L49 (error at <module>:25) else goto L31
L31:
    r100 = [r96]
    r101 = load_address r100
    r102 = PyObject_Vectorcall(r99, r101, 1, 0)
    dec_ref r99
    if is_error(r102) goto L49 (error at <module>:26) else goto L32
L32:
    dec_ref r96
    faster_web3.utils.caching.RequestCacheValidationThreshold = r102 :: type
    r103 = faster_web3.utils.caching.globals :: static
    r104 = 'RequestCacheValidationThreshold'
    r105 = PyDict_SetItem(r103, r104, r102)
    dec_ref r102
    r106 = r105 >= 0 :: signed
    if not r106 goto L45 (error at <module>:26) else goto L33 :: bool
L33:
    r107 = faster_web3.utils.caching.RequestCacheValidationThreshold :: type
    r108 = 'FINALIZED'
    r109 = CPyObject_GetAttr(r107, r108)
    if is_error(r109) goto L45 (error at <module>:26) else goto L34
L34:
    faster_web3.utils.caching.RequestCacheValidationThreshold.FINALIZED = r109 :: static
    dec_ref r109
    r110 = 'SAFE'
    r111 = CPyObject_GetAttr(r107, r110)
    if is_error(r111) goto L45 (error at <module>:26) else goto L35
L35:
    faster_web3.utils.caching.RequestCacheValidationThreshold.SAFE = r111 :: static
    dec_ref r111
    r112 = faster_web3.utils.caching.globals :: static
    r113 = 'Generic'
    r114 = CPyDict_GetItem(r112, r113)
    if is_error(r114) goto L45 (error at <module>:32) else goto L36
L36:
    r115 = faster_web3.utils.caching.globals :: static
    r116 = 'T'
    r117 = CPyDict_GetItem(r115, r116)
    if is_error(r117) goto L50 (error at <module>:32) else goto L37
L37:
    r118 = PyObject_GetItem(r114, r117)
    dec_ref r114
    dec_ref r117
    if is_error(r118) goto L45 (error at <module>:32) else goto L38
L38:
    r119 = PyTuple_Pack(1, r118)
    dec_ref r118
    if is_error(r119) goto L45 (error at <module>:32) else goto L39
L39:
    r120 = 'faster_web3.utils.caching'
    r121 = faster_web3.utils.caching.SimpleCache_template :: type
    r122 = CPyType_FromTemplate(r121, r119, r120)
    dec_ref r119
    if is_error(r122) goto L45 (error at <module>:32) else goto L40
L40:
    r123 = SimpleCache_trait_vtable_setup()
    if is_error(r123) goto L51 (error at <module>:-1) else goto L41
L41:
    r124 = '__mypyc_attrs__'
    r125 = '_size'
    r126 = '_data'
    r127 = '__dict__'
    r128 = PyTuple_Pack(3, r125, r126, r127)
    if is_error(r128) goto L51 (error at <module>:32) else goto L42
L42:
    r129 = PyObject_SetAttr(r122, r124, r128)
    dec_ref r128
    r130 = r129 >= 0 :: signed
    if not r130 goto L51 (error at <module>:32) else goto L43 :: bool
L43:
    faster_web3.utils.caching.SimpleCache = r122 :: type
    r131 = faster_web3.utils.caching.globals :: static
    r132 = 'SimpleCache'
    r133 = PyDict_SetItem(r131, r132, r122)
    dec_ref r122
    r134 = r133 >= 0 :: signed
    if not r134 goto L45 (error at <module>:32) else goto L44 :: bool
L44:
    return 1
L45:
    r135 = <error> :: None
    return r135
L46:
    dec_ref r51
    goto L45
L47:
    dec_ref r51
    dec_ref r63
    goto L45
L48:
    dec_ref r51
    dec_ref r63
    dec_ref r65
    goto L45
L49:
    dec_ref r96
    goto L45
L50:
    dec_ref r114
    goto L45
L51:
    dec_ref r122
    goto L45

def GethBenchmarkFixture.__init__(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0 :: str
    r1 :: bool
    r2 :: str
    r3 :: bool
    r4 :: str
    r5 :: bool
    r6 :: None
L0:
    r0 = self._rpc_port()
    if is_error(r0) goto L7 (error at __init__:35) else goto L1
L1:
    self.rpc_port = r0; r1 = is_error
    if not r1 goto L7 (error at __init__:35) else goto L2 :: bool
L2:
    r2 = self._endpoint_uri()
    if is_error(r2) goto L7 (error at __init__:36) else goto L3
L3:
    self.endpoint_uri = r2; r3 = is_error
    if not r3 goto L7 (error at __init__:36) else goto L4 :: bool
L4:
    r4 = self._geth_binary()
    if is_error(r4) goto L7 (error at __init__:37) else goto L5
L5:
    self.geth_binary = r4; r5 = is_error
    if not r5 goto L7 (error at __init__:37) else goto L6 :: bool
L6:
    return 1
L7:
    r6 = <error> :: None
    return r6

def build_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0 :: i32
    r1 :: object
    r2 :: bit
    r3 :: dict
    r4 :: str
    r5, r6, r7 :: object
    r8 :: str
    r9 :: object
    r10 :: bool
    r11 :: str
    r12 :: object
    r13 :: object[1]
    r14 :: object_ptr
    r15 :: object
    r16, r17 :: bool
    r18 :: str
    r19 :: bool
    r20 :: dict
    r21 :: str
    r22 :: object
    r23 :: str
    r24 :: object
    r25 :: str
    r26 :: object
    r27 :: str
    r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31 :: object
    r32, r33, r34 :: str
    r35 :: object
    r36 :: str
    r37 :: object
    r38 :: str
    r39 :: object
    r40 :: object[2]
    r41 :: object_ptr
    r42 :: object
    r43 :: str
    r44 :: object
    r45 :: str
    r46 :: object
    r47 :: str
    r48 :: object
    r49 :: object[1]
    r50 :: object_ptr
    r51 :: object
    r52 :: str
    r53 :: bool
    r54, r55, r56 :: str
    r57 :: object
    r58 :: str
    r59 :: object
    r60 :: str
    r61 :: object
    r62 :: object[2]
    r63 :: object_ptr
    r64 :: object
    r65 :: str
    r66 :: bool
    r67, r68 :: str
    r69 :: object
    r70 :: str
    r71 :: object
    r72 :: object[2]
    r73 :: object_ptr
    r74, r75 :: object
    r76 :: str
    r77 :: object
    r78 :: bool
    r79 :: str
    r80 :: object
    r81 :: object[1]
    r82 :: object_ptr
    r83 :: object
    r84, r85, r86 :: bool
    r87 :: object
    r88, r89 :: str
    r90 :: object[2]
    r91 :: object_ptr
    r92 :: object
    r93 :: tuple[object, object, object]
    r94, r95 :: bool
    r96 :: tuple[object, object, object]
    r97, r98, r99, r100, r101 :: object
    r102 :: object[4]
    r103 :: object_ptr
    r104 :: object
    r105 :: i32
    r106 :: bit
    r107 :: bool
    r108, r109 :: tuple[object, object, object]
    r110 :: bit
    r111, r112, r113 :: tuple[object, object, object]
    r114 :: bool
    r115, r116, r117 :: object
    r118 :: object[4]
    r119 :: object_ptr
    r120 :: object
    r121 :: bit
    r122 :: str
    r123 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r124 :: bool
    r125 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r126, r127 :: str
    r128 :: object
    r129 :: str
    r130 :: object
    r131 :: str
    r132 :: object
    r133 :: object[2]
    r134 :: object_ptr
    r135 :: object
    r136 :: str
    r137 :: bool
    r138, r139 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r140, r141 :: str
    r142 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r143 :: str
    r144 :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    r145 :: bool
    r146 :: object
    r147 :: bit
    r148 :: tuple[object, object, object]
    r149, r150 :: bool
    r151 :: tuple[object, object, object]
    r152, r153, r154, r155, r156 :: object
    r157 :: object[4]
    r158 :: object_ptr
    r159 :: object
    r160 :: i32
    r161 :: bit
    r162 :: bool
    r163, r164 :: tuple[object, object, object]
    r165 :: bit
    r166, r167, r168 :: tuple[object, object, object]
    r169 :: bool
    r170, r171, r172 :: object
    r173 :: object[4]
    r174 :: object_ptr
    r175 :: object
    r176 :: bit
    r177 :: object
    r178 :: bool
    r179, r180 :: bit
    r181 :: bool
    r182 :: object
L0:
    r0 = __mypyc_self__.__mypyc_next_label__
    goto L135
L1:
    r1 = load_address _Py_NoneStruct
    r2 = type != r1
    if r2 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L139 (error at build:39) else goto L3 :: bool
L3:
    unreachable
L4:
    r3 = faster_web3.tools.benchmark.node.globals :: static
    r4 = 'TemporaryDirectory'
    r5 = CPyDict_GetItem(r3, r4)
    if is_error(r5) goto L139 (error at build:40) else goto L5
L5:
    r6 = PyObject_Vectorcall(r5, 0, 0, 0)
    dec_ref r5
    if is_error(r6) goto L139 (error at build:40) else goto L6
L6:
    r7 = CPy_TYPE(r6)
    r8 = '__exit__'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L140 (error at build:40) else goto L7
L7:
    __mypyc_self__.__mypyc_temp__0 = r9; r10 = is_error
    if not r10 goto L140 (error at build:-1) else goto L8 :: bool
L8:
    r11 = '__enter__'
    r12 = CPyObject_GetAttr(r7, r11)
    dec_ref r7
    if is_error(r12) goto L141 (error at build:40) else goto L9
L9:
    r13 = [r6]
    r14 = load_address r13
    r15 = PyObject_Vectorcall(r12, r14, 1, 0)
    dec_ref r12
    if is_error(r15) goto L141 (error at build:40) else goto L10
L10:
    __mypyc_self__.__mypyc_temp__1 = r6; r16 = is_error
    if not r16 goto L142 (error at build:-1) else goto L11 :: bool
L11:
    __mypyc_self__.__mypyc_temp__2 = 1; r17 = is_error
    if not r17 goto L142 (error at build:-1) else goto L12 :: bool
L12:
    r18 = cast(str, r15)
    if is_error(r18) goto L101 (error at build:40) else goto L13
L13:
    __mypyc_self__.__mypyc_generator_attribute__base_dir = r18; r19 = is_error
    if not r19 goto L101 (error at build:40) else goto L14 :: bool
L14:
    r20 = faster_web3.tools.benchmark.node.globals :: static
    r21 = '__file__'
    r22 = CPyDict_GetItem(r20, r21)
    if is_error(r22) goto L101 (error at build:43) else goto L15
L15:
    r23 = cast(str, r22)
    if is_error(r23) goto L101 (error at build:43) else goto L16
L16:
    r24 = os :: module
    r25 = 'path'
    r26 = CPyObject_GetAttr(r24, r25)
    if is_error(r26) goto L143 (error at build:43) else goto L17
L17:
    r27 = 'dirname'
    r28 = CPyObject_GetAttr(r26, r27)
    dec_ref r26
    if is_error(r28) goto L143 (error at build:43) else goto L18
L18:
    r29 = [r23]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r28, r30, 1, 0)
    dec_ref r28
    if is_error(r31) goto L143 (error at build:43) else goto L19
L19:
    dec_ref r23
    r32 = cast(str, r31)
    if is_error(r32) goto L101 (error at build:43) else goto L20
L20:
    r33 = '../../../tests/integration/geth-1.16.2-fixture.zip'
    r34 = CPyStr_Build(1, r33)
    if is_error(r34) goto L144 (error at build:44) else goto L21
L21:
    r35 = os :: module
    r36 = 'path'
    r37 = CPyObject_GetAttr(r35, r36)
    if is_error(r37) goto L145 (error at build:42) else goto L22
L22:
    r38 = 'join'
    r39 = CPyObject_GetAttr(r37, r38)
    dec_ref r37
    if is_error(r39) goto L145 (error at build:42) else goto L23
L23:
    r40 = [r32, r34]
    r41 = load_address r40
    r42 = PyObject_Vectorcall(r39, r41, 2, 0)
    dec_ref r39
    if is_error(r42) goto L145 (error at build:42) else goto L24
L24:
    dec_ref r32
    dec_ref r34
    r43 = cast(str, r42)
    if is_error(r43) goto L101 (error at build:42) else goto L25
L25:
    r44 = os :: module
    r45 = 'path'
    r46 = CPyObject_GetAttr(r44, r45)
    if is_error(r46) goto L146 (error at build:41) else goto L26
L26:
    r47 = 'abspath'
    r48 = CPyObject_GetAttr(r46, r47)
    dec_ref r46
    if is_error(r48) goto L146 (error at build:41) else goto L27
L27:
    r49 = [r43]
    r50 = load_address r49
    r51 = PyObject_Vectorcall(r48, r50, 1, 0)
    dec_ref r48
    if is_error(r51) goto L146 (error at build:41) else goto L28
L28:
    dec_ref r43
    r52 = cast(str, r51)
    if is_error(r52) goto L101 (error at build:41) else goto L29
L29:
    __mypyc_self__.__mypyc_generator_attribute__zipfile_path = r52; r53 = is_error
    if not r53 goto L101 (error at build:41) else goto L30 :: bool
L30:
    r54 = __mypyc_self__.__mypyc_generator_attribute__base_dir
    if is_error(r54) goto L101 (error at build:47) else goto L31
L31:
    r55 = PyObject_Str(r54)
    dec_ref r54
    if is_error(r55) goto L101 (error at build:47) else goto L32
L32:
    r56 = 'datadir'
    r57 = os :: module
    r58 = 'path'
    r59 = CPyObject_GetAttr(r57, r58)
    if is_error(r59) goto L147 (error at build:47) else goto L33
L33:
    r60 = 'join'
    r61 = CPyObject_GetAttr(r59, r60)
    dec_ref r59
    if is_error(r61) goto L147 (error at build:47) else goto L34
L34:
    r62 = [r55, r56]
    r63 = load_address r62
    r64 = PyObject_Vectorcall(r61, r63, 2, 0)
    dec_ref r61
    if is_error(r64) goto L147 (error at build:47) else goto L35
L35:
    dec_ref r55
    r65 = cast(str, r64)
    if is_error(r65) goto L101 (error at build:47) else goto L36
L36:
    __mypyc_self__.__mypyc_generator_attribute__tmp_datadir = r65; r66 = is_error
    if not r66 goto L101 (error at build:47) else goto L37 :: bool
L37:
    r67 = __mypyc_self__.__mypyc_generator_attribute__zipfile_path
    if is_error(r67) goto L101 (error at build:48) else goto L38
L38:
    r68 = 'r'
    r69 = zipfile :: module
    r70 = 'ZipFile'
    r71 = CPyObject_GetAttr(r69, r70)
    if is_error(r71) goto L148 (error at build:48) else goto L39
L39:
    r72 = [r67, r68]
    r73 = load_address r72
    r74 = PyObject_Vectorcall(r71, r73, 2, 0)
    dec_ref r71
    if is_error(r74) goto L148 (error at build:48) else goto L40
L40:
    dec_ref r67
    r75 = CPy_TYPE(r74)
    r76 = '__exit__'
    r77 = CPyObject_GetAttr(r75, r76)
    if is_error(r77) goto L149 (error at build:48) else goto L41
L41:
    __mypyc_self__.__mypyc_temp__3 = r77; r78 = is_error
    if not r78 goto L149 (error at build:-1) else goto L42 :: bool
L42:
    r79 = '__enter__'
    r80 = CPyObject_GetAttr(r75, r79)
    dec_ref r75
    if is_error(r80) goto L150 (error at build:48) else goto L43
L43:
    r81 = [r74]
    r82 = load_address r81
    r83 = PyObject_Vectorcall(r80, r82, 1, 0)
    dec_ref r80
    if is_error(r83) goto L150 (error at build:48) else goto L44
L44:
    __mypyc_self__.__mypyc_temp__4 = r74; r84 = is_error
    if not r84 goto L151 (error at build:-1) else goto L45 :: bool
L45:
    __mypyc_self__.__mypyc_temp__5 = 1; r85 = is_error
    if not r85 goto L151 (error at build:-1) else goto L46 :: bool
L46:
    __mypyc_self__.__mypyc_generator_attribute__zip_ref = r83; r86 = is_error
    if not r86 goto L51 (error at build:48) else goto L47 :: bool
L47:
    r87 = __mypyc_self__.__mypyc_generator_attribute__zip_ref
    if is_error(r87) goto L51 (error at build:49) else goto L48
L48:
    r88 = __mypyc_self__.__mypyc_generator_attribute__tmp_datadir
    if is_error(r88) goto L152 (error at build:49) else goto L49
L49:
    r89 = 'extractall'
    r90 = [r87, r88]
    r91 = load_address r90
    r92 = PyObject_VectorcallMethod(r89, r91, 9223372036854775810, 0)
    if is_error(r92) goto L153 (error at build:49) else goto L154
L50:
    dec_ref r87
    dec_ref r88
    goto L65
L51:
    r93 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__6 = r93; r94 = is_error
    if not r94 goto L62 (error at build:-1) else goto L52 :: bool
L52:
    __mypyc_self__.__mypyc_temp__5 = 0; r95 = is_error
    if not r95 goto L62 (error at build:48) else goto L53 :: bool
L53:
    r96 = CPy_GetExcInfo()
    r97 = r96[0]
    r98 = r96[1]
    r99 = r96[2]
    dec_ref r96
    r100 = __mypyc_self__.__mypyc_temp__3
    if is_error(r100) goto L155 (error at build:-1) else goto L54
L54:
    r101 = __mypyc_self__.__mypyc_temp__4
    if is_error(r101) goto L156 (error at build:-1) else goto L55
L55:
    r102 = [r101, r97, r98, r99]
    r103 = load_address r102
    r104 = PyObject_Vectorcall(r100, r103, 4, 0)
    dec_ref r100
    if is_error(r104) goto L157 (error at build:48) else goto L56
L56:
    dec_ref r101
    dec_ref r97
    dec_ref r98
    dec_ref r99
    r105 = PyObject_IsTrue(r104)
    dec_ref r104
    r106 = r105 >= 0 :: signed
    if not r106 goto L62 (error at build:48) else goto L57 :: bool
L57:
    r107 = truncate r105: i32 to builtins.bool
    if r107 goto L60 else goto L58 :: bool
L58:
    CPy_Reraise()
    if not 0 goto L62 else goto L59 :: bool
L59:
    unreachable
L60:
    r108 = __mypyc_self__.__mypyc_temp__6
    if is_error(r108) goto L66 (error at build:-1) else goto L61
L61:
    CPy_RestoreExcInfo(r108)
    dec_ref r108
    goto L65
L62:
    r109 = __mypyc_self__.__mypyc_temp__6
    if is_error(r109) goto L66 (error at build:-1) else goto L63
L63:
    CPy_RestoreExcInfo(r109)
    dec_ref r109
    r110 = CPy_KeepPropagating()
    if not r110 goto L66 else goto L64 :: bool
L64:
    unreachable
L65:
    r111 = <error> :: tuple[object, object, object]
    r112 = r111
    goto L67
L66:
    r113 = CPy_CatchError()
    r112 = r113
L67:
    r114 = __mypyc_self__.__mypyc_temp__5
    if is_error(r114) goto L76 (error at build:-1) else goto L68
L68:
    if r114 goto L69 else goto L73 :: bool
L69:
    r115 = load_address _Py_NoneStruct
    r116 = __mypyc_self__.__mypyc_temp__3
    if is_error(r116) goto L76 (error at build:-1) else goto L70
L70:
    r117 = __mypyc_self__.__mypyc_temp__4
    if is_error(r117) goto L158 (error at build:-1) else goto L71
L71:
    r118 = [r117, r115, r115, r115]
    r119 = load_address r118
    r120 = PyObject_Vectorcall(r116, r119, 4, 0)
    dec_ref r116
    if is_error(r120) goto L159 (error at build:48) else goto L160
L72:
    dec_ref r117
L73:
    if is_error(r112) goto L80 else goto L74
L74:
    CPy_Reraise()
    if not 0 goto L76 else goto L161 :: bool
L75:
    unreachable
L76:
    if is_error(r112) goto L78 else goto L77
L77:
    CPy_RestoreExcInfo(r112)
    xdec_ref r112
L78:
    r121 = CPy_KeepPropagating()
    if not r121 goto L101 else goto L79 :: bool
L79:
    unreachable
L80:
    r122 = __mypyc_self__.__mypyc_generator_attribute__tmp_datadir
    if is_error(r122) goto L101 (error at build:50) else goto L81
L81:
    r123 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r123) goto L162 (error at build:50) else goto L82
L82:
    r123.datadir = r122; r124 = is_error
    dec_ref r123
    if not r124 goto L101 (error at build:50) else goto L83 :: bool
L83:
    r125 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r125) goto L101 (error at build:52) else goto L84
L84:
    r126 = r125.datadir
    dec_ref r125
    if is_error(r126) goto L101 (error at build:52) else goto L85
L85:
    r127 = 'genesis.json'
    r128 = os :: module
    r129 = 'path'
    r130 = CPyObject_GetAttr(r128, r129)
    if is_error(r130) goto L163 (error at build:52) else goto L86
L86:
    r131 = 'join'
    r132 = CPyObject_GetAttr(r130, r131)
    dec_ref r130
    if is_error(r132) goto L163 (error at build:52) else goto L87
L87:
    r133 = [r126, r127]
    r134 = load_address r133
    r135 = PyObject_Vectorcall(r132, r134, 2, 0)
    dec_ref r132
    if is_error(r135) goto L163 (error at build:52) else goto L88
L88:
    dec_ref r126
    r136 = cast(str, r135)
    if is_error(r136) goto L101 (error at build:52) else goto L89
L89:
    __mypyc_self__.__mypyc_generator_attribute__genesis_file = r136; r137 = is_error
    if not r137 goto L101 (error at build:52) else goto L90 :: bool
L90:
    r138 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r138) goto L101 (error at build:54) else goto L91
L91:
    r139 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r139) goto L164 (error at build:54) else goto L92
L92:
    r140 = r139.datadir
    dec_ref r139
    if is_error(r140) goto L164 (error at build:54) else goto L93
L93:
    r141 = __mypyc_self__.__mypyc_generator_attribute__genesis_file
    if is_error(r141) goto L165 (error at build:54) else goto L94
L94:
    r142 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r142) goto L166 (error at build:54) else goto L95
L95:
    r143 = r142.rpc_port
    dec_ref r142
    if is_error(r143) goto L166 (error at build:54) else goto L96
L96:
    r144 = r138._geth_process(r140, r141, r143)
    dec_ref r140
    dec_ref r141
    dec_ref r143
    dec_ref r138
    if is_error(r144) goto L101 (error at build:54) else goto L97
L97:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r144
L98:
    r146 = load_address _Py_NoneStruct
    r147 = type != r146
    if r147 goto L99 else goto L115 :: bool
L99:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L101 (error at build:54) else goto L100 :: bool
L100:
    unreachable
L101:
    r148 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__7 = r148; r149 = is_error
    if not r149 goto L112 (error at build:-1) else goto L102 :: bool
L102:
    __mypyc_self__.__mypyc_temp__2 = 0; r150 = is_error
    if not r150 goto L112 (error at build:40) else goto L103 :: bool
L103:
    r151 = CPy_GetExcInfo()
    r152 = r151[0]
    r153 = r151[1]
    r154 = r151[2]
    dec_ref r151
    r155 = __mypyc_self__.__mypyc_temp__0
    if is_error(r155) goto L167 (error at build:-1) else goto L104
L104:
    r156 = __mypyc_self__.__mypyc_temp__1
    if is_error(r156) goto L168 (error at build:-1) else goto L105
L105:
    r157 = [r156, r152, r153, r154]
    r158 = load_address r157
    r159 = PyObject_Vectorcall(r155, r158, 4, 0)
    dec_ref r155
    if is_error(r159) goto L169 (error at build:40) else goto L106
L106:
    dec_ref r156
    dec_ref r152
    dec_ref r153
    dec_ref r154
    r160 = PyObject_IsTrue(r159)
    dec_ref r159
    r161 = r160 >= 0 :: signed
    if not r161 goto L112 (error at build:40) else goto L107 :: bool
L107:
    r162 = truncate r160: i32 to builtins.bool
    if r162 goto L110 else goto L108 :: bool
L108:
    CPy_Reraise()
    if not 0 goto L112 else goto L109 :: bool
L109:
    unreachable
L110:
    r163 = __mypyc_self__.__mypyc_temp__7
    if is_error(r163) goto L116 (error at build:-1) else goto L111
L111:
    CPy_RestoreExcInfo(r163)
    dec_ref r163
    goto L115
L112:
    r164 = __mypyc_self__.__mypyc_temp__7
    if is_error(r164) goto L116 (error at build:-1) else goto L113
L113:
    CPy_RestoreExcInfo(r164)
    dec_ref r164
    r165 = CPy_KeepPropagating()
    if not r165 goto L116 else goto L114 :: bool
L114:
    unreachable
L115:
    r166 = <error> :: tuple[object, object, object]
    r167 = r166
    goto L117
L116:
    r168 = CPy_CatchError()
    r167 = r168
L117:
    r169 = __mypyc_self__.__mypyc_temp__2
    if is_error(r169) goto L126 (error at build:-1) else goto L118
L118:
    if r169 goto L119 else goto L123 :: bool
L119:
    r170 = load_address _Py_NoneStruct
    r171 = __mypyc_self__.__mypyc_temp__0
    if is_error(r171) goto L126 (error at build:-1) else goto L120
L120:
    r172 = __mypyc_self__.__mypyc_temp__1
    if is_error(r172) goto L170 (error at build:-1) else goto L121
L121:
    r173 = [r172, r170, r170, r170]
    r174 = load_address r173
    r175 = PyObject_Vectorcall(r171, r174, 4, 0)
    dec_ref r171
    if is_error(r175) goto L171 (error at build:40) else goto L172
L122:
    dec_ref r172
L123:
    if is_error(r167) goto L130 else goto L124
L124:
    CPy_Reraise()
    if not 0 goto L126 else goto L173 :: bool
L125:
    unreachable
L126:
    if is_error(r167) goto L128 else goto L127
L127:
    CPy_RestoreExcInfo(r167)
    xdec_ref r167
L128:
    r176 = CPy_KeepPropagating()
    if not r176 goto L139 else goto L129 :: bool
L129:
    unreachable
L130:
    r177 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L131:
    if is_error(stop_iter_ptr) goto L132 else goto L134
L132:
    CPyGen_SetStopIterationValue(r177)
    if not 0 goto L139 else goto L133 :: bool
L133:
    unreachable
L134:
    inc_ref r177
    set_mem stop_iter_ptr, r177 :: builtins.object*
    return 0
L135:
    r179 = r0 == 0
    if r179 goto L1 else goto L136 :: bool
L136:
    r180 = r0 == 1
    if r180 goto L98 else goto L137 :: bool
L137:
    r181 = raise StopIteration
    if not r181 goto L139 (error at build:39) else goto L138 :: bool
L138:
    unreachable
L139:
    r182 = <error> :: object
    return r182
L140:
    dec_ref r6
    dec_ref r7
    goto L139
L141:
    dec_ref r6
    goto L139
L142:
    dec_ref r15
    goto L139
L143:
    dec_ref r23
    goto L101
L144:
    dec_ref r32
    goto L101
L145:
    dec_ref r32
    dec_ref r34
    goto L101
L146:
    dec_ref r43
    goto L101
L147:
    dec_ref r55
    goto L101
L148:
    dec_ref r67
    goto L101
L149:
    dec_ref r74
    dec_ref r75
    goto L101
L150:
    dec_ref r74
    goto L101
L151:
    dec_ref r83
    goto L101
L152:
    dec_ref r87
    goto L51
L153:
    dec_ref r87
    dec_ref r88
    goto L51
L154:
    dec_ref r92
    goto L50
L155:
    dec_ref r97
    dec_ref r98
    dec_ref r99
    goto L62
L156:
    dec_ref r97
    dec_ref r98
    dec_ref r99
    dec_ref r100
    goto L62
L157:
    dec_ref r97
    dec_ref r98
    dec_ref r99
    dec_ref r101
    goto L62
L158:
    dec_ref r116
    goto L76
L159:
    dec_ref r117
    goto L76
L160:
    dec_ref r120
    goto L72
L161:
    xdec_ref r112
    goto L75
L162:
    dec_ref r122
    goto L101
L163:
    dec_ref r126
    goto L101
L164:
    dec_ref r138
    goto L101
L165:
    dec_ref r138
    dec_ref r140
    goto L101
L166:
    dec_ref r138
    dec_ref r140
    dec_ref r141
    goto L101
L167:
    dec_ref r152
    dec_ref r153
    dec_ref r154
    goto L112
L168:
    dec_ref r152
    dec_ref r153
    dec_ref r154
    dec_ref r155
    goto L112
L169:
    dec_ref r152
    dec_ref r153
    dec_ref r154
    dec_ref r156
    goto L112
L170:
    dec_ref r171
    goto L126
L171:
    dec_ref r172
    goto L126
L172:
    dec_ref r175
    goto L122
L173:
    xdec_ref r167
    goto L125

def build_GethBenchmarkFixture_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = build_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def build_GethBenchmarkFixture_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = build_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def build_GethBenchmarkFixture_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def build_GethBenchmarkFixture_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = build_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def build_GethBenchmarkFixture_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def GethBenchmarkFixture.build(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0 :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    r1, r2 :: bool
    r3 :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
L0:
    r0 = build_GethBenchmarkFixture_gen()
    if is_error(r0) goto L3 (error at build:39) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at build:39) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    return r3
L4:
    dec_ref r0
    goto L3

def GethBenchmarkFixture._rpc_port(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: str
    r5 :: tuple[str, int]
    r6 :: str
    r7 :: object
    r8 :: object[2]
    r9 :: object_ptr
    r10 :: object
    r11 :: str
    r12 :: object[1]
    r13 :: object_ptr
    r14, r15, r16 :: object
    r17 :: str
    r18 :: object[1]
    r19 :: object_ptr
    r20 :: object
    r21, r22 :: str
L0:
    r0 = socket :: module
    r1 = 'socket'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L8 (error at _rpc_port:57) else goto L1
L1:
    r3 = PyObject_Vectorcall(r2, 0, 0, 0)
    dec_ref r2
    if is_error(r3) goto L8 (error at _rpc_port:57) else goto L2
L2:
    r4 = '127.0.0.1'
    inc_ref r4
    r5 = (r4, 0)
    r6 = 'bind'
    r7 = box(tuple[str, int], r5)
    r8 = [r3, r7]
    r9 = load_address r8
    r10 = PyObject_VectorcallMethod(r6, r9, 9223372036854775810, 0)
    if is_error(r10) goto L9 (error at _rpc_port:58) else goto L10
L3:
    dec_ref r7
    r11 = 'getsockname'
    r12 = [r3]
    r13 = load_address r12
    r14 = PyObject_VectorcallMethod(r11, r13, 9223372036854775809, 0)
    if is_error(r14) goto L11 (error at _rpc_port:59) else goto L4
L4:
    r15 = object 1
    r16 = PyObject_GetItem(r14, r15)
    dec_ref r14
    if is_error(r16) goto L11 (error at _rpc_port:59) else goto L5
L5:
    r17 = 'close'
    r18 = [r3]
    r19 = load_address r18
    r20 = PyObject_VectorcallMethod(r17, r19, 9223372036854775809, 0)
    if is_error(r20) goto L12 (error at _rpc_port:60) else goto L13
L6:
    dec_ref r3
    r21 = PyObject_Str(r16)
    dec_ref r16
    if is_error(r21) goto L8 (error at _rpc_port:61) else goto L7
L7:
    return r21
L8:
    r22 = <error> :: str
    return r22
L9:
    dec_ref r3
    dec_ref r7
    goto L8
L10:
    dec_ref r10
    goto L3
L11:
    dec_ref r3
    goto L8
L12:
    dec_ref r3
    dec_ref r16
    goto L8
L13:
    dec_ref r20
    goto L6

def GethBenchmarkFixture._endpoint_uri(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0, r1, r2, r3 :: str
L0:
    r0 = 'http://localhost:'
    r1 = self.rpc_port
    if is_error(r1) goto L3 (error at _endpoint_uri:64) else goto L1
L1:
    r2 = CPyStr_Build(2, r0, r1)
    dec_ref r1
    if is_error(r2) goto L3 (error at _endpoint_uri:64) else goto L2
L2:
    return r2
L3:
    r3 = <error> :: str
    return r3

def GethBenchmarkFixture._geth_binary(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0 :: str
    r1 :: object
    r2 :: str
    r3 :: object
    r4 :: i32
    r5 :: bit
    r6 :: bool
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: str
    r11 :: object
    r12, r13 :: str
    r14 :: object
    r15 :: str
    r16 :: object
    r17 :: i32
    r18 :: bit
    r19 :: bool
    r20 :: object
    r21 :: str
    r22 :: object
    r23 :: str
    r24 :: object
    r25 :: str
    r26 :: dict
    r27 :: str
    r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31, r32 :: object
    r33 :: str
    r34 :: object
    r35 :: str
    r36 :: object
    r37 :: object[1]
    r38 :: object_ptr
    r39 :: object
    r40 :: bool
    r41 :: dict
    r42 :: str
    r43 :: object
    r44 :: object[1]
    r45 :: object_ptr
    r46, r47 :: object
    r48 :: str
    r49 :: object
    r50 :: str
    r51 :: object
    r52 :: object[1]
    r53 :: object_ptr
    r54 :: object
    r55, r56 :: bool
    r57, r58, r59 :: str
L0:
    r0 = 'GETH_BINARY'
    r1 = os :: module
    r2 = 'environ'
    r3 = CPyObject_GetAttr(r1, r2)
    if is_error(r3) goto L33 (error at _geth_binary:67) else goto L1
L1:
    r4 = PySequence_Contains(r3, r0)
    dec_ref r3
    r5 = r4 >= 0 :: signed
    if not r5 goto L33 (error at _geth_binary:67) else goto L2 :: bool
L2:
    r6 = truncate r4: i32 to builtins.bool
    if r6 goto L3 else goto L7 :: bool
L3:
    r7 = os :: module
    r8 = 'environ'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L33 (error at _geth_binary:68) else goto L4
L4:
    r10 = 'GETH_BINARY'
    r11 = PyObject_GetItem(r9, r10)
    dec_ref r9
    if is_error(r11) goto L33 (error at _geth_binary:68) else goto L5
L5:
    r12 = cast(str, r11)
    if is_error(r12) goto L33 (error at _geth_binary:68) else goto L6
L6:
    return r12
L7:
    r13 = 'GETH_VERSION'
    r14 = os :: module
    r15 = 'environ'
    r16 = CPyObject_GetAttr(r14, r15)
    if is_error(r16) goto L33 (error at _geth_binary:69) else goto L8
L8:
    r17 = PySequence_Contains(r16, r13)
    dec_ref r16
    r18 = r17 >= 0 :: signed
    if not r18 goto L33 (error at _geth_binary:69) else goto L9 :: bool
L9:
    r19 = truncate r17: i32 to builtins.bool
    if r19 goto L10 else goto L32 :: bool
L10:
    r20 = os :: module
    r21 = 'environ'
    r22 = CPyObject_GetAttr(r20, r21)
    if is_error(r22) goto L33 (error at _geth_binary:70) else goto L11
L11:
    r23 = 'GETH_VERSION'
    r24 = PyObject_GetItem(r22, r23)
    dec_ref r22
    if is_error(r24) goto L33 (error at _geth_binary:70) else goto L12
L12:
    r25 = cast(str, r24)
    if is_error(r25) goto L33 (error at _geth_binary:70) else goto L13
L13:
    r26 = faster_web3.tools.benchmark.node.globals :: static
    r27 = 'get_executable_path'
    r28 = CPyDict_GetItem(r26, r27)
    if is_error(r28) goto L34 (error at _geth_binary:71) else goto L14
L14:
    r29 = [r25]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r28, r30, 1, 0)
    dec_ref r28
    if is_error(r31) goto L34 (error at _geth_binary:71) else goto L15
L15:
    r32 = os :: module
    r33 = 'path'
    r34 = CPyObject_GetAttr(r32, r33)
    if is_error(r34) goto L35 (error at _geth_binary:72) else goto L16
L16:
    r35 = 'exists'
    r36 = CPyObject_GetAttr(r34, r35)
    dec_ref r34
    if is_error(r36) goto L35 (error at _geth_binary:72) else goto L17
L17:
    r37 = [r31]
    r38 = load_address r37
    r39 = PyObject_Vectorcall(r36, r38, 1, 0)
    dec_ref r36
    if is_error(r39) goto L35 (error at _geth_binary:72) else goto L18
L18:
    r40 = unbox(bool, r39)
    dec_ref r39
    if is_error(r40) goto L35 (error at _geth_binary:72) else goto L19
L19:
    if r40 goto L36 else goto L20 :: bool
L20:
    r41 = faster_web3.tools.benchmark.node.globals :: static
    r42 = 'install_geth'
    r43 = CPyDict_GetItem(r41, r42)
    if is_error(r43) goto L35 (error at _geth_binary:73) else goto L21
L21:
    r44 = [r25]
    r45 = load_address r44
    r46 = PyObject_Vectorcall(r43, r45, 1, 0)
    dec_ref r43
    if is_error(r46) goto L35 (error at _geth_binary:73) else goto L37
L22:
    dec_ref r25
L23:
    r47 = os :: module
    r48 = 'path'
    r49 = CPyObject_GetAttr(r47, r48)
    if is_error(r49) goto L38 (error at _geth_binary:74) else goto L24
L24:
    r50 = 'exists'
    r51 = CPyObject_GetAttr(r49, r50)
    dec_ref r49
    if is_error(r51) goto L38 (error at _geth_binary:74) else goto L25
L25:
    r52 = [r31]
    r53 = load_address r52
    r54 = PyObject_Vectorcall(r51, r53, 1, 0)
    dec_ref r51
    if is_error(r54) goto L38 (error at _geth_binary:74) else goto L26
L26:
    r55 = unbox(bool, r54)
    dec_ref r54
    if is_error(r55) goto L38 (error at _geth_binary:74) else goto L27
L27:
    if r55 goto L30 else goto L39 :: bool
L28:
    r56 = raise AssertionError
    if not r56 goto L33 (error at _geth_binary:74) else goto L29 :: bool
L29:
    unreachable
L30:
    r57 = cast(str, r31)
    if is_error(r57) goto L33 (error at _geth_binary:75) else goto L31
L31:
    return r57
L32:
    r58 = 'geth'
    inc_ref r58
    return r58
L33:
    r59 = <error> :: str
    return r59
L34:
    dec_ref r25
    goto L33
L35:
    dec_ref r25
    dec_ref r31
    goto L33
L36:
    dec_ref r25
    goto L23
L37:
    dec_ref r46
    goto L22
L38:
    dec_ref r31
    goto L33
L39:
    dec_ref r31
    goto L28

def GethBenchmarkFixture._geth_command_arguments(self, datadir):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    datadir, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14 :: str
    r15 :: object
    r16 :: str
    r17 :: object
    r18 :: str
    r19 :: object
    r20 :: object[3]
    r21 :: object_ptr
    r22 :: object
    r23 :: str
    r24 :: tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]
    r25, r26 :: object
L0:
    r0 = self.geth_binary
    if is_error(r0) goto L7 (error at _geth_command_arguments:81) else goto L1
L1:
    r1 = '--dev'
    r2 = '--dev.period'
    r3 = '100'
    r4 = '--datadir'
    r5 = '--nodiscover'
    r6 = '--http'
    r7 = '--http.port'
    r8 = self.rpc_port
    if is_error(r8) goto L8 (error at _geth_command_arguments:90) else goto L2
L2:
    r9 = '--http.api'
    r10 = 'admin,debug,eth,net,web3'
    r11 = '--ipcdisable'
    r12 = '--password'
    r13 = 'keystore'
    r14 = 'pw.txt'
    r15 = os :: module
    r16 = 'path'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L9 (error at _geth_command_arguments:95) else goto L3
L3:
    r18 = 'join'
    r19 = CPyObject_GetAttr(r17, r18)
    dec_ref r17
    if is_error(r19) goto L9 (error at _geth_command_arguments:95) else goto L4
L4:
    r20 = [datadir, r13, r14]
    r21 = load_address r20
    r22 = PyObject_Vectorcall(r19, r21, 3, 0)
    dec_ref r19
    if is_error(r22) goto L9 (error at _geth_command_arguments:95) else goto L5
L5:
    r23 = cast(str, r22)
    if is_error(r23) goto L9 (error at _geth_command_arguments:95) else goto L6
L6:
    inc_ref r1
    inc_ref r2
    inc_ref r3
    inc_ref r4
    inc_ref datadir
    inc_ref r5
    inc_ref r6
    inc_ref r7
    inc_ref r9
    inc_ref r10
    inc_ref r11
    inc_ref r12
    r24 = (r0, r1, r2, r3, r4, datadir, r5, r6, r7, r8, r9, r10, r11, r12, r23)
    r25 = box(tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], r24)
    return r25
L7:
    r26 = <error> :: object
    return r26
L8:
    dec_ref r0
    goto L7
L9:
    dec_ref r0
    dec_ref r8
    goto L7

def _geth_process_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0 :: i32
    r1 :: object
    r2 :: bit
    r3 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r4, r5, r6, r7, r8, r9, r10 :: str
    r11 :: tuple[str, str, str, str, str]
    r12 :: bool
    r13 :: tuple[str, str, str, str, str]
    r14 :: dict
    r15 :: str
    r16 :: object
    r17 :: int
    r18 :: dict
    r19 :: str
    r20 :: object
    r21 :: int
    r22 :: dict
    r23 :: str
    r24, r25, r26, r27 :: object
    r28 :: object[3]
    r29 :: object_ptr
    r30, r31 :: object
    r32 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r33 :: str
    r34 :: object
    r35 :: dict
    r36 :: str
    r37 :: object
    r38 :: int
    r39 :: dict
    r40 :: str
    r41 :: object
    r42 :: int
    r43 :: dict
    r44 :: str
    r45 :: object
    r46 :: int
    r47 :: dict
    r48 :: str
    r49, r50, r51, r52 :: object
    r53 :: object[4]
    r54 :: object_ptr
    r55, r56 :: object
    r57 :: bool
    r58 :: object
    r59 :: bool
    r60 :: object
    r61 :: bit
    r62, r63, r64 :: tuple[object, object, object]
    r65 :: object
    r66 :: None
    r67 :: bit
    r68 :: object
    r69 :: bool
    r70, r71 :: bit
    r72 :: bool
    r73 :: object
L0:
    r0 = __mypyc_self__.__mypyc_next_label__
    goto L51
L1:
    r1 = load_address _Py_NoneStruct
    r2 = type != r1
    if r2 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L55 (error at _geth_process:98) else goto L3 :: bool
L3:
    unreachable
L4:
    r3 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r3) goto L55 (error at _geth_process:102) else goto L5
L5:
    r4 = r3.geth_binary
    dec_ref r3
    if is_error(r4) goto L55 (error at _geth_process:102) else goto L6
L6:
    r5 = '--datadir'
    r6 = __mypyc_self__.__mypyc_generator_attribute__datadir
    if is_error(r6) goto L56 (error at _geth_process:104) else goto L7
L7:
    r7 = PyObject_Str(r6)
    dec_ref r6
    if is_error(r7) goto L56 (error at _geth_process:104) else goto L8
L8:
    r8 = 'init'
    r9 = __mypyc_self__.__mypyc_generator_attribute__genesis_file
    if is_error(r9) goto L57 (error at _geth_process:106) else goto L9
L9:
    r10 = PyObject_Str(r9)
    dec_ref r9
    if is_error(r10) goto L57 (error at _geth_process:106) else goto L10
L10:
    inc_ref r5
    inc_ref r8
    r11 = (r4, r5, r7, r8, r10)
    __mypyc_self__.__mypyc_generator_attribute__init_datadir_command = r11; r12 = is_error
    if not r12 goto L55 (error at _geth_process:101) else goto L11 :: bool
L11:
    r13 = __mypyc_self__.__mypyc_generator_attribute__init_datadir_command
    if is_error(r13) goto L55 (error at _geth_process:109) else goto L12
L12:
    r14 = faster_web3.tools.benchmark.node.globals :: static
    r15 = 'PIPE'
    r16 = CPyDict_GetItem(r14, r15)
    if is_error(r16) goto L58 (error at _geth_process:110) else goto L13
L13:
    r17 = unbox(int, r16)
    dec_ref r16
    if is_error(r17) goto L58 (error at _geth_process:110) else goto L14
L14:
    r18 = faster_web3.tools.benchmark.node.globals :: static
    r19 = 'PIPE'
    r20 = CPyDict_GetItem(r18, r19)
    if is_error(r20) goto L59 (error at _geth_process:111) else goto L15
L15:
    r21 = unbox(int, r20)
    dec_ref r20
    if is_error(r21) goto L59 (error at _geth_process:111) else goto L16
L16:
    r22 = faster_web3.tools.benchmark.node.globals :: static
    r23 = 'check_output'
    r24 = CPyDict_GetItem(r22, r23)
    if is_error(r24) goto L60 (error at _geth_process:108) else goto L17
L17:
    r25 = box(tuple[str, str, str, str, str], r13)
    r26 = box(int, r17)
    r27 = box(int, r21)
    r28 = [r25, r26, r27]
    r29 = load_address r28
    r30 = ('stdin', 'stderr')
    r31 = PyObject_Vectorcall(r24, r29, 1, r30)
    dec_ref r24
    if is_error(r31) goto L61 (error at _geth_process:108) else goto L62
L18:
    dec_ref r25
    dec_ref r26
    dec_ref r27
    r32 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r32) goto L55 (error at _geth_process:114) else goto L19
L19:
    r33 = __mypyc_self__.__mypyc_generator_attribute__datadir
    if is_error(r33) goto L63 (error at _geth_process:114) else goto L20
L20:
    r34 = r32._geth_command_arguments(r33)
    dec_ref r33
    dec_ref r32
    if is_error(r34) goto L55 (error at _geth_process:114) else goto L21
L21:
    r35 = faster_web3.tools.benchmark.node.globals :: static
    r36 = 'PIPE'
    r37 = CPyDict_GetItem(r35, r36)
    if is_error(r37) goto L64 (error at _geth_process:115) else goto L22
L22:
    r38 = unbox(int, r37)
    dec_ref r37
    if is_error(r38) goto L64 (error at _geth_process:115) else goto L23
L23:
    r39 = faster_web3.tools.benchmark.node.globals :: static
    r40 = 'PIPE'
    r41 = CPyDict_GetItem(r39, r40)
    if is_error(r41) goto L65 (error at _geth_process:116) else goto L24
L24:
    r42 = unbox(int, r41)
    dec_ref r41
    if is_error(r42) goto L65 (error at _geth_process:116) else goto L25
L25:
    r43 = faster_web3.tools.benchmark.node.globals :: static
    r44 = 'PIPE'
    r45 = CPyDict_GetItem(r43, r44)
    if is_error(r45) goto L66 (error at _geth_process:117) else goto L26
L26:
    r46 = unbox(int, r45)
    dec_ref r45
    if is_error(r46) goto L66 (error at _geth_process:117) else goto L27
L27:
    r47 = faster_web3.tools.benchmark.node.globals :: static
    r48 = 'Popen'
    r49 = CPyDict_GetItem(r47, r48)
    if is_error(r49) goto L67 (error at _geth_process:113) else goto L28
L28:
    r50 = box(int, r38)
    r51 = box(int, r42)
    r52 = box(int, r46)
    r53 = [r34, r50, r51, r52]
    r54 = load_address r53
    r55 = ('stdin', 'stdout', 'stderr')
    r56 = PyObject_Vectorcall(r49, r54, 1, r55)
    dec_ref r49
    if is_error(r56) goto L68 (error at _geth_process:113) else goto L29
L29:
    dec_ref r34
    dec_ref r50
    dec_ref r51
    dec_ref r52
    __mypyc_self__.__mypyc_generator_attribute__proc = r56; r57 = is_error
    if not r57 goto L55 (error at _geth_process:113) else goto L30 :: bool
L30:
    r58 = __mypyc_self__.__mypyc_generator_attribute__proc
    if is_error(r58) goto L36 (error at _geth_process:120) else goto L31
L31:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r58
L32:
    r60 = load_address _Py_NoneStruct
    r61 = type != r60
    if r61 goto L33 else goto L35 :: bool
L33:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L36 (error at _geth_process:120) else goto L34 :: bool
L34:
    unreachable
L35:
    r62 = <error> :: tuple[object, object, object]
    r63 = r62
    goto L37
L36:
    r64 = CPy_CatchError()
    r63 = r64
L37:
    r65 = __mypyc_self__.__mypyc_generator_attribute__proc
    if is_error(r65) goto L42 (error at _geth_process:122) else goto L38
L38:
    r66 = kill_proc_gracefully(r65)
    dec_ref r65
    if is_error(r66) goto L42 (error at _geth_process:122) else goto L39
L39:
    if is_error(r63) goto L46 else goto L40
L40:
    CPy_Reraise()
    if not 0 goto L42 else goto L69 :: bool
L41:
    unreachable
L42:
    if is_error(r63) goto L44 else goto L43
L43:
    CPy_RestoreExcInfo(r63)
    xdec_ref r63
L44:
    r67 = CPy_KeepPropagating()
    if not r67 goto L55 else goto L45 :: bool
L45:
    unreachable
L46:
    r68 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L47:
    if is_error(stop_iter_ptr) goto L48 else goto L50
L48:
    CPyGen_SetStopIterationValue(r68)
    if not 0 goto L55 else goto L49 :: bool
L49:
    unreachable
L50:
    inc_ref r68
    set_mem stop_iter_ptr, r68 :: builtins.object*
    return 0
L51:
    r70 = r0 == 0
    if r70 goto L1 else goto L52 :: bool
L52:
    r71 = r0 == 1
    if r71 goto L32 else goto L53 :: bool
L53:
    r72 = raise StopIteration
    if not r72 goto L55 (error at _geth_process:98) else goto L54 :: bool
L54:
    unreachable
L55:
    r73 = <error> :: object
    return r73
L56:
    dec_ref r4
    goto L55
L57:
    dec_ref r4
    dec_ref r7
    goto L55
L58:
    dec_ref r13
    goto L55
L59:
    dec_ref r13
    dec_ref r17 :: int
    goto L55
L60:
    dec_ref r13
    dec_ref r17 :: int
    dec_ref r21 :: int
    goto L55
L61:
    dec_ref r25
    dec_ref r26
    dec_ref r27
    goto L55
L62:
    dec_ref r31
    goto L18
L63:
    dec_ref r32
    goto L55
L64:
    dec_ref r34
    goto L55
L65:
    dec_ref r34
    dec_ref r38 :: int
    goto L55
L66:
    dec_ref r34
    dec_ref r38 :: int
    dec_ref r42 :: int
    goto L55
L67:
    dec_ref r34
    dec_ref r38 :: int
    dec_ref r42 :: int
    dec_ref r46 :: int
    goto L55
L68:
    dec_ref r34
    dec_ref r50
    dec_ref r51
    dec_ref r52
    goto L55
L69:
    xdec_ref r63
    goto L41

def _geth_process_GethBenchmarkFixture_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _geth_process_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _geth_process_GethBenchmarkFixture_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _geth_process_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _geth_process_GethBenchmarkFixture_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def _geth_process_GethBenchmarkFixture_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = _geth_process_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def _geth_process_GethBenchmarkFixture_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def GethBenchmarkFixture._geth_process(self, datadir, genesis_file, rpc_port):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    datadir, genesis_file, rpc_port :: str
    r0 :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    r1, r2, r3, r4, r5 :: bool
    r6 :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
L0:
    r0 = _geth_process_GethBenchmarkFixture_gen()
    if is_error(r0) goto L6 (error at _geth_process:98) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L7 (error at _geth_process:98) else goto L2 :: bool
L2:
    inc_ref datadir
    r0.__mypyc_generator_attribute__datadir = datadir; r3 = is_error
    if not r3 goto L7 (error at _geth_process:98) else goto L3 :: bool
L3:
    inc_ref genesis_file
    r0.__mypyc_generator_attribute__genesis_file = genesis_file; r4 = is_error
    if not r4 goto L7 (error at _geth_process:98) else goto L4 :: bool
L4:
    inc_ref rpc_port
    r0.__mypyc_generator_attribute__rpc_port = rpc_port; r5 = is_error
    if not r5 goto L7 (error at _geth_process:98) else goto L5 :: bool
L5:
    return r0
L6:
    r6 = <error> :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    return r6
L7:
    dec_ref r0
    goto L6

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5, r6 :: object_ptr
    r7 :: object_ptr[2]
    r8 :: c_ptr
    r9 :: native_int[2]
    r10 :: c_ptr
    r11 :: object
    r12 :: dict
    r13, r14 :: str
    r15 :: bit
    r16 :: object
    r17 :: str
    r18 :: dict
    r19, r20 :: object
    r21 :: str
    r22 :: dict
    r23, r24 :: object
    r25 :: str
    r26 :: dict
    r27 :: object
    r28 :: object_ptr
    r29 :: object_ptr[1]
    r30 :: c_ptr
    r31 :: native_int[1]
    r32 :: c_ptr
    r33 :: object
    r34 :: dict
    r35, r36 :: str
    r37 :: bit
    r38 :: object
    r39 :: str
    r40 :: dict
    r41, r42 :: object
    r43 :: str
    r44 :: dict
    r45 :: object
    r46 :: str
    r47 :: dict
    r48 :: str
    r49 :: i32
    r50 :: bit
    r51 :: object
    r52 :: str
    r53, r54 :: object
    r55 :: bool
    r56, r57, r58, r59, r60 :: str
    r61 :: tuple
    r62 :: i32
    r63 :: bit
    r64 :: dict
    r65 :: str
    r66 :: i32
    r67 :: bit
    r68 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L17 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address os :: module
    r6 = load_address socket :: module
    r7 = [r5, r6]
    r8 = load_address r7
    r9 = [1, 2]
    r10 = load_address r9
    r11 = (('os', 'os', 'os'), ('socket', 'socket', 'socket'))
    r12 = faster_web3.tools.benchmark.node.globals :: static
    r13 = 'faster_web3/tools/benchmark/node.py'
    r14 = '<module>'
    r15 = CPyImport_ImportMany(r11, r8, r12, r13, r14, r10)
    if not r15 goto L17 else goto L4 :: bool
L4:
    r16 = ('PIPE', 'Popen', 'check_output')
    r17 = 'subprocess'
    r18 = faster_web3.tools.benchmark.node.globals :: static
    r19 = CPyImport_ImportFromMany(r17, r16, r16, r18)
    if is_error(r19) goto L17 (error at <module>:3) else goto L5
L5:
    subprocess = r19 :: module
    dec_ref r19
    r20 = ('TemporaryDirectory',)
    r21 = 'tempfile'
    r22 = faster_web3.tools.benchmark.node.globals :: static
    r23 = CPyImport_ImportFromMany(r21, r20, r20, r22)
    if is_error(r23) goto L17 (error at <module>:8) else goto L6
L6:
    tempfile = r23 :: module
    dec_ref r23
    r24 = ('Any', 'Final', 'Generator', 'Sequence', 'final')
    r25 = 'typing'
    r26 = faster_web3.tools.benchmark.node.globals :: static
    r27 = CPyImport_ImportFromMany(r25, r24, r24, r26)
    if is_error(r27) goto L17 (error at <module>:11) else goto L7
L7:
    typing = r27 :: module
    dec_ref r27
    r28 = load_address zipfile :: module
    r29 = [r28]
    r30 = load_address r29
    r31 = [18]
    r32 = load_address r31
    r33 = (('zipfile', 'zipfile', 'zipfile'),)
    r34 = faster_web3.tools.benchmark.node.globals :: static
    r35 = 'faster_web3/tools/benchmark/node.py'
    r36 = '<module>'
    r37 = CPyImport_ImportMany(r33, r30, r34, r35, r36, r32)
    if not r37 goto L17 else goto L8 :: bool
L8:
    r38 = ('get_executable_path', 'install_geth')
    r39 = 'geth.install'
    r40 = faster_web3.tools.benchmark.node.globals :: static
    r41 = CPyImport_ImportFromMany(r39, r38, r38, r40)
    if is_error(r41) goto L17 (error at <module>:20) else goto L9
L9:
    geth.install = r41 :: module
    dec_ref r41
    r42 = ('kill_proc_gracefully',)
    r43 = 'faster_web3.tools.benchmark.utils'
    r44 = faster_web3.tools.benchmark.node.globals :: static
    r45 = CPyImport_ImportFromMany(r43, r42, r42, r44)
    if is_error(r45) goto L17 (error at <module>:25) else goto L10
L10:
    faster_web3.tools.benchmark.utils = r45 :: module
    dec_ref r45
    r46 = 'geth-1.16.2-fixture.zip'
    r47 = faster_web3.tools.benchmark.node.globals :: static
    r48 = 'GETH_FIXTURE_ZIP'
    r49 = CPyDict_SetItem(r47, r48, r46)
    r50 = r49 >= 0 :: signed
    if not r50 goto L17 (error at <module>:29) else goto L11 :: bool
L11:
    r51 = <error> :: object
    r52 = 'faster_web3.tools.benchmark.node'
    r53 = faster_web3.tools.benchmark.node.GethBenchmarkFixture_template :: type
    r54 = CPyType_FromTemplate(r53, r51, r52)
    if is_error(r54) goto L17 (error at <module>:33) else goto L12
L12:
    r55 = GethBenchmarkFixture_trait_vtable_setup()
    if is_error(r55) goto L18 (error at <module>:-1) else goto L13
L13:
    r56 = '__mypyc_attrs__'
    r57 = 'rpc_port'
    r58 = 'endpoint_uri'
    r59 = 'geth_binary'
    r60 = 'datadir'
    r61 = PyTuple_Pack(4, r57, r58, r59, r60)
    if is_error(r61) goto L18 (error at <module>:33) else goto L14
L14:
    r62 = PyObject_SetAttr(r54, r56, r61)
    dec_ref r61
    r63 = r62 >= 0 :: signed
    if not r63 goto L18 (error at <module>:33) else goto L15 :: bool
L15:
    faster_web3.tools.benchmark.node.GethBenchmarkFixture = r54 :: type
    r64 = faster_web3.tools.benchmark.node.globals :: static
    r65 = 'GethBenchmarkFixture'
    r66 = PyDict_SetItem(r64, r65, r54)
    dec_ref r54
    r67 = r66 >= 0 :: signed
    if not r67 goto L17 (error at <module>:33) else goto L16 :: bool
L16:
    return 1
L17:
    r68 = <error> :: None
    return r68
L18:
    dec_ref r54
    goto L17

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16, r17 :: object
    r18 :: str
    r19 :: dict
    r20 :: object
    r21 :: dict
    r22 :: str
    r23, r24 :: object
    r25 :: str
    r26 :: dict
    r27 :: str
    r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31 :: object
    r32 :: dict
    r33 :: str
    r34 :: object
    r35 :: object[1]
    r36 :: object_ptr
    r37 :: object
    r38 :: dict
    r39 :: str
    r40 :: i32
    r41 :: bit
    r42 :: object
    r43 :: bool
    r44 :: str
    r45 :: object
    r46 :: dict
    r47 :: str
    r48 :: object
    r49 :: str
    r50 :: object
    r51 :: object[3]
    r52 :: object_ptr
    r53, r54 :: object
    r55 :: dict
    r56 :: str
    r57, r58 :: object
    r59 :: str
    r60 :: dict
    r61 :: str
    r62 :: object
    r63 :: object[1]
    r64 :: object_ptr
    r65 :: object
    r66 :: dict
    r67 :: str
    r68 :: object
    r69 :: object[1]
    r70 :: object_ptr
    r71 :: object
    r72 :: dict
    r73 :: str
    r74 :: i32
    r75 :: bit
    r76 :: object
    r77 :: bool
    r78 :: str
    r79 :: object
    r80 :: dict
    r81 :: str
    r82 :: object
    r83 :: str
    r84 :: object
    r85 :: object[3]
    r86 :: object_ptr
    r87, r88 :: object
    r89 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L36 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = faster_web3.auto.gethdev.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L36 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('AsyncIPCProvider', 'AsyncWeb3', 'IPCProvider', 'Web3')
    r10 = 'faster_web3'
    r11 = faster_web3.auto.gethdev.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L36 (error at <module>:5) else goto L5
L5:
    faster_web3 = r12 :: module
    dec_ref r12
    r13 = ('ExtraDataToPOAMiddleware',)
    r14 = 'faster_web3.middleware'
    r15 = faster_web3.auto.gethdev.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L36 (error at <module>:11) else goto L6
L6:
    faster_web3.middleware = r16 :: module
    dec_ref r16
    r17 = ('get_dev_ipc_path',)
    r18 = 'faster_web3.providers.ipc'
    r19 = faster_web3.auto.gethdev.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L36 (error at <module>:14) else goto L7
L7:
    faster_web3.providers.ipc = r20 :: module
    dec_ref r20
    r21 = faster_web3.auto.gethdev.globals :: static
    r22 = 'get_dev_ipc_path'
    r23 = CPyDict_GetItem(r21, r22)
    if is_error(r23) goto L36 (error at <module>:18) else goto L8
L8:
    r24 = PyObject_Vectorcall(r23, 0, 0, 0)
    dec_ref r23
    if is_error(r24) goto L36 (error at <module>:18) else goto L9
L9:
    r25 = cast(str, r24)
    if is_error(r25) goto L36 (error at <module>:18) else goto L10
L10:
    r26 = faster_web3.auto.gethdev.globals :: static
    r27 = 'IPCProvider'
    r28 = CPyDict_GetItem(r26, r27)
    if is_error(r28) goto L37 (error at <module>:18) else goto L11
L11:
    r29 = [r25]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r28, r30, 1, 0)
    dec_ref r28
    if is_error(r31) goto L37 (error at <module>:18) else goto L12
L12:
    dec_ref r25
    r32 = faster_web3.auto.gethdev.globals :: static
    r33 = 'Web3'
    r34 = CPyDict_GetItem(r32, r33)
    if is_error(r34) goto L38 (error at <module>:18) else goto L13
L13:
    r35 = [r31]
    r36 = load_address r35
    r37 = PyObject_Vectorcall(r34, r36, 1, 0)
    dec_ref r34
    if is_error(r37) goto L38 (error at <module>:18) else goto L14
L14:
    dec_ref r31
    faster_web3.auto.gethdev.w3 = r37 :: static
    r38 = faster_web3.auto.gethdev.globals :: static
    r39 = 'w3'
    r40 = CPyDict_SetItem(r38, r39, r37)
    dec_ref r37
    r41 = r40 >= 0 :: signed
    if not r41 goto L36 (error at <module>:18) else goto L15 :: bool
L15:
    r42 = faster_web3.auto.gethdev.w3 :: static
    if is_error(r42) goto L16 else goto L18
L16:
    r43 = raise NameError('value for final name "w3" was not set')
    if not r43 goto L36 (error at <module>:19) else goto L17 :: bool
L17:
    unreachable
L18:
    r44 = 'middleware_onion'
    r45 = CPyObject_GetAttr(r42, r44)
    if is_error(r45) goto L36 (error at <module>:19) else goto L19
L19:
    r46 = faster_web3.auto.gethdev.globals :: static
    r47 = 'ExtraDataToPOAMiddleware'
    r48 = CPyDict_GetItem(r46, r47)
    if is_error(r48) goto L39 (error at <module>:19) else goto L20
L20:
    r49 = 'inject'
    r50 = object 0
    r51 = [r45, r48, r50]
    r52 = load_address r51
    r53 = ('layer',)
    r54 = PyObject_VectorcallMethod(r49, r52, 9223372036854775810, r53)
    if is_error(r54) goto L40 (error at <module>:19) else goto L41
L21:
    dec_ref r45
    dec_ref r48
    r55 = faster_web3.auto.gethdev.globals :: static
    r56 = 'get_dev_ipc_path'
    r57 = CPyDict_GetItem(r55, r56)
    if is_error(r57) goto L36 (error at <module>:21) else goto L22
L22:
    r58 = PyObject_Vectorcall(r57, 0, 0, 0)
    dec_ref r57
    if is_error(r58) goto L36 (error at <module>:21) else goto L23
L23:
    r59 = cast(str, r58)
    if is_error(r59) goto L36 (error at <module>:21) else goto L24
L24:
    r60 = faster_web3.auto.gethdev.globals :: static
    r61 = 'AsyncIPCProvider'
    r62 = CPyDict_GetItem(r60, r61)
    if is_error(r62) goto L42 (error at <module>:21) else goto L25
L25:
    r63 = [r59]
    r64 = load_address r63
    r65 = PyObject_Vectorcall(r62, r64, 1, 0)
    dec_ref r62
    if is_error(r65) goto L42 (error at <module>:21) else goto L26
L26:
    dec_ref r59
    r66 = faster_web3.auto.gethdev.globals :: static
    r67 = 'AsyncWeb3'
    r68 = CPyDict_GetItem(r66, r67)
    if is_error(r68) goto L43 (error at <module>:21) else goto L27
L27:
    r69 = [r65]
    r70 = load_address r69
    r71 = PyObject_Vectorcall(r68, r70, 1, 0)
    dec_ref r68
    if is_error(r71) goto L43 (error at <module>:21) else goto L28
L28:
    dec_ref r65
    faster_web3.auto.gethdev.async_w3 = r71 :: static
    r72 = faster_web3.auto.gethdev.globals :: static
    r73 = 'async_w3'
    r74 = CPyDict_SetItem(r72, r73, r71)
    dec_ref r71
    r75 = r74 >= 0 :: signed
    if not r75 goto L36 (error at <module>:21) else goto L29 :: bool
L29:
    r76 = faster_web3.auto.gethdev.async_w3 :: static
    if is_error(r76) goto L30 else goto L32
L30:
    r77 = raise NameError('value for final name "async_w3" was not set')
    if not r77 goto L36 (error at <module>:22) else goto L31 :: bool
L31:
    unreachable
L32:
    r78 = 'middleware_onion'
    r79 = CPyObject_GetAttr(r76, r78)
    if is_error(r79) goto L36 (error at <module>:22) else goto L33
L33:
    r80 = faster_web3.auto.gethdev.globals :: static
    r81 = 'ExtraDataToPOAMiddleware'
    r82 = CPyDict_GetItem(r80, r81)
    if is_error(r82) goto L44 (error at <module>:22) else goto L34
L34:
    r83 = 'inject'
    r84 = object 0
    r85 = [r79, r82, r84]
    r86 = load_address r85
    r87 = ('layer',)
    r88 = PyObject_VectorcallMethod(r83, r86, 9223372036854775810, r87)
    if is_error(r88) goto L45 (error at <module>:22) else goto L46
L35:
    dec_ref r79
    dec_ref r82
    return 1
L36:
    r89 = <error> :: None
    return r89
L37:
    dec_ref r25
    goto L36
L38:
    dec_ref r31
    goto L36
L39:
    dec_ref r45
    goto L36
L40:
    dec_ref r45
    dec_ref r48
    goto L36
L41:
    dec_ref r54
    goto L21
L42:
    dec_ref r59
    goto L36
L43:
    dec_ref r65
    goto L36
L44:
    dec_ref r79
    goto L36
L45:
    dec_ref r79
    dec_ref r82
    goto L36
L46:
    dec_ref r88
    goto L35

def percentile(values, percentile):
    values :: object
    percentile :: float
    r0 :: i32
    r1 :: bit
    r2 :: bool
    r3, r4, r5, r6, r7 :: str
    r8 :: object[3]
    r9 :: object_ptr
    r10 :: object
    r11 :: str
    r12 :: list
    r13, r14, r15 :: ptr
    r16 :: str
    r17 :: dict
    r18 :: str
    r19 :: object
    r20 :: object[1]
    r21 :: object_ptr
    r22 :: object
    r23, r24 :: bit
    r25 :: str
    r26 :: dict
    r27 :: str
    r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31 :: object
    r32 :: list
    r33 :: int
    r34 :: float
    r35 :: bit
    r36, r37, r38 :: float
    r39 :: bit
    r40, r41 :: object
    r42 :: int
    r43 :: float
    r44 :: bit
    r45 :: object
    r46, r47 :: float
    r48, r49, r50, r51 :: bit
    r52, r53, fractional :: float
    r54 :: bit
    r55 :: int
    r56 :: object
    r57 :: int
    r58 :: float
    r59 :: bit
    r60 :: object
    r61 :: float
    r62 :: int
    r63 :: object
    r64, r65 :: int
    r66 :: object
    r67, r68 :: int
    r69 :: float
    r70 :: bit
    r71, r72 :: float
    r73 :: bit
    r74 :: object
    r75 :: float
    r76 :: object
    r77 :: float
L0:
    r0 = PyObject_IsTrue(values)
    r1 = r0 >= 0 :: signed
    if not r1 goto L47 (error at percentile:11) else goto L1 :: bool
L1:
    r2 = truncate r0: i32 to builtins.bool
    if r2 goto L10 else goto L2 :: bool
L2:
    r3 = ''
    r4 = 'Expected a sequence of at least 1 integers, got '
    r5 = '{!r:{}}'
    r6 = ''
    r7 = 'format'
    r8 = [r5, values, r6]
    r9 = load_address r8
    r10 = PyObject_VectorcallMethod(r7, r9, 9223372036854775811, 0)
    if is_error(r10) goto L47 (error at percentile:15) else goto L3
L3:
    r11 = cast(str, r10)
    if is_error(r11) goto L47 (error at percentile:15) else goto L4
L4:
    r12 = PyList_New(2)
    if is_error(r12) goto L48 (error at percentile:15) else goto L5
L5:
    r13 = get_element_ptr r12 ob_item :: PyListObject
    r14 = load_mem r13 :: ptr*
    inc_ref r4
    set_mem r14, r4 :: builtins.object*
    r15 = r14 + 8
    set_mem r15, r11 :: builtins.object*
    r16 = PyUnicode_Join(r3, r12)
    dec_ref r12
    if is_error(r16) goto L47 (error at percentile:15) else goto L6
L6:
    r17 = faster_web3._utils.math.globals :: static
    r18 = 'InsufficientData'
    r19 = CPyDict_GetItem(r17, r18)
    if is_error(r19) goto L49 (error at percentile:14) else goto L7
L7:
    r20 = [r16]
    r21 = load_address r20
    r22 = PyObject_Vectorcall(r19, r21, 1, 0)
    dec_ref r19
    if is_error(r22) goto L49 (error at percentile:14) else goto L8
L8:
    dec_ref r16
    CPy_Raise(r22)
    dec_ref r22
    if not 0 goto L47 (error at percentile:14) else goto L9 :: bool
L9:
    unreachable
L10:
    r23 = percentile < 0.0
    if r23 goto L12 else goto L11 :: bool
L11:
    r24 = percentile > 100.0
    if r24 goto L12 else goto L16 :: bool
L12:
    r25 = 'percentile must be in the range [0, 100]'
    r26 = faster_web3._utils.math.globals :: static
    r27 = 'Web3ValueError'
    r28 = CPyDict_GetItem(r26, r27)
    if is_error(r28) goto L47 (error at percentile:18) else goto L13
L13:
    r29 = [r25]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r28, r30, 1, 0)
    dec_ref r28
    if is_error(r31) goto L47 (error at percentile:18) else goto L14
L14:
    CPy_Raise(r31)
    dec_ref r31
    if not 0 goto L47 (error at percentile:18) else goto L15 :: bool
L15:
    unreachable
L16:
    r32 = CPySequence_Sort(values)
    if is_error(r32) goto L47 (error at percentile:20) else goto L17
L17:
    r33 = CPyObject_Size(values)
    if is_error(r33) goto L50 (error at percentile:22) else goto L18
L18:
    r34 = CPyFloat_FromTagged(r33)
    dec_ref r33 :: int
    r35 = r34 == -113.0
    if r35 goto L20 else goto L19 :: bool
L19:
    r36 = r34 * percentile
    r37 = r36 / 100.0
    r38 = r37 - 1.0
    r39 = r38 < 0.0
    if r39 goto L21 else goto L26 :: bool
L20:
    r40 = PyErr_Occurred()
    if not is_error(r40) goto L50 (error at percentile:22) else goto L19
L21:
    r41 = CPyList_GetItemShort(r32, 0)
    dec_ref r32
    if is_error(r41) goto L47 (error at percentile:24) else goto L22
L22:
    r42 = unbox(int, r41)
    dec_ref r41
    if is_error(r42) goto L47 (error at percentile:24) else goto L23
L23:
    r43 = CPyFloat_FromTagged(r42)
    dec_ref r42 :: int
    r44 = r43 == -113.0
    if r44 goto L25 else goto L24 :: bool
L24:
    return r43
L25:
    r45 = PyErr_Occurred()
    if not is_error(r45) goto L47 (error at percentile:24) else goto L24
L26:
    r46 = r38 % 1.0
    r47 = r46
    r48 = r47 == 0.0
    if r48 goto L29 else goto L27 :: bool
L27:
    r49 = r38 < 0.0
    r50 = 1.0 < 0.0
    r51 = r49 == r50
    if r51 goto L30 else goto L28 :: bool
L28:
    r52 = r47 + 1.0
    r47 = r52
    goto L30
L29:
    r53 = copysign(0.0, 1.0)
    r47 = r53
L30:
    fractional = r47
    r54 = fractional == 0.0
    if r54 goto L31 else goto L37 :: bool
L31:
    r55 = CPyTagged_FromFloat(r38)
    if is_error(r55) goto L50 (error at percentile:28) else goto L32
L32:
    r56 = CPyList_GetItem(r32, r55)
    dec_ref r32
    dec_ref r55 :: int
    if is_error(r56) goto L47 (error at percentile:28) else goto L33
L33:
    r57 = unbox(int, r56)
    dec_ref r56
    if is_error(r57) goto L47 (error at percentile:28) else goto L34
L34:
    r58 = CPyFloat_FromTagged(r57)
    dec_ref r57 :: int
    r59 = r58 == -113.0
    if r59 goto L36 else goto L35 :: bool
L35:
    return r58
L36:
    r60 = PyErr_Occurred()
    if not is_error(r60) goto L47 (error at percentile:28) else goto L35
L37:
    r61 = r38 - fractional
    r62 = CPyTagged_FromFloat(r61)
    if is_error(r62) goto L50 (error at percentile:30) else goto L38
L38:
    r63 = CPyList_GetItem(r32, r62)
    if is_error(r63) goto L51 (error at percentile:31) else goto L39
L39:
    r64 = unbox(int, r63)
    dec_ref r63
    if is_error(r64) goto L51 (error at percentile:31) else goto L40
L40:
    r65 = CPyTagged_Add(r62, 2)
    dec_ref r62 :: int
    r66 = CPyList_GetItem(r32, r65)
    dec_ref r32
    dec_ref r65 :: int
    if is_error(r66) goto L52 (error at percentile:32) else goto L41
L41:
    r67 = unbox(int, r66)
    dec_ref r66
    if is_error(r67) goto L52 (error at percentile:32) else goto L42
L42:
    r68 = CPyTagged_Subtract(r67, r64)
    dec_ref r67 :: int
    r69 = CPyFloat_FromTagged(r68)
    dec_ref r68 :: int
    r70 = r69 == -113.0
    if r70 goto L44 else goto L43 :: bool
L43:
    r71 = fractional * r69
    r72 = CPyFloat_FromTagged(r64)
    dec_ref r64 :: int
    r73 = r72 == -113.0
    if r73 goto L46 else goto L45 :: bool
L44:
    r74 = PyErr_Occurred()
    if not is_error(r74) goto L52 (error at percentile:33) else goto L43
L45:
    r75 = r72 + r71
    return r75
L46:
    r76 = PyErr_Occurred()
    if not is_error(r76) goto L47 (error at percentile:33) else goto L45
L47:
    r77 = <error> :: float
    return r77
L48:
    dec_ref r11
    goto L47
L49:
    dec_ref r16
    goto L47
L50:
    dec_ref r32
    goto L47
L51:
    dec_ref r32
    dec_ref r62 :: int
    goto L47
L52:
    dec_ref r64 :: int
    goto L47

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Sequence',)
    r6 = 'typing'
    r7 = faster_web3._utils.math.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('InsufficientData', 'Web3ValueError')
    r10 = 'faster_web3.exceptions'
    r11 = faster_web3._utils.math.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L6 (error at <module>:5) else goto L5
L5:
    faster_web3.exceptions = r12 :: module
    dec_ref r12
    return 1
L6:
    r13 = <error> :: None
    return r13

def to_hex_if_bytes(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1, r2 :: str
    r3 :: i32
    r4 :: bool
    r5, r6, r7, r8, r9, r10 :: str
    r11 :: object[3]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: list
    r16, r17, r18 :: ptr
    r19 :: str
    r20 :: dict
    r21 :: str
    r22 :: object
    r23 :: object[1]
    r24 :: object_ptr
    r25 :: object
    r26 :: str
    r27 :: object
    r28 :: bool
    r29 :: object[1]
    r30 :: object_ptr
    r31, r32 :: object
    r33 :: str
    r34, r35 :: object
    r36 :: str
    r37 :: object
    r38 :: tuple[object, object]
    r39 :: object
    r40 :: i32
    r41 :: bit
    r42 :: bool
    r43 :: object
    r44 :: bool
    r45 :: object[1]
    r46 :: object_ptr
    r47 :: object
    r48, r49 :: str
    r50 :: object
    r51 :: bool
    r52 :: object[1]
    r53 :: object_ptr
    r54, r55 :: object
    r56, r57 :: str
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L19 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L35 (error at to_hex_if_bytes:26) else goto L2
L2:
    r2 = '0x'
    r3 = CPyStr_Startswith(r1, r2)
    dec_ref r1
    r4 = truncate r3: i32 to builtins.bool
    if r4 goto L12 else goto L3 :: bool
L3:
    r5 = ''
    r6 = 'Expected a hex string. Got: '
    r7 = '{!r:{}}'
    inc_ref val
    r8 = cast(str, val)
    if is_error(r8) goto L35 (error at to_hex_if_bytes:27) else goto L4
L4:
    r9 = ''
    r10 = 'format'
    r11 = [r7, r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775811, 0)
    if is_error(r13) goto L36 (error at to_hex_if_bytes:27) else goto L5
L5:
    dec_ref r8
    r14 = cast(str, r13)
    if is_error(r14) goto L35 (error at to_hex_if_bytes:27) else goto L6
L6:
    r15 = PyList_New(2)
    if is_error(r15) goto L37 (error at to_hex_if_bytes:27) else goto L7
L7:
    r16 = get_element_ptr r15 ob_item :: PyListObject
    r17 = load_mem r16 :: ptr*
    inc_ref r6
    set_mem r17, r6 :: builtins.object*
    r18 = r17 + 8
    set_mem r18, r14 :: builtins.object*
    r19 = PyUnicode_Join(r5, r15)
    dec_ref r15
    if is_error(r19) goto L35 (error at to_hex_if_bytes:27) else goto L8
L8:
    r20 = faster_web3._utils.type_conversion.globals :: static
    r21 = 'Web3ValueError'
    r22 = CPyDict_GetItem(r20, r21)
    if is_error(r22) goto L38 (error at to_hex_if_bytes:27) else goto L9
L9:
    r23 = [r19]
    r24 = load_address r23
    r25 = PyObject_Vectorcall(r22, r24, 1, 0)
    dec_ref r22
    if is_error(r25) goto L38 (error at to_hex_if_bytes:27) else goto L10
L10:
    dec_ref r19
    CPy_Raise(r25)
    dec_ref r25
    if not 0 goto L35 (error at to_hex_if_bytes:27) else goto L11 :: bool
L11:
    unreachable
L12:
    inc_ref val
    r26 = cast(str, val)
    if is_error(r26) goto L35 (error at to_hex_if_bytes:28) else goto L13
L13:
    r27 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r27) goto L39 else goto L16
L14:
    r28 = raise NameError('value for final name "to_hex" was not set')
    if not r28 goto L35 (error at to_hex_if_bytes:28) else goto L15 :: bool
L15:
    unreachable
L16:
    r29 = [r26]
    r30 = load_address r29
    r31 = ('hexstr',)
    r32 = PyObject_Vectorcall(r27, r30, 0, r31)
    if is_error(r32) goto L40 (error at to_hex_if_bytes:28) else goto L17
L17:
    dec_ref r26
    r33 = cast(str, r32)
    if is_error(r33) goto L35 (error at to_hex_if_bytes:28) else goto L18
L18:
    return r33
L19:
    r34 = load_address PyBytes_Type
    r35 = builtins :: module
    r36 = 'bytearray'
    r37 = CPyObject_GetAttr(r35, r36)
    if is_error(r37) goto L35 (error at to_hex_if_bytes:30) else goto L20
L20:
    inc_ref r34
    r38 = (r34, r37)
    r39 = box(tuple[object, object], r38)
    r40 = PyObject_IsInstance(val, r39)
    dec_ref r39
    r41 = r40 >= 0 :: signed
    if not r41 goto L35 (error at to_hex_if_bytes:30) else goto L21 :: bool
L21:
    r42 = truncate r40: i32 to builtins.bool
    if r42 goto L22 else goto L28 :: bool
L22:
    r43 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r43) goto L23 else goto L25
L23:
    r44 = raise NameError('value for final name "to_hex" was not set')
    if not r44 goto L35 (error at to_hex_if_bytes:30) else goto L24 :: bool
L24:
    unreachable
L25:
    r45 = [val]
    r46 = load_address r45
    r47 = PyObject_Vectorcall(r43, r46, 1, 0)
    if is_error(r47) goto L35 (error at to_hex_if_bytes:30) else goto L26
L26:
    r48 = cast(str, r47)
    if is_error(r48) goto L35 (error at to_hex_if_bytes:30) else goto L27
L27:
    r49 = r48
    goto L34
L28:
    r50 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r50) goto L29 else goto L31
L29:
    r51 = raise NameError('value for final name "to_hex" was not set')
    if not r51 goto L35 (error at to_hex_if_bytes:30) else goto L30 :: bool
L30:
    unreachable
L31:
    r52 = [val]
    r53 = load_address r52
    r54 = ('hexstr',)
    r55 = PyObject_Vectorcall(r50, r53, 0, r54)
    if is_error(r55) goto L35 (error at to_hex_if_bytes:30) else goto L32
L32:
    r56 = cast(str, r55)
    if is_error(r56) goto L35 (error at to_hex_if_bytes:30) else goto L33
L33:
    r49 = r56
L34:
    return r49
L35:
    r57 = <error> :: str
    return r57
L36:
    dec_ref r8
    goto L35
L37:
    dec_ref r14
    goto L35
L38:
    dec_ref r19
    goto L35
L39:
    dec_ref r26
    goto L14
L40:
    dec_ref r26
    goto L35

def to_bytes_if_hex(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1 :: str
    r2 :: object
    r3 :: bool
    r4 :: object[1]
    r5 :: object_ptr
    r6, r7 :: object
    r8 :: bytes
    r9 :: union[bytes, object]
    r10, r11 :: bytes
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L8 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L11 (error at to_bytes_if_hex:38) else goto L2
L2:
    r2 = faster_web3._utils.type_conversion.to_bytes :: static
    if is_error(r2) goto L12 else goto L5
L3:
    r3 = raise NameError('value for final name "to_bytes" was not set')
    if not r3 goto L11 (error at to_bytes_if_hex:38) else goto L4 :: bool
L4:
    unreachable
L5:
    r4 = [r1]
    r5 = load_address r4
    r6 = ('hexstr',)
    r7 = PyObject_Vectorcall(r2, r5, 0, r6)
    if is_error(r7) goto L13 (error at to_bytes_if_hex:38) else goto L6
L6:
    dec_ref r1
    r8 = cast(bytes, r7)
    if is_error(r8) goto L11 (error at to_bytes_if_hex:38) else goto L7
L7:
    r9 = r8
    goto L9
L8:
    inc_ref val
    r9 = val
L9:
    r10 = cast(bytes, r9)
    if is_error(r10) goto L11 (error at to_bytes_if_hex:38) else goto L10
L10:
    return r10
L11:
    r11 = <error> :: bytes
    return r11
L12:
    dec_ref r1
    goto L3
L13:
    dec_ref r1
    goto L11

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: object_ptr
    r10 :: object_ptr[1]
    r11 :: c_ptr
    r12 :: native_int[1]
    r13 :: c_ptr
    r14 :: object
    r15 :: dict
    r16, r17 :: str
    r18 :: bit
    r19 :: object
    r20 :: str
    r21 :: dict
    r22, r23 :: object
    r24 :: str
    r25 :: dict
    r26, r27 :: object
    r28 :: str
    r29 :: object
    r30 :: dict
    r31 :: str
    r32 :: i32
    r33 :: bit
    r34 :: object
    r35 :: str
    r36 :: object
    r37 :: dict
    r38 :: str
    r39 :: i32
    r40 :: bit
    r41 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L12 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final', 'Union')
    r6 = 'typing'
    r7 = faster_web3._utils.type_conversion.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L12 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = load_address faster_eth_utils :: module
    r10 = [r9]
    r11 = load_address r10
    r12 = [6]
    r13 = load_address r12
    r14 = (('faster_eth_utils', 'faster_eth_utils', 'faster_eth_utils'),)
    r15 = faster_web3._utils.type_conversion.globals :: static
    r16 = 'faster_web3/_utils/type_conversion.py'
    r17 = '<module>'
    r18 = CPyImport_ImportMany(r14, r11, r15, r16, r17, r13)
    if not r18 goto L12 else goto L5 :: bool
L5:
    r19 = ('HexStr',)
    r20 = 'eth_typing'
    r21 = faster_web3._utils.type_conversion.globals :: static
    r22 = CPyImport_ImportFromMany(r20, r19, r19, r21)
    if is_error(r22) goto L12 (error at <module>:7) else goto L6
L6:
    eth_typing = r22 :: module
    dec_ref r22
    r23 = ('Web3ValueError',)
    r24 = 'faster_web3.exceptions'
    r25 = faster_web3._utils.type_conversion.globals :: static
    r26 = CPyImport_ImportFromMany(r24, r23, r23, r25)
    if is_error(r26) goto L12 (error at <module>:11) else goto L7
L7:
    faster_web3.exceptions = r26 :: module
    dec_ref r26
    r27 = faster_eth_utils :: module
    r28 = 'to_bytes'
    r29 = CPyObject_GetAttr(r27, r28)
    if is_error(r29) goto L12 (error at <module>:16) else goto L8
L8:
    faster_web3._utils.type_conversion.to_bytes = r29 :: static
    r30 = faster_web3._utils.type_conversion.globals :: static
    r31 = 'to_bytes'
    r32 = CPyDict_SetItem(r30, r31, r29)
    dec_ref r29
    r33 = r32 >= 0 :: signed
    if not r33 goto L12 (error at <module>:16) else goto L9 :: bool
L9:
    r34 = faster_eth_utils :: module
    r35 = 'to_hex'
    r36 = CPyObject_GetAttr(r34, r35)
    if is_error(r36) goto L12 (error at <module>:17) else goto L10
L10:
    faster_web3._utils.type_conversion.to_hex = r36 :: static
    r37 = faster_web3._utils.type_conversion.globals :: static
    r38 = 'to_hex'
    r39 = CPyDict_SetItem(r37, r38, r36)
    dec_ref r36
    r40 = r39 >= 0 :: signed
    if not r40 goto L12 (error at <module>:17) else goto L11 :: bool
L11:
    return 1
L12:
    r41 = <error> :: None
    return r41

def verify_attr(class_name, key, namespace):
    class_name, key :: str
    namespace :: object
    r0 :: i32
    r1 :: bit
    r2, r3 :: bool
    r4, r5, r6, r7, r8, r9 :: str
    r10 :: dict
    r11 :: str
    r12 :: object
    r13 :: object[1]
    r14 :: object_ptr
    r15 :: object
    r16 :: None
L0:
    r0 = PySequence_Contains(namespace, key)
    r1 = r0 >= 0 :: signed
    if not r1 goto L8 (error at verify_attr:27) else goto L1 :: bool
L1:
    r2 = truncate r0: i32 to builtins.bool
    r3 = r2 ^ 1
    if r3 goto L2 else goto L7 :: bool
L2:
    r4 = 'Property '
    r5 = ' not found on '
    r6 = ' class. `'
    r7 = '.factory` only accepts keyword arguments which are present on the '
    r8 = ' class'
    r9 = CPyStr_Build(9, r4, key, r5, class_name, r6, class_name, r7, class_name, r8)
    if is_error(r9) goto L8 (error at verify_attr:29) else goto L3
L3:
    r10 = faster_web3._utils.datatypes.globals :: static
    r11 = 'Web3AttributeError'
    r12 = CPyDict_GetItem(r10, r11)
    if is_error(r12) goto L9 (error at verify_attr:28) else goto L4
L4:
    r13 = [r9]
    r14 = load_address r13
    r15 = PyObject_Vectorcall(r12, r14, 1, 0)
    dec_ref r12
    if is_error(r15) goto L9 (error at verify_attr:28) else goto L5
L5:
    dec_ref r9
    CPy_Raise(r15)
    dec_ref r15
    if not 0 goto L8 (error at verify_attr:28) else goto L6 :: bool
L6:
    unreachable
L7:
    return 1
L8:
    r16 = <error> :: None
    return r16
L9:
    dec_ref r9
    goto L8

def __init___PropertyCheckingFactory_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2, r3 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    inc_ref __mypyc_self__
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    if is_error(r2) goto L4 else goto L3
L3:
    return r2
L4:
    r3 = <error> :: object
    return r3

def __init___PropertyCheckingFactory_obj.__call__(__mypyc_self__, cls, name, bases, namespace, kwargs):
    __mypyc_self__ :: faster_web3._utils.datatypes.__init___PropertyCheckingFactory_obj
    cls :: faster_web3._utils.datatypes.PropertyCheckingFactory
    name :: str
    bases :: tuple
    namespace, kwargs :: dict
    r0 :: object
    r1 :: str
    r2 :: object[5]
    r3 :: object_ptr
    r4 :: object
    r5 :: None
L0:
    r0 = load_address PyType_Type
    r1 = '__init__'
    r2 = [r0, cls, name, bases, namespace]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775813, 0)
    if is_error(r4) goto L2 (error at __init__:46) else goto L3
L1:
    return 1
L2:
    r5 = <error> :: None
    return r5
L3:
    dec_ref r4
    goto L1

def __new___PropertyCheckingFactory_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2, r3 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    inc_ref __mypyc_self__
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    if is_error(r2) goto L4 else goto L3
L3:
    return r2
L4:
    r3 = <error> :: object
    return r3

def __new___PropertyCheckingFactory_obj.__call__(__mypyc_self__, mcs, name, bases, namespace, normalizers):
    __mypyc_self__ :: faster_web3._utils.datatypes.__new___PropertyCheckingFactory_obj
    mcs :: object
    name :: str
    bases :: tuple[object]
    namespace :: dict
    normalizers :: union[dict, None]
    r0 :: object
    r1 :: list
    r2, r3, r4 :: object
    r5 :: str
    r6 :: object
    r7 :: tuple
    r8 :: i32
    r9, r10 :: bit
    r11, r12 :: object
    r13 :: bool
    r14 :: object[1]
    r15 :: object_ptr
    r16 :: object
    r17 :: set
    r18 :: list
    r19, r20 :: object
    r21 :: str
    r22 :: object
    r23 :: str
    r24 :: object[1]
    r25 :: object_ptr
    r26 :: object
    r27 :: i32
    r28, r29 :: bit
    r30, r31 :: object
    r32 :: bool
    r33 :: object[1]
    r34 :: object_ptr
    r35 :: object
    r36 :: set
    r37 :: short_int
    r38 :: native_int
    r39 :: object
    r40 :: tuple[bool, short_int, object]
    r41 :: short_int
    r42 :: bool
    r43 :: object
    r44 :: str
    r45 :: None
    r46, r47 :: bit
    r48 :: object
    r49 :: bit
    r50 :: dict
    r51 :: native_int
    r52 :: short_int
    r53 :: bit
    r54 :: dict
    r55 :: object
    r56 :: bool
    r57 :: object[2]
    r58 :: object_ptr
    r59 :: object
    r60, processed_namespace :: dict
    r61 :: object
    r62 :: str
    r63 :: object
    r64 :: object[5]
    r65 :: object_ptr
    r66 :: object
    r67, r68 :: faster_web3._utils.datatypes.PropertyCheckingFactory
L0:
    if is_error(normalizers) goto L1 else goto L49
L1:
    r0 = box(None, 1)
    inc_ref r0
    normalizers = r0
L2:
    r1 = PyList_New(0)
    if is_error(r1) goto L50 (error at __new__:56) else goto L3
L3:
    inc_ref bases
    r2 = box(tuple[object], bases)
    r3 = PyObject_GetIter(r2)
    dec_ref r2
    if is_error(r3) goto L51 (error at __new__:56) else goto L4
L4:
    r4 = PyIter_Next(r3)
    if is_error(r4) goto L52 else goto L5
L5:
    r5 = '__mro__'
    r6 = CPyObject_GetAttr(r4, r5)
    dec_ref r4
    if is_error(r6) goto L53 (error at __new__:56) else goto L6
L6:
    r7 = cast(tuple, r6)
    if is_error(r7) goto L53 (error at __new__:56) else goto L7
L7:
    r8 = PyList_Append(r1, r7)
    dec_ref r7
    r9 = r8 >= 0 :: signed
    if not r9 goto L53 (error at __new__:56) else goto L4 :: bool
L8:
    r10 = CPy_NoErrOccurred()
    if not r10 goto L51 (error at __new__:56) else goto L9 :: bool
L9:
    r11 = PyObject_GetIter(r1)
    dec_ref r1
    if is_error(r11) goto L50 (error at __new__:56) else goto L10
L10:
    r12 = faster_web3._utils.datatypes.concat :: static
    if is_error(r12) goto L54 else goto L13
L11:
    r13 = raise NameError('value for final name "concat" was not set')
    if not r13 goto L48 (error at __new__:56) else goto L12 :: bool
L12:
    unreachable
L13:
    r14 = [r11]
    r15 = load_address r14
    r16 = PyObject_Vectorcall(r12, r15, 1, 0)
    if is_error(r16) goto L55 (error at __new__:56) else goto L14
L14:
    dec_ref r11
    r17 = PySet_New(r16)
    dec_ref r16
    if is_error(r17) goto L50 (error at __new__:56) else goto L15
L15:
    r18 = PyList_New(0)
    if is_error(r18) goto L56 (error at __new__:57) else goto L16
L16:
    r19 = PyObject_GetIter(r17)
    dec_ref r17
    if is_error(r19) goto L57 (error at __new__:57) else goto L17
L17:
    r20 = PyIter_Next(r19)
    if is_error(r20) goto L58 else goto L18
L18:
    r21 = '__dict__'
    r22 = CPyObject_GetAttr(r20, r21)
    dec_ref r20
    if is_error(r22) goto L59 (error at __new__:57) else goto L19
L19:
    r23 = 'keys'
    r24 = [r22]
    r25 = load_address r24
    r26 = PyObject_VectorcallMethod(r23, r25, 9223372036854775809, 0)
    if is_error(r26) goto L60 (error at __new__:57) else goto L20
L20:
    dec_ref r22
    r27 = PyList_Append(r18, r26)
    dec_ref r26
    r28 = r27 >= 0 :: signed
    if not r28 goto L59 (error at __new__:57) else goto L17 :: bool
L21:
    r29 = CPy_NoErrOccurred()
    if not r29 goto L57 (error at __new__:57) else goto L22 :: bool
L22:
    r30 = PyObject_GetIter(r18)
    dec_ref r18
    if is_error(r30) goto L50 (error at __new__:57) else goto L23
L23:
    r31 = faster_web3._utils.datatypes.concat :: static
    if is_error(r31) goto L61 else goto L26
L24:
    r32 = raise NameError('value for final name "concat" was not set')
    if not r32 goto L48 (error at __new__:57) else goto L25 :: bool
L25:
    unreachable
L26:
    r33 = [r30]
    r34 = load_address r33
    r35 = PyObject_Vectorcall(r31, r34, 1, 0)
    if is_error(r35) goto L62 (error at __new__:57) else goto L27
L27:
    dec_ref r30
    r36 = PySet_New(r35)
    dec_ref r35
    if is_error(r36) goto L50 (error at __new__:57) else goto L28
L28:
    r37 = 0
    r38 = PyDict_Size(namespace)
    r39 = CPyDict_GetKeysIter(namespace)
    if is_error(r39) goto L63 (error at __new__:59) else goto L29
L29:
    r40 = CPyDict_NextKey(r39, r37)
    r41 = r40[1]
    r37 = r41
    r42 = r40[0]
    if r42 goto L30 else goto L64 :: bool
L30:
    r43 = r40[2]
    dec_ref r40
    r44 = cast(str, r43)
    if is_error(r44) goto L65 (error at __new__:59) else goto L31
L31:
    r45 = verify_attr(name, r44, r36)
    dec_ref r44
    if is_error(r45) goto L65 (error at __new__:60) else goto L32
L32:
    r46 = CPyDict_CheckSize(namespace, r38)
    if not r46 goto L65 (error at __new__:59) else goto L29 :: bool
L33:
    r47 = CPy_NoErrOccurred()
    if not r47 goto L50 (error at __new__:59) else goto L34 :: bool
L34:
    r48 = load_address _Py_NoneStruct
    r49 = normalizers != r48
    if r49 goto L35 else goto L66 :: bool
L35:
    inc_ref normalizers
    r50 = cast(dict, normalizers)
    if is_error(r50) goto L50 (error at __new__:54) else goto L36
L36:
    r51 = PyDict_Size(r50)
    dec_ref r50
    r52 = r51 << 1
    r53 = r52 != 0
    if r53 goto L37 else goto L66 :: bool
L37:
    r54 = cast(dict, normalizers)
    if is_error(r54) goto L48 (error at __new__:64) else goto L38
L38:
    r55 = faster_web3._utils.datatypes.apply_formatters_to_dict :: static
    if is_error(r55) goto L67 else goto L41
L39:
    r56 = raise NameError('value for final name "apply_formatters_to_dict" was not set')
    if not r56 goto L48 (error at __new__:63) else goto L40 :: bool
L40:
    unreachable
L41:
    r57 = [r54, namespace]
    r58 = load_address r57
    r59 = PyObject_Vectorcall(r55, r58, 2, 0)
    if is_error(r59) goto L68 (error at __new__:63) else goto L42
L42:
    dec_ref r54
    r60 = cast(dict, r59)
    if is_error(r60) goto L48 (error at __new__:63) else goto L43
L43:
    processed_namespace = r60
    goto L45
L44:
    inc_ref namespace
    processed_namespace = namespace
L45:
    r61 = load_address PyType_Type
    r62 = '__new__'
    inc_ref bases
    r63 = box(tuple[object], bases)
    r64 = [r61, mcs, name, r63, processed_namespace]
    r65 = load_address r64
    r66 = PyObject_VectorcallMethod(r62, r65, 9223372036854775813, 0)
    if is_error(r66) goto L69 (error at __new__:70) else goto L46
L46:
    dec_ref r63
    dec_ref processed_namespace
    r67 = cast(faster_web3._utils.datatypes.PropertyCheckingFactory, r66)
    if is_error(r67) goto L48 (error at __new__:70) else goto L47
L47:
    return r67
L48:
    r68 = <error> :: faster_web3._utils.datatypes.PropertyCheckingFactory
    return r68
L49:
    inc_ref normalizers
    goto L2
L50:
    dec_ref normalizers
    goto L48
L51:
    dec_ref normalizers
    dec_ref r1
    goto L48
L52:
    dec_ref r3
    goto L8
L53:
    dec_ref normalizers
    dec_ref r1
    dec_ref r3
    goto L48
L54:
    dec_ref normalizers
    dec_ref r11
    goto L11
L55:
    dec_ref normalizers
    dec_ref r11
    goto L48
L56:
    dec_ref normalizers
    dec_ref r17
    goto L48
L57:
    dec_ref normalizers
    dec_ref r18
    goto L48
L58:
    dec_ref r19
    goto L21
L59:
    dec_ref normalizers
    dec_ref r18
    dec_ref r19
    goto L48
L60:
    dec_ref normalizers
    dec_ref r18
    dec_ref r19
    dec_ref r22
    goto L48
L61:
    dec_ref normalizers
    dec_ref r30
    goto L24
L62:
    dec_ref normalizers
    dec_ref r30
    goto L48
L63:
    dec_ref normalizers
    dec_ref r36
    goto L48
L64:
    dec_ref r36
    dec_ref r39
    dec_ref r40
    goto L33
L65:
    dec_ref normalizers
    dec_ref r36
    dec_ref r39
    goto L48
L66:
    dec_ref normalizers
    goto L44
L67:
    dec_ref r54
    goto L39
L68:
    dec_ref r54
    goto L48
L69:
    dec_ref processed_namespace
    dec_ref r63
    goto L48

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9, r10 :: object_ptr
    r11 :: object_ptr[2]
    r12 :: c_ptr
    r13 :: native_int[2]
    r14 :: c_ptr
    r15 :: object
    r16 :: dict
    r17, r18 :: str
    r19 :: bit
    r20 :: object
    r21 :: str
    r22 :: dict
    r23, r24 :: object
    r25 :: str
    r26 :: dict
    r27, r28 :: object
    r29 :: str
    r30 :: object
    r31 :: dict
    r32 :: str
    r33 :: i32
    r34 :: bit
    r35 :: object
    r36 :: str
    r37 :: object
    r38 :: dict
    r39 :: str
    r40 :: i32
    r41 :: bit
    r42 :: object
    r43 :: str
    r44 :: object
    r45 :: tuple
    r46, r47 :: object
    r48 :: str
    r49 :: bool
    r50, r51 :: str
    r52 :: object
    r53 :: object[2]
    r54 :: object_ptr
    r55 :: object
    r56, r57, r58, r59 :: dict
    r60 :: faster_web3._utils.datatypes.__init___PropertyCheckingFactory_obj
    r61 :: str
    r62 :: i32
    r63 :: bit
    r64 :: faster_web3._utils.datatypes.__new___PropertyCheckingFactory_obj
    r65 :: object
    r66 :: str
    r67 :: object
    r68 :: object[1]
    r69 :: object_ptr
    r70 :: object
    r71 :: str
    r72 :: i32
    r73 :: bit
    r74, r75 :: str
    r76 :: i32
    r77 :: bit
    r78, r79 :: str
    r80 :: i32
    r81 :: bit
    r82, r83 :: str
    r84 :: i32
    r85 :: bit
    r86 :: object[3]
    r87 :: object_ptr
    r88 :: object
    r89 :: dict
    r90 :: str
    r91, r92 :: object
    r93 :: object[1]
    r94 :: object_ptr
    r95, r96 :: object
    r97 :: object[1]
    r98 :: object_ptr
    r99 :: object
    r100 :: dict
    r101 :: str
    r102 :: i32
    r103 :: bit
    r104 :: object
    r105 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L37 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Any', 'Collection', 'Dict', 'Final', 'Optional', 'Tuple', 'Type')
    r6 = 'typing'
    r7 = faster_web3._utils.datatypes.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L37 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = load_address faster_eth_utils :: module
    r10 = load_address faster_eth_utils.toolz :: module
    r11 = [r9, r10]
    r12 = load_address r11
    r13 = [11, 12]
    r14 = load_address r13
    r15 = (('faster_eth_utils', 'faster_eth_utils', 'faster_eth_utils'), ('faster_eth_utils.toolz', 'faster_eth_utils', 'faster_eth_utils'))
    r16 = faster_web3._utils.datatypes.globals :: static
    r17 = 'faster_web3/_utils/datatypes.py'
    r18 = '<module>'
    r19 = CPyImport_ImportMany(r15, r12, r16, r17, r18, r14)
    if not r19 goto L37 else goto L5 :: bool
L5:
    r20 = ('mypyc_attr',)
    r21 = 'mypy_extensions'
    r22 = faster_web3._utils.datatypes.globals :: static
    r23 = CPyImport_ImportFromMany(r21, r20, r20, r22)
    if is_error(r23) goto L37 (error at <module>:13) else goto L6
L6:
    mypy_extensions = r23 :: module
    dec_ref r23
    r24 = ('Web3AttributeError',)
    r25 = 'faster_web3.exceptions'
    r26 = faster_web3._utils.datatypes.globals :: static
    r27 = CPyImport_ImportFromMany(r25, r24, r24, r26)
    if is_error(r27) goto L37 (error at <module>:17) else goto L7
L7:
    faster_web3.exceptions = r27 :: module
    dec_ref r27
    r28 = faster_eth_utils :: module
    r29 = 'apply_formatters_to_dict'
    r30 = CPyObject_GetAttr(r28, r29)
    if is_error(r30) goto L37 (error at <module>:22) else goto L8
L8:
    faster_web3._utils.datatypes.apply_formatters_to_dict = r30 :: static
    r31 = faster_web3._utils.datatypes.globals :: static
    r32 = 'apply_formatters_to_dict'
    r33 = CPyDict_SetItem(r31, r32, r30)
    dec_ref r30
    r34 = r33 >= 0 :: signed
    if not r34 goto L37 (error at <module>:22) else goto L9 :: bool
L9:
    r35 = faster_eth_utils.toolz :: module
    r36 = 'concat'
    r37 = CPyObject_GetAttr(r35, r36)
    if is_error(r37) goto L37 (error at <module>:23) else goto L10
L10:
    faster_web3._utils.datatypes.concat = r37 :: static
    r38 = faster_web3._utils.datatypes.globals :: static
    r39 = 'concat'
    r40 = CPyDict_SetItem(r38, r39, r37)
    dec_ref r37
    r41 = r40 >= 0 :: signed
    if not r41 goto L37 (error at <module>:23) else goto L11 :: bool
L11:
    r42 = builtins :: module
    r43 = 'type'
    r44 = CPyObject_GetAttr(r42, r43)
    if is_error(r44) goto L37 (error at <module>:36) else goto L12
L12:
    r45 = PyTuple_Pack(1, r44)
    dec_ref r44
    if is_error(r45) goto L37 (error at <module>:36) else goto L13
L13:
    r46 = load_address PyType_Type
    r47 = CPy_CalculateMetaclass(r46, r45)
    if is_error(r47) goto L38 (error at <module>:36) else goto L14
L14:
    r48 = '__prepare__'
    r49 = PyObject_HasAttr(r47, r48)
    if r49 goto L15 else goto L19 :: bool
L15:
    r50 = 'PropertyCheckingFactory'
    r51 = '__prepare__'
    r52 = CPyObject_GetAttr(r47, r51)
    if is_error(r52) goto L38 (error at <module>:36) else goto L16
L16:
    r53 = [r50, r45]
    r54 = load_address r53
    r55 = PyObject_Vectorcall(r52, r54, 2, 0)
    dec_ref r52
    if is_error(r55) goto L38 (error at <module>:36) else goto L17
L17:
    r56 = cast(dict, r55)
    if is_error(r56) goto L38 (error at <module>:36) else goto L18
L18:
    r57 = r56
    goto L21
L19:
    r58 = PyDict_New()
    if is_error(r58) goto L38 (error at <module>:36) else goto L20
L20:
    r57 = r58
L21:
    r59 = PyDict_New()
    if is_error(r59) goto L39 (error at <module>:36) else goto L22
L22:
    r60 = __init___PropertyCheckingFactory_obj()
    if is_error(r60) goto L40 (error at <module>:37) else goto L23
L23:
    r61 = '__init__'
    r62 = CPyDict_SetItem(r57, r61, r60)
    dec_ref r60
    r63 = r62 >= 0 :: signed
    if not r63 goto L40 (error at <module>:37) else goto L24 :: bool
L24:
    r64 = __new___PropertyCheckingFactory_obj()
    if is_error(r64) goto L40 (error at <module>:49) else goto L25
L25:
    r65 = builtins :: module
    r66 = 'staticmethod'
    r67 = CPyObject_GetAttr(r65, r66)
    if is_error(r67) goto L41 (error at <module>:49) else goto L26
L26:
    r68 = [r64]
    r69 = load_address r68
    r70 = PyObject_Vectorcall(r67, r69, 1, 0)
    dec_ref r67
    if is_error(r70) goto L41 (error at <module>:49) else goto L27
L27:
    dec_ref r64
    r71 = '__new__'
    r72 = CPyDict_SetItem(r57, r71, r70)
    dec_ref r70
    r73 = r72 >= 0 :: signed
    if not r73 goto L40 (error at <module>:49) else goto L28 :: bool
L28:
    r74 = 'PropertyCheckingFactory'
    r75 = '__annotations__'
    r76 = CPyDict_SetItem(r57, r75, r59)
    dec_ref r59
    r77 = r76 >= 0 :: signed
    if not r77 goto L39 (error at <module>:36) else goto L29 :: bool
L29:
    r78 = 'mypyc filler docstring'
    r79 = '__doc__'
    r80 = CPyDict_SetItem(r57, r79, r78)
    r81 = r80 >= 0 :: signed
    if not r81 goto L39 (error at <module>:36) else goto L30 :: bool
L30:
    r82 = 'faster_web3._utils.datatypes'
    r83 = '__module__'
    r84 = CPyDict_SetItem(r57, r83, r82)
    r85 = r84 >= 0 :: signed
    if not r85 goto L39 (error at <module>:36) else goto L31 :: bool
L31:
    r86 = [r74, r45, r57]
    r87 = load_address r86
    r88 = PyObject_Vectorcall(r47, r87, 3, 0)
    if is_error(r88) goto L39 (error at <module>:36) else goto L32
L32:
    dec_ref r57
    dec_ref r45
    r89 = faster_web3._utils.datatypes.globals :: static
    r90 = 'mypyc_attr'
    r91 = CPyDict_GetItem(r89, r90)
    if is_error(r91) goto L42 (error at <module>:35) else goto L33
L33:
    r92 = box(bool, 0)
    r93 = [r92]
    r94 = load_address r93
    r95 = ('native_class',)
    r96 = PyObject_Vectorcall(r91, r94, 0, r95)
    dec_ref r91
    if is_error(r96) goto L42 (error at <module>:35) else goto L34
L34:
    r97 = [r88]
    r98 = load_address r97
    r99 = PyObject_Vectorcall(r96, r98, 1, 0)
    dec_ref r96
    if is_error(r99) goto L42 (error at <module>:36) else goto L35
L35:
    dec_ref r88
    faster_web3._utils.datatypes.PropertyCheckingFactory = r99 :: type
    r100 = faster_web3._utils.datatypes.globals :: static
    r101 = 'PropertyCheckingFactory'
    r102 = PyDict_SetItem(r100, r101, r99)
    dec_ref r99
    r103 = r102 >= 0 :: signed
    if not r103 goto L37 (error at <module>:36) else goto L36 :: bool
L36:
    r104 = faster_web3._utils.datatypes.PropertyCheckingFactory :: type
    return 1
L37:
    r105 = <error> :: None
    return r105
L38:
    dec_ref r45
    goto L37
L39:
    dec_ref r45
    dec_ref r57
    goto L37
L40:
    dec_ref r45
    dec_ref r57
    dec_ref r59
    goto L37
L41:
    dec_ref r45
    dec_ref r57
    dec_ref r59
    dec_ref r64
    goto L37
L42:
    dec_ref r88
    goto L37

def wait_for_socket(ipc_path, timeout):
    ipc_path :: str
    timeout :: int
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: float
    r5 :: bit
    r6, r7 :: object
    r8 :: str
    r9, r10 :: object
    r11 :: float
    r12 :: bit
    r13 :: float
    r14 :: bit
    r15 :: object
    r16 :: float
    r17 :: bit
    r18, r19 :: object
    r20 :: str
    r21, r22 :: object
    r23 :: str
    r24, r25 :: object
    r26 :: str
    r27 :: object
    r28 :: object[2]
    r29 :: object_ptr
    r30 :: object
    r31 :: str
    r32 :: object[2]
    r33 :: object_ptr
    r34 :: object
    r35 :: str
    r36 :: object
    r37 :: object[2]
    r38 :: object_ptr
    r39 :: object
    r40 :: tuple[object, object, object]
    r41 :: object
    r42 :: str
    r43 :: object
    r44 :: bit
    r45 :: object
    r46 :: str
    r47, r48 :: object
    r49 :: object[1]
    r50 :: object_ptr
    r51 :: object
    r52 :: bit
    r53 :: None
L0:
    if is_error(timeout) goto L1 else goto L33
L1:
    timeout = 60
L2:
    r0 = time :: module
    r1 = 'time'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L34 (error at wait_for_socket:14) else goto L3
L3:
    r3 = PyObject_Vectorcall(r2, 0, 0, 0)
    dec_ref r2
    if is_error(r3) goto L34 (error at wait_for_socket:14) else goto L4
L4:
    r4 = unbox(float, r3)
    dec_ref r3
    r5 = r4 == -113.0
    if r5 goto L6 else goto L5 :: bool
L5:
    goto L7
L6:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L34 (error at wait_for_socket:14) else goto L5
L7:
    r7 = time :: module
    r8 = 'time'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L34 (error at wait_for_socket:15) else goto L8
L8:
    r10 = PyObject_Vectorcall(r9, 0, 0, 0)
    dec_ref r9
    if is_error(r10) goto L34 (error at wait_for_socket:15) else goto L9
L9:
    r11 = unbox(float, r10)
    dec_ref r10
    r12 = r11 == -113.0
    if r12 goto L11 else goto L10 :: bool
L10:
    r13 = CPyFloat_FromTagged(timeout)
    r14 = r13 == -113.0
    if r14 goto L13 else goto L12 :: bool
L11:
    r15 = PyErr_Occurred()
    if not is_error(r15) goto L34 (error at wait_for_socket:15) else goto L10
L12:
    r16 = r4 + r13
    r17 = r11 < r16
    if r17 goto L14 else goto L35 :: bool
L13:
    r18 = PyErr_Occurred()
    if not is_error(r18) goto L34 (error at wait_for_socket:15) else goto L12
L14:
    r19 = socket :: module
    r20 = 'AF_UNIX'
    r21 = CPyObject_GetAttr(r19, r20)
    if is_error(r21) goto L21 (error at wait_for_socket:17) else goto L15
L15:
    r22 = socket :: module
    r23 = 'SOCK_STREAM'
    r24 = CPyObject_GetAttr(r22, r23)
    if is_error(r24) goto L36 (error at wait_for_socket:17) else goto L16
L16:
    r25 = socket :: module
    r26 = 'socket'
    r27 = CPyObject_GetAttr(r25, r26)
    if is_error(r27) goto L37 (error at wait_for_socket:17) else goto L17
L17:
    r28 = [r21, r24]
    r29 = load_address r28
    r30 = PyObject_Vectorcall(r27, r29, 2, 0)
    dec_ref r27
    if is_error(r30) goto L37 (error at wait_for_socket:17) else goto L18
L18:
    dec_ref r21
    dec_ref r24
    r31 = 'connect'
    r32 = [r30, ipc_path]
    r33 = load_address r32
    r34 = PyObject_VectorcallMethod(r31, r33, 9223372036854775810, 0)
    if is_error(r34) goto L38 (error at wait_for_socket:18) else goto L39
L19:
    r35 = 'settimeout'
    inc_ref timeout :: int
    r36 = box(int, timeout)
    r37 = [r30, r36]
    r38 = load_address r37
    r39 = PyObject_VectorcallMethod(r35, r38, 9223372036854775810, 0)
    if is_error(r39) goto L40 (error at wait_for_socket:19) else goto L41
L20:
    dec_ref r30
    dec_ref r36
    goto L31
L21:
    r40 = CPy_CatchError()
    r41 = builtins :: module
    r42 = 'OSError'
    r43 = CPyObject_GetAttr(r41, r42)
    if is_error(r43) goto L42 (error at wait_for_socket:20) else goto L22
L22:
    r44 = CPy_ExceptionMatches(r43)
    dec_ref r43
    if r44 goto L23 else goto L43 :: bool
L23:
    r45 = time :: module
    r46 = 'sleep'
    r47 = CPyObject_GetAttr(r45, r46)
    if is_error(r47) goto L42 (error at wait_for_socket:21) else goto L24
L24:
    r48 = box(float, 0.01)
    r49 = [r48]
    r50 = load_address r49
    r51 = PyObject_Vectorcall(r47, r50, 1, 0)
    dec_ref r47
    if is_error(r51) goto L44 (error at wait_for_socket:21) else goto L45
L25:
    dec_ref r48
    goto L28
L26:
    CPy_Reraise()
    if not 0 goto L29 else goto L46 :: bool
L27:
    unreachable
L28:
    CPy_RestoreExcInfo(r40)
    dec_ref r40
    goto L7
L29:
    CPy_RestoreExcInfo(r40)
    dec_ref r40
    r52 = CPy_KeepPropagating()
    if not r52 goto L32 else goto L30 :: bool
L30:
    unreachable
L31:
    return 1
L32:
    r53 = <error> :: None
    return r53
L33:
    inc_ref timeout :: int
    goto L2
L34:
    dec_ref timeout :: int
    goto L32
L35:
    dec_ref timeout :: int
    goto L31
L36:
    dec_ref r21
    goto L21
L37:
    dec_ref r21
    dec_ref r24
    goto L21
L38:
    dec_ref r30
    goto L21
L39:
    dec_ref r34
    goto L19
L40:
    dec_ref r30
    dec_ref r36
    goto L21
L41:
    dec_ref timeout :: int
    dec_ref r39
    goto L20
L42:
    dec_ref timeout :: int
    goto L29
L43:
    dec_ref timeout :: int
    goto L26
L44:
    dec_ref timeout :: int
    dec_ref r48
    goto L29
L45:
    dec_ref r51
    goto L25
L46:
    dec_ref r40
    goto L27

def wait_for_http(endpoint_uri, timeout):
    endpoint_uri :: str
    timeout :: int
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: float
    r5 :: bit
    r6, r7 :: object
    r8 :: str
    r9, r10 :: object
    r11 :: float
    r12 :: bit
    r13 :: float
    r14 :: bit
    r15 :: object
    r16 :: float
    r17 :: bit
    r18, r19 :: object
    r20 :: str
    r21 :: object
    r22 :: object[1]
    r23 :: object_ptr
    r24 :: object
    r25 :: tuple[object, object, object]
    r26 :: object
    r27 :: str
    r28 :: object
    r29 :: bit
    r30 :: object
    r31 :: str
    r32, r33 :: object
    r34 :: object[1]
    r35 :: object_ptr
    r36 :: object
    r37 :: bit
    r38 :: None
L0:
    if is_error(timeout) goto L1 else goto L28
L1:
    timeout = 120
L2:
    r0 = time :: module
    r1 = 'time'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L29 (error at wait_for_http:27) else goto L3
L3:
    r3 = PyObject_Vectorcall(r2, 0, 0, 0)
    dec_ref r2
    if is_error(r3) goto L29 (error at wait_for_http:27) else goto L4
L4:
    r4 = unbox(float, r3)
    dec_ref r3
    r5 = r4 == -113.0
    if r5 goto L6 else goto L5 :: bool
L5:
    goto L7
L6:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L29 (error at wait_for_http:27) else goto L5
L7:
    r7 = time :: module
    r8 = 'time'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L29 (error at wait_for_http:28) else goto L8
L8:
    r10 = PyObject_Vectorcall(r9, 0, 0, 0)
    dec_ref r9
    if is_error(r10) goto L29 (error at wait_for_http:28) else goto L9
L9:
    r11 = unbox(float, r10)
    dec_ref r10
    r12 = r11 == -113.0
    if r12 goto L11 else goto L10 :: bool
L10:
    r13 = CPyFloat_FromTagged(timeout)
    r14 = r13 == -113.0
    if r14 goto L13 else goto L12 :: bool
L11:
    r15 = PyErr_Occurred()
    if not is_error(r15) goto L29 (error at wait_for_http:28) else goto L10
L12:
    r16 = r4 + r13
    r17 = r11 < r16
    if r17 goto L14 else goto L30 :: bool
L13:
    r18 = PyErr_Occurred()
    if not is_error(r18) goto L29 (error at wait_for_http:28) else goto L12
L14:
    r19 = requests :: module
    r20 = 'get'
    r21 = CPyObject_GetAttr(r19, r20)
    if is_error(r21) goto L16 (error at wait_for_http:30) else goto L15
L15:
    r22 = [endpoint_uri]
    r23 = load_address r22
    r24 = PyObject_Vectorcall(r21, r23, 1, 0)
    dec_ref r21
    if is_error(r24) goto L16 (error at wait_for_http:30) else goto L31
L16:
    r25 = CPy_CatchError()
    r26 = requests :: module
    r27 = 'ConnectionError'
    r28 = CPyObject_GetAttr(r26, r27)
    if is_error(r28) goto L32 (error at wait_for_http:31) else goto L17
L17:
    r29 = CPy_ExceptionMatches(r28)
    dec_ref r28
    if r29 goto L18 else goto L33 :: bool
L18:
    r30 = time :: module
    r31 = 'sleep'
    r32 = CPyObject_GetAttr(r30, r31)
    if is_error(r32) goto L32 (error at wait_for_http:32) else goto L19
L19:
    r33 = box(float, 0.01)
    r34 = [r33]
    r35 = load_address r34
    r36 = PyObject_Vectorcall(r32, r35, 1, 0)
    dec_ref r32
    if is_error(r36) goto L34 (error at wait_for_http:32) else goto L35
L20:
    dec_ref r33
    goto L23
L21:
    CPy_Reraise()
    if not 0 goto L24 else goto L36 :: bool
L22:
    unreachable
L23:
    CPy_RestoreExcInfo(r25)
    dec_ref r25
    goto L7
L24:
    CPy_RestoreExcInfo(r25)
    dec_ref r25
    r37 = CPy_KeepPropagating()
    if not r37 goto L27 else goto L25 :: bool
L25:
    unreachable
L26:
    return 1
L27:
    r38 = <error> :: None
    return r38
L28:
    inc_ref timeout :: int
    goto L2
L29:
    dec_ref timeout :: int
    goto L27
L30:
    dec_ref timeout :: int
    goto L26
L31:
    dec_ref timeout :: int
    dec_ref r24
    goto L26
L32:
    dec_ref timeout :: int
    goto L24
L33:
    dec_ref timeout :: int
    goto L21
L34:
    dec_ref timeout :: int
    dec_ref r33
    goto L24
L35:
    dec_ref r36
    goto L20
L36:
    dec_ref r25
    goto L22

def wait_for_aiohttp_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3, r4, r5, r6, r7 :: object
    r8, r9 :: tuple[object, object, object]
    r10, r11 :: object
    r12 :: i32
    r13 :: object
    r14 :: bit
    r15 :: object
    r16 :: str
    r17, r18 :: object
    r19 :: float
    r20 :: bit
    r21 :: bool
    r22, r23 :: object
    r24 :: str
    r25, r26 :: object
    r27 :: float
    r28 :: bit
    r29 :: float
    r30 :: bit
    r31 :: object
    r32 :: int
    r33 :: object
    r34 :: float
    r35 :: bit
    r36 :: float
    r37 :: bit
    r38 :: object
    r39 :: dict
    r40 :: str
    r41 :: object
    r42 :: str
    r43 :: object[1]
    r44 :: object_ptr
    r45, r46 :: object
    r47 :: str
    r48 :: object
    r49 :: bool
    r50 :: str
    r51 :: object
    r52 :: object[1]
    r53 :: object_ptr
    r54 :: object
    r55, r56 :: bool
    r57 :: object
    r58 :: bool
    r59, r60, r61, r62, r63 :: object
    r64 :: bool
    r65 :: object
    r66 :: bool
    r67 :: object
    r68 :: bit
    r69 :: tuple[object, object, object]
    r70 :: bool
    r71 :: object_ptr
    r72 :: object
    r73 :: bool
    r74, r75, r76 :: tuple[object, object, object]
    r77 :: bit
    r78, r79, r80 :: object
    r81 :: bool
    r82 :: object
    r83, r84 :: str
    r85 :: object[2]
    r86 :: object_ptr
    r87, r88 :: object
    r89 :: bool
    r90, r91, r92, r93, r94 :: object
    r95 :: bool
    r96 :: object
    r97 :: bool
    r98 :: object
    r99 :: bit
    r100 :: tuple[object, object, object]
    r101 :: bool
    r102 :: object_ptr
    r103 :: object
    r104 :: bool
    r105, r106, r107 :: tuple[object, object, object]
    r108 :: bit
    r109, r110, r111 :: object
    r112 :: tuple[object, object, object]
    r113, r114 :: bool
    r115 :: tuple[object, object, object]
    r116, r117, r118, r119, r120 :: object
    r121 :: object[4]
    r122 :: object_ptr
    r123, r124 :: object
    r125 :: bool
    r126, r127, r128, r129, r130 :: object
    r131 :: bool
    r132 :: object
    r133 :: bool
    r134 :: object
    r135 :: bit
    r136 :: tuple[object, object, object]
    r137 :: bool
    r138 :: object_ptr
    r139 :: object
    r140 :: bool
    r141, r142, r143 :: tuple[object, object, object]
    r144 :: bit
    r145, r146, r147 :: object
    r148 :: i32
    r149 :: bit
    r150 :: bool
    r151, r152 :: tuple[object, object, object]
    r153 :: bit
    r154, r155 :: tuple[object, object, object]
    r156 :: bool
    r157, r158, r159 :: object
    r160 :: object[4]
    r161 :: object_ptr
    r162, r163 :: object
    r164 :: bool
    r165, r166, r167, r168, r169 :: object
    r170 :: bool
    r171 :: object
    r172 :: bool
    r173 :: object
    r174 :: bit
    r175 :: tuple[object, object, object]
    r176 :: bool
    r177 :: object_ptr
    r178 :: object
    r179 :: bool
    r180, r181, r182 :: tuple[object, object, object]
    r183 :: bit
    r184, r185, r186 :: object
    r187 :: bit
    r188 :: tuple[object, object, object]
    r189 :: bool
    r190 :: dict
    r191 :: str
    r192 :: object
    r193 :: str
    r194 :: object
    r195 :: str
    r196 :: object
    r197 :: bit
    r198 :: object
    r199 :: str
    r200, r201 :: object
    r202 :: object[1]
    r203 :: object_ptr
    r204, r205 :: object
    r206 :: bool
    r207, r208, r209, r210, r211 :: object
    r212 :: bool
    r213 :: object
    r214 :: bool
    r215 :: object
    r216 :: bit
    r217 :: tuple[object, object, object]
    r218 :: bool
    r219 :: object_ptr
    r220 :: object
    r221 :: bool
    r222, r223, r224 :: tuple[object, object, object]
    r225 :: bit
    r226, r227, r228 :: object
    r229, r230 :: tuple[object, object, object]
    r231 :: bit
    r232 :: object
    r233 :: bool
    r234, r235, r236, r237, r238, r239 :: bit
    r240 :: bool
    r241 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = <error> :: object
    r3 = r2
    r4 = <error> :: object
    r5 = r4
    r6 = <error> :: object
    r7 = r6
    r8 = <error> :: tuple[object, object, object]
    r9 = r8
    r10 = <error> :: object
    r11 = r10
    r12 = __mypyc_self__.__mypyc_next_label__
    goto L218
L1:
    r13 = load_address _Py_NoneStruct
    r14 = type != r13
    if r14 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L226 (error at wait_for_aiohttp:37) else goto L3 :: bool
L3:
    unreachable
L4:
    r15 = time :: module
    r16 = 'time'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L226 (error at wait_for_aiohttp:38) else goto L5
L5:
    r18 = PyObject_Vectorcall(r17, 0, 0, 0)
    dec_ref r17
    if is_error(r18) goto L226 (error at wait_for_aiohttp:38) else goto L6
L6:
    r19 = unbox(float, r18)
    dec_ref r18
    r20 = r19 == -113.0
    if r20 goto L8 else goto L7 :: bool
L7:
    __mypyc_self__.__mypyc_generator_attribute__start = r19; r21 = is_error
    if not r21 goto L226 (error at wait_for_aiohttp:38) else goto L9 :: bool
L8:
    r22 = PyErr_Occurred()
    if not is_error(r22) goto L226 (error at wait_for_aiohttp:38) else goto L7
L9:
    r23 = time :: module
    r24 = 'time'
    r25 = CPyObject_GetAttr(r23, r24)
    if is_error(r25) goto L226 (error at wait_for_aiohttp:39) else goto L10
L10:
    r26 = PyObject_Vectorcall(r25, 0, 0, 0)
    dec_ref r25
    if is_error(r26) goto L226 (error at wait_for_aiohttp:39) else goto L11
L11:
    r27 = unbox(float, r26)
    dec_ref r26
    r28 = r27 == -113.0
    if r28 goto L13 else goto L12 :: bool
L12:
    r29 = __mypyc_self__.__mypyc_generator_attribute__start
    r30 = r29 == -113.0
    if r30 goto L15 else goto L14 :: bool
L13:
    r31 = PyErr_Occurred()
    if not is_error(r31) goto L226 (error at wait_for_aiohttp:39) else goto L12
L14:
    r32 = __mypyc_self__.__mypyc_generator_attribute__timeout
    if is_error(r32) goto L226 (error at wait_for_aiohttp:39) else goto L16
L15:
    r33 = PyErr_Occurred()
    if not is_error(r33) goto L226 (error at wait_for_aiohttp:39) else goto L14
L16:
    r34 = CPyFloat_FromTagged(r32)
    dec_ref r32 :: int
    r35 = r34 == -113.0
    if r35 goto L18 else goto L17 :: bool
L17:
    r36 = r29 + r34
    r37 = r27 < r36
    if r37 goto L19 else goto L213 :: bool
L18:
    r38 = PyErr_Occurred()
    if not is_error(r38) goto L226 (error at wait_for_aiohttp:39) else goto L17
L19:
    r39 = faster_web3.tools.benchmark.utils.globals :: static
    r40 = 'aiohttp'
    r41 = CPyDict_GetItem(r39, r40)
    if is_error(r41) goto L171 (error at wait_for_aiohttp:41) else goto L20
L20:
    r42 = 'ClientSession'
    r43 = [r41]
    r44 = load_address r43
    r45 = PyObject_VectorcallMethod(r42, r44, 9223372036854775809, 0)
    if is_error(r45) goto L227 (error at wait_for_aiohttp:41) else goto L21
L21:
    dec_ref r41
    r46 = CPy_TYPE(r45)
    r47 = '__aexit__'
    r48 = CPyObject_GetAttr(r46, r47)
    if is_error(r48) goto L228 (error at wait_for_aiohttp:41) else goto L22
L22:
    __mypyc_self__.__mypyc_temp__0 = r48; r49 = is_error
    if not r49 goto L228 (error at wait_for_aiohttp:-1) else goto L23 :: bool
L23:
    r50 = '__aenter__'
    r51 = CPyObject_GetAttr(r46, r50)
    dec_ref r46
    if is_error(r51) goto L229 (error at wait_for_aiohttp:41) else goto L24
L24:
    r52 = [r45]
    r53 = load_address r52
    r54 = PyObject_Vectorcall(r51, r53, 1, 0)
    dec_ref r51
    if is_error(r54) goto L229 (error at wait_for_aiohttp:41) else goto L25
L25:
    __mypyc_self__.__mypyc_temp__1 = r45; r55 = is_error
    if not r55 goto L230 (error at wait_for_aiohttp:-1) else goto L26 :: bool
L26:
    __mypyc_self__.__mypyc_temp__2 = 1; r56 = is_error
    if not r56 goto L230 (error at wait_for_aiohttp:-1) else goto L27 :: bool
L27:
    r57 = CPy_GetCoro(r54)
    dec_ref r54
    if is_error(r57) goto L171 (error at wait_for_aiohttp:41) else goto L28
L28:
    __mypyc_self__.__mypyc_temp__3 = r57; r58 = is_error
    if not r58 goto L171 (error at wait_for_aiohttp:-1) else goto L29 :: bool
L29:
    r59 = __mypyc_self__.__mypyc_temp__3
    if is_error(r59) goto L171 (error at wait_for_aiohttp:-1) else goto L30
L30:
    r60 = CPyIter_Next(r59)
    dec_ref r59
    if is_error(r60) goto L31 else goto L33
L31:
    r61 = CPy_FetchStopIterationValue()
    if is_error(r61) goto L171 (error at wait_for_aiohttp:41) else goto L32
L32:
    r62 = r61
    r63 = <error> :: object
    __mypyc_self__.__mypyc_temp__3 = r63; r64 = is_error
    if not r64 goto L231 (error at wait_for_aiohttp:41) else goto L55 :: bool
L33:
    r65 = r60
L34:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r65
L35:
    r67 = load_address _Py_NoneStruct
    r68 = type != r67
    if r68 goto L36 else goto L232 :: bool
L36:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L39 (error at wait_for_aiohttp:41) else goto L233 :: bool
L37:
    unreachable
L38:
    inc_ref arg
    goto L50
L39:
    r69 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__4 = r69; r70 = is_error
    if not r70 goto L234 (error at wait_for_aiohttp:-1) else goto L40 :: bool
L40:
    r71 = load_address r1
    r72 = __mypyc_self__.__mypyc_temp__3
    if is_error(r72) goto L234 (error at wait_for_aiohttp:-1) else goto L41
L41:
    r73 = CPy_YieldFromErrorHandle(r72, r71)
    dec_ref r72
    if is_error(r73) goto L234 (error at wait_for_aiohttp:41) else goto L42
L42:
    if r73 goto L45 else goto L43 :: bool
L43:
    r65 = r1
    r74 = __mypyc_self__.__mypyc_temp__4
    if is_error(r74) goto L235 (error at wait_for_aiohttp:-1) else goto L44
L44:
    CPy_RestoreExcInfo(r74)
    dec_ref r74
    goto L34
L45:
    r62 = r1
    r75 = __mypyc_self__.__mypyc_temp__4
    if is_error(r75) goto L236 (error at wait_for_aiohttp:-1) else goto L46
L46:
    CPy_RestoreExcInfo(r75)
    dec_ref r75
    goto L55
L47:
    r76 = __mypyc_self__.__mypyc_temp__4
    if is_error(r76) goto L171 (error at wait_for_aiohttp:-1) else goto L48
L48:
    CPy_RestoreExcInfo(r76)
    dec_ref r76
    r77 = CPy_KeepPropagating()
    if not r77 goto L171 else goto L49 :: bool
L49:
    unreachable
L50:
    r78 = __mypyc_self__.__mypyc_temp__3
    if is_error(r78) goto L237 (error at wait_for_aiohttp:-1) else goto L51
L51:
    r79 = CPyIter_Send(r78, arg)
    dec_ref r78
    dec_ref arg
    if is_error(r79) goto L53 else goto L52
L52:
    r65 = r79
    goto L34
L53:
    r80 = CPy_FetchStopIterationValue()
    if is_error(r80) goto L171 (error at wait_for_aiohttp:41) else goto L54
L54:
    r62 = r80
L55:
    __mypyc_self__.__mypyc_generator_attribute__session = r62; r81 = is_error
    if not r81 goto L87 (error at wait_for_aiohttp:41) else goto L56 :: bool
L56:
    r82 = __mypyc_self__.__mypyc_generator_attribute__session
    if is_error(r82) goto L87 (error at wait_for_aiohttp:42) else goto L57
L57:
    r83 = __mypyc_self__.__mypyc_generator_attribute__endpoint_uri
    if is_error(r83) goto L238 (error at wait_for_aiohttp:42) else goto L58
L58:
    r84 = 'get'
    r85 = [r82, r83]
    r86 = load_address r85
    r87 = PyObject_VectorcallMethod(r84, r86, 9223372036854775810, 0)
    if is_error(r87) goto L239 (error at wait_for_aiohttp:42) else goto L59
L59:
    dec_ref r82
    dec_ref r83
    r88 = CPy_GetCoro(r87)
    dec_ref r87
    if is_error(r88) goto L87 (error at wait_for_aiohttp:42) else goto L60
L60:
    __mypyc_self__.__mypyc_temp__5 = r88; r89 = is_error
    if not r89 goto L87 (error at wait_for_aiohttp:-1) else goto L61 :: bool
L61:
    r90 = __mypyc_self__.__mypyc_temp__5
    if is_error(r90) goto L87 (error at wait_for_aiohttp:-1) else goto L62
L62:
    r91 = CPyIter_Next(r90)
    dec_ref r90
    if is_error(r91) goto L63 else goto L65
L63:
    r92 = CPy_FetchStopIterationValue()
    if is_error(r92) goto L87 (error at wait_for_aiohttp:42) else goto L64
L64:
    r93 = r92
    dec_ref r93
    r94 = <error> :: object
    __mypyc_self__.__mypyc_temp__5 = r94; r95 = is_error
    if not r95 goto L87 (error at wait_for_aiohttp:42) else goto L129 :: bool
L65:
    r96 = r91
L66:
    __mypyc_self__.__mypyc_next_label__ = 2
    return r96
L67:
    r98 = load_address _Py_NoneStruct
    r99 = type != r98
    if r99 goto L68 else goto L240 :: bool
L68:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L71 (error at wait_for_aiohttp:42) else goto L241 :: bool
L69:
    unreachable
L70:
    inc_ref arg
    goto L82
L71:
    r100 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__6 = r100; r101 = is_error
    if not r101 goto L242 (error at wait_for_aiohttp:-1) else goto L72 :: bool
L72:
    r102 = load_address r3
    r103 = __mypyc_self__.__mypyc_temp__5
    if is_error(r103) goto L242 (error at wait_for_aiohttp:-1) else goto L73
L73:
    r104 = CPy_YieldFromErrorHandle(r103, r102)
    dec_ref r103
    if is_error(r104) goto L242 (error at wait_for_aiohttp:42) else goto L74
L74:
    if r104 goto L77 else goto L75 :: bool
L75:
    r96 = r3
    r105 = __mypyc_self__.__mypyc_temp__6
    if is_error(r105) goto L243 (error at wait_for_aiohttp:-1) else goto L76
L76:
    CPy_RestoreExcInfo(r105)
    dec_ref r105
    goto L66
L77:
    r93 = r3
    dec_ref r93
    r106 = __mypyc_self__.__mypyc_temp__6
    if is_error(r106) goto L79 (error at wait_for_aiohttp:-1) else goto L78
L78:
    CPy_RestoreExcInfo(r106)
    dec_ref r106
    goto L129
L79:
    r107 = __mypyc_self__.__mypyc_temp__6
    if is_error(r107) goto L87 (error at wait_for_aiohttp:-1) else goto L80
L80:
    CPy_RestoreExcInfo(r107)
    dec_ref r107
    r108 = CPy_KeepPropagating()
    if not r108 goto L87 else goto L81 :: bool
L81:
    unreachable
L82:
    r109 = __mypyc_self__.__mypyc_temp__5
    if is_error(r109) goto L244 (error at wait_for_aiohttp:-1) else goto L83
L83:
    r110 = CPyIter_Send(r109, arg)
    dec_ref r109
    dec_ref arg
    if is_error(r110) goto L85 else goto L84
L84:
    r96 = r110
    goto L66
L85:
    r111 = CPy_FetchStopIterationValue()
    if is_error(r111) goto L87 (error at wait_for_aiohttp:42) else goto L86
L86:
    r93 = r111
    dec_ref r93
    goto L129
L87:
    r112 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__7 = r112; r113 = is_error
    if not r113 goto L126 (error at wait_for_aiohttp:-1) else goto L88 :: bool
L88:
    __mypyc_self__.__mypyc_temp__2 = 0; r114 = is_error
    if not r114 goto L126 (error at wait_for_aiohttp:41) else goto L89 :: bool
L89:
    r115 = CPy_GetExcInfo()
    r116 = r115[0]
    r117 = r115[1]
    r118 = r115[2]
    dec_ref r115
    r119 = __mypyc_self__.__mypyc_temp__0
    if is_error(r119) goto L245 (error at wait_for_aiohttp:-1) else goto L90
L90:
    r120 = __mypyc_self__.__mypyc_temp__1
    if is_error(r120) goto L246 (error at wait_for_aiohttp:-1) else goto L91
L91:
    r121 = [r120, r116, r117, r118]
    r122 = load_address r121
    r123 = PyObject_Vectorcall(r119, r122, 4, 0)
    dec_ref r119
    if is_error(r123) goto L247 (error at wait_for_aiohttp:41) else goto L92
L92:
    dec_ref r120
    dec_ref r116
    dec_ref r117
    dec_ref r118
    r124 = CPy_GetCoro(r123)
    dec_ref r123
    if is_error(r124) goto L126 (error at wait_for_aiohttp:41) else goto L93
L93:
    __mypyc_self__.__mypyc_temp__8 = r124; r125 = is_error
    if not r125 goto L126 (error at wait_for_aiohttp:-1) else goto L94 :: bool
L94:
    r126 = __mypyc_self__.__mypyc_temp__8
    if is_error(r126) goto L126 (error at wait_for_aiohttp:-1) else goto L95
L95:
    r127 = CPyIter_Next(r126)
    dec_ref r126
    if is_error(r127) goto L96 else goto L98
L96:
    r128 = CPy_FetchStopIterationValue()
    if is_error(r128) goto L126 (error at wait_for_aiohttp:41) else goto L97
L97:
    r129 = r128
    r130 = <error> :: object
    __mypyc_self__.__mypyc_temp__8 = r130; r131 = is_error
    if not r131 goto L248 (error at wait_for_aiohttp:41) else goto L120 :: bool
L98:
    r132 = r127
L99:
    __mypyc_self__.__mypyc_next_label__ = 3
    return r132
L100:
    r134 = load_address _Py_NoneStruct
    r135 = type != r134
    if r135 goto L101 else goto L249 :: bool
L101:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L104 (error at wait_for_aiohttp:41) else goto L250 :: bool
L102:
    unreachable
L103:
    inc_ref arg
    goto L115
L104:
    r136 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__9 = r136; r137 = is_error
    if not r137 goto L251 (error at wait_for_aiohttp:-1) else goto L105 :: bool
L105:
    r138 = load_address r5
    r139 = __mypyc_self__.__mypyc_temp__8
    if is_error(r139) goto L251 (error at wait_for_aiohttp:-1) else goto L106
L106:
    r140 = CPy_YieldFromErrorHandle(r139, r138)
    dec_ref r139
    if is_error(r140) goto L251 (error at wait_for_aiohttp:41) else goto L107
L107:
    if r140 goto L110 else goto L108 :: bool
L108:
    r132 = r5
    r141 = __mypyc_self__.__mypyc_temp__9
    if is_error(r141) goto L252 (error at wait_for_aiohttp:-1) else goto L109
L109:
    CPy_RestoreExcInfo(r141)
    dec_ref r141
    goto L99
L110:
    r129 = r5
    r142 = __mypyc_self__.__mypyc_temp__9
    if is_error(r142) goto L253 (error at wait_for_aiohttp:-1) else goto L111
L111:
    CPy_RestoreExcInfo(r142)
    dec_ref r142
    goto L120
L112:
    r143 = __mypyc_self__.__mypyc_temp__9
    if is_error(r143) goto L126 (error at wait_for_aiohttp:-1) else goto L113
L113:
    CPy_RestoreExcInfo(r143)
    dec_ref r143
    r144 = CPy_KeepPropagating()
    if not r144 goto L126 else goto L114 :: bool
L114:
    unreachable
L115:
    r145 = __mypyc_self__.__mypyc_temp__8
    if is_error(r145) goto L254 (error at wait_for_aiohttp:-1) else goto L116
L116:
    r146 = CPyIter_Send(r145, arg)
    dec_ref r145
    dec_ref arg
    if is_error(r146) goto L118 else goto L117
L117:
    r132 = r146
    goto L99
L118:
    r147 = CPy_FetchStopIterationValue()
    if is_error(r147) goto L126 (error at wait_for_aiohttp:41) else goto L119
L119:
    r129 = r147
L120:
    r148 = PyObject_IsTrue(r129)
    dec_ref r129
    r149 = r148 >= 0 :: signed
    if not r149 goto L126 (error at wait_for_aiohttp:-1) else goto L121 :: bool
L121:
    r150 = truncate r148: i32 to builtins.bool
    if r150 goto L124 else goto L122 :: bool
L122:
    CPy_Reraise()
    if not 0 goto L126 else goto L123 :: bool
L123:
    unreachable
L124:
    r151 = __mypyc_self__.__mypyc_temp__7
    if is_error(r151) goto L130 (error at wait_for_aiohttp:-1) else goto L125
L125:
    CPy_RestoreExcInfo(r151)
    dec_ref r151
    goto L129
L126:
    r152 = __mypyc_self__.__mypyc_temp__7
    if is_error(r152) goto L130 (error at wait_for_aiohttp:-1) else goto L127
L127:
    CPy_RestoreExcInfo(r152)
    dec_ref r152
    r153 = CPy_KeepPropagating()
    if not r153 goto L130 else goto L128 :: bool
L128:
    unreachable
L129:
    r154 = <error> :: tuple[object, object, object]
    r9 = r154
    goto L131
L130:
    r155 = CPy_CatchError()
    r9 = r155
L131:
    r156 = __mypyc_self__.__mypyc_temp__2
    if is_error(r156) goto L167 (error at wait_for_aiohttp:-1) else goto L132
L132:
    if r156 goto L133 else goto L164 :: bool
L133:
    r157 = load_address _Py_NoneStruct
    r158 = __mypyc_self__.__mypyc_temp__0
    if is_error(r158) goto L167 (error at wait_for_aiohttp:-1) else goto L134
L134:
    r159 = __mypyc_self__.__mypyc_temp__1
    if is_error(r159) goto L255 (error at wait_for_aiohttp:-1) else goto L135
L135:
    r160 = [r159, r157, r157, r157]
    r161 = load_address r160
    r162 = PyObject_Vectorcall(r158, r161, 4, 0)
    dec_ref r158
    if is_error(r162) goto L256 (error at wait_for_aiohttp:41) else goto L136
L136:
    dec_ref r159
    r163 = CPy_GetCoro(r162)
    dec_ref r162
    if is_error(r163) goto L167 (error at wait_for_aiohttp:41) else goto L137
L137:
    __mypyc_self__.__mypyc_temp__10 = r163; r164 = is_error
    if not r164 goto L167 (error at wait_for_aiohttp:-1) else goto L138 :: bool
L138:
    r165 = __mypyc_self__.__mypyc_temp__10
    if is_error(r165) goto L167 (error at wait_for_aiohttp:-1) else goto L139
L139:
    r166 = CPyIter_Next(r165)
    dec_ref r165
    if is_error(r166) goto L140 else goto L257
L140:
    r167 = CPy_FetchStopIterationValue()
    if is_error(r167) goto L167 (error at wait_for_aiohttp:41) else goto L141
L141:
    r168 = r167
    dec_ref r168
    r169 = <error> :: object
    __mypyc_self__.__mypyc_temp__10 = r169; r170 = is_error
    if not r170 goto L167 (error at wait_for_aiohttp:41) else goto L164 :: bool
L142:
    r171 = r166
L143:
    __mypyc_self__.__mypyc_next_label__ = 4
    return r171
L144:
    r173 = load_address _Py_NoneStruct
    r174 = type != r173
    if r174 goto L145 else goto L258 :: bool
L145:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L148 (error at wait_for_aiohttp:41) else goto L259 :: bool
L146:
    unreachable
L147:
    inc_ref arg
    goto L159
L148:
    r175 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__11 = r175; r176 = is_error
    if not r176 goto L260 (error at wait_for_aiohttp:-1) else goto L149 :: bool
L149:
    r177 = load_address r7
    r178 = __mypyc_self__.__mypyc_temp__10
    if is_error(r178) goto L260 (error at wait_for_aiohttp:-1) else goto L150
L150:
    r179 = CPy_YieldFromErrorHandle(r178, r177)
    dec_ref r178
    if is_error(r179) goto L260 (error at wait_for_aiohttp:41) else goto L151
L151:
    if r179 goto L154 else goto L152 :: bool
L152:
    r171 = r7
    r180 = __mypyc_self__.__mypyc_temp__11
    if is_error(r180) goto L261 (error at wait_for_aiohttp:-1) else goto L262
L153:
    CPy_RestoreExcInfo(r180)
    dec_ref r180
    goto L143
L154:
    r168 = r7
    dec_ref r168
    r181 = __mypyc_self__.__mypyc_temp__11
    if is_error(r181) goto L156 (error at wait_for_aiohttp:-1) else goto L155
L155:
    CPy_RestoreExcInfo(r181)
    dec_ref r181
    goto L164
L156:
    r182 = __mypyc_self__.__mypyc_temp__11
    if is_error(r182) goto L167 (error at wait_for_aiohttp:-1) else goto L157
L157:
    CPy_RestoreExcInfo(r182)
    dec_ref r182
    r183 = CPy_KeepPropagating()
    if not r183 goto L167 else goto L263 :: bool
L158:
    unreachable
L159:
    r184 = __mypyc_self__.__mypyc_temp__10
    if is_error(r184) goto L264 (error at wait_for_aiohttp:-1) else goto L160
L160:
    r185 = CPyIter_Send(r184, arg)
    dec_ref r184
    dec_ref arg
    if is_error(r185) goto L162 else goto L265
L161:
    r171 = r185
    goto L143
L162:
    r186 = CPy_FetchStopIterationValue()
    if is_error(r186) goto L167 (error at wait_for_aiohttp:41) else goto L163
L163:
    r168 = r186
    dec_ref r168
L164:
    if is_error(r9) goto L213 else goto L165
L165:
    CPy_Reraise()
    if not 0 goto L167 else goto L266 :: bool
L166:
    unreachable
L167:
    if is_error(r9) goto L169 else goto L168
L168:
    CPy_RestoreExcInfo(r9)
    xdec_ref r9
L169:
    r187 = CPy_KeepPropagating()
    if not r187 goto L171 else goto L170 :: bool
L170:
    unreachable
L171:
    r188 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__12 = r188; r189 = is_error
    if not r189 goto L210 (error at wait_for_aiohttp:-1) else goto L172 :: bool
L172:
    r190 = faster_web3.tools.benchmark.utils.globals :: static
    r191 = 'aiohttp'
    r192 = CPyDict_GetItem(r190, r191)
    if is_error(r192) goto L210 (error at wait_for_aiohttp:43) else goto L173
L173:
    r193 = 'client_exceptions'
    r194 = CPyObject_GetAttr(r192, r193)
    dec_ref r192
    if is_error(r194) goto L210 (error at wait_for_aiohttp:43) else goto L174
L174:
    r195 = 'ClientConnectorError'
    r196 = CPyObject_GetAttr(r194, r195)
    dec_ref r194
    if is_error(r196) goto L210 (error at wait_for_aiohttp:43) else goto L175
L175:
    r197 = CPy_ExceptionMatches(r196)
    dec_ref r196
    if r197 goto L176 else goto L206 :: bool
L176:
    r198 = asyncio :: module
    r199 = 'sleep'
    r200 = CPyObject_GetAttr(r198, r199)
    if is_error(r200) goto L210 (error at wait_for_aiohttp:44) else goto L177
L177:
    r201 = box(float, 0.01)
    r202 = [r201]
    r203 = load_address r202
    r204 = PyObject_Vectorcall(r200, r203, 1, 0)
    dec_ref r200
    if is_error(r204) goto L267 (error at wait_for_aiohttp:44) else goto L178
L178:
    dec_ref r201
    r205 = CPy_GetCoro(r204)
    dec_ref r204
    if is_error(r205) goto L210 (error at wait_for_aiohttp:44) else goto L179
L179:
    __mypyc_self__.__mypyc_temp__13 = r205; r206 = is_error
    if not r206 goto L210 (error at wait_for_aiohttp:-1) else goto L180 :: bool
L180:
    r207 = __mypyc_self__.__mypyc_temp__13
    if is_error(r207) goto L210 (error at wait_for_aiohttp:-1) else goto L181
L181:
    r208 = CPyIter_Next(r207)
    dec_ref r207
    if is_error(r208) goto L182 else goto L184
L182:
    r209 = CPy_FetchStopIterationValue()
    if is_error(r209) goto L210 (error at wait_for_aiohttp:44) else goto L183
L183:
    r210 = r209
    dec_ref r210
    r211 = <error> :: object
    __mypyc_self__.__mypyc_temp__13 = r211; r212 = is_error
    if not r212 goto L210 (error at wait_for_aiohttp:44) else goto L208 :: bool
L184:
    r213 = r208
L185:
    __mypyc_self__.__mypyc_next_label__ = 5
    return r213
L186:
    r215 = load_address _Py_NoneStruct
    r216 = type != r215
    if r216 goto L187 else goto L268 :: bool
L187:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L190 (error at wait_for_aiohttp:44) else goto L269 :: bool
L188:
    unreachable
L189:
    inc_ref arg
    goto L201
L190:
    r217 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__14 = r217; r218 = is_error
    if not r218 goto L270 (error at wait_for_aiohttp:-1) else goto L191 :: bool
L191:
    r219 = load_address r11
    r220 = __mypyc_self__.__mypyc_temp__13
    if is_error(r220) goto L270 (error at wait_for_aiohttp:-1) else goto L192
L192:
    r221 = CPy_YieldFromErrorHandle(r220, r219)
    dec_ref r220
    if is_error(r221) goto L270 (error at wait_for_aiohttp:44) else goto L193
L193:
    if r221 goto L196 else goto L194 :: bool
L194:
    r213 = r11
    r222 = __mypyc_self__.__mypyc_temp__14
    if is_error(r222) goto L271 (error at wait_for_aiohttp:-1) else goto L195
L195:
    CPy_RestoreExcInfo(r222)
    dec_ref r222
    goto L185
L196:
    r210 = r11
    dec_ref r210
    r223 = __mypyc_self__.__mypyc_temp__14
    if is_error(r223) goto L198 (error at wait_for_aiohttp:-1) else goto L197
L197:
    CPy_RestoreExcInfo(r223)
    dec_ref r223
    goto L208
L198:
    r224 = __mypyc_self__.__mypyc_temp__14
    if is_error(r224) goto L210 (error at wait_for_aiohttp:-1) else goto L199
L199:
    CPy_RestoreExcInfo(r224)
    dec_ref r224
    r225 = CPy_KeepPropagating()
    if not r225 goto L210 else goto L200 :: bool
L200:
    unreachable
L201:
    r226 = __mypyc_self__.__mypyc_temp__13
    if is_error(r226) goto L272 (error at wait_for_aiohttp:-1) else goto L202
L202:
    r227 = CPyIter_Send(r226, arg)
    dec_ref r226
    dec_ref arg
    if is_error(r227) goto L204 else goto L203
L203:
    r213 = r227
    goto L185
L204:
    r228 = CPy_FetchStopIterationValue()
    if is_error(r228) goto L210 (error at wait_for_aiohttp:44) else goto L205
L205:
    r210 = r228
    dec_ref r210
    goto L208
L206:
    CPy_Reraise()
    if not 0 goto L210 else goto L207 :: bool
L207:
    unreachable
L208:
    r229 = __mypyc_self__.__mypyc_temp__12
    if is_error(r229) goto L226 (error at wait_for_aiohttp:-1) else goto L209
L209:
    CPy_RestoreExcInfo(r229)
    dec_ref r229
    goto L9
L210:
    r230 = __mypyc_self__.__mypyc_temp__12
    if is_error(r230) goto L226 (error at wait_for_aiohttp:-1) else goto L211
L211:
    CPy_RestoreExcInfo(r230)
    dec_ref r230
    r231 = CPy_KeepPropagating()
    if not r231 goto L226 else goto L212 :: bool
L212:
    unreachable
L213:
    r232 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L214:
    if is_error(stop_iter_ptr) goto L215 else goto L217
L215:
    CPyGen_SetStopIterationValue(r232)
    if not 0 goto L226 else goto L216 :: bool
L216:
    unreachable
L217:
    inc_ref r232
    set_mem stop_iter_ptr, r232 :: builtins.object*
    return 0
L218:
    r234 = r12 == 0
    if r234 goto L273 else goto L219 :: bool
L219:
    r235 = r12 == 1
    if r235 goto L274 else goto L275 :: bool
L220:
    r236 = r12 == 2
    if r236 goto L276 else goto L277 :: bool
L221:
    r237 = r12 == 3
    if r237 goto L278 else goto L279 :: bool
L222:
    r238 = r12 == 4
    if r238 goto L280 else goto L281 :: bool
L223:
    r239 = r12 == 5
    if r239 goto L186 else goto L282 :: bool
L224:
    r240 = raise StopIteration
    if not r240 goto L226 (error at wait_for_aiohttp:37) else goto L225 :: bool
L225:
    unreachable
L226:
    r241 = <error> :: object
    return r241
L227:
    dec_ref r41
    goto L171
L228:
    dec_ref r45
    dec_ref r46
    goto L171
L229:
    dec_ref r45
    goto L171
L230:
    dec_ref r54
    goto L171
L231:
    dec_ref r62
    goto L171
L232:
    xdec_ref r1
    goto L38
L233:
    xdec_ref r1
    goto L37
L234:
    xdec_ref r1
    goto L47
L235:
    dec_ref r65
    goto L47
L236:
    dec_ref r62
    goto L47
L237:
    dec_ref arg
    goto L171
L238:
    dec_ref r82
    goto L87
L239:
    dec_ref r82
    dec_ref r83
    goto L87
L240:
    xdec_ref r3
    goto L70
L241:
    xdec_ref r3
    goto L69
L242:
    xdec_ref r3
    goto L79
L243:
    dec_ref r96
    goto L79
L244:
    dec_ref arg
    goto L87
L245:
    dec_ref r116
    dec_ref r117
    dec_ref r118
    goto L126
L246:
    dec_ref r116
    dec_ref r117
    dec_ref r118
    dec_ref r119
    goto L126
L247:
    dec_ref r116
    dec_ref r117
    dec_ref r118
    dec_ref r120
    goto L126
L248:
    dec_ref r129
    goto L126
L249:
    xdec_ref r5
    goto L103
L250:
    xdec_ref r5
    goto L102
L251:
    xdec_ref r5
    goto L112
L252:
    dec_ref r132
    goto L112
L253:
    dec_ref r129
    goto L112
L254:
    dec_ref arg
    goto L126
L255:
    dec_ref r158
    goto L167
L256:
    dec_ref r159
    goto L167
L257:
    xdec_ref r9
    goto L142
L258:
    xdec_ref r7
    goto L147
L259:
    xdec_ref r7
    xdec_ref r9
    goto L146
L260:
    xdec_ref r7
    goto L156
L261:
    dec_ref r171
    goto L156
L262:
    xdec_ref r9
    goto L153
L263:
    xdec_ref r9
    goto L158
L264:
    dec_ref arg
    goto L167
L265:
    xdec_ref r9
    goto L161
L266:
    xdec_ref r9
    goto L166
L267:
    dec_ref r201
    goto L210
L268:
    xdec_ref r11
    goto L189
L269:
    xdec_ref r11
    goto L188
L270:
    xdec_ref r11
    goto L198
L271:
    dec_ref r213
    goto L198
L272:
    dec_ref arg
    goto L210
L273:
    xdec_ref r1
    xdec_ref r3
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    goto L1
L274:
    xdec_ref r3
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    goto L35
L275:
    xdec_ref r1
    goto L220
L276:
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    goto L67
L277:
    xdec_ref r3
    goto L221
L278:
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    goto L100
L279:
    xdec_ref r5
    goto L222
L280:
    xdec_ref r11
    goto L144
L281:
    xdec_ref r7
    xdec_ref r9
    goto L223
L282:
    xdec_ref r11
    goto L224

def wait_for_aiohttp_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wait_for_aiohttp_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wait_for_aiohttp_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wait_for_aiohttp_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wait_for_aiohttp_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wait_for_aiohttp_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = wait_for_aiohttp_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def wait_for_aiohttp_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def wait_for_aiohttp_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wait_for_aiohttp(endpoint_uri, timeout):
    endpoint_uri :: str
    timeout :: int
    r0 :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
L0:
    if is_error(timeout) goto L1 else goto L7
L1:
    timeout = 120
L2:
    r0 = wait_for_aiohttp_gen()
    if is_error(r0) goto L8 (error at wait_for_aiohttp:37) else goto L3
L3:
    r0.__mypyc_next_label__ = 0
    inc_ref endpoint_uri
    r0.__mypyc_generator_attribute__endpoint_uri = endpoint_uri; r2 = is_error
    if not r2 goto L9 (error at wait_for_aiohttp:37) else goto L4 :: bool
L4:
    r0.__mypyc_generator_attribute__timeout = timeout; r3 = is_error
    if not r3 goto L10 (error at wait_for_aiohttp:37) else goto L5 :: bool
L5:
    return r0
L6:
    r4 = <error> :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    return r4
L7:
    inc_ref timeout :: int
    goto L2
L8:
    dec_ref timeout :: int
    goto L6
L9:
    dec_ref timeout :: int
    dec_ref r0
    goto L6
L10:
    dec_ref r0
    goto L6

def wait_for_popen(proc, timeout):
    proc :: object
    timeout :: int
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: float
    r5 :: bit
    r6, r7 :: object
    r8 :: str
    r9, r10 :: object
    r11 :: float
    r12 :: bit
    r13 :: float
    r14 :: bit
    r15 :: object
    r16 :: float
    r17 :: bit
    r18 :: object
    r19 :: str
    r20 :: object[1]
    r21 :: object_ptr
    r22, r23 :: object
    r24 :: bit
    r25 :: object
    r26 :: str
    r27, r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31 :: object
    r32 :: None
L0:
    r0 = time :: module
    r1 = 'time'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L18 (error at wait_for_popen:50) else goto L1
L1:
    r3 = PyObject_Vectorcall(r2, 0, 0, 0)
    dec_ref r2
    if is_error(r3) goto L18 (error at wait_for_popen:50) else goto L2
L2:
    r4 = unbox(float, r3)
    dec_ref r3
    r5 = r4 == -113.0
    if r5 goto L4 else goto L3 :: bool
L3:
    goto L5
L4:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L18 (error at wait_for_popen:50) else goto L3
L5:
    r7 = time :: module
    r8 = 'time'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L18 (error at wait_for_popen:51) else goto L6
L6:
    r10 = PyObject_Vectorcall(r9, 0, 0, 0)
    dec_ref r9
    if is_error(r10) goto L18 (error at wait_for_popen:51) else goto L7
L7:
    r11 = unbox(float, r10)
    dec_ref r10
    r12 = r11 == -113.0
    if r12 goto L9 else goto L8 :: bool
L8:
    r13 = CPyFloat_FromTagged(timeout)
    r14 = r13 == -113.0
    if r14 goto L11 else goto L10 :: bool
L9:
    r15 = PyErr_Occurred()
    if not is_error(r15) goto L18 (error at wait_for_popen:51) else goto L8
L10:
    r16 = r4 + r13
    r17 = r11 < r16
    if r17 goto L12 else goto L17 :: bool
L11:
    r18 = PyErr_Occurred()
    if not is_error(r18) goto L18 (error at wait_for_popen:51) else goto L10
L12:
    r19 = 'poll'
    r20 = [proc]
    r21 = load_address r20
    r22 = PyObject_VectorcallMethod(r19, r21, 9223372036854775809, 0)
    if is_error(r22) goto L18 (error at wait_for_popen:52) else goto L13
L13:
    r23 = load_address _Py_NoneStruct
    r24 = r22 == r23
    dec_ref r22
    if r24 goto L14 else goto L17 :: bool
L14:
    r25 = time :: module
    r26 = 'sleep'
    r27 = CPyObject_GetAttr(r25, r26)
    if is_error(r27) goto L18 (error at wait_for_popen:53) else goto L15
L15:
    r28 = box(float, 0.01)
    r29 = [r28]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r27, r30, 1, 0)
    dec_ref r27
    if is_error(r31) goto L19 (error at wait_for_popen:53) else goto L20
L16:
    dec_ref r28
    goto L5
L17:
    return 1
L18:
    r32 = <error> :: None
    return r32
L19:
    dec_ref r28
    goto L18
L20:
    dec_ref r31
    goto L16

def kill_proc_gracefully(proc):
    proc :: object
    r0 :: str
    r1 :: object[1]
    r2 :: object_ptr
    r3, r4 :: object
    r5 :: bit
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: str
    r10 :: object[2]
    r11 :: object_ptr
    r12 :: object
    r13 :: None
    r14 :: str
    r15 :: object[1]
    r16 :: object_ptr
    r17, r18 :: object
    r19 :: bit
    r20 :: str
    r21 :: object[1]
    r22 :: object_ptr
    r23 :: object
    r24 :: None
    r25 :: str
    r26 :: object[1]
    r27 :: object_ptr
    r28, r29 :: object
    r30 :: bit
    r31 :: str
    r32 :: object[1]
    r33 :: object_ptr
    r34 :: object
    r35, r36 :: None
L0:
    r0 = 'poll'
    r1 = [proc]
    r2 = load_address r1
    r3 = PyObject_VectorcallMethod(r0, r2, 9223372036854775809, 0)
    if is_error(r3) goto L14 (error at kill_proc_gracefully:59) else goto L1
L1:
    r4 = load_address _Py_NoneStruct
    r5 = r3 == r4
    dec_ref r3
    if r5 goto L2 else goto L5 :: bool
L2:
    r6 = signal :: module
    r7 = 'SIGINT'
    r8 = CPyObject_GetAttr(r6, r7)
    if is_error(r8) goto L14 (error at kill_proc_gracefully:60) else goto L3
L3:
    r9 = 'send_signal'
    r10 = [proc, r8]
    r11 = load_address r10
    r12 = PyObject_VectorcallMethod(r9, r11, 9223372036854775810, 0)
    if is_error(r12) goto L15 (error at kill_proc_gracefully:60) else goto L16
L4:
    dec_ref r8
    r13 = wait_for_popen(proc, 26)
    if is_error(r13) goto L14 (error at kill_proc_gracefully:61) else goto L5
L5:
    r14 = 'poll'
    r15 = [proc]
    r16 = load_address r15
    r17 = PyObject_VectorcallMethod(r14, r16, 9223372036854775809, 0)
    if is_error(r17) goto L14 (error at kill_proc_gracefully:63) else goto L6
L6:
    r18 = load_address _Py_NoneStruct
    r19 = r17 == r18
    dec_ref r17
    if r19 goto L7 else goto L9 :: bool
L7:
    r20 = 'terminate'
    r21 = [proc]
    r22 = load_address r21
    r23 = PyObject_VectorcallMethod(r20, r22, 9223372036854775809, 0)
    if is_error(r23) goto L14 (error at kill_proc_gracefully:64) else goto L17
L8:
    r24 = wait_for_popen(proc, 10)
    if is_error(r24) goto L14 (error at kill_proc_gracefully:65) else goto L9
L9:
    r25 = 'poll'
    r26 = [proc]
    r27 = load_address r26
    r28 = PyObject_VectorcallMethod(r25, r27, 9223372036854775809, 0)
    if is_error(r28) goto L14 (error at kill_proc_gracefully:67) else goto L10
L10:
    r29 = load_address _Py_NoneStruct
    r30 = r28 == r29
    dec_ref r28
    if r30 goto L11 else goto L13 :: bool
L11:
    r31 = 'kill'
    r32 = [proc]
    r33 = load_address r32
    r34 = PyObject_VectorcallMethod(r31, r33, 9223372036854775809, 0)
    if is_error(r34) goto L14 (error at kill_proc_gracefully:68) else goto L18
L12:
    r35 = wait_for_popen(proc, 4)
    if is_error(r35) goto L14 (error at kill_proc_gracefully:69) else goto L13
L13:
    return 1
L14:
    r36 = <error> :: None
    return r36
L15:
    dec_ref r8
    goto L14
L16:
    dec_ref r12
    goto L4
L17:
    dec_ref r23
    goto L8
L18:
    dec_ref r34
    goto L12

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5, r6, r7, r8 :: object_ptr
    r9 :: object_ptr[4]
    r10 :: c_ptr
    r11 :: native_int[4]
    r12 :: c_ptr
    r13 :: object
    r14 :: dict
    r15, r16 :: str
    r17 :: bit
    r18 :: object
    r19 :: str
    r20 :: dict
    r21 :: object
    r22, r23 :: object_ptr
    r24 :: object_ptr[2]
    r25 :: c_ptr
    r26 :: native_int[2]
    r27 :: c_ptr
    r28 :: object
    r29 :: dict
    r30, r31 :: str
    r32 :: bit
    r33 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L7 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address asyncio :: module
    r6 = load_address signal :: module
    r7 = load_address socket :: module
    r8 = load_address time :: module
    r9 = [r5, r6, r7, r8]
    r10 = load_address r9
    r11 = [1, 2, 3, 4]
    r12 = load_address r11
    r13 = (('asyncio', 'asyncio', 'asyncio'), ('signal', 'signal', 'signal'), ('socket', 'socket', 'socket'), ('time', 'time', 'time'))
    r14 = faster_web3.tools.benchmark.utils.globals :: static
    r15 = 'faster_web3/tools/benchmark/utils.py'
    r16 = '<module>'
    r17 = CPyImport_ImportMany(r13, r10, r14, r15, r16, r12)
    if not r17 goto L7 else goto L4 :: bool
L4:
    r18 = ('Any',)
    r19 = 'typing'
    r20 = faster_web3.tools.benchmark.utils.globals :: static
    r21 = CPyImport_ImportFromMany(r19, r18, r18, r20)
    if is_error(r21) goto L7 (error at <module>:5) else goto L5
L5:
    typing = r21 :: module
    dec_ref r21
    r22 = load_address aiohttp :: module
    r23 = load_address requests :: module
    r24 = [r22, r23]
    r25 = load_address r24
    r26 = [9, 10]
    r27 = load_address r26
    r28 = (('aiohttp', 'aiohttp', 'aiohttp'), ('requests', 'requests', 'requests'))
    r29 = faster_web3.tools.benchmark.utils.globals :: static
    r30 = 'faster_web3/tools/benchmark/utils.py'
    r31 = '<module>'
    r32 = CPyImport_ImportMany(r28, r25, r29, r30, r31, r27)
    if not r32 goto L7 else goto L6 :: bool
L6:
    return 1
L7:
    r33 = <error> :: None
    return r33

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: dict
    r14 :: str
    r15, r16 :: object
    r17 :: dict
    r18 :: str
    r19 :: i32
    r20 :: bit
    r21 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L9 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = faster_web3.auto.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L9 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('Web3',)
    r10 = 'faster_web3'
    r11 = faster_web3.auto.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L9 (error at <module>:5) else goto L5
L5:
    faster_web3 = r12 :: module
    dec_ref r12
    r13 = faster_web3.auto.globals :: static
    r14 = 'Web3'
    r15 = CPyDict_GetItem(r13, r14)
    if is_error(r15) goto L9 (error at <module>:9) else goto L6
L6:
    r16 = PyObject_Vectorcall(r15, 0, 0, 0)
    dec_ref r15
    if is_error(r16) goto L9 (error at <module>:9) else goto L7
L7:
    faster_web3.auto.w3 = r16 :: static
    r17 = faster_web3.auto.globals :: static
    r18 = 'w3'
    r19 = CPyDict_SetItem(r17, r18, r16)
    dec_ref r16
    r20 = r19 >= 0 :: signed
    if not r20 goto L9 (error at <module>:9) else goto L8 :: bool
L8:
    return 1
L9:
    r21 = <error> :: None
    return r21

def all_in_dict(values, d):
    values :: object
    d :: union[object, dict]
    r0 :: dict
    r1 :: bool
    r2, r3 :: object
    r4 :: dict
    r5 :: i32
    r6 :: bit
    r7, r8 :: bool
    r9 :: bit
    r10 :: bool
L0:
    r0 = CPyDict_FromAny(d)
    if is_error(r0) goto L9 (error at all_in_dict:27) else goto L1
L1:
    d = r0
    r1 = 1
    r2 = PyObject_GetIter(values)
    if is_error(r2) goto L10 (error at all_in_dict:28) else goto L2
L2:
    r3 = PyIter_Next(r2)
    if is_error(r3) goto L11 else goto L3
L3:
    inc_ref d
    r4 = cast(dict, d)
    if is_error(r4) goto L12 (error at all_in_dict:28) else goto L4
L4:
    r5 = PyDict_Contains(r4, r3)
    dec_ref r4
    dec_ref r3
    r6 = r5 >= 0 :: signed
    if not r6 goto L13 (error at all_in_dict:28) else goto L5 :: bool
L5:
    r7 = truncate r5: i32 to builtins.bool
    r8 = r7 ^ 1
    if r8 goto L14 else goto L2 :: bool
L6:
    r1 = 0
    goto L8
L7:
    r9 = CPy_NoErrOccurred()
    if not r9 goto L9 (error at all_in_dict:28) else goto L8 :: bool
L8:
    return r1
L9:
    r10 = <error> :: bool
    return r10
L10:
    dec_ref d
    goto L9
L11:
    dec_ref d
    dec_ref r2
    goto L7
L12:
    dec_ref d
    dec_ref r2
    dec_ref r3
    goto L9
L13:
    dec_ref d
    dec_ref r2
    goto L9
L14:
    dec_ref d
    dec_ref r2
    goto L6

def any_in_dict(values, d):
    values :: object
    d :: union[object, dict]
    r0 :: dict
    r1 :: bool
    r2, r3 :: object
    r4 :: dict
    r5 :: i32
    r6 :: bit
    r7 :: bool
    r8 :: bit
    r9 :: bool
L0:
    r0 = CPyDict_FromAny(d)
    if is_error(r0) goto L9 (error at any_in_dict:43) else goto L1
L1:
    d = r0
    r1 = 0
    r2 = PyObject_GetIter(values)
    if is_error(r2) goto L10 (error at any_in_dict:44) else goto L2
L2:
    r3 = PyIter_Next(r2)
    if is_error(r3) goto L11 else goto L3
L3:
    inc_ref d
    r4 = cast(dict, d)
    if is_error(r4) goto L12 (error at any_in_dict:44) else goto L4
L4:
    r5 = PyDict_Contains(r4, r3)
    dec_ref r4
    dec_ref r3
    r6 = r5 >= 0 :: signed
    if not r6 goto L13 (error at any_in_dict:44) else goto L5 :: bool
L5:
    r7 = truncate r5: i32 to builtins.bool
    if r7 goto L14 else goto L2 :: bool
L6:
    r1 = 1
    goto L8
L7:
    r8 = CPy_NoErrOccurred()
    if not r8 goto L9 (error at any_in_dict:44) else goto L8 :: bool
L8:
    return r1
L9:
    r9 = <error> :: bool
    return r9
L10:
    dec_ref d
    goto L9
L11:
    dec_ref d
    dec_ref r2
    goto L7
L12:
    dec_ref d
    dec_ref r2
    dec_ref r3
    goto L9
L13:
    dec_ref d
    dec_ref r2
    goto L9
L14:
    dec_ref d
    dec_ref r2
    goto L6

def none_in_dict(values, d):
    values :: object
    d :: union[object, dict]
    r0, r1, r2 :: bool
L0:
    r0 = any_in_dict(values, d)
    if is_error(r0) goto L2 (error at none_in_dict:59) else goto L1
L1:
    r1 = r0 ^ 1
    return r1
L2:
    r2 = <error> :: bool
    return r2

def either_set_is_a_subset(set1, set2, percentage):
    set1, set2 :: set
    percentage :: int
    r0 :: float
    r1 :: bit
    r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5, r6 :: object
    r7 :: set
    r8 :: ptr
    r9 :: native_int
    r10 :: short_int
    r11 :: ptr
    r12 :: native_int
    r13 :: short_int
    r14, r15, r16 :: object
    r17 :: float
    r18 :: bit
    r19, r20, r21, r22 :: object
    r23, r24 :: bool
    r25 :: str
    r26 :: object[2]
    r27 :: object_ptr
    r28 :: object
    r29 :: set
    r30 :: ptr
    r31 :: native_int
    r32 :: short_int
    r33 :: ptr
    r34 :: native_int
    r35 :: short_int
    r36, r37, r38 :: object
    r39 :: float
    r40 :: bit
    r41, r42, r43, r44 :: object
    r45, r46 :: bool
L0:
    if is_error(percentage) goto L1 else goto L23
L1:
    percentage = 200
L2:
    r0 = CPyTagged_TrueDivide(percentage, 200)
    dec_ref percentage :: int
    r1 = r0 == -113.0
    if r1 goto L4 else goto L3 :: bool
L3:
    r2 = 'intersection'
    r3 = [set1, set2]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L22 (error at either_set_is_a_subset:82) else goto L5
L4:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L22 (error at either_set_is_a_subset:79) else goto L3
L5:
    r7 = cast(set, r5)
    if is_error(r7) goto L22 (error at either_set_is_a_subset:82) else goto L6
L6:
    r8 = get_element_ptr r7 used :: PySetObject
    r9 = load_mem r8 :: native_int*
    dec_ref r7
    r10 = r9 << 1
    r11 = get_element_ptr set1 used :: PySetObject
    r12 = load_mem r11 :: native_int*
    r13 = r12 << 1
    r14 = box(short_int, r13)
    r15 = box(float, r0)
    r16 = PyNumber_Multiply(r14, r15)
    dec_ref r14
    dec_ref r15
    if is_error(r16) goto L22 (error at either_set_is_a_subset:82) else goto L7
L7:
    r17 = unbox(float, r16)
    dec_ref r16
    r18 = r17 == -113.0
    if r18 goto L9 else goto L8 :: bool
L8:
    r19 = box(short_int, r10)
    r20 = box(float, r17)
    r21 = PyObject_RichCompare(r19, r20, 5)
    dec_ref r19
    dec_ref r20
    if is_error(r21) goto L22 (error at either_set_is_a_subset:82) else goto L10
L9:
    r22 = PyErr_Occurred()
    if not is_error(r22) goto L22 (error at either_set_is_a_subset:82) else goto L8
L10:
    r23 = unbox(bool, r21)
    dec_ref r21
    if is_error(r23) goto L22 (error at either_set_is_a_subset:82) else goto L11
L11:
    if r23 goto L12 else goto L13 :: bool
L12:
    r24 = r23
    goto L21
L13:
    r25 = 'intersection'
    r26 = [set2, set1]
    r27 = load_address r26
    r28 = PyObject_VectorcallMethod(r25, r27, 9223372036854775810, 0)
    if is_error(r28) goto L22 (error at either_set_is_a_subset:83) else goto L14
L14:
    r29 = cast(set, r28)
    if is_error(r29) goto L22 (error at either_set_is_a_subset:83) else goto L15
L15:
    r30 = get_element_ptr r29 used :: PySetObject
    r31 = load_mem r30 :: native_int*
    dec_ref r29
    r32 = r31 << 1
    r33 = get_element_ptr set2 used :: PySetObject
    r34 = load_mem r33 :: native_int*
    r35 = r34 << 1
    r36 = box(short_int, r35)
    r37 = box(float, r0)
    r38 = PyNumber_Multiply(r36, r37)
    dec_ref r36
    dec_ref r37
    if is_error(r38) goto L22 (error at either_set_is_a_subset:83) else goto L16
L16:
    r39 = unbox(float, r38)
    dec_ref r38
    r40 = r39 == -113.0
    if r40 goto L18 else goto L17 :: bool
L17:
    r41 = box(short_int, r32)
    r42 = box(float, r39)
    r43 = PyObject_RichCompare(r41, r42, 5)
    dec_ref r41
    dec_ref r42
    if is_error(r43) goto L22 (error at either_set_is_a_subset:83) else goto L19
L18:
    r44 = PyErr_Occurred()
    if not is_error(r44) goto L22 (error at either_set_is_a_subset:83) else goto L17
L19:
    r45 = unbox(bool, r43)
    dec_ref r43
    if is_error(r45) goto L22 (error at either_set_is_a_subset:83) else goto L20
L20:
    r24 = r45
L21:
    return r24
L22:
    r46 = <error> :: bool
    return r46
L23:
    inc_ref percentage :: int
    goto L2

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Any', 'Iterable', 'Mapping', 'Set', 'Union')
    r6 = 'typing'
    r7 = faster_web3._utils.utility_methods.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('TxData', 'TxParams')
    r10 = 'faster_web3.types'
    r11 = faster_web3._utils.utility_methods.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L6 (error at <module>:9) else goto L5
L5:
    faster_web3.types = r12 :: module
    dec_ref r12
    return 1
L6:
    r13 = <error> :: None
    return r13
