def to_hex_if_bytes(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1, r2 :: str
    r3 :: i32
    r4 :: bool
    r5, r6, r7, r8, r9, r10 :: str
    r11 :: object[3]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: list
    r16, r17, r18 :: ptr
    r19 :: str
    r20 :: dict
    r21 :: str
    r22 :: object
    r23 :: object[1]
    r24 :: object_ptr
    r25 :: object
    r26 :: str
    r27 :: object
    r28 :: bool
    r29 :: object[1]
    r30 :: object_ptr
    r31, r32 :: object
    r33 :: str
    r34, r35 :: object
    r36 :: str
    r37 :: object
    r38 :: tuple[object, object]
    r39 :: object
    r40 :: i32
    r41 :: bit
    r42 :: bool
    r43 :: object
    r44 :: bool
    r45 :: object[1]
    r46 :: object_ptr
    r47, r48, r49 :: object
    r50 :: bool
    r51 :: object[1]
    r52 :: object_ptr
    r53, r54 :: object
    r55, r56 :: str
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L19 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L34 (error at to_hex_if_bytes:26) else goto L2
L2:
    r2 = '0x'
    r3 = CPyStr_Startswith(r1, r2)
    dec_ref r1
    r4 = truncate r3: i32 to builtins.bool
    if r4 goto L12 else goto L3 :: bool
L3:
    r5 = ''
    r6 = 'Expected a hex string. Got: '
    r7 = '{!r:{}}'
    inc_ref val
    r8 = cast(str, val)
    if is_error(r8) goto L34 (error at to_hex_if_bytes:27) else goto L4
L4:
    r9 = ''
    r10 = 'format'
    r11 = [r7, r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775811, 0)
    if is_error(r13) goto L35 (error at to_hex_if_bytes:27) else goto L5
L5:
    dec_ref r8
    r14 = cast(str, r13)
    if is_error(r14) goto L34 (error at to_hex_if_bytes:27) else goto L6
L6:
    r15 = PyList_New(2)
    if is_error(r15) goto L36 (error at to_hex_if_bytes:27) else goto L7
L7:
    r16 = get_element_ptr r15 ob_item :: PyListObject
    r17 = load_mem r16 :: ptr*
    inc_ref r6
    set_mem r17, r6 :: builtins.object*
    r18 = r17 + 8
    set_mem r18, r14 :: builtins.object*
    r19 = PyUnicode_Join(r5, r15)
    dec_ref r15
    if is_error(r19) goto L34 (error at to_hex_if_bytes:27) else goto L8
L8:
    r20 = faster_web3._utils.type_conversion.globals :: static
    r21 = 'Web3ValueError'
    r22 = CPyDict_GetItem(r20, r21)
    if is_error(r22) goto L37 (error at to_hex_if_bytes:27) else goto L9
L9:
    r23 = [r19]
    r24 = load_address r23
    r25 = PyObject_Vectorcall(r22, r24, 1, 0)
    dec_ref r22
    if is_error(r25) goto L37 (error at to_hex_if_bytes:27) else goto L10
L10:
    dec_ref r19
    CPy_Raise(r25)
    dec_ref r25
    if not 0 goto L34 (error at to_hex_if_bytes:27) else goto L11 :: bool
L11:
    unreachable
L12:
    inc_ref val
    r26 = cast(str, val)
    if is_error(r26) goto L34 (error at to_hex_if_bytes:28) else goto L13
L13:
    r27 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r27) goto L38 else goto L16
L14:
    r28 = raise NameError('value for final name "to_hex" was not set')
    if not r28 goto L34 (error at to_hex_if_bytes:28) else goto L15 :: bool
L15:
    unreachable
L16:
    r29 = [r26]
    r30 = load_address r29
    r31 = ('hexstr',)
    r32 = PyObject_Vectorcall(r27, r30, 0, r31)
    if is_error(r32) goto L39 (error at to_hex_if_bytes:28) else goto L17
L17:
    dec_ref r26
    r33 = cast(str, r32)
    if is_error(r33) goto L34 (error at to_hex_if_bytes:28) else goto L18
L18:
    return r33
L19:
    r34 = load_address PyBytes_Type
    r35 = builtins :: module
    r36 = 'bytearray'
    r37 = CPyObject_GetAttr(r35, r36)
    if is_error(r37) goto L34 (error at to_hex_if_bytes:30) else goto L20
L20:
    inc_ref r34
    r38 = (r34, r37)
    r39 = box(tuple[object, object], r38)
    r40 = PyObject_IsInstance(val, r39)
    dec_ref r39
    r41 = r40 >= 0 :: signed
    if not r41 goto L34 (error at to_hex_if_bytes:30) else goto L21 :: bool
L21:
    r42 = truncate r40: i32 to builtins.bool
    if r42 goto L22 else goto L27 :: bool
L22:
    r43 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r43) goto L23 else goto L25
L23:
    r44 = raise NameError('value for final name "to_hex" was not set')
    if not r44 goto L34 (error at to_hex_if_bytes:30) else goto L24 :: bool
L24:
    unreachable
L25:
    r45 = [val]
    r46 = load_address r45
    r47 = PyObject_Vectorcall(r43, r46, 1, 0)
    if is_error(r47) goto L34 (error at to_hex_if_bytes:30) else goto L26
L26:
    r48 = r47
    goto L32
L27:
    r49 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r49) goto L28 else goto L30
L28:
    r50 = raise NameError('value for final name "to_hex" was not set')
    if not r50 goto L34 (error at to_hex_if_bytes:30) else goto L29 :: bool
L29:
    unreachable
L30:
    r51 = [val]
    r52 = load_address r51
    r53 = ('hexstr',)
    r54 = PyObject_Vectorcall(r49, r52, 0, r53)
    if is_error(r54) goto L34 (error at to_hex_if_bytes:30) else goto L31
L31:
    r48 = r54
L32:
    r55 = cast(str, r48)
    if is_error(r55) goto L34 (error at to_hex_if_bytes:30) else goto L33
L33:
    return r55
L34:
    r56 = <error> :: str
    return r56
L35:
    dec_ref r8
    goto L34
L36:
    dec_ref r14
    goto L34
L37:
    dec_ref r19
    goto L34
L38:
    dec_ref r26
    goto L14
L39:
    dec_ref r26
    goto L34

def to_bytes_if_hex(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1 :: str
    r2 :: object
    r3 :: bool
    r4 :: object[1]
    r5 :: object_ptr
    r6, r7 :: object
    r8 :: union[object, bytes]
    r9, r10 :: bytes
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L7 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L10 (error at to_bytes_if_hex:38) else goto L2
L2:
    r2 = faster_web3._utils.type_conversion.to_bytes :: static
    if is_error(r2) goto L11 else goto L5
L3:
    r3 = raise NameError('value for final name "to_bytes" was not set')
    if not r3 goto L10 (error at to_bytes_if_hex:38) else goto L4 :: bool
L4:
    unreachable
L5:
    r4 = [r1]
    r5 = load_address r4
    r6 = ('hexstr',)
    r7 = PyObject_Vectorcall(r2, r5, 0, r6)
    if is_error(r7) goto L12 (error at to_bytes_if_hex:38) else goto L6
L6:
    dec_ref r1
    r8 = r7
    goto L8
L7:
    inc_ref val
    r8 = val
L8:
    r9 = cast(bytes, r8)
    if is_error(r9) goto L10 (error at to_bytes_if_hex:38) else goto L9
L9:
    return r9
L10:
    r10 = <error> :: bytes
    return r10
L11:
    dec_ref r1
    goto L3
L12:
    dec_ref r1
    goto L10

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: object_ptr
    r10 :: object_ptr[1]
    r11 :: c_ptr
    r12 :: native_int[1]
    r13 :: c_ptr
    r14 :: object
    r15 :: dict
    r16, r17 :: str
    r18 :: bit
    r19 :: object
    r20 :: str
    r21 :: dict
    r22, r23 :: object
    r24 :: str
    r25 :: dict
    r26 :: object
    r27 :: dict
    r28 :: str
    r29 :: object
    r30 :: str
    r31 :: object
    r32 :: dict
    r33 :: str
    r34 :: i32
    r35 :: bit
    r36 :: dict
    r37 :: str
    r38 :: object
    r39 :: str
    r40 :: object
    r41 :: dict
    r42 :: str
    r43 :: i32
    r44 :: bit
    r45 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L14 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final', 'Union')
    r6 = 'typing'
    r7 = faster_web3._utils.type_conversion.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L14 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = load_address eth_utils :: module
    r10 = [r9]
    r11 = load_address r10
    r12 = [6]
    r13 = load_address r12
    r14 = (('eth_utils', 'eth_utils', 'eth_utils'),)
    r15 = faster_web3._utils.type_conversion.globals :: static
    r16 = 'faster_web3/_utils/type_conversion.py'
    r17 = '<module>'
    r18 = CPyImport_ImportMany(r14, r11, r15, r16, r17, r13)
    if not r18 goto L14 else goto L5 :: bool
L5:
    r19 = ('HexStr',)
    r20 = 'eth_typing'
    r21 = faster_web3._utils.type_conversion.globals :: static
    r22 = CPyImport_ImportFromMany(r20, r19, r19, r21)
    if is_error(r22) goto L14 (error at <module>:7) else goto L6
L6:
    eth_typing = r22 :: module
    dec_ref r22
    r23 = ('Web3ValueError',)
    r24 = 'faster_web3.exceptions'
    r25 = faster_web3._utils.type_conversion.globals :: static
    r26 = CPyImport_ImportFromMany(r24, r23, r23, r25)
    if is_error(r26) goto L14 (error at <module>:11) else goto L7
L7:
    faster_web3.exceptions = r26 :: module
    dec_ref r26
    r27 = faster_web3._utils.type_conversion.globals :: static
    r28 = 'eth_utils'
    r29 = CPyDict_GetItem(r27, r28)
    if is_error(r29) goto L14 (error at <module>:16) else goto L8
L8:
    r30 = 'to_bytes'
    r31 = CPyObject_GetAttr(r29, r30)
    dec_ref r29
    if is_error(r31) goto L14 (error at <module>:16) else goto L9
L9:
    faster_web3._utils.type_conversion.to_bytes = r31 :: static
    r32 = faster_web3._utils.type_conversion.globals :: static
    r33 = 'to_bytes'
    r34 = CPyDict_SetItem(r32, r33, r31)
    dec_ref r31
    r35 = r34 >= 0 :: signed
    if not r35 goto L14 (error at <module>:16) else goto L10 :: bool
L10:
    r36 = faster_web3._utils.type_conversion.globals :: static
    r37 = 'eth_utils'
    r38 = CPyDict_GetItem(r36, r37)
    if is_error(r38) goto L14 (error at <module>:17) else goto L11
L11:
    r39 = 'to_hex'
    r40 = CPyObject_GetAttr(r38, r39)
    dec_ref r38
    if is_error(r40) goto L14 (error at <module>:17) else goto L12
L12:
    faster_web3._utils.type_conversion.to_hex = r40 :: static
    r41 = faster_web3._utils.type_conversion.globals :: static
    r42 = 'to_hex'
    r43 = CPyDict_SetItem(r41, r42, r40)
    dec_ref r40
    r44 = r43 >= 0 :: signed
    if not r44 goto L14 (error at <module>:17) else goto L13 :: bool
L13:
    return 1
L14:
    r45 = <error> :: None
    return r45
