def generate_cache_key(value):
    value, r0 :: object
    r1 :: bool
    r2 :: object[1]
    r3 :: object_ptr
    r4 :: object
    r5 :: bool
    r6 :: object
    r7 :: bool
    r8 :: object[1]
    r9 :: object_ptr
    r10 :: object
    r11 :: str
    r12 :: object[1]
    r13 :: object_ptr
    r14 :: object
    r15 :: str
    r16 :: object
    r17 :: bool
    r18 :: object[1]
    r19 :: object_ptr
    r20 :: object
    r21 :: bool
    r22 :: str
    r23 :: object
    r24 :: bool
    r25 :: object[1]
    r26 :: object_ptr
    r27, r28 :: object
    r29 :: bytes
    r30 :: str
    r31 :: object
    r32 :: bool
    r33 :: object[1]
    r34 :: object_ptr
    r35 :: object
    r36, r37 :: bool
    r38, r39 :: str
    r40 :: object
    r41 :: bool
    r42 :: object[1]
    r43 :: object_ptr
    r44 :: object
    r45 :: bool
    r46 :: None
    r47 :: object
    r48, r49 :: str
    r50 :: object
    r51 :: bool
    r52 :: object[1]
    r53 :: object_ptr
    r54 :: object
    r55 :: bool
    r56, r57 :: str
    r58 :: object
    r59 :: bool
    r60 :: object[1]
    r61 :: object_ptr
    r62 :: object
    r63 :: bool
    r64 :: str
    r65 :: object[1]
    r66 :: object_ptr
    r67 :: object
    r68 :: list
    r69 :: ptr
    r70 :: native_int
    r71 :: list
    r72 :: native_int
    r73 :: ptr
    r74 :: native_int
    r75 :: bit
    r76, r77 :: ptr
    r78 :: native_int
    r79 :: ptr
    r80, r81 :: object
    r82 :: tuple[object, object]
    r83 :: object
    r84 :: native_int
    r85 :: str
    r86 :: object
    r87 :: bool
    r88 :: object[1]
    r89 :: object_ptr
    r90 :: object
    r91 :: bool
    r92 :: dict
    r93 :: str
    r94 :: object
    r95 :: i32
    r96 :: bit
    r97 :: bool
    r98 :: str
    r99 :: list
    r100, r101 :: object
    r102 :: str
    r103 :: i32
    r104, r105 :: bit
    r106, r107, r108, r109, r110 :: str
    r111 :: object
    r112, r113 :: str
    r114 :: dict
    r115 :: str
    r116 :: object
    r117 :: object[1]
    r118 :: object_ptr
    r119 :: object
    r120 :: str
L0:
    r0 = faster_web3._utils.caching.caching_utils.is_bytes :: static
    if is_error(r0) goto L1 else goto L3
L1:
    r1 = raise NameError('value for final name "is_bytes" was not set')
    if not r1 goto L97 (error at generate_cache_key:89) else goto L2 :: bool
L2:
    unreachable
L3:
    r2 = [value]
    r3 = load_address r2
    r4 = PyObject_Vectorcall(r0, r3, 1, 0)
    if is_error(r4) goto L97 (error at generate_cache_key:89) else goto L4
L4:
    r5 = unbox(bool, r4)
    dec_ref r4
    if is_error(r5) goto L97 (error at generate_cache_key:89) else goto L5
L5:
    if r5 goto L6 else goto L13 :: bool
L6:
    r6 = faster_web3._utils.caching.caching_utils.md5 :: static
    if is_error(r6) goto L7 else goto L9
L7:
    r7 = raise NameError('value for final name "md5" was not set')
    if not r7 goto L97 (error at generate_cache_key:90) else goto L8 :: bool
L8:
    unreachable
L9:
    r8 = [value]
    r9 = load_address r8
    r10 = PyObject_Vectorcall(r6, r9, 1, 0)
    if is_error(r10) goto L97 (error at generate_cache_key:90) else goto L10
L10:
    r11 = 'hexdigest'
    r12 = [r10]
    r13 = load_address r12
    r14 = PyObject_VectorcallMethod(r11, r13, 9223372036854775809, 0)
    if is_error(r14) goto L98 (error at generate_cache_key:90) else goto L11
L11:
    dec_ref r10
    r15 = cast(str, r14)
    if is_error(r15) goto L97 (error at generate_cache_key:90) else goto L12
L12:
    return r15
L13:
    r16 = faster_web3._utils.caching.caching_utils.is_text :: static
    if is_error(r16) goto L14 else goto L16
L14:
    r17 = raise NameError('value for final name "is_text" was not set')
    if not r17 goto L97 (error at generate_cache_key:91) else goto L15 :: bool
L15:
    unreachable
L16:
    r18 = [value]
    r19 = load_address r18
    r20 = PyObject_Vectorcall(r16, r19, 1, 0)
    if is_error(r20) goto L97 (error at generate_cache_key:91) else goto L17
L17:
    r21 = unbox(bool, r20)
    dec_ref r20
    if is_error(r21) goto L97 (error at generate_cache_key:91) else goto L18
L18:
    if r21 goto L19 else goto L27 :: bool
L19:
    inc_ref value
    r22 = cast(str, value)
    if is_error(r22) goto L97 (error at generate_cache_key:92) else goto L20
L20:
    r23 = faster_web3._utils.caching.caching_utils.to_bytes :: static
    if is_error(r23) goto L99 else goto L23
L21:
    r24 = raise NameError('value for final name "to_bytes" was not set')
    if not r24 goto L97 (error at generate_cache_key:92) else goto L22 :: bool
L22:
    unreachable
L23:
    r25 = [r22]
    r26 = load_address r25
    r27 = ('text',)
    r28 = PyObject_Vectorcall(r23, r26, 0, r27)
    if is_error(r28) goto L100 (error at generate_cache_key:92) else goto L24
L24:
    dec_ref r22
    r29 = cast(bytes, r28)
    if is_error(r29) goto L97 (error at generate_cache_key:92) else goto L25
L25:
    r30 = generate_cache_key(r29)
    dec_ref r29
    if is_error(r30) goto L97 (error at generate_cache_key:92) else goto L26
L26:
    return r30
L27:
    r31 = faster_web3._utils.caching.caching_utils.is_boolean :: static
    if is_error(r31) goto L28 else goto L30
L28:
    r32 = raise NameError('value for final name "is_boolean" was not set')
    if not r32 goto L97 (error at generate_cache_key:94) else goto L29 :: bool
L29:
    unreachable
L30:
    r33 = [value]
    r34 = load_address r33
    r35 = PyObject_Vectorcall(r31, r34, 1, 0)
    if is_error(r35) goto L97 (error at generate_cache_key:94) else goto L31
L31:
    r36 = unbox(bool, r35)
    dec_ref r35
    if is_error(r36) goto L97 (error at generate_cache_key:94) else goto L32
L32:
    if r36 goto L33 else goto L37 :: bool
L33:
    r37 = unbox(bool, value)
    if is_error(r37) goto L97 (error at generate_cache_key:95) else goto L34
L34:
    r38 = CPyBool_Str(r37)
    if is_error(r38) goto L97 (error at generate_cache_key:95) else goto L35
L35:
    r39 = generate_cache_key(r38)
    dec_ref r38
    if is_error(r39) goto L97 (error at generate_cache_key:95) else goto L36
L36:
    return r39
L37:
    r40 = faster_web3._utils.caching.caching_utils.is_null :: static
    if is_error(r40) goto L38 else goto L40
L38:
    r41 = raise NameError('value for final name "is_null" was not set')
    if not r41 goto L97 (error at generate_cache_key:96) else goto L39 :: bool
L39:
    unreachable
L40:
    r42 = [value]
    r43 = load_address r42
    r44 = PyObject_Vectorcall(r40, r43, 1, 0)
    if is_error(r44) goto L97 (error at generate_cache_key:96) else goto L41
L41:
    r45 = unbox(bool, r44)
    dec_ref r44
    if is_error(r45) goto L97 (error at generate_cache_key:96) else goto L42
L42:
    if r45 goto L43 else goto L47 :: bool
L43:
    r46 = unbox(None, value)
    if is_error(r46) goto L97 (error at generate_cache_key:97) else goto L44
L44:
    r47 = box(None, r46)
    r48 = PyObject_Repr(r47)
    if is_error(r48) goto L97 (error at generate_cache_key:97) else goto L45
L45:
    r49 = generate_cache_key(r48)
    dec_ref r48
    if is_error(r49) goto L97 (error at generate_cache_key:97) else goto L46
L46:
    return r49
L47:
    r50 = faster_web3._utils.caching.caching_utils.is_number :: static
    if is_error(r50) goto L48 else goto L50
L48:
    r51 = raise NameError('value for final name "is_number" was not set')
    if not r51 goto L97 (error at generate_cache_key:98) else goto L49 :: bool
L49:
    unreachable
L50:
    r52 = [value]
    r53 = load_address r52
    r54 = PyObject_Vectorcall(r50, r53, 1, 0)
    if is_error(r54) goto L97 (error at generate_cache_key:98) else goto L51
L51:
    r55 = unbox(bool, r54)
    dec_ref r54
    if is_error(r55) goto L97 (error at generate_cache_key:98) else goto L52
L52:
    if r55 goto L53 else goto L56 :: bool
L53:
    r56 = PyObject_Repr(value)
    if is_error(r56) goto L97 (error at generate_cache_key:99) else goto L54
L54:
    r57 = generate_cache_key(r56)
    dec_ref r56
    if is_error(r57) goto L97 (error at generate_cache_key:99) else goto L55
L55:
    return r57
L56:
    r58 = faster_web3._utils.caching.caching_utils.is_dict :: static
    if is_error(r58) goto L57 else goto L59
L57:
    r59 = raise NameError('value for final name "is_dict" was not set')
    if not r59 goto L97 (error at generate_cache_key:100) else goto L58 :: bool
L58:
    unreachable
L59:
    r60 = [value]
    r61 = load_address r60
    r62 = PyObject_Vectorcall(r58, r61, 1, 0)
    if is_error(r62) goto L97 (error at generate_cache_key:100) else goto L60
L60:
    r63 = unbox(bool, r62)
    dec_ref r62
    if is_error(r63) goto L97 (error at generate_cache_key:100) else goto L61
L61:
    if r63 goto L62 else goto L72 :: bool
L62:
    r64 = 'keys'
    r65 = [value]
    r66 = load_address r65
    r67 = PyObject_VectorcallMethod(r64, r66, 9223372036854775809, 0)
    if is_error(r67) goto L97 (error at generate_cache_key:101) else goto L63
L63:
    r68 = CPySequence_Sort(r67)
    dec_ref r67
    if is_error(r68) goto L97 (error at generate_cache_key:101) else goto L64
L64:
    r69 = get_element_ptr r68 ob_size :: PyVarObject
    r70 = load_mem r69 :: native_int*
    r71 = PyList_New(r70)
    if is_error(r71) goto L101 (error at generate_cache_key:101) else goto L65
L65:
    r72 = 0
L66:
    r73 = get_element_ptr r68 ob_size :: PyVarObject
    r74 = load_mem r73 :: native_int*
    r75 = r72 < r74 :: signed
    if r75 goto L67 else goto L102 :: bool
L67:
    r76 = get_element_ptr r68 ob_item :: PyListObject
    r77 = load_mem r76 :: ptr*
    r78 = r72 * 8
    r79 = r77 + r78
    r80 = load_mem r79 :: builtins.object*
    r81 = PyObject_GetItem(value, r80)
    if is_error(r81) goto L103 (error at generate_cache_key:101) else goto L68
L68:
    r82 = (r80, r81)
    r83 = box(tuple[object, object], r82)
    CPyList_SetItemUnsafe(r71, r72, r83)
L69:
    r84 = r72 + 1
    r72 = r84
    goto L66
L70:
    r85 = generate_cache_key(r71)
    dec_ref r71
    if is_error(r85) goto L97 (error at generate_cache_key:101) else goto L71
L71:
    return r85
L72:
    r86 = faster_web3._utils.caching.caching_utils.is_list_like :: static
    if is_error(r86) goto L73 else goto L75
L73:
    r87 = raise NameError('value for final name "is_list_like" was not set')
    if not r87 goto L97 (error at generate_cache_key:102) else goto L74 :: bool
L74:
    unreachable
L75:
    r88 = [value]
    r89 = load_address r88
    r90 = PyObject_Vectorcall(r86, r89, 1, 0)
    if is_error(r90) goto L97 (error at generate_cache_key:102) else goto L76
L76:
    r91 = unbox(bool, r90)
    dec_ref r90
    if is_error(r91) goto L97 (error at generate_cache_key:102) else goto L77
L77:
    if r91 goto L81 else goto L78 :: bool
L78:
    r92 = faster_web3._utils.caching.caching_utils.globals :: static
    r93 = 'Generator'
    r94 = CPyDict_GetItem(r92, r93)
    if is_error(r94) goto L97 (error at generate_cache_key:102) else goto L79
L79:
    r95 = PyObject_IsInstance(value, r94)
    dec_ref r94
    r96 = r95 >= 0 :: signed
    if not r96 goto L97 (error at generate_cache_key:102) else goto L80 :: bool
L80:
    r97 = truncate r95: i32 to builtins.bool
    if r97 goto L81 else goto L90 :: bool
L81:
    r98 = ''
    r99 = PyList_New(0)
    if is_error(r99) goto L97 (error at generate_cache_key:103) else goto L82
L82:
    r100 = PyObject_GetIter(value)
    if is_error(r100) goto L104 (error at generate_cache_key:103) else goto L83
L83:
    r101 = PyIter_Next(r100)
    if is_error(r101) goto L105 else goto L84
L84:
    r102 = generate_cache_key(r101)
    dec_ref r101
    if is_error(r102) goto L106 (error at generate_cache_key:103) else goto L85
L85:
    r103 = PyList_Append(r99, r102)
    dec_ref r102
    r104 = r103 >= 0 :: signed
    if not r104 goto L106 (error at generate_cache_key:103) else goto L83 :: bool
L86:
    r105 = CPy_NoErrOccurred()
    if not r105 goto L104 (error at generate_cache_key:103) else goto L87 :: bool
L87:
    r106 = PyUnicode_Join(r98, r99)
    dec_ref r99
    if is_error(r106) goto L97 (error at generate_cache_key:103) else goto L88
L88:
    r107 = generate_cache_key(r106)
    dec_ref r106
    if is_error(r107) goto L97 (error at generate_cache_key:103) else goto L89
L89:
    return r107
L90:
    r108 = 'Cannot generate cache key for value '
    r109 = PyObject_Str(value)
    if is_error(r109) goto L97 (error at generate_cache_key:106) else goto L91
L91:
    r110 = ' of type '
    r111 = CPy_TYPE(value)
    r112 = PyObject_Str(r111)
    dec_ref r111
    if is_error(r112) goto L107 (error at generate_cache_key:106) else goto L92
L92:
    r113 = CPyStr_Build(4, r108, r109, r110, r112)
    dec_ref r109
    dec_ref r112
    if is_error(r113) goto L97 (error at generate_cache_key:106) else goto L93
L93:
    r114 = faster_web3._utils.caching.caching_utils.globals :: static
    r115 = 'Web3TypeError'
    r116 = CPyDict_GetItem(r114, r115)
    if is_error(r116) goto L108 (error at generate_cache_key:105) else goto L94
L94:
    r117 = [r113]
    r118 = load_address r117
    r119 = PyObject_Vectorcall(r116, r118, 1, 0)
    dec_ref r116
    if is_error(r119) goto L108 (error at generate_cache_key:105) else goto L95
L95:
    dec_ref r113
    CPy_Raise(r119)
    dec_ref r119
    if not 0 goto L97 (error at generate_cache_key:105) else goto L96 :: bool
L96:
    unreachable
L97:
    r120 = <error> :: str
    return r120
L98:
    dec_ref r10
    goto L97
L99:
    dec_ref r22
    goto L21
L100:
    dec_ref r22
    goto L97
L101:
    dec_ref r68
    goto L97
L102:
    dec_ref r68
    goto L70
L103:
    dec_ref r68
    dec_ref r71
    dec_ref r80
    goto L97
L104:
    dec_ref r99
    goto L97
L105:
    dec_ref r100
    goto L86
L106:
    dec_ref r99
    dec_ref r100
    goto L97
L107:
    dec_ref r109
    goto L97
L108:
    dec_ref r113
    goto L97

def RequestInformation.__init__(self, method, params, response_formatters, subscription_id):
    self :: faster_web3._utils.caching.caching_utils.RequestInformation
    method :: str
    params :: object
    response_formatters :: tuple[union[dict, object], object, object]
    subscription_id :: union[str, None]
    r0 :: object
    r1 :: list
    r2 :: None
L0:
    if is_error(subscription_id) goto L1 else goto L5
L1:
    r0 = box(None, 1)
    inc_ref r0
    subscription_id = r0
L2:
    inc_ref method
    self.method = method
    inc_ref params
    self.params = params
    inc_ref response_formatters
    self.response_formatters = response_formatters
    self.subscription_id = subscription_id
    r1 = PyList_New(0)
    if is_error(r1) goto L4 (error at __init__:127) else goto L3
L3:
    self.middleware_response_processors = r1
    return 1
L4:
    r2 = <error> :: None
    return r2
L5:
    inc_ref subscription_id
    goto L2

def is_cacheable_request(provider, method, params):
    provider :: object
    method :: str
    params :: object
    r0 :: str
    r1 :: object
    r2 :: bool
    r3 :: str
    r4 :: object
    r5 :: union[set, tuple]
    r6 :: i32
    r7 :: bit
    r8 :: bool
    r9 :: frozenset
    r10 :: bool
    r11 :: i32
    r12 :: bit
    r13 :: bool
    r14, r15 :: object
    r16 :: frozenset
    r17 :: bool
    r18 :: i32
    r19 :: bit
    r20, r21 :: bool
L0:
    r0 = 'cache_allowed_requests'
    r1 = CPyObject_GetAttr(provider, r0)
    if is_error(r1) goto L21 (error at is_cacheable_request:157) else goto L1
L1:
    r2 = unbox(bool, r1)
    dec_ref r1
    if is_error(r2) goto L21 (error at is_cacheable_request:157) else goto L2
L2:
    if r2 goto L3 else goto L7 :: bool
L3:
    r3 = 'cacheable_requests'
    r4 = CPyObject_GetAttr(provider, r3)
    if is_error(r4) goto L21 (error at is_cacheable_request:157) else goto L4
L4:
    r5 = cast(union[set, tuple], r4)
    if is_error(r5) goto L21 (error at is_cacheable_request:157) else goto L5
L5:
    r6 = PySequence_Contains(r5, method)
    dec_ref r5
    r7 = r6 >= 0 :: signed
    if not r7 goto L21 (error at is_cacheable_request:157) else goto L6 :: bool
L6:
    r8 = truncate r6: i32 to builtins.bool
    if r8 goto L8 else goto L7 :: bool
L7:
    return 0
L8:
    r9 = faster_web3._utils.caching.caching_utils.BLOCKNUM_IN_PARAMS :: static
    if is_error(r9) goto L9 else goto L11
L9:
    r10 = raise NameError('value for final name "BLOCKNUM_IN_PARAMS" was not set')
    if not r10 goto L21 (error at is_cacheable_request:159) else goto L10 :: bool
L10:
    unreachable
L11:
    r11 = PySet_Contains(r9, method)
    r12 = r11 >= 0 :: signed
    if not r12 goto L21 (error at is_cacheable_request:159) else goto L12 :: bool
L12:
    r13 = truncate r11: i32 to builtins.bool
    if r13 goto L13 else goto L20 :: bool
L13:
    r14 = object 0
    r15 = PyObject_GetItem(params, r14)
    if is_error(r15) goto L21 (error at is_cacheable_request:160) else goto L14
L14:
    r16 = faster_web3._utils.caching.request_caching_validation.UNCACHEABLE_BLOCK_IDS :: static
    if is_error(r16) goto L22 else goto L17
L15:
    r17 = raise NameError('value for final name "UNCACHEABLE_BLOCK_IDS" was not set')
    if not r17 goto L21 (error at is_cacheable_request:161) else goto L16 :: bool
L16:
    unreachable
L17:
    r18 = PySet_Contains(r16, r15)
    dec_ref r15
    r19 = r18 >= 0 :: signed
    if not r19 goto L21 (error at is_cacheable_request:161) else goto L18 :: bool
L18:
    r20 = truncate r18: i32 to builtins.bool
    if r20 goto L19 else goto L20 :: bool
L19:
    return 0
L20:
    return 1
L21:
    r21 = <error> :: bool
    return r21
L22:
    dec_ref r15
    goto L15

def set_threshold_if_empty(provider):
    provider :: object
    r0 :: str
    r1 :: object
    current_threshold :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r2 :: dict
    r3 :: str
    r4 :: object
    r5 :: bit
    r6 :: object
    r7 :: ptr
    r8 :: object
    r9 :: bit
    r10 :: str
    r11 :: object
    r12 :: bool
    r13 :: str
    r14 :: object
    r15 :: i32
    r16 :: bit
    r17 :: str
    r18 :: list
    r19 :: str
    r20 :: object[3]
    r21 :: object_ptr
    r22 :: object
    r23 :: dict
    r24 :: str
    r25, r26, r27 :: object
    r28 :: object[2]
    r29 :: object_ptr
    r30 :: object
    r31 :: int
    r32 :: dict
    r33 :: str
    r34 :: object
    r35 :: bit
    r36 :: dict
    r37 :: bool
    r38, r39, r40 :: object
    r41 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int]
    r42 :: str
    r43 :: i32
    r44 :: bit
    r45 :: tuple[object, object, object]
    r46 :: object
    r47 :: str
    r48 :: object
    r49 :: bit
    r50 :: str
    r51 :: object
    r52 :: i32
    r53, r54 :: bit
    r55, r56, r57 :: tuple[object, object, object]
    r58 :: str
    r59 :: object
    r60 :: i32
    r61, r62 :: bit
    r63 :: None
L0:
    r0 = 'request_cache_validation_threshold'
    r1 = CPyObject_GetAttr(provider, r0)
    if is_error(r1) goto L41 (error at set_threshold_if_empty:211) else goto L1
L1:
    current_threshold = r1
    r2 = faster_web3._utils.caching.caching_utils.globals :: static
    r3 = 'empty'
    r4 = CPyDict_GetItem(r2, r3)
    if is_error(r4) goto L42 (error at set_threshold_if_empty:213) else goto L2
L2:
    r5 = current_threshold == r4
    dec_ref r4
    if r5 goto L4 else goto L3 :: bool
L3:
    r6 = faster_web3.utils.caching.RequestCacheValidationThreshold :: type
    r7 = get_element_ptr current_threshold ob_type :: PyObject
    r8 = borrow load_mem r7 :: builtins.object*
    r9 = r8 == r6
    if r9 goto L4 else goto L43 :: bool
L4:
    r10 = 'cache_allowed_requests'
    r11 = CPyObject_GetAttr(provider, r10)
    if is_error(r11) goto L42 (error at set_threshold_if_empty:216) else goto L5
L5:
    r12 = unbox(bool, r11)
    dec_ref r11
    if is_error(r12) goto L42 (error at set_threshold_if_empty:216) else goto L6
L6:
L7:
    r13 = 'cache_allowed_requests'
    r14 = box(bool, 0)
    r15 = PyObject_SetAttr(provider, r13, r14)
    r16 = r15 >= 0 :: signed
    if not r16 goto L44 (error at set_threshold_if_empty:219) else goto L8 :: bool
L8:
    r17 = 'eth_chainId'
    r18 = PyList_New(0)
    if is_error(r18) goto L44 (error at set_threshold_if_empty:220) else goto L9
L9:
    r19 = 'make_request'
    r20 = [provider, r17, r18]
    r21 = load_address r20
    r22 = PyObject_VectorcallMethod(r19, r21, 9223372036854775811, 0)
    if is_error(r22) goto L45 (error at set_threshold_if_empty:220) else goto L10
L10:
    dec_ref r18
    r23 = cast(dict, r22)
    if is_error(r23) goto L44 (error at set_threshold_if_empty:220) else goto L11
L11:
    r24 = 'result'
    r25 = CPyDict_GetItem(r23, r24)
    dec_ref r23
    if is_error(r25) goto L44 (error at set_threshold_if_empty:220) else goto L12
L12:
    r26 = load_address PyLong_Type
    r27 = object 16
    r28 = [r25, r27]
    r29 = load_address r28
    r30 = PyObject_Vectorcall(r26, r29, 2, 0)
    if is_error(r30) goto L46 (error at set_threshold_if_empty:223) else goto L13
L13:
    dec_ref r25
    r31 = unbox(int, r30)
    dec_ref r30
    if is_error(r31) goto L44 (error at set_threshold_if_empty:223) else goto L14
L14:
    r32 = faster_web3._utils.caching.caching_utils.globals :: static
    r33 = 'empty'
    r34 = CPyDict_GetItem(r32, r33)
    if is_error(r34) goto L47 (error at set_threshold_if_empty:225) else goto L15
L15:
    r35 = current_threshold == r34
    dec_ref current_threshold
    dec_ref r34
    if r35 goto L16 else goto L48 :: bool
L16:
    r36 = faster_web3._utils.caching.caching_utils.CHAIN_VALIDATION_THRESHOLD_DEFAULTS :: static
    if is_error(r36) goto L49 else goto L19
L17:
    r37 = raise NameError('value for final name "CHAIN_VALIDATION_THRESHOLD_DEFAULTS" was not set')
    if not r37 goto L22 (error at set_threshold_if_empty:227) else goto L18 :: bool
L18:
    unreachable
L19:
    r38 = box(int, r31)
    r39 = object 3600
    r40 = CPyDict_Get(r36, r38, r39)
    dec_ref r38
    if is_error(r40) goto L22 (error at set_threshold_if_empty:227) else goto L20
L20:
    r41 = cast(union[faster_web3.utils.caching.RequestCacheValidationThreshold, int], r40)
    if is_error(r41) goto L22 (error at set_threshold_if_empty:227) else goto L21
L21:
    r42 = 'request_cache_validation_threshold'
    r43 = PyObject_SetAttr(provider, r42, r41)
    dec_ref r41
    r44 = r43 >= 0 :: signed
    if not r44 goto L22 (error at set_threshold_if_empty:227) else goto L30 :: bool
L22:
    r45 = CPy_CatchError()
    r46 = builtins :: module
    r47 = 'Exception'
    r48 = CPyObject_GetAttr(r46, r47)
    if is_error(r48) goto L28 (error at set_threshold_if_empty:231) else goto L23
L23:
    r49 = CPy_ExceptionMatches(r48)
    dec_ref r48
    if r49 goto L24 else goto L25 :: bool
L24:
    r50 = 'request_cache_validation_threshold'
    r51 = object 3600
    r52 = PyObject_SetAttr(provider, r50, r51)
    r53 = r52 >= 0 :: signed
    if not r53 goto L28 (error at set_threshold_if_empty:232) else goto L27 :: bool
L25:
    CPy_Reraise()
    if not 0 goto L28 else goto L50 :: bool
L26:
    unreachable
L27:
    CPy_RestoreExcInfo(r45)
    dec_ref r45
    goto L30
L28:
    CPy_RestoreExcInfo(r45)
    dec_ref r45
    r54 = CPy_KeepPropagating()
    if not r54 goto L31 else goto L29 :: bool
L29:
    unreachable
L30:
    r55 = <error> :: tuple[object, object, object]
    r56 = r55
    goto L32
L31:
    r57 = CPy_CatchError()
    r56 = r57
L32:
    r58 = 'cache_allowed_requests'
    r59 = box(bool, r12)
    r60 = PyObject_SetAttr(provider, r58, r59)
    r61 = r60 >= 0 :: signed
    if not r61 goto L36 (error at set_threshold_if_empty:234) else goto L33 :: bool
L33:
    if is_error(r56) goto L40 else goto L34
L34:
    CPy_Reraise()
    if not 0 goto L36 else goto L51 :: bool
L35:
    unreachable
L36:
    if is_error(r56) goto L38 else goto L37
L37:
    CPy_RestoreExcInfo(r56)
    xdec_ref r56
L38:
    r62 = CPy_KeepPropagating()
    if not r62 goto L41 else goto L39 :: bool
L39:
    unreachable
L40:
    return 1
L41:
    r63 = <error> :: None
    return r63
L42:
    dec_ref current_threshold
    goto L41
L43:
    dec_ref current_threshold
    goto L40
L44:
    dec_ref current_threshold
    goto L22
L45:
    dec_ref current_threshold
    dec_ref r18
    goto L22
L46:
    dec_ref current_threshold
    dec_ref r25
    goto L22
L47:
    dec_ref current_threshold
    dec_ref r31 :: int
    goto L22
L48:
    dec_ref r31 :: int
    goto L30
L49:
    dec_ref r31 :: int
    goto L17
L50:
    dec_ref r45
    goto L26
L51:
    xdec_ref r56
    goto L35

def _should_cache_response(provider, method, params, response):
    provider :: object
    method :: str
    params :: object
    response :: dict
    r0 :: str
    r1, r2 :: object
    result :: union[object, None]
    r3 :: str
    r4 :: i32
    r5 :: bit
    r6 :: bool
    r7 :: object
    r8 :: bool
    r9 :: object[1]
    r10 :: object_ptr
    r11 :: object
    r12 :: bool
    r13 :: None
    r14 :: dict
    r15 :: bool
    r16 :: i32
    r17 :: bit
    r18 :: bool
    r19 :: str
    r20, r21 :: object
    r22 :: bit
    r23 :: dict
    r24 :: bool
    r25 :: object
    r26 :: object[3]
    r27 :: object_ptr
    r28 :: object
    r29, r30 :: bool
L0:
    r0 = 'result'
    r1 = box(None, 1)
    r2 = CPyDict_Get(response, r0, r1)
    if is_error(r2) goto L26 (error at _should_cache_response:243) else goto L1
L1:
    result = r2
    r3 = 'error'
    r4 = PyDict_Contains(response, r3)
    r5 = r4 >= 0 :: signed
    if not r5 goto L27 (error at _should_cache_response:244) else goto L2 :: bool
L2:
    r6 = truncate r4: i32 to builtins.bool
    if r6 goto L28 else goto L3 :: bool
L3:
    r7 = faster_web3._utils.caching.caching_utils.is_null :: static
    if is_error(r7) goto L29 else goto L6
L4:
    r8 = raise NameError('value for final name "is_null" was not set')
    if not r8 goto L26 (error at _should_cache_response:244) else goto L5 :: bool
L5:
    unreachable
L6:
    r9 = [result]
    r10 = load_address r9
    r11 = PyObject_Vectorcall(r7, r10, 1, 0)
    if is_error(r11) goto L27 (error at _should_cache_response:244) else goto L7
L7:
    r12 = unbox(bool, r11)
    dec_ref r11
    if is_error(r12) goto L27 (error at _should_cache_response:244) else goto L8
L8:
    if r12 goto L28 else goto L10 :: bool
L9:
    return 0
L10:
    r13 = set_threshold_if_empty(provider)
    if is_error(r13) goto L27 (error at _should_cache_response:247) else goto L11
L11:
    r14 = faster_web3._utils.caching.caching_utils.INTERNAL_VALIDATION_MAP :: static
    if is_error(r14) goto L30 else goto L14
L12:
    r15 = raise NameError('value for final name "INTERNAL_VALIDATION_MAP" was not set')
    if not r15 goto L26 (error at _should_cache_response:249) else goto L13 :: bool
L13:
    unreachable
L14:
    r16 = PyDict_Contains(r14, method)
    r17 = r16 >= 0 :: signed
    if not r17 goto L27 (error at _should_cache_response:249) else goto L15 :: bool
L15:
    r18 = truncate r16: i32 to builtins.bool
    if r18 goto L16 else goto L31 :: bool
L16:
    r19 = 'request_cache_validation_threshold'
    r20 = CPyObject_GetAttr(provider, r19)
    if is_error(r20) goto L27 (error at _should_cache_response:250) else goto L17
L17:
    r21 = load_address _Py_NoneStruct
    r22 = r20 != r21
    dec_ref r20
    if r22 goto L18 else goto L31 :: bool
L18:
    r23 = faster_web3._utils.caching.caching_utils.INTERNAL_VALIDATION_MAP :: static
    if is_error(r23) goto L32 else goto L21
L19:
    r24 = raise NameError('value for final name "INTERNAL_VALIDATION_MAP" was not set')
    if not r24 goto L26 (error at _should_cache_response:252) else goto L20 :: bool
L20:
    unreachable
L21:
    r25 = CPyDict_GetItem(r23, method)
    if is_error(r25) goto L27 (error at _should_cache_response:252) else goto L22
L22:
    r26 = [provider, params, result]
    r27 = load_address r26
    r28 = PyObject_Vectorcall(r25, r27, 3, 0)
    dec_ref r25
    if is_error(r28) goto L27 (error at _should_cache_response:252) else goto L23
L23:
    dec_ref result
    r29 = unbox(bool, r28)
    dec_ref r28
    if is_error(r29) goto L26 (error at _should_cache_response:252) else goto L24
L24:
    return r29
L25:
    return 1
L26:
    r30 = <error> :: bool
    return r30
L27:
    dec_ref result
    goto L26
L28:
    dec_ref result
    goto L9
L29:
    dec_ref result
    goto L4
L30:
    dec_ref result
    goto L12
L31:
    dec_ref result
    goto L25
L32:
    dec_ref result
    goto L19

def wrapper_handle_request_caching_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2, r3 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    inc_ref __mypyc_self__
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    if is_error(r2) goto L4 else goto L3
L3:
    return r2
L4:
    r3 = <error> :: object
    return r3

def wrapper_handle_request_caching_obj.__call__(__mypyc_self__, provider, method, params):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_handle_request_caching_obj
    provider :: object
    method :: str
    params :: object
    r0 :: faster_web3._utils.caching.caching_utils.handle_request_caching_env
    r1 :: bool
    r2 :: str
    r3 :: object
    r4 :: faster_web3.utils.caching.SimpleCache
    r5 :: object
    r6 :: bool
    r7 :: object
    r8 :: int
    r9, r10 :: str
    r11 :: tuple[str, object]
    r12 :: object
    r13, r14, r15 :: str
    r16 :: union[object, None]
    r17 :: object
    r18 :: bit
    r19 :: dict
    r20 :: object
    r21 :: object[3]
    r22 :: object_ptr
    r23 :: object
    r24 :: dict
    r25 :: bool
    r26 :: str
    r27, r28 :: object
    r29 :: str
    r30 :: object
    r31 :: str
    r32 :: object
    r33 :: object[1]
    r34 :: object_ptr
    r35 :: object
    r36 :: bool
    r37 :: tuple[object, union[dict, None]]
    r38, r39 :: tuple[object, object, object]
    r40, r41, r42 :: object
    r43 :: object[4]
    r44 :: object_ptr
    r45 :: object
    r46 :: i32
    r47 :: bit
    r48 :: bool
    r49 :: bit
    r50, r51, r52 :: tuple[object, object, object]
    r53 :: object
    r54 :: object[4]
    r55 :: object_ptr
    r56 :: object
    r57 :: bit
    r58 :: object
    r59 :: object[3]
    r60 :: object_ptr
    r61 :: object
    r62, r63 :: dict
L0:
    r0 = __mypyc_self__.__mypyc_env__
    if is_error(r0) goto L54 (error at wrapper:259) else goto L1
L1:
    r1 = is_cacheable_request(provider, method, params)
    if is_error(r1) goto L55 (error at wrapper:262) else goto L2
L2:
    if r1 goto L3 else goto L50 :: bool
L3:
    r2 = '_request_cache'
    r3 = CPyObject_GetAttr(provider, r2)
    if is_error(r3) goto L55 (error at wrapper:263) else goto L4
L4:
    r4 = cast(faster_web3.utils.caching.SimpleCache, r3)
    if is_error(r4) goto L55 (error at wrapper:263) else goto L5
L5:
    r5 = faster_web3._utils.caching.caching_utils.get_ident :: static
    if is_error(r5) goto L56 else goto L8
L6:
    r6 = raise NameError('value for final name "get_ident" was not set')
    if not r6 goto L54 (error at wrapper:265) else goto L7 :: bool
L7:
    unreachable
L8:
    r7 = PyObject_Vectorcall(r5, 0, 0, 0)
    if is_error(r7) goto L57 (error at wrapper:265) else goto L9
L9:
    r8 = unbox(int, r7)
    dec_ref r7
    if is_error(r8) goto L57 (error at wrapper:265) else goto L10
L10:
    r9 = CPyTagged_Str(r8)
    dec_ref r8 :: int
    if is_error(r9) goto L57 (error at wrapper:265) else goto L11
L11:
    r10 = ':'
    inc_ref method
    inc_ref params
    r11 = (method, params)
    r12 = box(tuple[str, object], r11)
    r13 = PyObject_Str(r12)
    dec_ref r12
    if is_error(r13) goto L58 (error at wrapper:265) else goto L12
L12:
    r14 = CPyStr_Build(3, r9, r10, r13)
    dec_ref r9
    dec_ref r13
    if is_error(r14) goto L57 (error at wrapper:265) else goto L13
L13:
    r15 = generate_cache_key(r14)
    dec_ref r14
    if is_error(r15) goto L57 (error at wrapper:264) else goto L14
L14:
    r16 = r4.get_cache_entry(r15)
    if is_error(r16) goto L59 (error at wrapper:267) else goto L15
L15:
    r17 = load_address _Py_NoneStruct
    r18 = r16 != r17
    if r18 goto L60 else goto L61 :: bool
L16:
    r19 = cast(dict, r16)
    if is_error(r19) goto L54 (error at wrapper:269) else goto L17
L17:
    return r19
L18:
    r20 = r0.func
    dec_ref r0
    if is_error(r20) goto L62 (error at wrapper:271) else goto L19
L19:
    r21 = [provider, method, params]
    r22 = load_address r21
    r23 = PyObject_Vectorcall(r20, r22, 3, 0)
    dec_ref r20
    if is_error(r23) goto L62 (error at wrapper:271) else goto L20
L20:
    r24 = cast(dict, r23)
    if is_error(r24) goto L62 (error at wrapper:271) else goto L21
L21:
    r25 = _should_cache_response(provider, method, params, r24)
    if is_error(r25) goto L63 (error at wrapper:272) else goto L22
L22:
    if r25 goto L23 else goto L64 :: bool
L23:
    r26 = '_request_cache_lock'
    r27 = CPyObject_GetAttr(provider, r26)
    if is_error(r27) goto L63 (error at wrapper:273) else goto L24
L24:
    r28 = CPy_TYPE(r27)
    r29 = '__exit__'
    r30 = CPyObject_GetAttr(r28, r29)
    if is_error(r30) goto L65 (error at wrapper:273) else goto L25
L25:
    r31 = '__enter__'
    r32 = CPyObject_GetAttr(r28, r31)
    dec_ref r28
    if is_error(r32) goto L66 (error at wrapper:273) else goto L26
L26:
    r33 = [r27]
    r34 = load_address r33
    r35 = PyObject_Vectorcall(r32, r34, 1, 0)
    dec_ref r32
    if is_error(r35) goto L66 (error at wrapper:273) else goto L67
L27:
    r36 = 1
L28:
    r37 = r4.cache(r15, r24)
    dec_ref r15
    dec_ref r4
    if is_error(r37) goto L29 (error at wrapper:274) else goto L68
L29:
    r38 = CPy_CatchError()
    r36 = 0
    r39 = CPy_GetExcInfo()
    r40 = r39[0]
    r41 = r39[1]
    r42 = r39[2]
    dec_ref r39
    r43 = [r27, r40, r41, r42]
    r44 = load_address r43
    r45 = PyObject_Vectorcall(r30, r44, 4, 0)
    if is_error(r45) goto L69 (error at wrapper:273) else goto L30
L30:
    dec_ref r40
    dec_ref r41
    dec_ref r42
    r46 = PyObject_IsTrue(r45)
    dec_ref r45
    r47 = r46 >= 0 :: signed
    if not r47 goto L35 (error at wrapper:273) else goto L31 :: bool
L31:
    r48 = truncate r46: i32 to builtins.bool
    if r48 goto L34 else goto L32 :: bool
L32:
    CPy_Reraise()
    if not 0 goto L35 else goto L70 :: bool
L33:
    unreachable
L34:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    goto L37
L35:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r49 = CPy_KeepPropagating()
    if not r49 goto L38 else goto L71 :: bool
L36:
    unreachable
L37:
    r50 = <error> :: tuple[object, object, object]
    r51 = r50
    goto L39
L38:
    r52 = CPy_CatchError()
    r51 = r52
L39:
    if r36 goto L40 else goto L72 :: bool
L40:
    r53 = load_address _Py_NoneStruct
    r54 = [r27, r53, r53, r53]
    r55 = load_address r54
    r56 = PyObject_Vectorcall(r30, r55, 4, 0)
    dec_ref r30
    if is_error(r56) goto L73 (error at wrapper:273) else goto L74
L41:
    dec_ref r27
L42:
    if is_error(r51) goto L49 else goto L75
L43:
    CPy_Reraise()
    if not 0 goto L45 else goto L76 :: bool
L44:
    unreachable
L45:
    if is_error(r51) goto L47 else goto L46
L46:
    CPy_RestoreExcInfo(r51)
    xdec_ref r51
L47:
    r57 = CPy_KeepPropagating()
    if not r57 goto L54 else goto L48 :: bool
L48:
    unreachable
L49:
    return r24
L50:
    r58 = r0.func
    dec_ref r0
    if is_error(r58) goto L54 (error at wrapper:277) else goto L51
L51:
    r59 = [provider, method, params]
    r60 = load_address r59
    r61 = PyObject_Vectorcall(r58, r60, 3, 0)
    dec_ref r58
    if is_error(r61) goto L54 (error at wrapper:277) else goto L52
L52:
    r62 = cast(dict, r61)
    if is_error(r62) goto L54 (error at wrapper:277) else goto L53
L53:
    return r62
L54:
    r63 = <error> :: dict
    return r63
L55:
    dec_ref r0
    goto L54
L56:
    dec_ref r0
    dec_ref r4
    goto L6
L57:
    dec_ref r0
    dec_ref r4
    goto L54
L58:
    dec_ref r0
    dec_ref r4
    dec_ref r9
    goto L54
L59:
    dec_ref r0
    dec_ref r4
    dec_ref r15
    goto L54
L60:
    dec_ref r0
    dec_ref r4
    dec_ref r15
    goto L16
L61:
    dec_ref r16
    goto L18
L62:
    dec_ref r4
    dec_ref r15
    goto L54
L63:
    dec_ref r4
    dec_ref r15
    dec_ref r24
    goto L54
L64:
    dec_ref r4
    dec_ref r15
    goto L49
L65:
    dec_ref r4
    dec_ref r15
    dec_ref r24
    dec_ref r27
    dec_ref r28
    goto L54
L66:
    dec_ref r4
    dec_ref r15
    dec_ref r24
    dec_ref r27
    dec_ref r30
    goto L54
L67:
    dec_ref r35
    goto L27
L68:
    dec_ref r37
    goto L37
L69:
    dec_ref r40
    dec_ref r41
    dec_ref r42
    goto L35
L70:
    dec_ref r24
    dec_ref r27
    dec_ref r30
    dec_ref r38
    goto L33
L71:
    dec_ref r24
    dec_ref r27
    dec_ref r30
    goto L36
L72:
    dec_ref r27
    dec_ref r30
    goto L42
L73:
    dec_ref r24
    dec_ref r27
    goto L45
L74:
    dec_ref r56
    goto L41
L75:
    dec_ref r24
    goto L43
L76:
    xdec_ref r51
    goto L44

def handle_request_caching(func):
    func :: object
    r0 :: faster_web3._utils.caching.caching_utils.handle_request_caching_env
    r1 :: bool
    r2 :: faster_web3._utils.caching.caching_utils.wrapper_handle_request_caching_obj
    r3 :: bool
    wrapper :: object
    r4 :: dict
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: i32
    r9 :: bit
    r10 :: object
L0:
    r0 = handle_request_caching_env()
    if is_error(r0) goto L7 (error at handle_request_caching:256) else goto L1
L1:
    inc_ref func
    r0.func = func; r1 = is_error
    if not r1 goto L8 (error at handle_request_caching:256) else goto L2 :: bool
L2:
    r2 = wrapper_handle_request_caching_obj()
    if is_error(r2) goto L8 (error at handle_request_caching:259) else goto L3
L3:
    r2.__mypyc_env__ = r0; r3 = is_error
    if not r3 goto L9 (error at handle_request_caching:259) else goto L4 :: bool
L4:
    wrapper = r2
    r4 = faster_web3._utils.caching.caching_utils.globals :: static
    r5 = 'handle_request_caching'
    r6 = CPyDict_GetItem(r4, r5)
    if is_error(r6) goto L10 (error at handle_request_caching:280) else goto L5
L5:
    r7 = '_decorator'
    r8 = PyObject_SetAttr(wrapper, r7, r6)
    dec_ref r6
    r9 = r8 >= 0 :: signed
    if not r9 goto L10 (error at handle_request_caching:280) else goto L6 :: bool
L6:
    return wrapper
L7:
    r10 = <error> :: object
    return r10
L8:
    dec_ref r0
    goto L7
L9:
    dec_ref r2
    goto L7
L10:
    dec_ref wrapper
    goto L7

def async_set_threshold_if_empty_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1 :: object
    r2 :: i32
    r3 :: object
    r4 :: bit
    r5 :: object
    r6 :: str
    r7 :: object
    r8 :: bool
    r9 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r10 :: dict
    r11 :: str
    r12 :: object
    r13 :: bit
    r14 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r15 :: object
    r16 :: ptr
    r17 :: object
    r18 :: bit
    r19 :: object
    r20 :: str
    r21 :: object
    r22, r23 :: bool
    r24 :: object
    r25 :: str
    r26 :: object
    r27 :: i32
    r28 :: bit
    r29 :: object
    r30 :: str
    r31 :: list
    r32 :: str
    r33 :: object[3]
    r34 :: object_ptr
    r35, r36 :: object
    r37 :: bool
    r38, r39, r40, r41, r42 :: object
    r43 :: bool
    r44 :: object
    r45 :: bool
    r46 :: object
    r47 :: bit
    r48 :: tuple[object, object, object]
    r49 :: bool
    r50 :: object_ptr
    r51 :: object
    r52 :: bool
    r53, r54, r55 :: tuple[object, object, object]
    r56 :: bit
    r57, r58, r59 :: object
    r60 :: dict
    r61 :: bool
    r62 :: dict
    r63 :: str
    r64, r65, r66 :: object
    r67 :: object[2]
    r68 :: object_ptr
    r69 :: object
    r70 :: int
    r71 :: bool
    r72 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r73 :: dict
    r74 :: str
    r75 :: object
    r76 :: bit
    r77 :: dict
    r78 :: bool
    r79 :: int
    r80, r81, r82 :: object
    r83 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int]
    r84 :: object
    r85 :: str
    r86 :: i32
    r87 :: bit
    r88 :: tuple[object, object, object]
    r89 :: bool
    r90 :: object
    r91 :: str
    r92 :: object
    r93 :: bit
    r94 :: object
    r95 :: str
    r96 :: object
    r97 :: i32
    r98 :: bit
    r99, r100 :: tuple[object, object, object]
    r101 :: bit
    r102, r103, r104 :: tuple[object, object, object]
    r105 :: bool
    r106 :: object
    r107 :: str
    r108 :: object
    r109 :: i32
    r110, r111 :: bit
    r112 :: object
    r113 :: bool
    r114, r115 :: bit
    r116 :: bool
    r117 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = __mypyc_self__.__mypyc_next_label__
    goto L96
L1:
    r3 = load_address _Py_NoneStruct
    r4 = type != r3
    if r4 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L100 (error at async_set_threshold_if_empty:307) else goto L3 :: bool
L3:
    unreachable
L4:
    r5 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r5) goto L100 (error at async_set_threshold_if_empty:308) else goto L5
L5:
    r6 = 'request_cache_validation_threshold'
    r7 = CPyObject_GetAttr(r5, r6)
    dec_ref r5
    if is_error(r7) goto L100 (error at async_set_threshold_if_empty:308) else goto L6
L6:
    __mypyc_self__.__mypyc_generator_attribute__current_threshold = r7; r8 = is_error
    if not r8 goto L100 (error at async_set_threshold_if_empty:308) else goto L7 :: bool
L7:
    r9 = __mypyc_self__.__mypyc_generator_attribute__current_threshold
    if is_error(r9) goto L100 (error at async_set_threshold_if_empty:310) else goto L8
L8:
    r10 = faster_web3._utils.caching.caching_utils.globals :: static
    r11 = 'empty'
    r12 = CPyDict_GetItem(r10, r11)
    if is_error(r12) goto L101 (error at async_set_threshold_if_empty:310) else goto L9
L9:
    r13 = r9 == r12
    dec_ref r9
    dec_ref r12
    if r13 goto L12 else goto L10 :: bool
L10:
    r14 = __mypyc_self__.__mypyc_generator_attribute__current_threshold
    if is_error(r14) goto L100 (error at async_set_threshold_if_empty:311) else goto L11
L11:
    r15 = faster_web3.utils.caching.RequestCacheValidationThreshold :: type
    r16 = get_element_ptr r14 ob_type :: PyObject
    r17 = borrow load_mem r16 :: builtins.object*
    dec_ref r14
    r18 = r17 == r15
    if r18 goto L12 else goto L91 :: bool
L12:
    r19 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r19) goto L100 (error at async_set_threshold_if_empty:313) else goto L13
L13:
    r20 = 'cache_allowed_requests'
    r21 = CPyObject_GetAttr(r19, r20)
    dec_ref r19
    if is_error(r21) goto L100 (error at async_set_threshold_if_empty:313) else goto L14
L14:
    r22 = unbox(bool, r21)
    dec_ref r21
    if is_error(r22) goto L100 (error at async_set_threshold_if_empty:313) else goto L15
L15:
    __mypyc_self__.__mypyc_generator_attribute__cache_allowed_requests = r22; r23 = is_error
    if not r23 goto L100 (error at async_set_threshold_if_empty:313) else goto L16 :: bool
L16:
    r24 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r24) goto L67 (error at async_set_threshold_if_empty:316) else goto L17
L17:
    r25 = 'cache_allowed_requests'
    r26 = box(bool, 0)
    r27 = PyObject_SetAttr(r24, r25, r26)
    dec_ref r24
    r28 = r27 >= 0 :: signed
    if not r28 goto L67 (error at async_set_threshold_if_empty:316) else goto L18 :: bool
L18:
    r29 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r29) goto L67 (error at async_set_threshold_if_empty:317) else goto L19
L19:
    r30 = 'eth_chainId'
    r31 = PyList_New(0)
    if is_error(r31) goto L102 (error at async_set_threshold_if_empty:318) else goto L20
L20:
    r32 = 'make_request'
    r33 = [r29, r30, r31]
    r34 = load_address r33
    r35 = PyObject_VectorcallMethod(r32, r34, 9223372036854775811, 0)
    if is_error(r35) goto L103 (error at async_set_threshold_if_empty:317) else goto L21
L21:
    dec_ref r29
    dec_ref r31
    r36 = CPy_GetCoro(r35)
    dec_ref r35
    if is_error(r36) goto L67 (error at async_set_threshold_if_empty:317) else goto L22
L22:
    __mypyc_self__.__mypyc_temp__0 = r36; r37 = is_error
    if not r37 goto L67 (error at async_set_threshold_if_empty:-1) else goto L23 :: bool
L23:
    r38 = __mypyc_self__.__mypyc_temp__0
    if is_error(r38) goto L67 (error at async_set_threshold_if_empty:-1) else goto L24
L24:
    r39 = CPyIter_Next(r38)
    dec_ref r38
    if is_error(r39) goto L25 else goto L27
L25:
    r40 = CPy_FetchStopIterationValue()
    if is_error(r40) goto L67 (error at async_set_threshold_if_empty:317) else goto L26
L26:
    r41 = r40
    r42 = <error> :: object
    __mypyc_self__.__mypyc_temp__0 = r42; r43 = is_error
    if not r43 goto L104 (error at async_set_threshold_if_empty:317) else goto L49 :: bool
L27:
    r44 = r39
L28:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r44
L29:
    r46 = load_address _Py_NoneStruct
    r47 = type != r46
    if r47 goto L30 else goto L105 :: bool
L30:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L33 (error at async_set_threshold_if_empty:317) else goto L106 :: bool
L31:
    unreachable
L32:
    inc_ref arg
    goto L44
L33:
    r48 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__1 = r48; r49 = is_error
    if not r49 goto L107 (error at async_set_threshold_if_empty:-1) else goto L34 :: bool
L34:
    r50 = load_address r1
    r51 = __mypyc_self__.__mypyc_temp__0
    if is_error(r51) goto L107 (error at async_set_threshold_if_empty:-1) else goto L35
L35:
    r52 = CPy_YieldFromErrorHandle(r51, r50)
    dec_ref r51
    if is_error(r52) goto L107 (error at async_set_threshold_if_empty:317) else goto L36
L36:
    if r52 goto L39 else goto L37 :: bool
L37:
    r44 = r1
    r53 = __mypyc_self__.__mypyc_temp__1
    if is_error(r53) goto L108 (error at async_set_threshold_if_empty:-1) else goto L38
L38:
    CPy_RestoreExcInfo(r53)
    dec_ref r53
    goto L28
L39:
    r41 = r1
    r54 = __mypyc_self__.__mypyc_temp__1
    if is_error(r54) goto L109 (error at async_set_threshold_if_empty:-1) else goto L40
L40:
    CPy_RestoreExcInfo(r54)
    dec_ref r54
    goto L49
L41:
    r55 = __mypyc_self__.__mypyc_temp__1
    if is_error(r55) goto L67 (error at async_set_threshold_if_empty:-1) else goto L42
L42:
    CPy_RestoreExcInfo(r55)
    dec_ref r55
    r56 = CPy_KeepPropagating()
    if not r56 goto L67 else goto L43 :: bool
L43:
    unreachable
L44:
    r57 = __mypyc_self__.__mypyc_temp__0
    if is_error(r57) goto L110 (error at async_set_threshold_if_empty:-1) else goto L45
L45:
    r58 = CPyIter_Send(r57, arg)
    dec_ref r57
    dec_ref arg
    if is_error(r58) goto L47 else goto L46
L46:
    r44 = r58
    goto L28
L47:
    r59 = CPy_FetchStopIterationValue()
    if is_error(r59) goto L67 (error at async_set_threshold_if_empty:317) else goto L48
L48:
    r41 = r59
L49:
    r60 = cast(dict, r41)
    if is_error(r60) goto L67 (error at async_set_threshold_if_empty:317) else goto L50
L50:
    __mypyc_self__.__mypyc_generator_attribute__chain_id_result = r60; r61 = is_error
    if not r61 goto L67 (error at async_set_threshold_if_empty:317) else goto L51 :: bool
L51:
    r62 = __mypyc_self__.__mypyc_generator_attribute__chain_id_result
    if is_error(r62) goto L67 (error at async_set_threshold_if_empty:320) else goto L52
L52:
    r63 = 'result'
    r64 = CPyDict_GetItem(r62, r63)
    dec_ref r62
    if is_error(r64) goto L67 (error at async_set_threshold_if_empty:320) else goto L53
L53:
    r65 = load_address PyLong_Type
    r66 = object 16
    r67 = [r64, r66]
    r68 = load_address r67
    r69 = PyObject_Vectorcall(r65, r68, 2, 0)
    if is_error(r69) goto L111 (error at async_set_threshold_if_empty:320) else goto L54
L54:
    dec_ref r64
    r70 = unbox(int, r69)
    dec_ref r69
    if is_error(r70) goto L67 (error at async_set_threshold_if_empty:320) else goto L55
L55:
    __mypyc_self__.__mypyc_generator_attribute__chain_id = r70; r71 = is_error
    if not r71 goto L67 (error at async_set_threshold_if_empty:320) else goto L56 :: bool
L56:
    r72 = __mypyc_self__.__mypyc_generator_attribute__current_threshold
    if is_error(r72) goto L67 (error at async_set_threshold_if_empty:322) else goto L57
L57:
    r73 = faster_web3._utils.caching.caching_utils.globals :: static
    r74 = 'empty'
    r75 = CPyDict_GetItem(r73, r74)
    if is_error(r75) goto L112 (error at async_set_threshold_if_empty:322) else goto L58
L58:
    r76 = r72 == r75
    dec_ref r72
    dec_ref r75
    if r76 goto L59 else goto L79 :: bool
L59:
    r77 = faster_web3._utils.caching.caching_utils.CHAIN_VALIDATION_THRESHOLD_DEFAULTS :: static
    if is_error(r77) goto L60 else goto L62
L60:
    r78 = raise NameError('value for final name "CHAIN_VALIDATION_THRESHOLD_DEFAULTS" was not set')
    if not r78 goto L67 (error at async_set_threshold_if_empty:324) else goto L61 :: bool
L61:
    unreachable
L62:
    r79 = __mypyc_self__.__mypyc_generator_attribute__chain_id
    if is_error(r79) goto L67 (error at async_set_threshold_if_empty:325) else goto L63
L63:
    r80 = box(int, r79)
    r81 = object 3600
    r82 = CPyDict_Get(r77, r80, r81)
    dec_ref r80
    if is_error(r82) goto L67 (error at async_set_threshold_if_empty:324) else goto L64
L64:
    r83 = cast(union[faster_web3.utils.caching.RequestCacheValidationThreshold, int], r82)
    if is_error(r83) goto L67 (error at async_set_threshold_if_empty:324) else goto L65
L65:
    r84 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r84) goto L113 (error at async_set_threshold_if_empty:323) else goto L66
L66:
    r85 = 'request_cache_validation_threshold'
    r86 = PyObject_SetAttr(r84, r85, r83)
    dec_ref r84
    dec_ref r83
    r87 = r86 >= 0 :: signed
    if not r87 goto L67 (error at async_set_threshold_if_empty:324) else goto L79 :: bool
L67:
    r88 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__2 = r88; r89 = is_error
    if not r89 goto L76 (error at async_set_threshold_if_empty:-1) else goto L68 :: bool
L68:
    r90 = builtins :: module
    r91 = 'Exception'
    r92 = CPyObject_GetAttr(r90, r91)
    if is_error(r92) goto L76 (error at async_set_threshold_if_empty:328) else goto L69
L69:
    r93 = CPy_ExceptionMatches(r92)
    dec_ref r92
    if r93 goto L70 else goto L72 :: bool
L70:
    r94 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r94) goto L76 (error at async_set_threshold_if_empty:329) else goto L71
L71:
    r95 = 'request_cache_validation_threshold'
    r96 = object 3600
    r97 = PyObject_SetAttr(r94, r95, r96)
    dec_ref r94
    r98 = r97 >= 0 :: signed
    if not r98 goto L76 (error at async_set_threshold_if_empty:329) else goto L74 :: bool
L72:
    CPy_Reraise()
    if not 0 goto L76 else goto L73 :: bool
L73:
    unreachable
L74:
    r99 = __mypyc_self__.__mypyc_temp__2
    if is_error(r99) goto L80 (error at async_set_threshold_if_empty:-1) else goto L75
L75:
    CPy_RestoreExcInfo(r99)
    dec_ref r99
    goto L79
L76:
    r100 = __mypyc_self__.__mypyc_temp__2
    if is_error(r100) goto L80 (error at async_set_threshold_if_empty:-1) else goto L77
L77:
    CPy_RestoreExcInfo(r100)
    dec_ref r100
    r101 = CPy_KeepPropagating()
    if not r101 goto L80 else goto L78 :: bool
L78:
    unreachable
L79:
    r102 = <error> :: tuple[object, object, object]
    r103 = r102
    goto L81
L80:
    r104 = CPy_CatchError()
    r103 = r104
L81:
    r105 = __mypyc_self__.__mypyc_generator_attribute__cache_allowed_requests
    if is_error(r105) goto L87 (error at async_set_threshold_if_empty:331) else goto L82
L82:
    r106 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r106) goto L87 (error at async_set_threshold_if_empty:331) else goto L83
L83:
    r107 = 'cache_allowed_requests'
    r108 = box(bool, r105)
    r109 = PyObject_SetAttr(r106, r107, r108)
    dec_ref r106
    r110 = r109 >= 0 :: signed
    if not r110 goto L87 (error at async_set_threshold_if_empty:331) else goto L84 :: bool
L84:
    if is_error(r103) goto L91 else goto L85
L85:
    CPy_Reraise()
    if not 0 goto L87 else goto L114 :: bool
L86:
    unreachable
L87:
    if is_error(r103) goto L89 else goto L88
L88:
    CPy_RestoreExcInfo(r103)
    xdec_ref r103
L89:
    r111 = CPy_KeepPropagating()
    if not r111 goto L100 else goto L90 :: bool
L90:
    unreachable
L91:
    r112 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L92:
    if is_error(stop_iter_ptr) goto L93 else goto L95
L93:
    CPyGen_SetStopIterationValue(r112)
    if not 0 goto L100 else goto L94 :: bool
L94:
    unreachable
L95:
    inc_ref r112
    set_mem stop_iter_ptr, r112 :: builtins.object*
    return 0
L96:
    r114 = r2 == 0
    if r114 goto L115 else goto L97 :: bool
L97:
    r115 = r2 == 1
    if r115 goto L29 else goto L116 :: bool
L98:
    r116 = raise StopIteration
    if not r116 goto L100 (error at async_set_threshold_if_empty:307) else goto L99 :: bool
L99:
    unreachable
L100:
    r117 = <error> :: object
    return r117
L101:
    dec_ref r9
    goto L100
L102:
    dec_ref r29
    goto L67
L103:
    dec_ref r29
    dec_ref r31
    goto L67
L104:
    dec_ref r41
    goto L67
L105:
    xdec_ref r1
    goto L32
L106:
    xdec_ref r1
    goto L31
L107:
    xdec_ref r1
    goto L41
L108:
    dec_ref r44
    goto L41
L109:
    dec_ref r41
    goto L41
L110:
    dec_ref arg
    goto L67
L111:
    dec_ref r64
    goto L67
L112:
    dec_ref r72
    goto L67
L113:
    dec_ref r83
    goto L67
L114:
    xdec_ref r103
    goto L86
L115:
    xdec_ref r1
    goto L1
L116:
    xdec_ref r1
    goto L98

def async_set_threshold_if_empty_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_set_threshold_if_empty_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_set_threshold_if_empty_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_set_threshold_if_empty_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_set_threshold_if_empty_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_set_threshold_if_empty_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = async_set_threshold_if_empty_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def async_set_threshold_if_empty_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def async_set_threshold_if_empty_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_set_threshold_if_empty(provider):
    provider :: object
    r0 :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    r1, r2 :: bool
    r3 :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
L0:
    r0 = async_set_threshold_if_empty_gen()
    if is_error(r0) goto L3 (error at async_set_threshold_if_empty:307) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref provider
    r0.__mypyc_generator_attribute__provider = provider; r2 = is_error
    if not r2 goto L4 (error at async_set_threshold_if_empty:307) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    return r3
L4:
    dec_ref r0
    goto L3

def _async_should_cache_response_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3, r4, r5 :: object
    r6 :: i32
    r7 :: object
    r8 :: bit
    r9 :: dict
    r10 :: str
    r11, r12 :: object
    r13 :: bool
    r14 :: str
    r15 :: dict
    r16 :: i32
    r17 :: bit
    r18 :: bool
    r19 :: union[object, None]
    r20 :: object
    r21 :: bool
    r22 :: object[1]
    r23 :: object_ptr
    r24 :: object
    r25 :: bool
    r26 :: object
    r27 :: bool
    r28 :: object
    r29 :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    r30 :: bool
    r31 :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    r32, r33 :: object
    r34 :: object_ptr
    r35 :: object
    r36 :: bit
    r37 :: object
    r38 :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    r39 :: bool
    r40 :: object
    r41 :: bool
    r42 :: object
    r43 :: bit
    r44 :: tuple[object, object, object]
    r45 :: bool
    r46 :: object_ptr
    r47 :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    r48 :: bool
    r49, r50, r51 :: tuple[object, object, object]
    r52 :: bit
    r53 :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    r54, r55 :: object
    r56 :: str
    r57 :: dict
    r58 :: bool
    r59 :: i32
    r60 :: bit
    r61 :: bool
    r62 :: object
    r63 :: str
    r64, r65 :: object
    r66 :: bit
    r67 :: dict
    r68 :: bool
    r69 :: str
    r70 :: object
    r71 :: bool
    r72, r73 :: object
    r74 :: bool
    r75 :: object[1]
    r76 :: object_ptr
    r77 :: object
    r78 :: bool
    r79, r80 :: object
    r81 :: union[object, None]
    r82 :: object
    r83 :: object[3]
    r84 :: object_ptr
    r85, r86 :: object
    r87 :: bool
    r88, r89, r90, r91, r92 :: object
    r93 :: bool
    r94 :: object
    r95 :: bool
    r96 :: object
    r97 :: bit
    r98 :: tuple[object, object, object]
    r99 :: bool
    r100 :: object_ptr
    r101 :: object
    r102 :: bool
    r103, r104, r105 :: tuple[object, object, object]
    r106 :: bit
    r107, r108, r109 :: object
    r110 :: union[object, bool]
    r111, r112 :: object
    r113 :: union[object, None]
    r114 :: object
    r115 :: object[3]
    r116 :: object_ptr
    r117 :: object
    r118 :: bool
    r119 :: object
    r120 :: bool
    r121, r122, r123 :: bit
    r124 :: bool
    r125 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = <error> :: object
    r5 = r4
    r6 = __mypyc_self__.__mypyc_next_label__
    goto L123
L1:
    r7 = load_address _Py_NoneStruct
    r8 = type != r7
    if r8 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L128 (error at _async_should_cache_response:334) else goto L3 :: bool
L3:
    unreachable
L4:
    r9 = __mypyc_self__.__mypyc_generator_attribute__response
    if is_error(r9) goto L128 (error at _async_should_cache_response:340) else goto L5
L5:
    r10 = 'result'
    r11 = box(None, 1)
    r12 = CPyDict_Get(r9, r10, r11)
    dec_ref r9
    if is_error(r12) goto L128 (error at _async_should_cache_response:340) else goto L6
L6:
    __mypyc_self__.__mypyc_generator_attribute__result = r12; r13 = is_error
    if not r13 goto L128 (error at _async_should_cache_response:340) else goto L7 :: bool
L7:
    r14 = 'error'
    r15 = __mypyc_self__.__mypyc_generator_attribute__response
    if is_error(r15) goto L128 (error at _async_should_cache_response:341) else goto L8
L8:
    r16 = PyDict_Contains(r15, r14)
    dec_ref r15
    r17 = r16 >= 0 :: signed
    if not r17 goto L128 (error at _async_should_cache_response:341) else goto L9 :: bool
L9:
    r18 = truncate r16: i32 to builtins.bool
    if r18 goto L17 else goto L10 :: bool
L10:
    r19 = __mypyc_self__.__mypyc_generator_attribute__result
    if is_error(r19) goto L128 (error at _async_should_cache_response:341) else goto L11
L11:
    r20 = faster_web3._utils.caching.caching_utils.is_null :: static
    if is_error(r20) goto L129 else goto L14
L12:
    r21 = raise NameError('value for final name "is_null" was not set')
    if not r21 goto L128 (error at _async_should_cache_response:341) else goto L13 :: bool
L13:
    unreachable
L14:
    r22 = [r19]
    r23 = load_address r22
    r24 = PyObject_Vectorcall(r20, r23, 1, 0)
    if is_error(r24) goto L130 (error at _async_should_cache_response:341) else goto L15
L15:
    dec_ref r19
    r25 = unbox(bool, r24)
    dec_ref r24
    if is_error(r25) goto L128 (error at _async_should_cache_response:341) else goto L16
L16:
    if r25 goto L17 else goto L22 :: bool
L17:
    r26 = box(bool, 0)
    __mypyc_self__.__mypyc_next_label__ = -1
L18:
    if is_error(stop_iter_ptr) goto L19 else goto L21
L19:
    CPyGen_SetStopIterationValue(r26)
    if not 0 goto L128 else goto L20 :: bool
L20:
    unreachable
L21:
    inc_ref r26
    set_mem stop_iter_ptr, r26 :: builtins.object*
    return 0
L22:
    r28 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r28) goto L128 (error at _async_should_cache_response:344) else goto L23
L23:
    r29 = async_set_threshold_if_empty(r28)
    dec_ref r28
    if is_error(r29) goto L128 (error at _async_should_cache_response:344) else goto L24
L24:
    __mypyc_self__.__mypyc_temp__3 = r29; r30 = is_error
    if not r30 goto L128 (error at _async_should_cache_response:-1) else goto L25 :: bool
L25:
    r31 = __mypyc_self__.__mypyc_temp__3
    if is_error(r31) goto L128 (error at _async_should_cache_response:-1) else goto L26
L26:
    r32 = load_address _Py_NoneStruct
    r33 = <error> :: object
    r1 = r33
    r34 = load_address r1
    r35 = r31.__mypyc_generator_helper__(r32, r32, r32, r32, r34)
    dec_ref r31
    if is_error(r35) goto L27 else goto L131
L27:
    r36 = r1 != 0
    if not r36 goto L132 (error at _async_should_cache_response:-1) else goto L28 :: bool
L28:
    r37 = r1
    dec_ref r37
    r38 = <error> :: faster_web3._utils.caching.caching_utils.async_set_threshold_if_empty_gen
    __mypyc_self__.__mypyc_temp__3 = r38; r39 = is_error
    if not r39 goto L128 (error at _async_should_cache_response:344) else goto L51 :: bool
L29:
    r40 = r35
L30:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r40
L31:
    r42 = load_address _Py_NoneStruct
    r43 = type != r42
    if r43 goto L32 else goto L133 :: bool
L32:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L35 (error at _async_should_cache_response:344) else goto L134 :: bool
L33:
    unreachable
L34:
    inc_ref arg
    goto L46
L35:
    r44 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__4 = r44; r45 = is_error
    if not r45 goto L135 (error at _async_should_cache_response:-1) else goto L36 :: bool
L36:
    r46 = load_address r3
    r47 = __mypyc_self__.__mypyc_temp__3
    if is_error(r47) goto L135 (error at _async_should_cache_response:-1) else goto L37
L37:
    r48 = CPy_YieldFromErrorHandle(r47, r46)
    dec_ref r47
    if is_error(r48) goto L135 (error at _async_should_cache_response:344) else goto L38
L38:
    if r48 goto L41 else goto L39 :: bool
L39:
    r40 = r3
    r49 = __mypyc_self__.__mypyc_temp__4
    if is_error(r49) goto L136 (error at _async_should_cache_response:-1) else goto L40
L40:
    CPy_RestoreExcInfo(r49)
    dec_ref r49
    goto L30
L41:
    r37 = r3
    dec_ref r37
    r50 = __mypyc_self__.__mypyc_temp__4
    if is_error(r50) goto L43 (error at _async_should_cache_response:-1) else goto L42
L42:
    CPy_RestoreExcInfo(r50)
    dec_ref r50
    goto L51
L43:
    r51 = __mypyc_self__.__mypyc_temp__4
    if is_error(r51) goto L128 (error at _async_should_cache_response:-1) else goto L44
L44:
    CPy_RestoreExcInfo(r51)
    dec_ref r51
    r52 = CPy_KeepPropagating()
    if not r52 goto L128 else goto L45 :: bool
L45:
    unreachable
L46:
    r53 = __mypyc_self__.__mypyc_temp__3
    if is_error(r53) goto L137 (error at _async_should_cache_response:-1) else goto L47
L47:
    r54 = CPyIter_Send(r53, arg)
    dec_ref r53
    dec_ref arg
    if is_error(r54) goto L49 else goto L48
L48:
    r40 = r54
    goto L30
L49:
    r55 = CPy_FetchStopIterationValue()
    if is_error(r55) goto L128 (error at _async_should_cache_response:344) else goto L50
L50:
    r37 = r55
    dec_ref r37
L51:
    r56 = __mypyc_self__.__mypyc_generator_attribute__method
    if is_error(r56) goto L128 (error at _async_should_cache_response:346) else goto L52
L52:
    r57 = faster_web3._utils.caching.caching_utils.ASYNC_INTERNAL_VALIDATION_MAP :: static
    if is_error(r57) goto L138 else goto L55
L53:
    r58 = raise NameError('value for final name "ASYNC_INTERNAL_VALIDATION_MAP" was not set')
    if not r58 goto L128 (error at _async_should_cache_response:346) else goto L54 :: bool
L54:
    unreachable
L55:
    r59 = PyDict_Contains(r57, r56)
    dec_ref r56
    r60 = r59 >= 0 :: signed
    if not r60 goto L128 (error at _async_should_cache_response:346) else goto L56 :: bool
L56:
    r61 = truncate r59: i32 to builtins.bool
    if r61 goto L57 else goto L118 :: bool
L57:
    r62 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r62) goto L128 (error at _async_should_cache_response:347) else goto L58
L58:
    r63 = 'request_cache_validation_threshold'
    r64 = CPyObject_GetAttr(r62, r63)
    dec_ref r62
    if is_error(r64) goto L128 (error at _async_should_cache_response:347) else goto L59
L59:
    r65 = load_address _Py_NoneStruct
    r66 = r64 != r65
    dec_ref r64
    if r66 goto L60 else goto L118 :: bool
L60:
    r67 = faster_web3._utils.caching.caching_utils.ASYNC_INTERNAL_VALIDATION_MAP :: static
    if is_error(r67) goto L61 else goto L63
L61:
    r68 = raise NameError('value for final name "ASYNC_INTERNAL_VALIDATION_MAP" was not set')
    if not r68 goto L128 (error at _async_should_cache_response:349) else goto L62 :: bool
L62:
    unreachable
L63:
    r69 = __mypyc_self__.__mypyc_generator_attribute__method
    if is_error(r69) goto L128 (error at _async_should_cache_response:349) else goto L64
L64:
    r70 = CPyDict_GetItem(r67, r69)
    dec_ref r69
    if is_error(r70) goto L128 (error at _async_should_cache_response:349) else goto L65
L65:
    __mypyc_self__.__mypyc_generator_attribute__cache_validator = r70; r71 = is_error
    if not r71 goto L128 (error at _async_should_cache_response:349) else goto L66 :: bool
L66:
    r72 = __mypyc_self__.__mypyc_generator_attribute__cache_validator
    if is_error(r72) goto L128 (error at _async_should_cache_response:352) else goto L67
L67:
    r73 = faster_web3._utils.caching.caching_utils.iscoroutinefunction :: static
    if is_error(r73) goto L139 else goto L70
L68:
    r74 = raise NameError('value for final name "iscoroutinefunction" was not set')
    if not r74 goto L128 (error at _async_should_cache_response:352) else goto L69 :: bool
L69:
    unreachable
L70:
    r75 = [r72]
    r76 = load_address r75
    r77 = PyObject_Vectorcall(r73, r76, 1, 0)
    if is_error(r77) goto L140 (error at _async_should_cache_response:352) else goto L71
L71:
    dec_ref r72
    r78 = unbox(bool, r77)
    dec_ref r77
    if is_error(r78) goto L128 (error at _async_should_cache_response:352) else goto L72
L72:
    if r78 goto L73 else goto L107 :: bool
L73:
    r79 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r79) goto L128 (error at _async_should_cache_response:351) else goto L74
L74:
    r80 = __mypyc_self__.__mypyc_generator_attribute__params
    if is_error(r80) goto L141 (error at _async_should_cache_response:351) else goto L75
L75:
    r81 = __mypyc_self__.__mypyc_generator_attribute__result
    if is_error(r81) goto L142 (error at _async_should_cache_response:351) else goto L76
L76:
    r82 = __mypyc_self__.__mypyc_generator_attribute__cache_validator
    if is_error(r82) goto L143 (error at _async_should_cache_response:351) else goto L77
L77:
    r83 = [r79, r80, r81]
    r84 = load_address r83
    r85 = PyObject_Vectorcall(r82, r84, 3, 0)
    dec_ref r82
    if is_error(r85) goto L143 (error at _async_should_cache_response:351) else goto L78
L78:
    dec_ref r79
    dec_ref r80
    dec_ref r81
    r86 = CPy_GetCoro(r85)
    dec_ref r85
    if is_error(r86) goto L128 (error at _async_should_cache_response:351) else goto L79
L79:
    __mypyc_self__.__mypyc_temp__5 = r86; r87 = is_error
    if not r87 goto L128 (error at _async_should_cache_response:-1) else goto L80 :: bool
L80:
    r88 = __mypyc_self__.__mypyc_temp__5
    if is_error(r88) goto L128 (error at _async_should_cache_response:-1) else goto L81
L81:
    r89 = CPyIter_Next(r88)
    dec_ref r88
    if is_error(r89) goto L82 else goto L84
L82:
    r90 = CPy_FetchStopIterationValue()
    if is_error(r90) goto L128 (error at _async_should_cache_response:351) else goto L83
L83:
    r91 = r90
    r92 = <error> :: object
    __mypyc_self__.__mypyc_temp__5 = r92; r93 = is_error
    if not r93 goto L144 (error at _async_should_cache_response:351) else goto L106 :: bool
L84:
    r94 = r89
L85:
    __mypyc_self__.__mypyc_next_label__ = 2
    return r94
L86:
    r96 = load_address _Py_NoneStruct
    r97 = type != r96
    if r97 goto L87 else goto L145 :: bool
L87:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L90 (error at _async_should_cache_response:351) else goto L146 :: bool
L88:
    unreachable
L89:
    inc_ref arg
    goto L101
L90:
    r98 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__6 = r98; r99 = is_error
    if not r99 goto L147 (error at _async_should_cache_response:-1) else goto L91 :: bool
L91:
    r100 = load_address r5
    r101 = __mypyc_self__.__mypyc_temp__5
    if is_error(r101) goto L147 (error at _async_should_cache_response:-1) else goto L92
L92:
    r102 = CPy_YieldFromErrorHandle(r101, r100)
    dec_ref r101
    if is_error(r102) goto L147 (error at _async_should_cache_response:351) else goto L93
L93:
    if r102 goto L96 else goto L94 :: bool
L94:
    r94 = r5
    r103 = __mypyc_self__.__mypyc_temp__6
    if is_error(r103) goto L148 (error at _async_should_cache_response:-1) else goto L95
L95:
    CPy_RestoreExcInfo(r103)
    dec_ref r103
    goto L85
L96:
    r91 = r5
    r104 = __mypyc_self__.__mypyc_temp__6
    if is_error(r104) goto L149 (error at _async_should_cache_response:-1) else goto L97
L97:
    CPy_RestoreExcInfo(r104)
    dec_ref r104
    goto L106
L98:
    r105 = __mypyc_self__.__mypyc_temp__6
    if is_error(r105) goto L128 (error at _async_should_cache_response:-1) else goto L99
L99:
    CPy_RestoreExcInfo(r105)
    dec_ref r105
    r106 = CPy_KeepPropagating()
    if not r106 goto L128 else goto L100 :: bool
L100:
    unreachable
L101:
    r107 = __mypyc_self__.__mypyc_temp__5
    if is_error(r107) goto L150 (error at _async_should_cache_response:-1) else goto L102
L102:
    r108 = CPyIter_Send(r107, arg)
    dec_ref r107
    dec_ref arg
    if is_error(r108) goto L104 else goto L103
L103:
    r94 = r108
    goto L85
L104:
    r109 = CPy_FetchStopIterationValue()
    if is_error(r109) goto L128 (error at _async_should_cache_response:351) else goto L105
L105:
    r91 = r109
L106:
    r110 = r91
    goto L113
L107:
    r111 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r111) goto L128 (error at _async_should_cache_response:353) else goto L108
L108:
    r112 = __mypyc_self__.__mypyc_generator_attribute__params
    if is_error(r112) goto L151 (error at _async_should_cache_response:353) else goto L109
L109:
    r113 = __mypyc_self__.__mypyc_generator_attribute__result
    if is_error(r113) goto L152 (error at _async_should_cache_response:353) else goto L110
L110:
    r114 = __mypyc_self__.__mypyc_generator_attribute__cache_validator
    if is_error(r114) goto L153 (error at _async_should_cache_response:353) else goto L111
L111:
    r115 = [r111, r112, r113]
    r116 = load_address r115
    r117 = PyObject_Vectorcall(r114, r116, 3, 0)
    dec_ref r114
    if is_error(r117) goto L153 (error at _async_should_cache_response:353) else goto L112
L112:
    dec_ref r111
    dec_ref r112
    dec_ref r113
    r110 = r117
L113:
    __mypyc_self__.__mypyc_next_label__ = -1
L114:
    if is_error(stop_iter_ptr) goto L115 else goto L117
L115:
    CPyGen_SetStopIterationValue(r110)
    dec_ref r110
    if not 0 goto L128 else goto L116 :: bool
L116:
    unreachable
L117:
    set_mem stop_iter_ptr, r110 :: builtins.object*
    return 0
L118:
    r119 = box(bool, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L119:
    if is_error(stop_iter_ptr) goto L120 else goto L122
L120:
    CPyGen_SetStopIterationValue(r119)
    if not 0 goto L128 else goto L121 :: bool
L121:
    unreachable
L122:
    inc_ref r119
    set_mem stop_iter_ptr, r119 :: builtins.object*
    return 0
L123:
    r121 = r6 == 0
    if r121 goto L154 else goto L124 :: bool
L124:
    r122 = r6 == 1
    if r122 goto L155 else goto L156 :: bool
L125:
    r123 = r6 == 2
    if r123 goto L86 else goto L157 :: bool
L126:
    r124 = raise StopIteration
    if not r124 goto L128 (error at _async_should_cache_response:334) else goto L127 :: bool
L127:
    unreachable
L128:
    r125 = <error> :: object
    return r125
L129:
    dec_ref r19
    goto L12
L130:
    dec_ref r19
    goto L128
L131:
    xdec_ref r1
    goto L29
L132:
    xdec_ref r1
    goto L128
L133:
    xdec_ref r3
    goto L34
L134:
    xdec_ref r3
    goto L33
L135:
    xdec_ref r3
    goto L43
L136:
    dec_ref r40
    goto L43
L137:
    dec_ref arg
    goto L128
L138:
    dec_ref r56
    goto L53
L139:
    dec_ref r72
    goto L68
L140:
    dec_ref r72
    goto L128
L141:
    dec_ref r79
    goto L128
L142:
    dec_ref r79
    dec_ref r80
    goto L128
L143:
    dec_ref r79
    dec_ref r80
    dec_ref r81
    goto L128
L144:
    dec_ref r91
    goto L128
L145:
    xdec_ref r5
    goto L89
L146:
    xdec_ref r5
    goto L88
L147:
    xdec_ref r5
    goto L98
L148:
    dec_ref r94
    goto L98
L149:
    dec_ref r91
    goto L98
L150:
    dec_ref arg
    goto L128
L151:
    dec_ref r111
    goto L128
L152:
    dec_ref r111
    dec_ref r112
    goto L128
L153:
    dec_ref r111
    dec_ref r112
    dec_ref r113
    goto L128
L154:
    xdec_ref r3
    xdec_ref r5
    goto L1
L155:
    xdec_ref r5
    goto L31
L156:
    xdec_ref r3
    goto L125
L157:
    xdec_ref r5
    goto L126

def _async_should_cache_response_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _async_should_cache_response_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _async_should_cache_response_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _async_should_cache_response_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _async_should_cache_response_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def _async_should_cache_response_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = _async_should_cache_response_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def _async_should_cache_response_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def _async_should_cache_response_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def _async_should_cache_response(provider, method, params, response):
    provider :: object
    method :: str
    params :: object
    response :: dict
    r0 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r1, r2, r3, r4, r5 :: bool
    r6 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
L0:
    r0 = _async_should_cache_response_gen()
    if is_error(r0) goto L6 (error at _async_should_cache_response:334) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref provider
    r0.__mypyc_generator_attribute__provider = provider; r2 = is_error
    if not r2 goto L7 (error at _async_should_cache_response:334) else goto L2 :: bool
L2:
    inc_ref method
    r0.__mypyc_generator_attribute__method = method; r3 = is_error
    if not r3 goto L7 (error at _async_should_cache_response:334) else goto L3 :: bool
L3:
    inc_ref params
    r0.__mypyc_generator_attribute__params = params; r4 = is_error
    if not r4 goto L7 (error at _async_should_cache_response:334) else goto L4 :: bool
L4:
    inc_ref response
    r0.__mypyc_generator_attribute__response = response; r5 = is_error
    if not r5 goto L7 (error at _async_should_cache_response:334) else goto L5 :: bool
L5:
    return r0
L6:
    r6 = <error> :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    return r6
L7:
    dec_ref r0
    goto L6

def wrapper_async_handle_request_caching_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2, r3 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    inc_ref __mypyc_self__
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    if is_error(r2) goto L4 else goto L3
L3:
    return r2
L4:
    r3 = <error> :: object
    return r3

def wrapper_gen___363.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11 :: object
    r12, r13 :: tuple[object, object, object]
    r14, r15 :: object
    r16 :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_request_caching_env
    r17 :: i32
    r18 :: faster_web3._utils.caching.caching_utils.async_handle_request_caching_env
    r19 :: object
    r20 :: bit
    r21 :: object
    r22 :: str
    r23 :: object
    r24 :: bool
    r25 :: object
    r26 :: str
    r27 :: object
    r28 :: faster_web3.utils.caching.SimpleCache
    r29 :: bool
    r30 :: object
    r31 :: bool
    r32 :: object
    r33 :: int
    r34, r35, r36 :: str
    r37 :: object
    r38 :: tuple[str, object]
    r39 :: object
    r40, r41, r42 :: str
    r43 :: bool
    r44 :: faster_web3.utils.caching.SimpleCache
    r45 :: str
    r46 :: union[object, None]
    r47 :: bool
    r48 :: union[object, None]
    r49 :: object
    r50 :: bit
    r51 :: union[object, None]
    r52 :: bool
    r53 :: object
    r54 :: str
    r55, r56 :: object
    r57 :: object[3]
    r58 :: object_ptr
    r59, r60 :: object
    r61 :: bool
    r62, r63, r64, r65, r66 :: object
    r67 :: bool
    r68 :: object
    r69 :: bool
    r70 :: object
    r71 :: bit
    r72 :: tuple[object, object, object]
    r73 :: bool
    r74 :: object_ptr
    r75 :: object
    r76 :: bool
    r77, r78, r79 :: tuple[object, object, object]
    r80 :: bit
    r81, r82, r83 :: object
    r84 :: dict
    r85 :: bool
    r86 :: object
    r87 :: str
    r88 :: object
    r89 :: dict
    r90 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r91 :: bool
    r92 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r93, r94 :: object
    r95 :: object_ptr
    r96 :: object
    r97 :: bit
    r98 :: object
    r99 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r100 :: bool
    r101 :: object
    r102 :: bool
    r103 :: object
    r104 :: bit
    r105 :: tuple[object, object, object]
    r106 :: bool
    r107 :: object_ptr
    r108 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r109 :: bool
    r110, r111, r112 :: tuple[object, object, object]
    r113 :: bit
    r114 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r115, r116 :: object
    r117 :: bool
    r118 :: object
    r119 :: str
    r120, r121 :: object
    r122 :: str
    r123 :: object
    r124 :: bool
    r125 :: str
    r126 :: object
    r127 :: object[1]
    r128 :: object_ptr
    r129 :: object
    r130, r131 :: bool
    r132 :: object
    r133 :: bool
    r134, r135, r136, r137, r138 :: object
    r139 :: bool
    r140 :: object
    r141 :: bool
    r142 :: object
    r143 :: bit
    r144 :: tuple[object, object, object]
    r145 :: bool
    r146 :: object_ptr
    r147 :: object
    r148 :: bool
    r149, r150, r151 :: tuple[object, object, object]
    r152 :: bit
    r153, r154, r155 :: object
    r156 :: faster_web3.utils.caching.SimpleCache
    r157 :: str
    r158 :: dict
    r159 :: tuple[object, union[dict, None]]
    r160 :: tuple[object, object, object]
    r161, r162 :: bool
    r163 :: tuple[object, object, object]
    r164, r165, r166, r167, r168 :: object
    r169 :: object[4]
    r170 :: object_ptr
    r171, r172 :: object
    r173 :: bool
    r174, r175, r176, r177, r178 :: object
    r179 :: bool
    r180 :: object
    r181 :: bool
    r182 :: object
    r183 :: bit
    r184 :: tuple[object, object, object]
    r185 :: bool
    r186 :: object_ptr
    r187 :: object
    r188 :: bool
    r189, r190, r191 :: tuple[object, object, object]
    r192 :: bit
    r193, r194, r195 :: object
    r196 :: i32
    r197 :: bit
    r198 :: bool
    r199, r200 :: tuple[object, object, object]
    r201 :: bit
    r202, r203 :: tuple[object, object, object]
    r204 :: bool
    r205, r206, r207 :: object
    r208 :: object[4]
    r209 :: object_ptr
    r210, r211 :: object
    r212 :: bool
    r213, r214, r215, r216, r217 :: object
    r218 :: bool
    r219 :: object
    r220 :: bool
    r221 :: object
    r222 :: bit
    r223 :: tuple[object, object, object]
    r224 :: bool
    r225 :: object_ptr
    r226 :: object
    r227 :: bool
    r228, r229, r230 :: tuple[object, object, object]
    r231 :: bit
    r232, r233, r234 :: object
    r235 :: bit
    r236 :: dict
    r237 :: bool
    r238 :: object
    r239 :: str
    r240, r241 :: object
    r242 :: object[3]
    r243 :: object_ptr
    r244, r245 :: object
    r246 :: bool
    r247, r248, r249, r250, r251 :: object
    r252 :: bool
    r253 :: object
    r254 :: bool
    r255 :: object
    r256 :: bit
    r257 :: tuple[object, object, object]
    r258 :: bool
    r259 :: object_ptr
    r260 :: object
    r261 :: bool
    r262, r263, r264 :: tuple[object, object, object]
    r265 :: bit
    r266, r267, r268 :: object
    r269 :: dict
    r270 :: bool
    r271, r272, r273, r274, r275, r276, r277 :: bit
    r278 :: bool
    r279 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = <error> :: object
    r3 = r2
    xdec_ref r3
    r4 = <error> :: object
    r5 = r4
    r6 = <error> :: object
    r7 = r6
    r8 = <error> :: object
    r9 = r8
    r10 = <error> :: object
    r11 = r10
    r12 = <error> :: tuple[object, object, object]
    r13 = r12
    r14 = <error> :: object
    r15 = r14
    r16 = __mypyc_self__.__mypyc_env__
    if is_error(r16) goto L286 (error at wrapper:363) else goto L1
L1:
    r17 = r16.__mypyc_next_label__
    r18 = r16.__mypyc_env__
    if is_error(r18) goto L287 (error at wrapper:363) else goto L276
L2:
    r19 = load_address _Py_NoneStruct
    r20 = type != r19
    if r20 goto L288 else goto L5 :: bool
L3:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L285 (error at wrapper:363) else goto L4 :: bool
L4:
    unreachable
L5:
    r21 = r16.__mypyc_generator_attribute__provider
    if is_error(r21) goto L289 (error at wrapper:366) else goto L6
L6:
    r22 = r16.__mypyc_generator_attribute__method
    if is_error(r22) goto L290 (error at wrapper:366) else goto L7
L7:
    r23 = r16.__mypyc_generator_attribute__params
    if is_error(r23) goto L291 (error at wrapper:366) else goto L8
L8:
    r24 = is_cacheable_request(r21, r22, r23)
    dec_ref r21
    dec_ref r22
    dec_ref r23
    if is_error(r24) goto L289 (error at wrapper:366) else goto L9
L9:
    if r24 goto L10 else goto L237 :: bool
L10:
    r25 = r16.__mypyc_generator_attribute__provider
    if is_error(r25) goto L289 (error at wrapper:367) else goto L11
L11:
    r26 = '_request_cache'
    r27 = CPyObject_GetAttr(r25, r26)
    dec_ref r25
    if is_error(r27) goto L289 (error at wrapper:367) else goto L12
L12:
    r28 = cast(faster_web3.utils.caching.SimpleCache, r27)
    if is_error(r28) goto L289 (error at wrapper:367) else goto L13
L13:
    r16.__mypyc_generator_attribute__request_cache = r28; r29 = is_error
    if not r29 goto L289 (error at wrapper:367) else goto L14 :: bool
L14:
    r30 = faster_web3._utils.caching.caching_utils.get_ident :: static
    if is_error(r30) goto L292 else goto L17
L15:
    r31 = raise NameError('value for final name "get_ident" was not set')
    if not r31 goto L285 (error at wrapper:369) else goto L16 :: bool
L16:
    unreachable
L17:
    r32 = PyObject_Vectorcall(r30, 0, 0, 0)
    if is_error(r32) goto L289 (error at wrapper:369) else goto L18
L18:
    r33 = unbox(int, r32)
    dec_ref r32
    if is_error(r33) goto L289 (error at wrapper:369) else goto L19
L19:
    r34 = CPyTagged_Str(r33)
    dec_ref r33 :: int
    if is_error(r34) goto L289 (error at wrapper:369) else goto L20
L20:
    r35 = ':'
    r36 = r16.__mypyc_generator_attribute__method
    if is_error(r36) goto L293 (error at wrapper:369) else goto L21
L21:
    r37 = r16.__mypyc_generator_attribute__params
    if is_error(r37) goto L294 (error at wrapper:369) else goto L22
L22:
    r38 = (r36, r37)
    r39 = box(tuple[str, object], r38)
    r40 = PyObject_Str(r39)
    dec_ref r39
    if is_error(r40) goto L293 (error at wrapper:369) else goto L23
L23:
    r41 = CPyStr_Build(3, r34, r35, r40)
    dec_ref r34
    dec_ref r40
    if is_error(r41) goto L289 (error at wrapper:369) else goto L24
L24:
    r42 = generate_cache_key(r41)
    dec_ref r41
    if is_error(r42) goto L289 (error at wrapper:368) else goto L25
L25:
    r16.__mypyc_generator_attribute__cache_key = r42; r43 = is_error
    if not r43 goto L289 (error at wrapper:368) else goto L26 :: bool
L26:
    r44 = r16.__mypyc_generator_attribute__request_cache
    if is_error(r44) goto L289 (error at wrapper:371) else goto L27
L27:
    r45 = r16.__mypyc_generator_attribute__cache_key
    if is_error(r45) goto L295 (error at wrapper:371) else goto L28
L28:
    r46 = r44.get_cache_entry(r45)
    dec_ref r45
    dec_ref r44
    if is_error(r46) goto L289 (error at wrapper:371) else goto L29
L29:
    r16.__mypyc_generator_attribute__cache_result = r46; r47 = is_error
    if not r47 goto L289 (error at wrapper:371) else goto L30 :: bool
L30:
    r48 = r16.__mypyc_generator_attribute__cache_result
    if is_error(r48) goto L289 (error at wrapper:372) else goto L31
L31:
    r49 = load_address _Py_NoneStruct
    r50 = r48 != r49
    dec_ref r48
    if r50 goto L296 else goto L38 :: bool
L32:
    r51 = r16.__mypyc_generator_attribute__cache_result
    if is_error(r51) goto L297 (error at wrapper:373) else goto L33
L33:
    r16.__mypyc_next_label__ = -1
    dec_ref r16
L34:
    if is_error(stop_iter_ptr) goto L35 else goto L37
L35:
    CPyGen_SetStopIterationValue(r51)
    dec_ref r51
    if not 0 goto L285 else goto L36 :: bool
L36:
    unreachable
L37:
    set_mem stop_iter_ptr, r51 :: builtins.object*
    return 0
L38:
    r53 = r16.__mypyc_generator_attribute__provider
    if is_error(r53) goto L289 (error at wrapper:375) else goto L39
L39:
    r54 = r16.__mypyc_generator_attribute__method
    if is_error(r54) goto L298 (error at wrapper:375) else goto L40
L40:
    r55 = r16.__mypyc_generator_attribute__params
    if is_error(r55) goto L299 (error at wrapper:375) else goto L41
L41:
    r56 = r18.func
    dec_ref r18
    if is_error(r56) goto L300 (error at wrapper:375) else goto L42
L42:
    r57 = [r53, r54, r55]
    r58 = load_address r57
    r59 = PyObject_Vectorcall(r56, r58, 3, 0)
    dec_ref r56
    if is_error(r59) goto L300 (error at wrapper:375) else goto L43
L43:
    dec_ref r53
    dec_ref r54
    dec_ref r55
    r60 = CPy_GetCoro(r59)
    dec_ref r59
    if is_error(r60) goto L297 (error at wrapper:375) else goto L44
L44:
    r16.__mypyc_temp__7 = r60; r61 = is_error
    if not r61 goto L297 (error at wrapper:-1) else goto L45 :: bool
L45:
    r62 = r16.__mypyc_temp__7
    if is_error(r62) goto L297 (error at wrapper:-1) else goto L46
L46:
    r63 = CPyIter_Next(r62)
    dec_ref r62
    if is_error(r63) goto L47 else goto L49
L47:
    r64 = CPy_FetchStopIterationValue()
    if is_error(r64) goto L297 (error at wrapper:375) else goto L48
L48:
    r65 = r64
    r66 = <error> :: object
    r16.__mypyc_temp__7 = r66; r67 = is_error
    if not r67 goto L301 (error at wrapper:375) else goto L71 :: bool
L49:
    r68 = r63
L50:
    r16.__mypyc_next_label__ = 1
    dec_ref r16
    return r68
L51:
    r70 = load_address _Py_NoneStruct
    r71 = type != r70
    if r71 goto L52 else goto L302 :: bool
L52:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L55 (error at wrapper:375) else goto L303 :: bool
L53:
    unreachable
L54:
    inc_ref arg
    goto L66
L55:
    r72 = CPy_CatchError()
    r16.__mypyc_temp__8 = r72; r73 = is_error
    if not r73 goto L304 (error at wrapper:-1) else goto L56 :: bool
L56:
    r74 = load_address r1
    r75 = r16.__mypyc_temp__7
    if is_error(r75) goto L304 (error at wrapper:-1) else goto L57
L57:
    r76 = CPy_YieldFromErrorHandle(r75, r74)
    dec_ref r75
    if is_error(r76) goto L304 (error at wrapper:375) else goto L58
L58:
    if r76 goto L61 else goto L59 :: bool
L59:
    r68 = r1
    r77 = r16.__mypyc_temp__8
    if is_error(r77) goto L305 (error at wrapper:-1) else goto L60
L60:
    CPy_RestoreExcInfo(r77)
    dec_ref r77
    goto L50
L61:
    r65 = r1
    r78 = r16.__mypyc_temp__8
    if is_error(r78) goto L306 (error at wrapper:-1) else goto L62
L62:
    CPy_RestoreExcInfo(r78)
    dec_ref r78
    goto L71
L63:
    r79 = r16.__mypyc_temp__8
    dec_ref r16
    if is_error(r79) goto L285 (error at wrapper:-1) else goto L64
L64:
    CPy_RestoreExcInfo(r79)
    dec_ref r79
    r80 = CPy_KeepPropagating()
    if not r80 goto L285 else goto L65 :: bool
L65:
    unreachable
L66:
    r81 = r16.__mypyc_temp__7
    if is_error(r81) goto L307 (error at wrapper:-1) else goto L67
L67:
    r82 = CPyIter_Send(r81, arg)
    dec_ref r81
    dec_ref arg
    if is_error(r82) goto L69 else goto L68
L68:
    r68 = r82
    goto L50
L69:
    r83 = CPy_FetchStopIterationValue()
    if is_error(r83) goto L297 (error at wrapper:375) else goto L70
L70:
    r65 = r83
L71:
    r84 = cast(dict, r65)
    if is_error(r84) goto L297 (error at wrapper:375) else goto L72
L72:
    r16.__mypyc_generator_attribute__response = r84; r85 = is_error
    if not r85 goto L297 (error at wrapper:375) else goto L73 :: bool
L73:
    r86 = r16.__mypyc_generator_attribute__provider
    if is_error(r86) goto L297 (error at wrapper:377) else goto L74
L74:
    r87 = r16.__mypyc_generator_attribute__method
    if is_error(r87) goto L308 (error at wrapper:377) else goto L75
L75:
    r88 = r16.__mypyc_generator_attribute__params
    if is_error(r88) goto L309 (error at wrapper:377) else goto L76
L76:
    r89 = r16.__mypyc_generator_attribute__response
    if is_error(r89) goto L310 (error at wrapper:377) else goto L77
L77:
    r90 = _async_should_cache_response(r86, r87, r88, r89)
    dec_ref r86
    dec_ref r87
    dec_ref r88
    dec_ref r89
    if is_error(r90) goto L297 (error at wrapper:376) else goto L78
L78:
    r16.__mypyc_temp__9 = r90; r91 = is_error
    if not r91 goto L297 (error at wrapper:-1) else goto L79 :: bool
L79:
    r92 = r16.__mypyc_temp__9
    if is_error(r92) goto L297 (error at wrapper:-1) else goto L80
L80:
    r93 = load_address _Py_NoneStruct
    r94 = <error> :: object
    r3 = r94
    r95 = load_address r3
    r96 = r92.__mypyc_generator_helper__(r93, r93, r93, r93, r95)
    dec_ref r92
    if is_error(r96) goto L81 else goto L311
L81:
    r97 = r3 != 0
    if not r97 goto L312 (error at wrapper:-1) else goto L82 :: bool
L82:
    r98 = r3
    r99 = <error> :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r16.__mypyc_temp__9 = r99; r100 = is_error
    if not r100 goto L313 (error at wrapper:376) else goto L105 :: bool
L83:
    r101 = r96
L84:
    r16.__mypyc_next_label__ = 2
    dec_ref r16
    return r101
L85:
    r103 = load_address _Py_NoneStruct
    r104 = type != r103
    if r104 goto L86 else goto L314 :: bool
L86:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L89 (error at wrapper:376) else goto L315 :: bool
L87:
    unreachable
L88:
    inc_ref arg
    goto L100
L89:
    r105 = CPy_CatchError()
    r16.__mypyc_temp__10 = r105; r106 = is_error
    if not r106 goto L316 (error at wrapper:-1) else goto L90 :: bool
L90:
    r107 = load_address r5
    r108 = r16.__mypyc_temp__9
    if is_error(r108) goto L316 (error at wrapper:-1) else goto L91
L91:
    r109 = CPy_YieldFromErrorHandle(r108, r107)
    dec_ref r108
    if is_error(r109) goto L316 (error at wrapper:376) else goto L92
L92:
    if r109 goto L95 else goto L93 :: bool
L93:
    r101 = r5
    r110 = r16.__mypyc_temp__10
    if is_error(r110) goto L317 (error at wrapper:-1) else goto L94
L94:
    CPy_RestoreExcInfo(r110)
    dec_ref r110
    goto L84
L95:
    r98 = r5
    r111 = r16.__mypyc_temp__10
    if is_error(r111) goto L318 (error at wrapper:-1) else goto L96
L96:
    CPy_RestoreExcInfo(r111)
    dec_ref r111
    goto L105
L97:
    r112 = r16.__mypyc_temp__10
    dec_ref r16
    if is_error(r112) goto L285 (error at wrapper:-1) else goto L98
L98:
    CPy_RestoreExcInfo(r112)
    dec_ref r112
    r113 = CPy_KeepPropagating()
    if not r113 goto L285 else goto L99 :: bool
L99:
    unreachable
L100:
    r114 = r16.__mypyc_temp__9
    if is_error(r114) goto L319 (error at wrapper:-1) else goto L101
L101:
    r115 = CPyIter_Send(r114, arg)
    dec_ref r114
    dec_ref arg
    if is_error(r115) goto L103 else goto L102
L102:
    r101 = r115
    goto L84
L103:
    r116 = CPy_FetchStopIterationValue()
    if is_error(r116) goto L297 (error at wrapper:376) else goto L104
L104:
    r98 = r116
L105:
    r117 = unbox(bool, r98)
    dec_ref r98
    if is_error(r117) goto L297 (error at wrapper:376) else goto L106
L106:
    if r117 goto L107 else goto L231 :: bool
L107:
    r118 = r16.__mypyc_generator_attribute__provider
    if is_error(r118) goto L297 (error at wrapper:379) else goto L108
L108:
    r119 = '_request_cache_lock'
    r120 = CPyObject_GetAttr(r118, r119)
    dec_ref r118
    if is_error(r120) goto L297 (error at wrapper:379) else goto L109
L109:
    r121 = CPy_TYPE(r120)
    r122 = '__aexit__'
    r123 = CPyObject_GetAttr(r121, r122)
    if is_error(r123) goto L320 (error at wrapper:379) else goto L110
L110:
    r16.__mypyc_temp__11 = r123; r124 = is_error
    if not r124 goto L320 (error at wrapper:-1) else goto L111 :: bool
L111:
    r125 = '__aenter__'
    r126 = CPyObject_GetAttr(r121, r125)
    dec_ref r121
    if is_error(r126) goto L321 (error at wrapper:379) else goto L112
L112:
    r127 = [r120]
    r128 = load_address r127
    r129 = PyObject_Vectorcall(r126, r128, 1, 0)
    dec_ref r126
    if is_error(r129) goto L321 (error at wrapper:379) else goto L113
L113:
    r16.__mypyc_temp__12 = r120; r130 = is_error
    if not r130 goto L322 (error at wrapper:-1) else goto L114 :: bool
L114:
    r16.__mypyc_temp__13 = 1; r131 = is_error
    if not r131 goto L322 (error at wrapper:-1) else goto L115 :: bool
L115:
    r132 = CPy_GetCoro(r129)
    dec_ref r129
    if is_error(r132) goto L297 (error at wrapper:379) else goto L116
L116:
    r16.__mypyc_temp__14 = r132; r133 = is_error
    if not r133 goto L297 (error at wrapper:-1) else goto L117 :: bool
L117:
    r134 = r16.__mypyc_temp__14
    if is_error(r134) goto L297 (error at wrapper:-1) else goto L118
L118:
    r135 = CPyIter_Next(r134)
    dec_ref r134
    if is_error(r135) goto L119 else goto L121
L119:
    r136 = CPy_FetchStopIterationValue()
    if is_error(r136) goto L297 (error at wrapper:379) else goto L120
L120:
    r137 = r136
    dec_ref r137
    r138 = <error> :: object
    r16.__mypyc_temp__14 = r138; r139 = is_error
    if not r139 goto L297 (error at wrapper:379) else goto L143 :: bool
L121:
    r140 = r135
L122:
    r16.__mypyc_next_label__ = 3
    dec_ref r16
    return r140
L123:
    r142 = load_address _Py_NoneStruct
    r143 = type != r142
    if r143 goto L124 else goto L323 :: bool
L124:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L127 (error at wrapper:379) else goto L324 :: bool
L125:
    unreachable
L126:
    inc_ref arg
    goto L138
L127:
    r144 = CPy_CatchError()
    r16.__mypyc_temp__15 = r144; r145 = is_error
    if not r145 goto L325 (error at wrapper:-1) else goto L128 :: bool
L128:
    r146 = load_address r7
    r147 = r16.__mypyc_temp__14
    if is_error(r147) goto L325 (error at wrapper:-1) else goto L129
L129:
    r148 = CPy_YieldFromErrorHandle(r147, r146)
    dec_ref r147
    if is_error(r148) goto L325 (error at wrapper:379) else goto L130
L130:
    if r148 goto L133 else goto L131 :: bool
L131:
    r140 = r7
    r149 = r16.__mypyc_temp__15
    if is_error(r149) goto L326 (error at wrapper:-1) else goto L132
L132:
    CPy_RestoreExcInfo(r149)
    dec_ref r149
    goto L122
L133:
    r137 = r7
    dec_ref r137
    r150 = r16.__mypyc_temp__15
    if is_error(r150) goto L135 (error at wrapper:-1) else goto L134
L134:
    CPy_RestoreExcInfo(r150)
    dec_ref r150
    goto L143
L135:
    r151 = r16.__mypyc_temp__15
    dec_ref r16
    if is_error(r151) goto L285 (error at wrapper:-1) else goto L136
L136:
    CPy_RestoreExcInfo(r151)
    dec_ref r151
    r152 = CPy_KeepPropagating()
    if not r152 goto L285 else goto L137 :: bool
L137:
    unreachable
L138:
    r153 = r16.__mypyc_temp__14
    if is_error(r153) goto L327 (error at wrapper:-1) else goto L139
L139:
    r154 = CPyIter_Send(r153, arg)
    dec_ref r153
    dec_ref arg
    if is_error(r154) goto L141 else goto L140
L140:
    r140 = r154
    goto L122
L141:
    r155 = CPy_FetchStopIterationValue()
    if is_error(r155) goto L297 (error at wrapper:379) else goto L142
L142:
    r137 = r155
    dec_ref r137
L143:
    r156 = r16.__mypyc_generator_attribute__request_cache
    if is_error(r156) goto L147 (error at wrapper:380) else goto L144
L144:
    r157 = r16.__mypyc_generator_attribute__cache_key
    if is_error(r157) goto L328 (error at wrapper:380) else goto L145
L145:
    r158 = r16.__mypyc_generator_attribute__response
    if is_error(r158) goto L329 (error at wrapper:380) else goto L146
L146:
    r159 = r156.cache(r157, r158)
    dec_ref r157
    dec_ref r158
    dec_ref r156
    if is_error(r159) goto L147 (error at wrapper:380) else goto L330
L147:
    r160 = CPy_CatchError()
    r16.__mypyc_temp__16 = r160; r161 = is_error
    if not r161 goto L186 (error at wrapper:-1) else goto L148 :: bool
L148:
    r16.__mypyc_temp__13 = 0; r162 = is_error
    if not r162 goto L186 (error at wrapper:379) else goto L149 :: bool
L149:
    r163 = CPy_GetExcInfo()
    r164 = r163[0]
    r165 = r163[1]
    r166 = r163[2]
    dec_ref r163
    r167 = r16.__mypyc_temp__11
    if is_error(r167) goto L331 (error at wrapper:-1) else goto L150
L150:
    r168 = r16.__mypyc_temp__12
    if is_error(r168) goto L332 (error at wrapper:-1) else goto L151
L151:
    r169 = [r168, r164, r165, r166]
    r170 = load_address r169
    r171 = PyObject_Vectorcall(r167, r170, 4, 0)
    dec_ref r167
    if is_error(r171) goto L333 (error at wrapper:379) else goto L152
L152:
    dec_ref r168
    dec_ref r164
    dec_ref r165
    dec_ref r166
    r172 = CPy_GetCoro(r171)
    dec_ref r171
    if is_error(r172) goto L186 (error at wrapper:379) else goto L153
L153:
    r16.__mypyc_temp__17 = r172; r173 = is_error
    if not r173 goto L186 (error at wrapper:-1) else goto L154 :: bool
L154:
    r174 = r16.__mypyc_temp__17
    if is_error(r174) goto L186 (error at wrapper:-1) else goto L155
L155:
    r175 = CPyIter_Next(r174)
    dec_ref r174
    if is_error(r175) goto L156 else goto L158
L156:
    r176 = CPy_FetchStopIterationValue()
    if is_error(r176) goto L186 (error at wrapper:379) else goto L157
L157:
    r177 = r176
    r178 = <error> :: object
    r16.__mypyc_temp__17 = r178; r179 = is_error
    if not r179 goto L334 (error at wrapper:379) else goto L180 :: bool
L158:
    r180 = r175
L159:
    r16.__mypyc_next_label__ = 4
    dec_ref r16
    return r180
L160:
    r182 = load_address _Py_NoneStruct
    r183 = type != r182
    if r183 goto L161 else goto L335 :: bool
L161:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L164 (error at wrapper:379) else goto L336 :: bool
L162:
    unreachable
L163:
    inc_ref arg
    goto L175
L164:
    r184 = CPy_CatchError()
    r16.__mypyc_temp__18 = r184; r185 = is_error
    if not r185 goto L337 (error at wrapper:-1) else goto L165 :: bool
L165:
    r186 = load_address r9
    r187 = r16.__mypyc_temp__17
    if is_error(r187) goto L337 (error at wrapper:-1) else goto L166
L166:
    r188 = CPy_YieldFromErrorHandle(r187, r186)
    dec_ref r187
    if is_error(r188) goto L337 (error at wrapper:379) else goto L167
L167:
    if r188 goto L170 else goto L168 :: bool
L168:
    r180 = r9
    r189 = r16.__mypyc_temp__18
    if is_error(r189) goto L338 (error at wrapper:-1) else goto L169
L169:
    CPy_RestoreExcInfo(r189)
    dec_ref r189
    goto L159
L170:
    r177 = r9
    r190 = r16.__mypyc_temp__18
    if is_error(r190) goto L339 (error at wrapper:-1) else goto L171
L171:
    CPy_RestoreExcInfo(r190)
    dec_ref r190
    goto L180
L172:
    r191 = r16.__mypyc_temp__18
    if is_error(r191) goto L186 (error at wrapper:-1) else goto L173
L173:
    CPy_RestoreExcInfo(r191)
    dec_ref r191
    r192 = CPy_KeepPropagating()
    if not r192 goto L186 else goto L340 :: bool
L174:
    unreachable
L175:
    r193 = r16.__mypyc_temp__17
    if is_error(r193) goto L341 (error at wrapper:-1) else goto L176
L176:
    r194 = CPyIter_Send(r193, arg)
    dec_ref r193
    dec_ref arg
    if is_error(r194) goto L178 else goto L177
L177:
    r180 = r194
    goto L159
L178:
    r195 = CPy_FetchStopIterationValue()
    if is_error(r195) goto L186 (error at wrapper:379) else goto L179
L179:
    r177 = r195
L180:
    r196 = PyObject_IsTrue(r177)
    dec_ref r177
    r197 = r196 >= 0 :: signed
    if not r197 goto L186 (error at wrapper:-1) else goto L181 :: bool
L181:
    r198 = truncate r196: i32 to builtins.bool
    if r198 goto L184 else goto L182 :: bool
L182:
    CPy_Reraise()
    if not 0 goto L186 else goto L342 :: bool
L183:
    unreachable
L184:
    r199 = r16.__mypyc_temp__16
    if is_error(r199) goto L190 (error at wrapper:-1) else goto L185
L185:
    CPy_RestoreExcInfo(r199)
    dec_ref r199
    goto L189
L186:
    r200 = r16.__mypyc_temp__16
    if is_error(r200) goto L190 (error at wrapper:-1) else goto L187
L187:
    CPy_RestoreExcInfo(r200)
    dec_ref r200
    r201 = CPy_KeepPropagating()
    if not r201 goto L190 else goto L343 :: bool
L188:
    unreachable
L189:
    r202 = <error> :: tuple[object, object, object]
    r13 = r202
    goto L191
L190:
    r203 = CPy_CatchError()
    r13 = r203
L191:
    r204 = r16.__mypyc_temp__13
    if is_error(r204) goto L344 (error at wrapper:-1) else goto L192
L192:
    if r204 goto L193 else goto L224 :: bool
L193:
    r205 = load_address _Py_NoneStruct
    r206 = r16.__mypyc_temp__11
    if is_error(r206) goto L344 (error at wrapper:-1) else goto L194
L194:
    r207 = r16.__mypyc_temp__12
    if is_error(r207) goto L345 (error at wrapper:-1) else goto L195
L195:
    r208 = [r207, r205, r205, r205]
    r209 = load_address r208
    r210 = PyObject_Vectorcall(r206, r209, 4, 0)
    dec_ref r206
    if is_error(r210) goto L346 (error at wrapper:379) else goto L196
L196:
    dec_ref r207
    r211 = CPy_GetCoro(r210)
    dec_ref r210
    if is_error(r211) goto L344 (error at wrapper:379) else goto L197
L197:
    r16.__mypyc_temp__19 = r211; r212 = is_error
    if not r212 goto L344 (error at wrapper:-1) else goto L198 :: bool
L198:
    r213 = r16.__mypyc_temp__19
    if is_error(r213) goto L344 (error at wrapper:-1) else goto L199
L199:
    r214 = CPyIter_Next(r213)
    dec_ref r213
    if is_error(r214) goto L200 else goto L347
L200:
    r215 = CPy_FetchStopIterationValue()
    if is_error(r215) goto L344 (error at wrapper:379) else goto L201
L201:
    r216 = r215
    dec_ref r216
    r217 = <error> :: object
    r16.__mypyc_temp__19 = r217; r218 = is_error
    if not r218 goto L344 (error at wrapper:379) else goto L224 :: bool
L202:
    r219 = r214
L203:
    r16.__mypyc_next_label__ = 5
    dec_ref r16
    return r219
L204:
    r221 = load_address _Py_NoneStruct
    r222 = type != r221
    if r222 goto L205 else goto L348 :: bool
L205:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L208 (error at wrapper:379) else goto L349 :: bool
L206:
    unreachable
L207:
    inc_ref arg
    goto L219
L208:
    r223 = CPy_CatchError()
    r16.__mypyc_temp__20 = r223; r224 = is_error
    if not r224 goto L350 (error at wrapper:-1) else goto L209 :: bool
L209:
    r225 = load_address r11
    r226 = r16.__mypyc_temp__19
    if is_error(r226) goto L350 (error at wrapper:-1) else goto L210
L210:
    r227 = CPy_YieldFromErrorHandle(r226, r225)
    dec_ref r226
    if is_error(r227) goto L350 (error at wrapper:379) else goto L211
L211:
    if r227 goto L214 else goto L212 :: bool
L212:
    r219 = r11
    r228 = r16.__mypyc_temp__20
    if is_error(r228) goto L351 (error at wrapper:-1) else goto L352
L213:
    CPy_RestoreExcInfo(r228)
    dec_ref r228
    goto L203
L214:
    r216 = r11
    dec_ref r216
    r229 = r16.__mypyc_temp__20
    if is_error(r229) goto L216 (error at wrapper:-1) else goto L215
L215:
    CPy_RestoreExcInfo(r229)
    dec_ref r229
    goto L224
L216:
    r230 = r16.__mypyc_temp__20
    dec_ref r16
    if is_error(r230) goto L227 (error at wrapper:-1) else goto L217
L217:
    CPy_RestoreExcInfo(r230)
    dec_ref r230
    r231 = CPy_KeepPropagating()
    if not r231 goto L227 else goto L353 :: bool
L218:
    unreachable
L219:
    r232 = r16.__mypyc_temp__19
    if is_error(r232) goto L354 (error at wrapper:-1) else goto L220
L220:
    r233 = CPyIter_Send(r232, arg)
    dec_ref r232
    dec_ref arg
    if is_error(r233) goto L222 else goto L355
L221:
    r219 = r233
    goto L203
L222:
    r234 = CPy_FetchStopIterationValue()
    if is_error(r234) goto L344 (error at wrapper:379) else goto L223
L223:
    r216 = r234
    dec_ref r216
L224:
    if is_error(r13) goto L231 else goto L356
L225:
    CPy_Reraise()
    if not 0 goto L227 else goto L357 :: bool
L226:
    unreachable
L227:
    if is_error(r13) goto L229 else goto L228
L228:
    CPy_RestoreExcInfo(r13)
    xdec_ref r13
L229:
    r235 = CPy_KeepPropagating()
    if not r235 goto L285 else goto L230 :: bool
L230:
    unreachable
L231:
    r236 = r16.__mypyc_generator_attribute__response
    if is_error(r236) goto L297 (error at wrapper:381) else goto L232
L232:
    r16.__mypyc_next_label__ = -1
    dec_ref r16
L233:
    if is_error(stop_iter_ptr) goto L234 else goto L236
L234:
    CPyGen_SetStopIterationValue(r236)
    dec_ref r236
    if not 0 goto L285 else goto L235 :: bool
L235:
    unreachable
L236:
    set_mem stop_iter_ptr, r236 :: builtins.object*
    return 0
L237:
    r238 = r16.__mypyc_generator_attribute__provider
    if is_error(r238) goto L289 (error at wrapper:383) else goto L238
L238:
    r239 = r16.__mypyc_generator_attribute__method
    if is_error(r239) goto L358 (error at wrapper:383) else goto L239
L239:
    r240 = r16.__mypyc_generator_attribute__params
    if is_error(r240) goto L359 (error at wrapper:383) else goto L240
L240:
    r241 = r18.func
    dec_ref r18
    if is_error(r241) goto L360 (error at wrapper:383) else goto L241
L241:
    r242 = [r238, r239, r240]
    r243 = load_address r242
    r244 = PyObject_Vectorcall(r241, r243, 3, 0)
    dec_ref r241
    if is_error(r244) goto L360 (error at wrapper:383) else goto L242
L242:
    dec_ref r238
    dec_ref r239
    dec_ref r240
    r245 = CPy_GetCoro(r244)
    dec_ref r244
    if is_error(r245) goto L297 (error at wrapper:383) else goto L243
L243:
    r16.__mypyc_temp__21 = r245; r246 = is_error
    if not r246 goto L297 (error at wrapper:-1) else goto L244 :: bool
L244:
    r247 = r16.__mypyc_temp__21
    if is_error(r247) goto L297 (error at wrapper:-1) else goto L245
L245:
    r248 = CPyIter_Next(r247)
    dec_ref r247
    if is_error(r248) goto L246 else goto L248
L246:
    r249 = CPy_FetchStopIterationValue()
    if is_error(r249) goto L297 (error at wrapper:383) else goto L247
L247:
    r250 = r249
    r251 = <error> :: object
    r16.__mypyc_temp__21 = r251; r252 = is_error
    if not r252 goto L361 (error at wrapper:383) else goto L270 :: bool
L248:
    r253 = r248
L249:
    r16.__mypyc_next_label__ = 6
    dec_ref r16
    return r253
L250:
    r255 = load_address _Py_NoneStruct
    r256 = type != r255
    if r256 goto L251 else goto L362 :: bool
L251:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L254 (error at wrapper:383) else goto L363 :: bool
L252:
    unreachable
L253:
    inc_ref arg
    goto L265
L254:
    r257 = CPy_CatchError()
    r16.__mypyc_temp__22 = r257; r258 = is_error
    if not r258 goto L364 (error at wrapper:-1) else goto L255 :: bool
L255:
    r259 = load_address r15
    r260 = r16.__mypyc_temp__21
    if is_error(r260) goto L364 (error at wrapper:-1) else goto L256
L256:
    r261 = CPy_YieldFromErrorHandle(r260, r259)
    dec_ref r260
    if is_error(r261) goto L364 (error at wrapper:383) else goto L257
L257:
    if r261 goto L260 else goto L258 :: bool
L258:
    r253 = r15
    r262 = r16.__mypyc_temp__22
    if is_error(r262) goto L365 (error at wrapper:-1) else goto L259
L259:
    CPy_RestoreExcInfo(r262)
    dec_ref r262
    goto L249
L260:
    r250 = r15
    r263 = r16.__mypyc_temp__22
    if is_error(r263) goto L366 (error at wrapper:-1) else goto L261
L261:
    CPy_RestoreExcInfo(r263)
    dec_ref r263
    goto L270
L262:
    r264 = r16.__mypyc_temp__22
    dec_ref r16
    if is_error(r264) goto L285 (error at wrapper:-1) else goto L263
L263:
    CPy_RestoreExcInfo(r264)
    dec_ref r264
    r265 = CPy_KeepPropagating()
    if not r265 goto L285 else goto L264 :: bool
L264:
    unreachable
L265:
    r266 = r16.__mypyc_temp__21
    if is_error(r266) goto L367 (error at wrapper:-1) else goto L266
L266:
    r267 = CPyIter_Send(r266, arg)
    dec_ref r266
    dec_ref arg
    if is_error(r267) goto L268 else goto L267
L267:
    r253 = r267
    goto L249
L268:
    r268 = CPy_FetchStopIterationValue()
    if is_error(r268) goto L297 (error at wrapper:383) else goto L269
L269:
    r250 = r268
L270:
    r269 = cast(dict, r250)
    if is_error(r269) goto L297 (error at wrapper:383) else goto L271
L271:
    r16.__mypyc_next_label__ = -1
    dec_ref r16
L272:
    if is_error(stop_iter_ptr) goto L273 else goto L275
L273:
    CPyGen_SetStopIterationValue(r269)
    dec_ref r269
    if not 0 goto L285 else goto L274 :: bool
L274:
    unreachable
L275:
    set_mem stop_iter_ptr, r269 :: builtins.object*
    return 0
L276:
    r271 = r17 == 0
    if r271 goto L368 else goto L369 :: bool
L277:
    r272 = r17 == 1
    if r272 goto L370 else goto L371 :: bool
L278:
    r273 = r17 == 2
    if r273 goto L372 else goto L373 :: bool
L279:
    r274 = r17 == 3
    if r274 goto L374 else goto L375 :: bool
L280:
    r275 = r17 == 4
    if r275 goto L376 else goto L377 :: bool
L281:
    r276 = r17 == 5
    if r276 goto L378 else goto L379 :: bool
L282:
    r277 = r17 == 6
    if r277 goto L250 else goto L380 :: bool
L283:
    r278 = raise StopIteration
    if not r278 goto L285 (error at wrapper:363) else goto L284 :: bool
L284:
    unreachable
L285:
    r279 = <error> :: object
    return r279
L286:
    xdec_ref r1
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L285
L287:
    xdec_ref r1
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    dec_ref r16
    goto L285
L288:
    dec_ref r16
    dec_ref r18
    goto L3
L289:
    dec_ref r16
    dec_ref r18
    goto L285
L290:
    dec_ref r16
    dec_ref r18
    dec_ref r21
    goto L285
L291:
    dec_ref r16
    dec_ref r18
    dec_ref r21
    dec_ref r22
    goto L285
L292:
    dec_ref r16
    dec_ref r18
    goto L15
L293:
    dec_ref r16
    dec_ref r18
    dec_ref r34
    goto L285
L294:
    dec_ref r16
    dec_ref r18
    dec_ref r34
    dec_ref r36
    goto L285
L295:
    dec_ref r16
    dec_ref r18
    dec_ref r44
    goto L285
L296:
    dec_ref r18
    goto L32
L297:
    dec_ref r16
    goto L285
L298:
    dec_ref r16
    dec_ref r18
    dec_ref r53
    goto L285
L299:
    dec_ref r16
    dec_ref r18
    dec_ref r53
    dec_ref r54
    goto L285
L300:
    dec_ref r16
    dec_ref r53
    dec_ref r54
    dec_ref r55
    goto L285
L301:
    dec_ref r16
    dec_ref r65
    goto L285
L302:
    xdec_ref r1
    goto L54
L303:
    xdec_ref r1
    dec_ref r16
    goto L53
L304:
    xdec_ref r1
    goto L63
L305:
    dec_ref r68
    goto L63
L306:
    dec_ref r65
    goto L63
L307:
    dec_ref r16
    dec_ref arg
    goto L285
L308:
    dec_ref r16
    dec_ref r86
    goto L285
L309:
    dec_ref r16
    dec_ref r86
    dec_ref r87
    goto L285
L310:
    dec_ref r16
    dec_ref r86
    dec_ref r87
    dec_ref r88
    goto L285
L311:
    xdec_ref r3
    goto L83
L312:
    xdec_ref r3
    dec_ref r16
    goto L285
L313:
    dec_ref r16
    dec_ref r98
    goto L285
L314:
    xdec_ref r5
    goto L88
L315:
    xdec_ref r5
    dec_ref r16
    goto L87
L316:
    xdec_ref r5
    goto L97
L317:
    dec_ref r101
    goto L97
L318:
    dec_ref r98
    goto L97
L319:
    dec_ref r16
    dec_ref arg
    goto L285
L320:
    dec_ref r16
    dec_ref r120
    dec_ref r121
    goto L285
L321:
    dec_ref r16
    dec_ref r120
    goto L285
L322:
    dec_ref r16
    dec_ref r129
    goto L285
L323:
    xdec_ref r7
    goto L126
L324:
    xdec_ref r7
    dec_ref r16
    goto L125
L325:
    xdec_ref r7
    goto L135
L326:
    dec_ref r140
    goto L135
L327:
    dec_ref r16
    dec_ref arg
    goto L285
L328:
    dec_ref r156
    goto L147
L329:
    dec_ref r156
    dec_ref r157
    goto L147
L330:
    dec_ref r159
    goto L189
L331:
    dec_ref r164
    dec_ref r165
    dec_ref r166
    goto L186
L332:
    dec_ref r164
    dec_ref r165
    dec_ref r166
    dec_ref r167
    goto L186
L333:
    dec_ref r164
    dec_ref r165
    dec_ref r166
    dec_ref r168
    goto L186
L334:
    dec_ref r177
    goto L186
L335:
    xdec_ref r9
    goto L163
L336:
    xdec_ref r9
    dec_ref r16
    goto L162
L337:
    xdec_ref r9
    goto L172
L338:
    dec_ref r180
    goto L172
L339:
    dec_ref r177
    goto L172
L340:
    dec_ref r16
    goto L174
L341:
    dec_ref arg
    goto L186
L342:
    dec_ref r16
    goto L183
L343:
    dec_ref r16
    goto L188
L344:
    dec_ref r16
    goto L227
L345:
    dec_ref r16
    dec_ref r206
    goto L227
L346:
    dec_ref r16
    dec_ref r207
    goto L227
L347:
    xdec_ref r13
    goto L202
L348:
    xdec_ref r11
    goto L207
L349:
    xdec_ref r11
    xdec_ref r13
    dec_ref r16
    goto L206
L350:
    xdec_ref r11
    goto L216
L351:
    dec_ref r219
    goto L216
L352:
    xdec_ref r13
    goto L213
L353:
    xdec_ref r13
    goto L218
L354:
    dec_ref r16
    dec_ref arg
    goto L227
L355:
    xdec_ref r13
    goto L221
L356:
    dec_ref r16
    goto L225
L357:
    xdec_ref r13
    goto L226
L358:
    dec_ref r16
    dec_ref r18
    dec_ref r238
    goto L285
L359:
    dec_ref r16
    dec_ref r18
    dec_ref r238
    dec_ref r239
    goto L285
L360:
    dec_ref r16
    dec_ref r238
    dec_ref r239
    dec_ref r240
    goto L285
L361:
    dec_ref r16
    dec_ref r250
    goto L285
L362:
    xdec_ref r15
    goto L253
L363:
    xdec_ref r15
    dec_ref r16
    goto L252
L364:
    xdec_ref r15
    goto L262
L365:
    dec_ref r253
    goto L262
L366:
    dec_ref r250
    goto L262
L367:
    dec_ref r16
    dec_ref arg
    goto L285
L368:
    xdec_ref r1
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L2
L369:
    dec_ref r18
    goto L277
L370:
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L51
L371:
    xdec_ref r1
    goto L278
L372:
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L85
L373:
    xdec_ref r5
    goto L279
L374:
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L123
L375:
    xdec_ref r7
    goto L280
L376:
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L160
L377:
    xdec_ref r9
    goto L281
L378:
    xdec_ref r15
    goto L204
L379:
    xdec_ref r11
    xdec_ref r13
    goto L282
L380:
    xdec_ref r15
    dec_ref r16
    goto L283

def wrapper_gen___363.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wrapper_gen___363.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wrapper_gen___363.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wrapper_gen___363.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wrapper_gen___363.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wrapper_gen___363.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = wrapper_gen___363.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def wrapper_gen___363.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def wrapper_gen___363.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wrapper_async_handle_request_caching_obj.__call__(__mypyc_self__, provider, method, params):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_request_caching_obj
    provider :: object
    method :: str
    params :: object
    r0 :: faster_web3._utils.caching.caching_utils.async_handle_request_caching_env
    r1 :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_request_caching_env
    r2, r3, r4, r5 :: bool
    r6 :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
    r7, r8 :: bool
    r9 :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
L0:
    r0 = __mypyc_self__.__mypyc_env__
    if is_error(r0) goto L9 (error at wrapper:363) else goto L1
L1:
    r1 = wrapper_async_handle_request_caching_env()
    if is_error(r1) goto L10 (error at wrapper:363) else goto L2
L2:
    r1.__mypyc_env__ = r0; r2 = is_error
    if not r2 goto L11 (error at wrapper:363) else goto L3 :: bool
L3:
    inc_ref provider
    r1.__mypyc_generator_attribute__provider = provider; r3 = is_error
    if not r3 goto L11 (error at wrapper:363) else goto L4 :: bool
L4:
    inc_ref method
    r1.__mypyc_generator_attribute__method = method; r4 = is_error
    if not r4 goto L11 (error at wrapper:363) else goto L5 :: bool
L5:
    inc_ref params
    r1.__mypyc_generator_attribute__params = params; r5 = is_error
    if not r5 goto L11 (error at wrapper:363) else goto L6 :: bool
L6:
    r6 = wrapper_gen___363()
    if is_error(r6) goto L11 (error at wrapper:363) else goto L7
L7:
    inc_ref r1
    r6.__mypyc_env__ = r1; r7 = is_error
    if not r7 goto L12 (error at wrapper:363) else goto L8 :: bool
L8:
    r1.__mypyc_next_label__ = 0
    dec_ref r1
    return r6
L9:
    r9 = <error> :: faster_web3._utils.caching.caching_utils.wrapper_gen___363
    return r9
L10:
    dec_ref r0
    goto L9
L11:
    dec_ref r1
    goto L9
L12:
    dec_ref r1
    dec_ref r6
    goto L9

def async_handle_request_caching(func):
    func :: object
    r0 :: faster_web3._utils.caching.caching_utils.async_handle_request_caching_env
    r1 :: bool
    r2 :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_request_caching_obj
    r3 :: bool
    wrapper :: object
    r4 :: dict
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: i32
    r9 :: bit
    r10 :: object
L0:
    r0 = async_handle_request_caching_env()
    if is_error(r0) goto L7 (error at async_handle_request_caching:358) else goto L1
L1:
    inc_ref func
    r0.func = func; r1 = is_error
    if not r1 goto L8 (error at async_handle_request_caching:358) else goto L2 :: bool
L2:
    r2 = wrapper_async_handle_request_caching_obj()
    if is_error(r2) goto L8 (error at async_handle_request_caching:363) else goto L3
L3:
    r2.__mypyc_env__ = r0; r3 = is_error
    if not r3 goto L9 (error at async_handle_request_caching:363) else goto L4 :: bool
L4:
    wrapper = r2
    r4 = faster_web3._utils.caching.caching_utils.globals :: static
    r5 = 'async_handle_request_caching'
    r6 = CPyDict_GetItem(r4, r5)
    if is_error(r6) goto L10 (error at async_handle_request_caching:386) else goto L5
L5:
    r7 = '_decorator'
    r8 = PyObject_SetAttr(wrapper, r7, r6)
    dec_ref r6
    r9 = r8 >= 0 :: signed
    if not r9 goto L10 (error at async_handle_request_caching:386) else goto L6 :: bool
L6:
    return wrapper
L7:
    r10 = <error> :: object
    return r10
L8:
    dec_ref r0
    goto L7
L9:
    dec_ref r2
    goto L7
L10:
    dec_ref wrapper
    goto L7

def wrapper_async_handle_send_caching_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2, r3 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    inc_ref __mypyc_self__
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    if is_error(r2) goto L4 else goto L3
L3:
    return r2
L4:
    r3 = <error> :: object
    return r3

def wrapper_gen___396.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1 :: object
    r2 :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_send_caching_env
    r3 :: i32
    r4 :: faster_web3._utils.caching.caching_utils.async_handle_send_caching_env
    r5 :: object
    r6 :: bit
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: bool
    r11 :: object
    r12 :: str
    r13 :: object
    r14 :: faster_web3.utils.caching.SimpleCache
    r15 :: bool
    r16 :: object
    r17 :: bool
    r18 :: object
    r19 :: int
    r20, r21, r22 :: str
    r23 :: object
    r24 :: tuple[str, object]
    r25 :: object
    r26, r27, r28 :: str
    r29 :: bool
    r30 :: faster_web3.utils.caching.SimpleCache
    r31 :: str
    r32 :: union[object, None]
    r33 :: bool
    r34 :: union[object, None]
    r35 :: object
    r36 :: bit
    r37, r38, r39, r40 :: str
    r41 :: list
    r42 :: object
    r43 :: dict
    r44 :: bool
    r45 :: object
    r46 :: str
    r47, r48 :: object
    r49 :: object[3]
    r50 :: object_ptr
    r51, r52 :: object
    r53 :: bool
    r54, r55, r56, r57, r58 :: object
    r59 :: bool
    r60 :: object
    r61 :: bool
    r62 :: object
    r63 :: bit
    r64 :: tuple[object, object, object]
    r65 :: bool
    r66 :: object_ptr
    r67 :: object
    r68 :: bool
    r69, r70, r71 :: tuple[object, object, object]
    r72 :: bit
    r73, r74, r75 :: object
    r76 :: dict
    r77 :: bool
    r78, r79 :: bit
    r80 :: bool
    r81 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = __mypyc_self__.__mypyc_env__
    if is_error(r2) goto L83 (error at wrapper:396) else goto L1
L1:
    r3 = r2.__mypyc_next_label__
    r4 = r2.__mypyc_env__
    if is_error(r4) goto L84 (error at wrapper:396) else goto L78
L2:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L85 else goto L5 :: bool
L3:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L82 (error at wrapper:396) else goto L4 :: bool
L4:
    unreachable
L5:
    r7 = r2.__mypyc_generator_attribute__provider
    if is_error(r7) goto L86 (error at wrapper:399) else goto L6
L6:
    r8 = r2.__mypyc_generator_attribute__method
    if is_error(r8) goto L87 (error at wrapper:399) else goto L7
L7:
    r9 = r2.__mypyc_generator_attribute__params
    if is_error(r9) goto L88 (error at wrapper:399) else goto L8
L8:
    r10 = is_cacheable_request(r7, r8, r9)
    dec_ref r7
    dec_ref r8
    dec_ref r9
    if is_error(r10) goto L86 (error at wrapper:399) else goto L9
L9:
    if r10 goto L10 else goto L39 :: bool
L10:
    r11 = r2.__mypyc_generator_attribute__provider
    if is_error(r11) goto L86 (error at wrapper:400) else goto L11
L11:
    r12 = '_request_cache'
    r13 = CPyObject_GetAttr(r11, r12)
    dec_ref r11
    if is_error(r13) goto L86 (error at wrapper:400) else goto L12
L12:
    r14 = cast(faster_web3.utils.caching.SimpleCache, r13)
    if is_error(r14) goto L86 (error at wrapper:400) else goto L13
L13:
    r2.__mypyc_generator_attribute__request_cache = r14; r15 = is_error
    if not r15 goto L86 (error at wrapper:400) else goto L14 :: bool
L14:
    r16 = faster_web3._utils.caching.caching_utils.get_ident :: static
    if is_error(r16) goto L89 else goto L17
L15:
    r17 = raise NameError('value for final name "get_ident" was not set')
    if not r17 goto L82 (error at wrapper:402) else goto L16 :: bool
L16:
    unreachable
L17:
    r18 = PyObject_Vectorcall(r16, 0, 0, 0)
    if is_error(r18) goto L86 (error at wrapper:402) else goto L18
L18:
    r19 = unbox(int, r18)
    dec_ref r18
    if is_error(r19) goto L86 (error at wrapper:402) else goto L19
L19:
    r20 = CPyTagged_Str(r19)
    dec_ref r19 :: int
    if is_error(r20) goto L86 (error at wrapper:402) else goto L20
L20:
    r21 = ':'
    r22 = r2.__mypyc_generator_attribute__method
    if is_error(r22) goto L90 (error at wrapper:402) else goto L21
L21:
    r23 = r2.__mypyc_generator_attribute__params
    if is_error(r23) goto L91 (error at wrapper:402) else goto L22
L22:
    r24 = (r22, r23)
    r25 = box(tuple[str, object], r24)
    r26 = PyObject_Str(r25)
    dec_ref r25
    if is_error(r26) goto L90 (error at wrapper:402) else goto L23
L23:
    r27 = CPyStr_Build(3, r20, r21, r26)
    dec_ref r20
    dec_ref r26
    if is_error(r27) goto L86 (error at wrapper:402) else goto L24
L24:
    r28 = generate_cache_key(r27)
    dec_ref r27
    if is_error(r28) goto L86 (error at wrapper:401) else goto L25
L25:
    r2.__mypyc_generator_attribute__cache_key = r28; r29 = is_error
    if not r29 goto L86 (error at wrapper:401) else goto L26 :: bool
L26:
    r30 = r2.__mypyc_generator_attribute__request_cache
    if is_error(r30) goto L86 (error at wrapper:404) else goto L27
L27:
    r31 = r2.__mypyc_generator_attribute__cache_key
    if is_error(r31) goto L92 (error at wrapper:404) else goto L28
L28:
    r32 = r30.get_cache_entry(r31)
    dec_ref r31
    dec_ref r30
    if is_error(r32) goto L86 (error at wrapper:404) else goto L29
L29:
    r2.__mypyc_generator_attribute__cached_response = r32; r33 = is_error
    if not r33 goto L86 (error at wrapper:404) else goto L30 :: bool
L30:
    r34 = r2.__mypyc_generator_attribute__cached_response
    if is_error(r34) goto L86 (error at wrapper:405) else goto L31
L31:
    r35 = load_address _Py_NoneStruct
    r36 = r34 != r35
    dec_ref r34
    if r36 goto L93 else goto L39 :: bool
L32:
    r37 = 'id'
    r38 = 'method'
    r39 = ''
    r40 = 'params'
    r41 = PyList_New(0)
    if is_error(r41) goto L94 (error at wrapper:408) else goto L33
L33:
    r42 = object -1
    r43 = CPyDict_Build(3, r37, r42, r38, r39, r40, r41)
    dec_ref r41
    if is_error(r43) goto L94 (error at wrapper:408) else goto L34
L34:
    r2.__mypyc_next_label__ = -1
    dec_ref r2
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L82 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L39:
    r45 = r2.__mypyc_generator_attribute__provider
    if is_error(r45) goto L86 (error at wrapper:409) else goto L40
L40:
    r46 = r2.__mypyc_generator_attribute__method
    if is_error(r46) goto L95 (error at wrapper:409) else goto L41
L41:
    r47 = r2.__mypyc_generator_attribute__params
    if is_error(r47) goto L96 (error at wrapper:409) else goto L42
L42:
    r48 = r4.func
    dec_ref r4
    if is_error(r48) goto L97 (error at wrapper:409) else goto L43
L43:
    r49 = [r45, r46, r47]
    r50 = load_address r49
    r51 = PyObject_Vectorcall(r48, r50, 3, 0)
    dec_ref r48
    if is_error(r51) goto L97 (error at wrapper:409) else goto L44
L44:
    dec_ref r45
    dec_ref r46
    dec_ref r47
    r52 = CPy_GetCoro(r51)
    dec_ref r51
    if is_error(r52) goto L94 (error at wrapper:409) else goto L45
L45:
    r2.__mypyc_temp__23 = r52; r53 = is_error
    if not r53 goto L94 (error at wrapper:-1) else goto L46 :: bool
L46:
    r54 = r2.__mypyc_temp__23
    if is_error(r54) goto L94 (error at wrapper:-1) else goto L47
L47:
    r55 = CPyIter_Next(r54)
    dec_ref r54
    if is_error(r55) goto L48 else goto L50
L48:
    r56 = CPy_FetchStopIterationValue()
    if is_error(r56) goto L94 (error at wrapper:409) else goto L49
L49:
    r57 = r56
    r58 = <error> :: object
    r2.__mypyc_temp__23 = r58; r59 = is_error
    if not r59 goto L98 (error at wrapper:409) else goto L72 :: bool
L50:
    r60 = r55
L51:
    r2.__mypyc_next_label__ = 1
    dec_ref r2
    return r60
L52:
    r62 = load_address _Py_NoneStruct
    r63 = type != r62
    if r63 goto L53 else goto L99 :: bool
L53:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L56 (error at wrapper:409) else goto L100 :: bool
L54:
    unreachable
L55:
    inc_ref arg
    goto L67
L56:
    r64 = CPy_CatchError()
    r2.__mypyc_temp__24 = r64; r65 = is_error
    if not r65 goto L101 (error at wrapper:-1) else goto L57 :: bool
L57:
    r66 = load_address r1
    r67 = r2.__mypyc_temp__23
    if is_error(r67) goto L101 (error at wrapper:-1) else goto L58
L58:
    r68 = CPy_YieldFromErrorHandle(r67, r66)
    dec_ref r67
    if is_error(r68) goto L101 (error at wrapper:409) else goto L59
L59:
    if r68 goto L62 else goto L60 :: bool
L60:
    r60 = r1
    r69 = r2.__mypyc_temp__24
    if is_error(r69) goto L102 (error at wrapper:-1) else goto L61
L61:
    CPy_RestoreExcInfo(r69)
    dec_ref r69
    goto L51
L62:
    r57 = r1
    r70 = r2.__mypyc_temp__24
    if is_error(r70) goto L103 (error at wrapper:-1) else goto L63
L63:
    CPy_RestoreExcInfo(r70)
    dec_ref r70
    goto L72
L64:
    r71 = r2.__mypyc_temp__24
    dec_ref r2
    if is_error(r71) goto L82 (error at wrapper:-1) else goto L65
L65:
    CPy_RestoreExcInfo(r71)
    dec_ref r71
    r72 = CPy_KeepPropagating()
    if not r72 goto L82 else goto L66 :: bool
L66:
    unreachable
L67:
    r73 = r2.__mypyc_temp__23
    if is_error(r73) goto L104 (error at wrapper:-1) else goto L68
L68:
    r74 = CPyIter_Send(r73, arg)
    dec_ref r73
    dec_ref arg
    if is_error(r74) goto L70 else goto L69
L69:
    r60 = r74
    goto L51
L70:
    r75 = CPy_FetchStopIterationValue()
    if is_error(r75) goto L94 (error at wrapper:409) else goto L71
L71:
    r57 = r75
L72:
    r76 = cast(dict, r57)
    if is_error(r76) goto L94 (error at wrapper:409) else goto L73
L73:
    r2.__mypyc_next_label__ = -1
    dec_ref r2
L74:
    if is_error(stop_iter_ptr) goto L75 else goto L77
L75:
    CPyGen_SetStopIterationValue(r76)
    dec_ref r76
    if not 0 goto L82 else goto L76 :: bool
L76:
    unreachable
L77:
    set_mem stop_iter_ptr, r76 :: builtins.object*
    return 0
L78:
    r78 = r3 == 0
    if r78 goto L105 else goto L106 :: bool
L79:
    r79 = r3 == 1
    if r79 goto L52 else goto L107 :: bool
L80:
    r80 = raise StopIteration
    if not r80 goto L82 (error at wrapper:396) else goto L81 :: bool
L81:
    unreachable
L82:
    r81 = <error> :: object
    return r81
L83:
    xdec_ref r1
    goto L82
L84:
    xdec_ref r1
    dec_ref r2
    goto L82
L85:
    dec_ref r2
    dec_ref r4
    goto L3
L86:
    dec_ref r2
    dec_ref r4
    goto L82
L87:
    dec_ref r2
    dec_ref r4
    dec_ref r7
    goto L82
L88:
    dec_ref r2
    dec_ref r4
    dec_ref r7
    dec_ref r8
    goto L82
L89:
    dec_ref r2
    dec_ref r4
    goto L15
L90:
    dec_ref r2
    dec_ref r4
    dec_ref r20
    goto L82
L91:
    dec_ref r2
    dec_ref r4
    dec_ref r20
    dec_ref r22
    goto L82
L92:
    dec_ref r2
    dec_ref r4
    dec_ref r30
    goto L82
L93:
    dec_ref r4
    goto L32
L94:
    dec_ref r2
    goto L82
L95:
    dec_ref r2
    dec_ref r4
    dec_ref r45
    goto L82
L96:
    dec_ref r2
    dec_ref r4
    dec_ref r45
    dec_ref r46
    goto L82
L97:
    dec_ref r2
    dec_ref r45
    dec_ref r46
    dec_ref r47
    goto L82
L98:
    dec_ref r2
    dec_ref r57
    goto L82
L99:
    xdec_ref r1
    goto L55
L100:
    xdec_ref r1
    dec_ref r2
    goto L54
L101:
    xdec_ref r1
    goto L64
L102:
    dec_ref r60
    goto L64
L103:
    dec_ref r57
    goto L64
L104:
    dec_ref r2
    dec_ref arg
    goto L82
L105:
    xdec_ref r1
    goto L2
L106:
    dec_ref r4
    goto L79
L107:
    xdec_ref r1
    dec_ref r2
    goto L80

def wrapper_gen___396.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wrapper_gen___396.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wrapper_gen___396.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wrapper_gen___396.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wrapper_gen___396.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wrapper_gen___396.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = wrapper_gen___396.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def wrapper_gen___396.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def wrapper_gen___396.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wrapper_async_handle_send_caching_obj.__call__(__mypyc_self__, provider, method, params):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_send_caching_obj
    provider :: object
    method :: str
    params :: object
    r0 :: faster_web3._utils.caching.caching_utils.async_handle_send_caching_env
    r1 :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_send_caching_env
    r2, r3, r4, r5 :: bool
    r6 :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
    r7, r8 :: bool
    r9 :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
L0:
    r0 = __mypyc_self__.__mypyc_env__
    if is_error(r0) goto L9 (error at wrapper:396) else goto L1
L1:
    r1 = wrapper_async_handle_send_caching_env()
    if is_error(r1) goto L10 (error at wrapper:396) else goto L2
L2:
    r1.__mypyc_env__ = r0; r2 = is_error
    if not r2 goto L11 (error at wrapper:396) else goto L3 :: bool
L3:
    inc_ref provider
    r1.__mypyc_generator_attribute__provider = provider; r3 = is_error
    if not r3 goto L11 (error at wrapper:396) else goto L4 :: bool
L4:
    inc_ref method
    r1.__mypyc_generator_attribute__method = method; r4 = is_error
    if not r4 goto L11 (error at wrapper:396) else goto L5 :: bool
L5:
    inc_ref params
    r1.__mypyc_generator_attribute__params = params; r5 = is_error
    if not r5 goto L11 (error at wrapper:396) else goto L6 :: bool
L6:
    r6 = wrapper_gen___396()
    if is_error(r6) goto L11 (error at wrapper:396) else goto L7
L7:
    inc_ref r1
    r6.__mypyc_env__ = r1; r7 = is_error
    if not r7 goto L12 (error at wrapper:396) else goto L8 :: bool
L8:
    r1.__mypyc_next_label__ = 0
    dec_ref r1
    return r6
L9:
    r9 = <error> :: faster_web3._utils.caching.caching_utils.wrapper_gen___396
    return r9
L10:
    dec_ref r0
    goto L9
L11:
    dec_ref r1
    goto L9
L12:
    dec_ref r1
    dec_ref r6
    goto L9

def async_handle_send_caching(func):
    func :: object
    r0 :: faster_web3._utils.caching.caching_utils.async_handle_send_caching_env
    r1 :: bool
    r2 :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_send_caching_obj
    r3 :: bool
    wrapper :: object
    r4 :: dict
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: i32
    r9 :: bit
    r10 :: object
L0:
    r0 = async_handle_send_caching_env()
    if is_error(r0) goto L7 (error at async_handle_send_caching:390) else goto L1
L1:
    inc_ref func
    r0.func = func; r1 = is_error
    if not r1 goto L8 (error at async_handle_send_caching:390) else goto L2 :: bool
L2:
    r2 = wrapper_async_handle_send_caching_obj()
    if is_error(r2) goto L8 (error at async_handle_send_caching:396) else goto L3
L3:
    r2.__mypyc_env__ = r0; r3 = is_error
    if not r3 goto L9 (error at async_handle_send_caching:396) else goto L4 :: bool
L4:
    wrapper = r2
    r4 = faster_web3._utils.caching.caching_utils.globals :: static
    r5 = 'async_handle_send_caching'
    r6 = CPyDict_GetItem(r4, r5)
    if is_error(r6) goto L10 (error at async_handle_send_caching:412) else goto L5
L5:
    r7 = '_decorator'
    r8 = PyObject_SetAttr(wrapper, r7, r6)
    dec_ref r6
    r9 = r8 >= 0 :: signed
    if not r9 goto L10 (error at async_handle_send_caching:412) else goto L6 :: bool
L6:
    return wrapper
L7:
    r10 = <error> :: object
    return r10
L8:
    dec_ref r0
    goto L7
L9:
    dec_ref r2
    goto L7
L10:
    dec_ref wrapper
    goto L7

def wrapper_async_handle_recv_caching_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2, r3 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    inc_ref __mypyc_self__
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    if is_error(r2) goto L4 else goto L3
L3:
    return r2
L4:
    r3 = <error> :: object
    return r3

def wrapper_gen___422.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11 :: object
    r12, r13 :: tuple[object, object, object]
    r14, r15 :: object
    r16 :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_recv_caching_env
    r17 :: i32
    r18 :: faster_web3._utils.caching.caching_utils.async_handle_recv_caching_env
    r19 :: object
    r20 :: bit
    r21 :: dict
    r22 :: str
    r23 :: object
    r24 :: str
    r25 :: bool
    r26 :: dict
    r27 :: str
    r28 :: object
    r29 :: bool
    r30 :: object
    r31 :: str
    r32 :: object
    r33 :: bool
    r34 :: object
    r35 :: str
    r36 :: object
    r37 :: faster_web3.utils.caching.SimpleCache
    r38 :: bool
    r39 :: object
    r40 :: bool
    r41 :: object
    r42 :: int
    r43, r44, r45 :: str
    r46 :: object
    r47 :: tuple[str, object]
    r48 :: object
    r49, r50, r51 :: str
    r52 :: bool
    r53 :: faster_web3.utils.caching.SimpleCache
    r54 :: str
    r55 :: union[object, None]
    r56 :: bool
    r57 :: union[object, None]
    r58 :: object
    r59 :: bit
    r60 :: union[object, None]
    r61 :: bool
    r62 :: object
    r63 :: dict
    r64 :: object
    r65 :: object[2]
    r66 :: object_ptr
    r67, r68 :: object
    r69 :: bool
    r70, r71, r72, r73, r74 :: object
    r75 :: bool
    r76 :: object
    r77 :: bool
    r78 :: object
    r79 :: bit
    r80 :: tuple[object, object, object]
    r81 :: bool
    r82 :: object_ptr
    r83 :: object
    r84 :: bool
    r85, r86, r87 :: tuple[object, object, object]
    r88 :: bit
    r89, r90, r91 :: object
    r92 :: dict
    r93 :: bool
    r94 :: object
    r95 :: str
    r96 :: object
    r97 :: dict
    r98 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r99 :: bool
    r100 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r101, r102 :: object
    r103 :: object_ptr
    r104 :: object
    r105 :: bit
    r106 :: object
    r107 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r108 :: bool
    r109 :: object
    r110 :: bool
    r111 :: object
    r112 :: bit
    r113 :: tuple[object, object, object]
    r114 :: bool
    r115 :: object_ptr
    r116 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r117 :: bool
    r118, r119, r120 :: tuple[object, object, object]
    r121 :: bit
    r122 :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r123, r124 :: object
    r125 :: bool
    r126 :: object
    r127 :: str
    r128, r129 :: object
    r130 :: str
    r131 :: object
    r132 :: bool
    r133 :: str
    r134 :: object
    r135 :: object[1]
    r136 :: object_ptr
    r137 :: object
    r138, r139 :: bool
    r140 :: object
    r141 :: bool
    r142, r143, r144, r145, r146 :: object
    r147 :: bool
    r148 :: object
    r149 :: bool
    r150 :: object
    r151 :: bit
    r152 :: tuple[object, object, object]
    r153 :: bool
    r154 :: object_ptr
    r155 :: object
    r156 :: bool
    r157, r158, r159 :: tuple[object, object, object]
    r160 :: bit
    r161, r162, r163 :: object
    r164 :: faster_web3.utils.caching.SimpleCache
    r165 :: str
    r166 :: dict
    r167 :: tuple[object, union[dict, None]]
    r168 :: tuple[object, object, object]
    r169, r170 :: bool
    r171 :: tuple[object, object, object]
    r172, r173, r174, r175, r176 :: object
    r177 :: object[4]
    r178 :: object_ptr
    r179, r180 :: object
    r181 :: bool
    r182, r183, r184, r185, r186 :: object
    r187 :: bool
    r188 :: object
    r189 :: bool
    r190 :: object
    r191 :: bit
    r192 :: tuple[object, object, object]
    r193 :: bool
    r194 :: object_ptr
    r195 :: object
    r196 :: bool
    r197, r198, r199 :: tuple[object, object, object]
    r200 :: bit
    r201, r202, r203 :: object
    r204 :: i32
    r205 :: bit
    r206 :: bool
    r207, r208 :: tuple[object, object, object]
    r209 :: bit
    r210, r211 :: tuple[object, object, object]
    r212 :: bool
    r213, r214, r215 :: object
    r216 :: object[4]
    r217 :: object_ptr
    r218, r219 :: object
    r220 :: bool
    r221, r222, r223, r224, r225 :: object
    r226 :: bool
    r227 :: object
    r228 :: bool
    r229 :: object
    r230 :: bit
    r231 :: tuple[object, object, object]
    r232 :: bool
    r233 :: object_ptr
    r234 :: object
    r235 :: bool
    r236, r237, r238 :: tuple[object, object, object]
    r239 :: bit
    r240, r241, r242 :: object
    r243 :: bit
    r244 :: dict
    r245 :: bool
    r246 :: object
    r247 :: dict
    r248 :: object
    r249 :: object[2]
    r250 :: object_ptr
    r251, r252 :: object
    r253 :: bool
    r254, r255, r256, r257, r258 :: object
    r259 :: bool
    r260 :: object
    r261 :: bool
    r262 :: object
    r263 :: bit
    r264 :: tuple[object, object, object]
    r265 :: bool
    r266 :: object_ptr
    r267 :: object
    r268 :: bool
    r269, r270, r271 :: tuple[object, object, object]
    r272 :: bit
    r273, r274, r275 :: object
    r276 :: dict
    r277 :: bool
    r278, r279, r280, r281, r282, r283, r284 :: bit
    r285 :: bool
    r286 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = <error> :: object
    r3 = r2
    xdec_ref r3
    r4 = <error> :: object
    r5 = r4
    r6 = <error> :: object
    r7 = r6
    r8 = <error> :: object
    r9 = r8
    r10 = <error> :: object
    r11 = r10
    r12 = <error> :: tuple[object, object, object]
    r13 = r12
    r14 = <error> :: object
    r15 = r14
    r16 = __mypyc_self__.__mypyc_env__
    if is_error(r16) goto L291 (error at wrapper:422) else goto L1
L1:
    r17 = r16.__mypyc_next_label__
    r18 = r16.__mypyc_env__
    if is_error(r18) goto L292 (error at wrapper:422) else goto L281
L2:
    r19 = load_address _Py_NoneStruct
    r20 = type != r19
    if r20 goto L293 else goto L5 :: bool
L3:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L290 (error at wrapper:422) else goto L4 :: bool
L4:
    unreachable
L5:
    r21 = r16.__mypyc_generator_attribute__rpc_request
    if is_error(r21) goto L294 (error at wrapper:426) else goto L6
L6:
    r22 = 'method'
    r23 = CPyDict_GetItem(r21, r22)
    dec_ref r21
    if is_error(r23) goto L294 (error at wrapper:426) else goto L7
L7:
    r24 = cast(str, r23)
    if is_error(r24) goto L294 (error at wrapper:426) else goto L8
L8:
    r16.__mypyc_generator_attribute__method = r24; r25 = is_error
    if not r25 goto L294 (error at wrapper:426) else goto L9 :: bool
L9:
    r26 = r16.__mypyc_generator_attribute__rpc_request
    if is_error(r26) goto L294 (error at wrapper:427) else goto L10
L10:
    r27 = 'params'
    r28 = CPyDict_GetItem(r26, r27)
    dec_ref r26
    if is_error(r28) goto L294 (error at wrapper:427) else goto L11
L11:
    r16.__mypyc_generator_attribute__params = r28; r29 = is_error
    if not r29 goto L294 (error at wrapper:427) else goto L12 :: bool
L12:
    r30 = r16.__mypyc_generator_attribute__provider
    if is_error(r30) goto L294 (error at wrapper:428) else goto L13
L13:
    r31 = r16.__mypyc_generator_attribute__method
    if is_error(r31) goto L295 (error at wrapper:428) else goto L14
L14:
    r32 = r16.__mypyc_generator_attribute__params
    if is_error(r32) goto L296 (error at wrapper:428) else goto L15
L15:
    r33 = is_cacheable_request(r30, r31, r32)
    dec_ref r30
    dec_ref r31
    dec_ref r32
    if is_error(r33) goto L294 (error at wrapper:428) else goto L16
L16:
    if r33 goto L17 else goto L243 :: bool
L17:
    r34 = r16.__mypyc_generator_attribute__provider
    if is_error(r34) goto L294 (error at wrapper:429) else goto L18
L18:
    r35 = '_request_cache'
    r36 = CPyObject_GetAttr(r34, r35)
    dec_ref r34
    if is_error(r36) goto L294 (error at wrapper:429) else goto L19
L19:
    r37 = cast(faster_web3.utils.caching.SimpleCache, r36)
    if is_error(r37) goto L294 (error at wrapper:429) else goto L20
L20:
    r16.__mypyc_generator_attribute__request_cache = r37; r38 = is_error
    if not r38 goto L294 (error at wrapper:429) else goto L21 :: bool
L21:
    r39 = faster_web3._utils.caching.caching_utils.get_ident :: static
    if is_error(r39) goto L297 else goto L24
L22:
    r40 = raise NameError('value for final name "get_ident" was not set')
    if not r40 goto L290 (error at wrapper:431) else goto L23 :: bool
L23:
    unreachable
L24:
    r41 = PyObject_Vectorcall(r39, 0, 0, 0)
    if is_error(r41) goto L294 (error at wrapper:431) else goto L25
L25:
    r42 = unbox(int, r41)
    dec_ref r41
    if is_error(r42) goto L294 (error at wrapper:431) else goto L26
L26:
    r43 = CPyTagged_Str(r42)
    dec_ref r42 :: int
    if is_error(r43) goto L294 (error at wrapper:431) else goto L27
L27:
    r44 = ':'
    r45 = r16.__mypyc_generator_attribute__method
    if is_error(r45) goto L298 (error at wrapper:431) else goto L28
L28:
    r46 = r16.__mypyc_generator_attribute__params
    if is_error(r46) goto L299 (error at wrapper:431) else goto L29
L29:
    r47 = (r45, r46)
    r48 = box(tuple[str, object], r47)
    r49 = PyObject_Str(r48)
    dec_ref r48
    if is_error(r49) goto L298 (error at wrapper:431) else goto L30
L30:
    r50 = CPyStr_Build(3, r43, r44, r49)
    dec_ref r43
    dec_ref r49
    if is_error(r50) goto L294 (error at wrapper:431) else goto L31
L31:
    r51 = generate_cache_key(r50)
    dec_ref r50
    if is_error(r51) goto L294 (error at wrapper:430) else goto L32
L32:
    r16.__mypyc_generator_attribute__cache_key = r51; r52 = is_error
    if not r52 goto L294 (error at wrapper:430) else goto L33 :: bool
L33:
    r53 = r16.__mypyc_generator_attribute__request_cache
    if is_error(r53) goto L294 (error at wrapper:433) else goto L34
L34:
    r54 = r16.__mypyc_generator_attribute__cache_key
    if is_error(r54) goto L300 (error at wrapper:433) else goto L35
L35:
    r55 = r53.get_cache_entry(r54)
    dec_ref r54
    dec_ref r53
    if is_error(r55) goto L294 (error at wrapper:433) else goto L36
L36:
    r16.__mypyc_generator_attribute__cache_result = r55; r56 = is_error
    if not r56 goto L294 (error at wrapper:433) else goto L37 :: bool
L37:
    r57 = r16.__mypyc_generator_attribute__cache_result
    if is_error(r57) goto L294 (error at wrapper:434) else goto L38
L38:
    r58 = load_address _Py_NoneStruct
    r59 = r57 != r58
    dec_ref r57
    if r59 goto L301 else goto L45 :: bool
L39:
    r60 = r16.__mypyc_generator_attribute__cache_result
    if is_error(r60) goto L302 (error at wrapper:435) else goto L40
L40:
    r16.__mypyc_next_label__ = -1
    dec_ref r16
L41:
    if is_error(stop_iter_ptr) goto L42 else goto L44
L42:
    CPyGen_SetStopIterationValue(r60)
    dec_ref r60
    if not 0 goto L290 else goto L43 :: bool
L43:
    unreachable
L44:
    set_mem stop_iter_ptr, r60 :: builtins.object*
    return 0
L45:
    r62 = r16.__mypyc_generator_attribute__provider
    if is_error(r62) goto L294 (error at wrapper:437) else goto L46
L46:
    r63 = r16.__mypyc_generator_attribute__rpc_request
    if is_error(r63) goto L303 (error at wrapper:437) else goto L47
L47:
    r64 = r18.func
    dec_ref r18
    if is_error(r64) goto L304 (error at wrapper:437) else goto L48
L48:
    r65 = [r62, r63]
    r66 = load_address r65
    r67 = PyObject_Vectorcall(r64, r66, 2, 0)
    dec_ref r64
    if is_error(r67) goto L304 (error at wrapper:437) else goto L49
L49:
    dec_ref r62
    dec_ref r63
    r68 = CPy_GetCoro(r67)
    dec_ref r67
    if is_error(r68) goto L302 (error at wrapper:437) else goto L50
L50:
    r16.__mypyc_temp__25 = r68; r69 = is_error
    if not r69 goto L302 (error at wrapper:-1) else goto L51 :: bool
L51:
    r70 = r16.__mypyc_temp__25
    if is_error(r70) goto L302 (error at wrapper:-1) else goto L52
L52:
    r71 = CPyIter_Next(r70)
    dec_ref r70
    if is_error(r71) goto L53 else goto L55
L53:
    r72 = CPy_FetchStopIterationValue()
    if is_error(r72) goto L302 (error at wrapper:437) else goto L54
L54:
    r73 = r72
    r74 = <error> :: object
    r16.__mypyc_temp__25 = r74; r75 = is_error
    if not r75 goto L305 (error at wrapper:437) else goto L77 :: bool
L55:
    r76 = r71
L56:
    r16.__mypyc_next_label__ = 1
    dec_ref r16
    return r76
L57:
    r78 = load_address _Py_NoneStruct
    r79 = type != r78
    if r79 goto L58 else goto L306 :: bool
L58:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L61 (error at wrapper:437) else goto L307 :: bool
L59:
    unreachable
L60:
    inc_ref arg
    goto L72
L61:
    r80 = CPy_CatchError()
    r16.__mypyc_temp__26 = r80; r81 = is_error
    if not r81 goto L308 (error at wrapper:-1) else goto L62 :: bool
L62:
    r82 = load_address r1
    r83 = r16.__mypyc_temp__25
    if is_error(r83) goto L308 (error at wrapper:-1) else goto L63
L63:
    r84 = CPy_YieldFromErrorHandle(r83, r82)
    dec_ref r83
    if is_error(r84) goto L308 (error at wrapper:437) else goto L64
L64:
    if r84 goto L67 else goto L65 :: bool
L65:
    r76 = r1
    r85 = r16.__mypyc_temp__26
    if is_error(r85) goto L309 (error at wrapper:-1) else goto L66
L66:
    CPy_RestoreExcInfo(r85)
    dec_ref r85
    goto L56
L67:
    r73 = r1
    r86 = r16.__mypyc_temp__26
    if is_error(r86) goto L310 (error at wrapper:-1) else goto L68
L68:
    CPy_RestoreExcInfo(r86)
    dec_ref r86
    goto L77
L69:
    r87 = r16.__mypyc_temp__26
    dec_ref r16
    if is_error(r87) goto L290 (error at wrapper:-1) else goto L70
L70:
    CPy_RestoreExcInfo(r87)
    dec_ref r87
    r88 = CPy_KeepPropagating()
    if not r88 goto L290 else goto L71 :: bool
L71:
    unreachable
L72:
    r89 = r16.__mypyc_temp__25
    if is_error(r89) goto L311 (error at wrapper:-1) else goto L73
L73:
    r90 = CPyIter_Send(r89, arg)
    dec_ref r89
    dec_ref arg
    if is_error(r90) goto L75 else goto L74
L74:
    r76 = r90
    goto L56
L75:
    r91 = CPy_FetchStopIterationValue()
    if is_error(r91) goto L302 (error at wrapper:437) else goto L76
L76:
    r73 = r91
L77:
    r92 = cast(dict, r73)
    if is_error(r92) goto L302 (error at wrapper:437) else goto L78
L78:
    r16.__mypyc_generator_attribute__response = r92; r93 = is_error
    if not r93 goto L302 (error at wrapper:437) else goto L79 :: bool
L79:
    r94 = r16.__mypyc_generator_attribute__provider
    if is_error(r94) goto L302 (error at wrapper:439) else goto L80
L80:
    r95 = r16.__mypyc_generator_attribute__method
    if is_error(r95) goto L312 (error at wrapper:439) else goto L81
L81:
    r96 = r16.__mypyc_generator_attribute__params
    if is_error(r96) goto L313 (error at wrapper:439) else goto L82
L82:
    r97 = r16.__mypyc_generator_attribute__response
    if is_error(r97) goto L314 (error at wrapper:439) else goto L83
L83:
    r98 = _async_should_cache_response(r94, r95, r96, r97)
    dec_ref r94
    dec_ref r95
    dec_ref r96
    dec_ref r97
    if is_error(r98) goto L302 (error at wrapper:438) else goto L84
L84:
    r16.__mypyc_temp__27 = r98; r99 = is_error
    if not r99 goto L302 (error at wrapper:-1) else goto L85 :: bool
L85:
    r100 = r16.__mypyc_temp__27
    if is_error(r100) goto L302 (error at wrapper:-1) else goto L86
L86:
    r101 = load_address _Py_NoneStruct
    r102 = <error> :: object
    r3 = r102
    r103 = load_address r3
    r104 = r100.__mypyc_generator_helper__(r101, r101, r101, r101, r103)
    dec_ref r100
    if is_error(r104) goto L87 else goto L315
L87:
    r105 = r3 != 0
    if not r105 goto L316 (error at wrapper:-1) else goto L88 :: bool
L88:
    r106 = r3
    r107 = <error> :: faster_web3._utils.caching.caching_utils._async_should_cache_response_gen
    r16.__mypyc_temp__27 = r107; r108 = is_error
    if not r108 goto L317 (error at wrapper:438) else goto L111 :: bool
L89:
    r109 = r104
L90:
    r16.__mypyc_next_label__ = 2
    dec_ref r16
    return r109
L91:
    r111 = load_address _Py_NoneStruct
    r112 = type != r111
    if r112 goto L92 else goto L318 :: bool
L92:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L95 (error at wrapper:438) else goto L319 :: bool
L93:
    unreachable
L94:
    inc_ref arg
    goto L106
L95:
    r113 = CPy_CatchError()
    r16.__mypyc_temp__28 = r113; r114 = is_error
    if not r114 goto L320 (error at wrapper:-1) else goto L96 :: bool
L96:
    r115 = load_address r5
    r116 = r16.__mypyc_temp__27
    if is_error(r116) goto L320 (error at wrapper:-1) else goto L97
L97:
    r117 = CPy_YieldFromErrorHandle(r116, r115)
    dec_ref r116
    if is_error(r117) goto L320 (error at wrapper:438) else goto L98
L98:
    if r117 goto L101 else goto L99 :: bool
L99:
    r109 = r5
    r118 = r16.__mypyc_temp__28
    if is_error(r118) goto L321 (error at wrapper:-1) else goto L100
L100:
    CPy_RestoreExcInfo(r118)
    dec_ref r118
    goto L90
L101:
    r106 = r5
    r119 = r16.__mypyc_temp__28
    if is_error(r119) goto L322 (error at wrapper:-1) else goto L102
L102:
    CPy_RestoreExcInfo(r119)
    dec_ref r119
    goto L111
L103:
    r120 = r16.__mypyc_temp__28
    dec_ref r16
    if is_error(r120) goto L290 (error at wrapper:-1) else goto L104
L104:
    CPy_RestoreExcInfo(r120)
    dec_ref r120
    r121 = CPy_KeepPropagating()
    if not r121 goto L290 else goto L105 :: bool
L105:
    unreachable
L106:
    r122 = r16.__mypyc_temp__27
    if is_error(r122) goto L323 (error at wrapper:-1) else goto L107
L107:
    r123 = CPyIter_Send(r122, arg)
    dec_ref r122
    dec_ref arg
    if is_error(r123) goto L109 else goto L108
L108:
    r109 = r123
    goto L90
L109:
    r124 = CPy_FetchStopIterationValue()
    if is_error(r124) goto L302 (error at wrapper:438) else goto L110
L110:
    r106 = r124
L111:
    r125 = unbox(bool, r106)
    dec_ref r106
    if is_error(r125) goto L302 (error at wrapper:438) else goto L112
L112:
    if r125 goto L113 else goto L237 :: bool
L113:
    r126 = r16.__mypyc_generator_attribute__provider
    if is_error(r126) goto L302 (error at wrapper:441) else goto L114
L114:
    r127 = '_request_cache_lock'
    r128 = CPyObject_GetAttr(r126, r127)
    dec_ref r126
    if is_error(r128) goto L302 (error at wrapper:441) else goto L115
L115:
    r129 = CPy_TYPE(r128)
    r130 = '__aexit__'
    r131 = CPyObject_GetAttr(r129, r130)
    if is_error(r131) goto L324 (error at wrapper:441) else goto L116
L116:
    r16.__mypyc_temp__29 = r131; r132 = is_error
    if not r132 goto L324 (error at wrapper:-1) else goto L117 :: bool
L117:
    r133 = '__aenter__'
    r134 = CPyObject_GetAttr(r129, r133)
    dec_ref r129
    if is_error(r134) goto L325 (error at wrapper:441) else goto L118
L118:
    r135 = [r128]
    r136 = load_address r135
    r137 = PyObject_Vectorcall(r134, r136, 1, 0)
    dec_ref r134
    if is_error(r137) goto L325 (error at wrapper:441) else goto L119
L119:
    r16.__mypyc_temp__30 = r128; r138 = is_error
    if not r138 goto L326 (error at wrapper:-1) else goto L120 :: bool
L120:
    r16.__mypyc_temp__31 = 1; r139 = is_error
    if not r139 goto L326 (error at wrapper:-1) else goto L121 :: bool
L121:
    r140 = CPy_GetCoro(r137)
    dec_ref r137
    if is_error(r140) goto L302 (error at wrapper:441) else goto L122
L122:
    r16.__mypyc_temp__32 = r140; r141 = is_error
    if not r141 goto L302 (error at wrapper:-1) else goto L123 :: bool
L123:
    r142 = r16.__mypyc_temp__32
    if is_error(r142) goto L302 (error at wrapper:-1) else goto L124
L124:
    r143 = CPyIter_Next(r142)
    dec_ref r142
    if is_error(r143) goto L125 else goto L127
L125:
    r144 = CPy_FetchStopIterationValue()
    if is_error(r144) goto L302 (error at wrapper:441) else goto L126
L126:
    r145 = r144
    dec_ref r145
    r146 = <error> :: object
    r16.__mypyc_temp__32 = r146; r147 = is_error
    if not r147 goto L302 (error at wrapper:441) else goto L149 :: bool
L127:
    r148 = r143
L128:
    r16.__mypyc_next_label__ = 3
    dec_ref r16
    return r148
L129:
    r150 = load_address _Py_NoneStruct
    r151 = type != r150
    if r151 goto L130 else goto L327 :: bool
L130:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L133 (error at wrapper:441) else goto L328 :: bool
L131:
    unreachable
L132:
    inc_ref arg
    goto L144
L133:
    r152 = CPy_CatchError()
    r16.__mypyc_temp__33 = r152; r153 = is_error
    if not r153 goto L329 (error at wrapper:-1) else goto L134 :: bool
L134:
    r154 = load_address r7
    r155 = r16.__mypyc_temp__32
    if is_error(r155) goto L329 (error at wrapper:-1) else goto L135
L135:
    r156 = CPy_YieldFromErrorHandle(r155, r154)
    dec_ref r155
    if is_error(r156) goto L329 (error at wrapper:441) else goto L136
L136:
    if r156 goto L139 else goto L137 :: bool
L137:
    r148 = r7
    r157 = r16.__mypyc_temp__33
    if is_error(r157) goto L330 (error at wrapper:-1) else goto L138
L138:
    CPy_RestoreExcInfo(r157)
    dec_ref r157
    goto L128
L139:
    r145 = r7
    dec_ref r145
    r158 = r16.__mypyc_temp__33
    if is_error(r158) goto L141 (error at wrapper:-1) else goto L140
L140:
    CPy_RestoreExcInfo(r158)
    dec_ref r158
    goto L149
L141:
    r159 = r16.__mypyc_temp__33
    dec_ref r16
    if is_error(r159) goto L290 (error at wrapper:-1) else goto L142
L142:
    CPy_RestoreExcInfo(r159)
    dec_ref r159
    r160 = CPy_KeepPropagating()
    if not r160 goto L290 else goto L143 :: bool
L143:
    unreachable
L144:
    r161 = r16.__mypyc_temp__32
    if is_error(r161) goto L331 (error at wrapper:-1) else goto L145
L145:
    r162 = CPyIter_Send(r161, arg)
    dec_ref r161
    dec_ref arg
    if is_error(r162) goto L147 else goto L146
L146:
    r148 = r162
    goto L128
L147:
    r163 = CPy_FetchStopIterationValue()
    if is_error(r163) goto L302 (error at wrapper:441) else goto L148
L148:
    r145 = r163
    dec_ref r145
L149:
    r164 = r16.__mypyc_generator_attribute__request_cache
    if is_error(r164) goto L153 (error at wrapper:442) else goto L150
L150:
    r165 = r16.__mypyc_generator_attribute__cache_key
    if is_error(r165) goto L332 (error at wrapper:442) else goto L151
L151:
    r166 = r16.__mypyc_generator_attribute__response
    if is_error(r166) goto L333 (error at wrapper:442) else goto L152
L152:
    r167 = r164.cache(r165, r166)
    dec_ref r165
    dec_ref r166
    dec_ref r164
    if is_error(r167) goto L153 (error at wrapper:442) else goto L334
L153:
    r168 = CPy_CatchError()
    r16.__mypyc_temp__34 = r168; r169 = is_error
    if not r169 goto L192 (error at wrapper:-1) else goto L154 :: bool
L154:
    r16.__mypyc_temp__31 = 0; r170 = is_error
    if not r170 goto L192 (error at wrapper:441) else goto L155 :: bool
L155:
    r171 = CPy_GetExcInfo()
    r172 = r171[0]
    r173 = r171[1]
    r174 = r171[2]
    dec_ref r171
    r175 = r16.__mypyc_temp__29
    if is_error(r175) goto L335 (error at wrapper:-1) else goto L156
L156:
    r176 = r16.__mypyc_temp__30
    if is_error(r176) goto L336 (error at wrapper:-1) else goto L157
L157:
    r177 = [r176, r172, r173, r174]
    r178 = load_address r177
    r179 = PyObject_Vectorcall(r175, r178, 4, 0)
    dec_ref r175
    if is_error(r179) goto L337 (error at wrapper:441) else goto L158
L158:
    dec_ref r176
    dec_ref r172
    dec_ref r173
    dec_ref r174
    r180 = CPy_GetCoro(r179)
    dec_ref r179
    if is_error(r180) goto L192 (error at wrapper:441) else goto L159
L159:
    r16.__mypyc_temp__35 = r180; r181 = is_error
    if not r181 goto L192 (error at wrapper:-1) else goto L160 :: bool
L160:
    r182 = r16.__mypyc_temp__35
    if is_error(r182) goto L192 (error at wrapper:-1) else goto L161
L161:
    r183 = CPyIter_Next(r182)
    dec_ref r182
    if is_error(r183) goto L162 else goto L164
L162:
    r184 = CPy_FetchStopIterationValue()
    if is_error(r184) goto L192 (error at wrapper:441) else goto L163
L163:
    r185 = r184
    r186 = <error> :: object
    r16.__mypyc_temp__35 = r186; r187 = is_error
    if not r187 goto L338 (error at wrapper:441) else goto L186 :: bool
L164:
    r188 = r183
L165:
    r16.__mypyc_next_label__ = 4
    dec_ref r16
    return r188
L166:
    r190 = load_address _Py_NoneStruct
    r191 = type != r190
    if r191 goto L167 else goto L339 :: bool
L167:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L170 (error at wrapper:441) else goto L340 :: bool
L168:
    unreachable
L169:
    inc_ref arg
    goto L181
L170:
    r192 = CPy_CatchError()
    r16.__mypyc_temp__36 = r192; r193 = is_error
    if not r193 goto L341 (error at wrapper:-1) else goto L171 :: bool
L171:
    r194 = load_address r9
    r195 = r16.__mypyc_temp__35
    if is_error(r195) goto L341 (error at wrapper:-1) else goto L172
L172:
    r196 = CPy_YieldFromErrorHandle(r195, r194)
    dec_ref r195
    if is_error(r196) goto L341 (error at wrapper:441) else goto L173
L173:
    if r196 goto L176 else goto L174 :: bool
L174:
    r188 = r9
    r197 = r16.__mypyc_temp__36
    if is_error(r197) goto L342 (error at wrapper:-1) else goto L175
L175:
    CPy_RestoreExcInfo(r197)
    dec_ref r197
    goto L165
L176:
    r185 = r9
    r198 = r16.__mypyc_temp__36
    if is_error(r198) goto L343 (error at wrapper:-1) else goto L177
L177:
    CPy_RestoreExcInfo(r198)
    dec_ref r198
    goto L186
L178:
    r199 = r16.__mypyc_temp__36
    if is_error(r199) goto L192 (error at wrapper:-1) else goto L179
L179:
    CPy_RestoreExcInfo(r199)
    dec_ref r199
    r200 = CPy_KeepPropagating()
    if not r200 goto L192 else goto L344 :: bool
L180:
    unreachable
L181:
    r201 = r16.__mypyc_temp__35
    if is_error(r201) goto L345 (error at wrapper:-1) else goto L182
L182:
    r202 = CPyIter_Send(r201, arg)
    dec_ref r201
    dec_ref arg
    if is_error(r202) goto L184 else goto L183
L183:
    r188 = r202
    goto L165
L184:
    r203 = CPy_FetchStopIterationValue()
    if is_error(r203) goto L192 (error at wrapper:441) else goto L185
L185:
    r185 = r203
L186:
    r204 = PyObject_IsTrue(r185)
    dec_ref r185
    r205 = r204 >= 0 :: signed
    if not r205 goto L192 (error at wrapper:-1) else goto L187 :: bool
L187:
    r206 = truncate r204: i32 to builtins.bool
    if r206 goto L190 else goto L188 :: bool
L188:
    CPy_Reraise()
    if not 0 goto L192 else goto L346 :: bool
L189:
    unreachable
L190:
    r207 = r16.__mypyc_temp__34
    if is_error(r207) goto L196 (error at wrapper:-1) else goto L191
L191:
    CPy_RestoreExcInfo(r207)
    dec_ref r207
    goto L195
L192:
    r208 = r16.__mypyc_temp__34
    if is_error(r208) goto L196 (error at wrapper:-1) else goto L193
L193:
    CPy_RestoreExcInfo(r208)
    dec_ref r208
    r209 = CPy_KeepPropagating()
    if not r209 goto L196 else goto L347 :: bool
L194:
    unreachable
L195:
    r210 = <error> :: tuple[object, object, object]
    r13 = r210
    goto L197
L196:
    r211 = CPy_CatchError()
    r13 = r211
L197:
    r212 = r16.__mypyc_temp__31
    if is_error(r212) goto L348 (error at wrapper:-1) else goto L198
L198:
    if r212 goto L199 else goto L230 :: bool
L199:
    r213 = load_address _Py_NoneStruct
    r214 = r16.__mypyc_temp__29
    if is_error(r214) goto L348 (error at wrapper:-1) else goto L200
L200:
    r215 = r16.__mypyc_temp__30
    if is_error(r215) goto L349 (error at wrapper:-1) else goto L201
L201:
    r216 = [r215, r213, r213, r213]
    r217 = load_address r216
    r218 = PyObject_Vectorcall(r214, r217, 4, 0)
    dec_ref r214
    if is_error(r218) goto L350 (error at wrapper:441) else goto L202
L202:
    dec_ref r215
    r219 = CPy_GetCoro(r218)
    dec_ref r218
    if is_error(r219) goto L348 (error at wrapper:441) else goto L203
L203:
    r16.__mypyc_temp__37 = r219; r220 = is_error
    if not r220 goto L348 (error at wrapper:-1) else goto L204 :: bool
L204:
    r221 = r16.__mypyc_temp__37
    if is_error(r221) goto L348 (error at wrapper:-1) else goto L205
L205:
    r222 = CPyIter_Next(r221)
    dec_ref r221
    if is_error(r222) goto L206 else goto L351
L206:
    r223 = CPy_FetchStopIterationValue()
    if is_error(r223) goto L348 (error at wrapper:441) else goto L207
L207:
    r224 = r223
    dec_ref r224
    r225 = <error> :: object
    r16.__mypyc_temp__37 = r225; r226 = is_error
    if not r226 goto L348 (error at wrapper:441) else goto L230 :: bool
L208:
    r227 = r222
L209:
    r16.__mypyc_next_label__ = 5
    dec_ref r16
    return r227
L210:
    r229 = load_address _Py_NoneStruct
    r230 = type != r229
    if r230 goto L211 else goto L352 :: bool
L211:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L214 (error at wrapper:441) else goto L353 :: bool
L212:
    unreachable
L213:
    inc_ref arg
    goto L225
L214:
    r231 = CPy_CatchError()
    r16.__mypyc_temp__38 = r231; r232 = is_error
    if not r232 goto L354 (error at wrapper:-1) else goto L215 :: bool
L215:
    r233 = load_address r11
    r234 = r16.__mypyc_temp__37
    if is_error(r234) goto L354 (error at wrapper:-1) else goto L216
L216:
    r235 = CPy_YieldFromErrorHandle(r234, r233)
    dec_ref r234
    if is_error(r235) goto L354 (error at wrapper:441) else goto L217
L217:
    if r235 goto L220 else goto L218 :: bool
L218:
    r227 = r11
    r236 = r16.__mypyc_temp__38
    if is_error(r236) goto L355 (error at wrapper:-1) else goto L356
L219:
    CPy_RestoreExcInfo(r236)
    dec_ref r236
    goto L209
L220:
    r224 = r11
    dec_ref r224
    r237 = r16.__mypyc_temp__38
    if is_error(r237) goto L222 (error at wrapper:-1) else goto L221
L221:
    CPy_RestoreExcInfo(r237)
    dec_ref r237
    goto L230
L222:
    r238 = r16.__mypyc_temp__38
    dec_ref r16
    if is_error(r238) goto L233 (error at wrapper:-1) else goto L223
L223:
    CPy_RestoreExcInfo(r238)
    dec_ref r238
    r239 = CPy_KeepPropagating()
    if not r239 goto L233 else goto L357 :: bool
L224:
    unreachable
L225:
    r240 = r16.__mypyc_temp__37
    if is_error(r240) goto L358 (error at wrapper:-1) else goto L226
L226:
    r241 = CPyIter_Send(r240, arg)
    dec_ref r240
    dec_ref arg
    if is_error(r241) goto L228 else goto L359
L227:
    r227 = r241
    goto L209
L228:
    r242 = CPy_FetchStopIterationValue()
    if is_error(r242) goto L348 (error at wrapper:441) else goto L229
L229:
    r224 = r242
    dec_ref r224
L230:
    if is_error(r13) goto L237 else goto L360
L231:
    CPy_Reraise()
    if not 0 goto L233 else goto L361 :: bool
L232:
    unreachable
L233:
    if is_error(r13) goto L235 else goto L234
L234:
    CPy_RestoreExcInfo(r13)
    xdec_ref r13
L235:
    r243 = CPy_KeepPropagating()
    if not r243 goto L290 else goto L236 :: bool
L236:
    unreachable
L237:
    r244 = r16.__mypyc_generator_attribute__response
    if is_error(r244) goto L302 (error at wrapper:443) else goto L238
L238:
    r16.__mypyc_next_label__ = -1
    dec_ref r16
L239:
    if is_error(stop_iter_ptr) goto L240 else goto L242
L240:
    CPyGen_SetStopIterationValue(r244)
    dec_ref r244
    if not 0 goto L290 else goto L241 :: bool
L241:
    unreachable
L242:
    set_mem stop_iter_ptr, r244 :: builtins.object*
    return 0
L243:
    r246 = r16.__mypyc_generator_attribute__provider
    if is_error(r246) goto L294 (error at wrapper:445) else goto L244
L244:
    r247 = r16.__mypyc_generator_attribute__rpc_request
    if is_error(r247) goto L362 (error at wrapper:445) else goto L245
L245:
    r248 = r18.func
    dec_ref r18
    if is_error(r248) goto L363 (error at wrapper:445) else goto L246
L246:
    r249 = [r246, r247]
    r250 = load_address r249
    r251 = PyObject_Vectorcall(r248, r250, 2, 0)
    dec_ref r248
    if is_error(r251) goto L363 (error at wrapper:445) else goto L247
L247:
    dec_ref r246
    dec_ref r247
    r252 = CPy_GetCoro(r251)
    dec_ref r251
    if is_error(r252) goto L302 (error at wrapper:445) else goto L248
L248:
    r16.__mypyc_temp__39 = r252; r253 = is_error
    if not r253 goto L302 (error at wrapper:-1) else goto L249 :: bool
L249:
    r254 = r16.__mypyc_temp__39
    if is_error(r254) goto L302 (error at wrapper:-1) else goto L250
L250:
    r255 = CPyIter_Next(r254)
    dec_ref r254
    if is_error(r255) goto L251 else goto L253
L251:
    r256 = CPy_FetchStopIterationValue()
    if is_error(r256) goto L302 (error at wrapper:445) else goto L252
L252:
    r257 = r256
    r258 = <error> :: object
    r16.__mypyc_temp__39 = r258; r259 = is_error
    if not r259 goto L364 (error at wrapper:445) else goto L275 :: bool
L253:
    r260 = r255
L254:
    r16.__mypyc_next_label__ = 6
    dec_ref r16
    return r260
L255:
    r262 = load_address _Py_NoneStruct
    r263 = type != r262
    if r263 goto L256 else goto L365 :: bool
L256:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L259 (error at wrapper:445) else goto L366 :: bool
L257:
    unreachable
L258:
    inc_ref arg
    goto L270
L259:
    r264 = CPy_CatchError()
    r16.__mypyc_temp__40 = r264; r265 = is_error
    if not r265 goto L367 (error at wrapper:-1) else goto L260 :: bool
L260:
    r266 = load_address r15
    r267 = r16.__mypyc_temp__39
    if is_error(r267) goto L367 (error at wrapper:-1) else goto L261
L261:
    r268 = CPy_YieldFromErrorHandle(r267, r266)
    dec_ref r267
    if is_error(r268) goto L367 (error at wrapper:445) else goto L262
L262:
    if r268 goto L265 else goto L263 :: bool
L263:
    r260 = r15
    r269 = r16.__mypyc_temp__40
    if is_error(r269) goto L368 (error at wrapper:-1) else goto L264
L264:
    CPy_RestoreExcInfo(r269)
    dec_ref r269
    goto L254
L265:
    r257 = r15
    r270 = r16.__mypyc_temp__40
    if is_error(r270) goto L369 (error at wrapper:-1) else goto L266
L266:
    CPy_RestoreExcInfo(r270)
    dec_ref r270
    goto L275
L267:
    r271 = r16.__mypyc_temp__40
    dec_ref r16
    if is_error(r271) goto L290 (error at wrapper:-1) else goto L268
L268:
    CPy_RestoreExcInfo(r271)
    dec_ref r271
    r272 = CPy_KeepPropagating()
    if not r272 goto L290 else goto L269 :: bool
L269:
    unreachable
L270:
    r273 = r16.__mypyc_temp__39
    if is_error(r273) goto L370 (error at wrapper:-1) else goto L271
L271:
    r274 = CPyIter_Send(r273, arg)
    dec_ref r273
    dec_ref arg
    if is_error(r274) goto L273 else goto L272
L272:
    r260 = r274
    goto L254
L273:
    r275 = CPy_FetchStopIterationValue()
    if is_error(r275) goto L302 (error at wrapper:445) else goto L274
L274:
    r257 = r275
L275:
    r276 = cast(dict, r257)
    if is_error(r276) goto L302 (error at wrapper:445) else goto L276
L276:
    r16.__mypyc_next_label__ = -1
    dec_ref r16
L277:
    if is_error(stop_iter_ptr) goto L278 else goto L280
L278:
    CPyGen_SetStopIterationValue(r276)
    dec_ref r276
    if not 0 goto L290 else goto L279 :: bool
L279:
    unreachable
L280:
    set_mem stop_iter_ptr, r276 :: builtins.object*
    return 0
L281:
    r278 = r17 == 0
    if r278 goto L371 else goto L372 :: bool
L282:
    r279 = r17 == 1
    if r279 goto L373 else goto L374 :: bool
L283:
    r280 = r17 == 2
    if r280 goto L375 else goto L376 :: bool
L284:
    r281 = r17 == 3
    if r281 goto L377 else goto L378 :: bool
L285:
    r282 = r17 == 4
    if r282 goto L379 else goto L380 :: bool
L286:
    r283 = r17 == 5
    if r283 goto L381 else goto L382 :: bool
L287:
    r284 = r17 == 6
    if r284 goto L255 else goto L383 :: bool
L288:
    r285 = raise StopIteration
    if not r285 goto L290 (error at wrapper:422) else goto L289 :: bool
L289:
    unreachable
L290:
    r286 = <error> :: object
    return r286
L291:
    xdec_ref r1
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L290
L292:
    xdec_ref r1
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    dec_ref r16
    goto L290
L293:
    dec_ref r16
    dec_ref r18
    goto L3
L294:
    dec_ref r16
    dec_ref r18
    goto L290
L295:
    dec_ref r16
    dec_ref r18
    dec_ref r30
    goto L290
L296:
    dec_ref r16
    dec_ref r18
    dec_ref r30
    dec_ref r31
    goto L290
L297:
    dec_ref r16
    dec_ref r18
    goto L22
L298:
    dec_ref r16
    dec_ref r18
    dec_ref r43
    goto L290
L299:
    dec_ref r16
    dec_ref r18
    dec_ref r43
    dec_ref r45
    goto L290
L300:
    dec_ref r16
    dec_ref r18
    dec_ref r53
    goto L290
L301:
    dec_ref r18
    goto L39
L302:
    dec_ref r16
    goto L290
L303:
    dec_ref r16
    dec_ref r18
    dec_ref r62
    goto L290
L304:
    dec_ref r16
    dec_ref r62
    dec_ref r63
    goto L290
L305:
    dec_ref r16
    dec_ref r73
    goto L290
L306:
    xdec_ref r1
    goto L60
L307:
    xdec_ref r1
    dec_ref r16
    goto L59
L308:
    xdec_ref r1
    goto L69
L309:
    dec_ref r76
    goto L69
L310:
    dec_ref r73
    goto L69
L311:
    dec_ref r16
    dec_ref arg
    goto L290
L312:
    dec_ref r16
    dec_ref r94
    goto L290
L313:
    dec_ref r16
    dec_ref r94
    dec_ref r95
    goto L290
L314:
    dec_ref r16
    dec_ref r94
    dec_ref r95
    dec_ref r96
    goto L290
L315:
    xdec_ref r3
    goto L89
L316:
    xdec_ref r3
    dec_ref r16
    goto L290
L317:
    dec_ref r16
    dec_ref r106
    goto L290
L318:
    xdec_ref r5
    goto L94
L319:
    xdec_ref r5
    dec_ref r16
    goto L93
L320:
    xdec_ref r5
    goto L103
L321:
    dec_ref r109
    goto L103
L322:
    dec_ref r106
    goto L103
L323:
    dec_ref r16
    dec_ref arg
    goto L290
L324:
    dec_ref r16
    dec_ref r128
    dec_ref r129
    goto L290
L325:
    dec_ref r16
    dec_ref r128
    goto L290
L326:
    dec_ref r16
    dec_ref r137
    goto L290
L327:
    xdec_ref r7
    goto L132
L328:
    xdec_ref r7
    dec_ref r16
    goto L131
L329:
    xdec_ref r7
    goto L141
L330:
    dec_ref r148
    goto L141
L331:
    dec_ref r16
    dec_ref arg
    goto L290
L332:
    dec_ref r164
    goto L153
L333:
    dec_ref r164
    dec_ref r165
    goto L153
L334:
    dec_ref r167
    goto L195
L335:
    dec_ref r172
    dec_ref r173
    dec_ref r174
    goto L192
L336:
    dec_ref r172
    dec_ref r173
    dec_ref r174
    dec_ref r175
    goto L192
L337:
    dec_ref r172
    dec_ref r173
    dec_ref r174
    dec_ref r176
    goto L192
L338:
    dec_ref r185
    goto L192
L339:
    xdec_ref r9
    goto L169
L340:
    xdec_ref r9
    dec_ref r16
    goto L168
L341:
    xdec_ref r9
    goto L178
L342:
    dec_ref r188
    goto L178
L343:
    dec_ref r185
    goto L178
L344:
    dec_ref r16
    goto L180
L345:
    dec_ref arg
    goto L192
L346:
    dec_ref r16
    goto L189
L347:
    dec_ref r16
    goto L194
L348:
    dec_ref r16
    goto L233
L349:
    dec_ref r16
    dec_ref r214
    goto L233
L350:
    dec_ref r16
    dec_ref r215
    goto L233
L351:
    xdec_ref r13
    goto L208
L352:
    xdec_ref r11
    goto L213
L353:
    xdec_ref r11
    xdec_ref r13
    dec_ref r16
    goto L212
L354:
    xdec_ref r11
    goto L222
L355:
    dec_ref r227
    goto L222
L356:
    xdec_ref r13
    goto L219
L357:
    xdec_ref r13
    goto L224
L358:
    dec_ref r16
    dec_ref arg
    goto L233
L359:
    xdec_ref r13
    goto L227
L360:
    dec_ref r16
    goto L231
L361:
    xdec_ref r13
    goto L232
L362:
    dec_ref r16
    dec_ref r18
    dec_ref r246
    goto L290
L363:
    dec_ref r16
    dec_ref r246
    dec_ref r247
    goto L290
L364:
    dec_ref r16
    dec_ref r257
    goto L290
L365:
    xdec_ref r15
    goto L258
L366:
    xdec_ref r15
    dec_ref r16
    goto L257
L367:
    xdec_ref r15
    goto L267
L368:
    dec_ref r260
    goto L267
L369:
    dec_ref r257
    goto L267
L370:
    dec_ref r16
    dec_ref arg
    goto L290
L371:
    xdec_ref r1
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L2
L372:
    dec_ref r18
    goto L282
L373:
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L57
L374:
    xdec_ref r1
    goto L283
L375:
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L91
L376:
    xdec_ref r5
    goto L284
L377:
    xdec_ref r9
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L129
L378:
    xdec_ref r7
    goto L285
L379:
    xdec_ref r11
    xdec_ref r13
    xdec_ref r15
    goto L166
L380:
    xdec_ref r9
    goto L286
L381:
    xdec_ref r15
    goto L210
L382:
    xdec_ref r11
    xdec_ref r13
    goto L287
L383:
    xdec_ref r15
    dec_ref r16
    goto L288

def wrapper_gen___422.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wrapper_gen___422.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wrapper_gen___422.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wrapper_gen___422.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wrapper_gen___422.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wrapper_gen___422.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = wrapper_gen___422.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def wrapper_gen___422.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def wrapper_gen___422.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wrapper_async_handle_recv_caching_obj.__call__(__mypyc_self__, provider, rpc_request):
    __mypyc_self__ :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_recv_caching_obj
    provider :: object
    rpc_request :: dict
    r0 :: faster_web3._utils.caching.caching_utils.async_handle_recv_caching_env
    r1 :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_recv_caching_env
    r2, r3, r4 :: bool
    r5 :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
    r6, r7 :: bool
    r8 :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
L0:
    r0 = __mypyc_self__.__mypyc_env__
    if is_error(r0) goto L8 (error at wrapper:422) else goto L1
L1:
    r1 = wrapper_async_handle_recv_caching_env()
    if is_error(r1) goto L9 (error at wrapper:422) else goto L2
L2:
    r1.__mypyc_env__ = r0; r2 = is_error
    if not r2 goto L10 (error at wrapper:422) else goto L3 :: bool
L3:
    inc_ref provider
    r1.__mypyc_generator_attribute__provider = provider; r3 = is_error
    if not r3 goto L10 (error at wrapper:422) else goto L4 :: bool
L4:
    inc_ref rpc_request
    r1.__mypyc_generator_attribute__rpc_request = rpc_request; r4 = is_error
    if not r4 goto L10 (error at wrapper:422) else goto L5 :: bool
L5:
    r5 = wrapper_gen___422()
    if is_error(r5) goto L10 (error at wrapper:422) else goto L6
L6:
    inc_ref r1
    r5.__mypyc_env__ = r1; r6 = is_error
    if not r6 goto L11 (error at wrapper:422) else goto L7 :: bool
L7:
    r1.__mypyc_next_label__ = 0
    dec_ref r1
    return r5
L8:
    r8 = <error> :: faster_web3._utils.caching.caching_utils.wrapper_gen___422
    return r8
L9:
    dec_ref r0
    goto L8
L10:
    dec_ref r1
    goto L8
L11:
    dec_ref r1
    dec_ref r5
    goto L8

def async_handle_recv_caching(func):
    func :: object
    r0 :: faster_web3._utils.caching.caching_utils.async_handle_recv_caching_env
    r1 :: bool
    r2 :: faster_web3._utils.caching.caching_utils.wrapper_async_handle_recv_caching_obj
    r3 :: bool
    wrapper :: object
    r4 :: dict
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: i32
    r9 :: bit
    r10 :: object
L0:
    r0 = async_handle_recv_caching_env()
    if is_error(r0) goto L7 (error at async_handle_recv_caching:416) else goto L1
L1:
    inc_ref func
    r0.func = func; r1 = is_error
    if not r1 goto L8 (error at async_handle_recv_caching:416) else goto L2 :: bool
L2:
    r2 = wrapper_async_handle_recv_caching_obj()
    if is_error(r2) goto L8 (error at async_handle_recv_caching:422) else goto L3
L3:
    r2.__mypyc_env__ = r0; r3 = is_error
    if not r3 goto L9 (error at async_handle_recv_caching:422) else goto L4 :: bool
L4:
    wrapper = r2
    r4 = faster_web3._utils.caching.caching_utils.globals :: static
    r5 = 'async_handle_recv_caching'
    r6 = CPyDict_GetItem(r4, r5)
    if is_error(r6) goto L10 (error at async_handle_recv_caching:448) else goto L5
L5:
    r7 = '_decorator'
    r8 = PyObject_SetAttr(wrapper, r7, r6)
    dec_ref r6
    r9 = r8 >= 0 :: signed
    if not r9 goto L10 (error at async_handle_recv_caching:448) else goto L6 :: bool
L6:
    return wrapper
L7:
    r10 = <error> :: object
    return r10
L8:
    dec_ref r0
    goto L7
L9:
    dec_ref r2
    goto L7
L10:
    dec_ref wrapper
    goto L7

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5, r6, r7 :: object_ptr
    r8 :: object_ptr[3]
    r9 :: c_ptr
    r10 :: native_int[3]
    r11 :: c_ptr
    r12 :: object
    r13 :: dict
    r14, r15 :: str
    r16 :: bit
    r17 :: object
    r18 :: str
    r19 :: dict
    r20 :: object
    r21 :: object_ptr
    r22 :: object_ptr[1]
    r23 :: c_ptr
    r24 :: native_int[1]
    r25 :: c_ptr
    r26 :: object
    r27 :: dict
    r28, r29 :: str
    r30 :: bit
    r31 :: object
    r32 :: str
    r33 :: dict
    r34, r35 :: object
    r36 :: str
    r37 :: dict
    r38, r39 :: object
    r40 :: str
    r41 :: dict
    r42, r43 :: object
    r44 :: str
    r45 :: dict
    r46, r47 :: object
    r48 :: str
    r49 :: dict
    r50, r51 :: object
    r52 :: str
    r53 :: dict
    r54, r55 :: object
    r56 :: str
    r57 :: dict
    r58, r59 :: object
    r60 :: str
    r61 :: dict
    r62, r63 :: object
    r64 :: str
    r65 :: object
    r66 :: dict
    r67 :: str
    r68 :: i32
    r69 :: bit
    r70 :: object
    r71 :: str
    r72 :: object
    r73 :: dict
    r74 :: str
    r75 :: i32
    r76 :: bit
    r77 :: object
    r78 :: str
    r79 :: object
    r80 :: dict
    r81 :: str
    r82 :: i32
    r83 :: bit
    r84 :: object
    r85 :: str
    r86 :: object
    r87 :: dict
    r88 :: str
    r89 :: i32
    r90 :: bit
    r91 :: object
    r92 :: str
    r93 :: object
    r94 :: dict
    r95 :: str
    r96 :: i32
    r97 :: bit
    r98 :: object
    r99 :: str
    r100 :: object
    r101 :: dict
    r102 :: str
    r103 :: i32
    r104 :: bit
    r105 :: object
    r106 :: str
    r107 :: object
    r108 :: dict
    r109 :: str
    r110 :: i32
    r111 :: bit
    r112 :: object
    r113 :: str
    r114 :: object
    r115 :: dict
    r116 :: str
    r117 :: i32
    r118 :: bit
    r119 :: object
    r120 :: str
    r121 :: object
    r122 :: dict
    r123 :: str
    r124 :: i32
    r125 :: bit
    r126 :: object
    r127 :: str
    r128 :: object
    r129 :: dict
    r130 :: str
    r131 :: i32
    r132 :: bit
    r133 :: object
    r134 :: str
    r135 :: object
    r136 :: dict
    r137 :: str
    r138 :: i32
    r139 :: bit
    r140 :: object
    r141 :: str
    r142, r143 :: object
    r144 :: bool
    r145, r146, r147, r148, r149, r150 :: str
    r151 :: tuple
    r152 :: i32
    r153 :: bit
    r154 :: dict
    r155 :: str
    r156 :: i32
    r157 :: bit
    r158 :: dict
    r159 :: str
    r160 :: object
    r161 :: i32
    r162 :: bit
    r163 :: dict
    r164 :: str
    r165 :: object
    r166 :: str
    r167 :: object
    r168 :: str
    r169 :: object
    r170 :: int
    r171 :: faster_web3.utils.caching.RequestCacheValidationThreshold
    r172 :: bool
    r173 :: dict
    r174 :: str
    r175 :: object
    r176 :: str
    r177 :: object
    r178 :: str
    r179 :: object
    r180 :: int
    r181 :: dict
    r182 :: str
    r183 :: object
    r184 :: str
    r185 :: object
    r186 :: str
    r187 :: object
    r188 :: int
    r189 :: dict
    r190 :: str
    r191 :: object
    r192 :: str
    r193 :: object
    r194 :: str
    r195 :: object
    r196 :: int
    r197 :: dict
    r198 :: str
    r199 :: object
    r200 :: str
    r201 :: object
    r202 :: str
    r203 :: object
    r204 :: int
    r205 :: dict
    r206 :: str
    r207 :: object
    r208 :: str
    r209 :: object
    r210 :: str
    r211 :: object
    r212 :: int
    r213 :: dict
    r214 :: str
    r215 :: object
    r216 :: str
    r217 :: object
    r218 :: str
    r219 :: object
    r220 :: int
    r221 :: dict
    r222 :: str
    r223 :: object
    r224 :: str
    r225 :: object
    r226 :: str
    r227 :: object
    r228 :: int
    r229 :: dict
    r230 :: str
    r231 :: object
    r232 :: str
    r233 :: object
    r234 :: str
    r235 :: object
    r236 :: int
    r237 :: dict
    r238 :: str
    r239 :: object
    r240 :: str
    r241 :: object
    r242 :: str
    r243 :: object
    r244 :: int
    r245 :: dict
    r246 :: str
    r247 :: object
    r248 :: str
    r249 :: object
    r250 :: str
    r251 :: object
    r252 :: int
    r253 :: dict
    r254 :: str
    r255 :: object
    r256 :: str
    r257 :: object
    r258 :: str
    r259 :: object
    r260 :: int
    r261, r262, r263, r264, r265, r266, r267, r268, r269, r270, r271, r272, r273, r274, r275, r276, r277, r278, r279, r280, r281, r282, r283 :: object
    r284, r285 :: dict
    r286 :: str
    r287 :: i32
    r288 :: bit
    r289 :: dict
    r290 :: str
    r291 :: object
    r292 :: str
    r293 :: object
    r294 :: str
    r295 :: dict
    r296 :: str
    r297 :: object
    r298 :: str
    r299 :: object
    r300 :: str
    r301 :: dict
    r302 :: str
    r303 :: object
    r304 :: str
    r305 :: object
    r306 :: str
    r307 :: set
    r308 :: i32
    r309 :: bit
    r310 :: i32
    r311 :: bit
    r312 :: i32
    r313 :: bit
    r314 :: frozenset
    r315 :: dict
    r316 :: str
    r317 :: i32
    r318 :: bit
    r319 :: dict
    r320 :: str
    r321 :: object
    r322 :: str
    r323 :: object
    r324 :: str
    r325 :: dict
    r326 :: str
    r327 :: object
    r328 :: str
    r329 :: object
    r330 :: str
    r331 :: dict
    r332 :: str
    r333 :: object
    r334 :: str
    r335 :: object
    r336 :: str
    r337 :: dict
    r338 :: str
    r339 :: object
    r340 :: str
    r341 :: object
    r342 :: str
    r343 :: dict
    r344 :: str
    r345 :: object
    r346 :: str
    r347 :: object
    r348 :: str
    r349 :: set
    r350 :: i32
    r351 :: bit
    r352 :: i32
    r353 :: bit
    r354 :: i32
    r355 :: bit
    r356 :: i32
    r357 :: bit
    r358 :: i32
    r359 :: bit
    r360 :: frozenset
    r361 :: dict
    r362 :: str
    r363 :: i32
    r364 :: bit
    r365 :: dict
    r366 :: str
    r367 :: object
    r368 :: str
    r369 :: object
    r370 :: str
    r371 :: dict
    r372 :: str
    r373 :: object
    r374 :: str
    r375 :: object
    r376 :: str
    r377 :: dict
    r378 :: str
    r379 :: object
    r380 :: str
    r381 :: object
    r382 :: str
    r383 :: dict
    r384 :: str
    r385 :: object
    r386 :: str
    r387 :: object
    r388 :: str
    r389 :: dict
    r390 :: str
    r391 :: object
    r392 :: str
    r393 :: object
    r394 :: str
    r395 :: set
    r396 :: i32
    r397 :: bit
    r398 :: i32
    r399 :: bit
    r400 :: i32
    r401 :: bit
    r402 :: i32
    r403 :: bit
    r404 :: i32
    r405 :: bit
    r406 :: frozenset
    r407 :: dict
    r408 :: str
    r409 :: i32
    r410 :: bit
    r411 :: dict
    r412 :: str
    r413 :: object
    r414 :: str
    r415 :: object
    r416 :: str
    r417 :: dict
    r418 :: str
    r419 :: object
    r420 :: str
    r421 :: object
    r422 :: str
    r423 :: dict
    r424 :: str
    r425 :: object
    r426 :: str
    r427 :: object
    r428 :: str
    r429 :: set
    r430 :: i32
    r431 :: bit
    r432 :: i32
    r433 :: bit
    r434 :: i32
    r435 :: bit
    r436 :: frozenset
    r437 :: dict
    r438 :: str
    r439 :: i32
    r440 :: bit
    r441 :: dict
    r442 :: frozenset
    r443 :: bool
    r444, r445 :: object
    r446 :: str
    r447 :: dict
    r448 :: str
    r449 :: object
    r450 :: i32
    r451, r452 :: bit
    r453 :: dict
    r454 :: frozenset
    r455 :: bool
    r456, r457 :: object
    r458 :: str
    r459 :: dict
    r460 :: str
    r461 :: object
    r462 :: i32
    r463, r464 :: bit
    r465 :: dict
    r466 :: frozenset
    r467 :: bool
    r468, r469 :: object
    r470 :: str
    r471 :: dict
    r472 :: str
    r473 :: object
    r474 :: i32
    r475, r476 :: bit
    r477 :: dict
    r478 :: frozenset
    r479 :: bool
    r480, r481 :: object
    r482 :: str
    r483 :: dict
    r484 :: str
    r485 :: object
    r486 :: i32
    r487, r488 :: bit
    r489 :: dict
    r490 :: i32
    r491 :: bit
    r492 :: i32
    r493 :: bit
    r494 :: i32
    r495 :: bit
    r496 :: i32
    r497 :: bit
    r498 :: dict
    r499 :: str
    r500 :: i32
    r501 :: bit
    r502 :: dict
    r503 :: bool
    r504 :: object
    r505 :: tuple
    r506 :: dict
    r507 :: str
    r508 :: i32
    r509 :: bit
    r510 :: dict
    r511 :: str
    r512 :: object
    r513 :: str
    r514 :: dict
    r515 :: str
    r516 :: object
    r517 :: dict
    r518 :: str
    r519, r520 :: object
    r521 :: dict
    r522 :: str
    r523, r524 :: object
    r525 :: dict
    r526 :: str
    r527 :: object
    r528 :: tuple[object, object]
    r529, r530 :: object
    r531 :: list
    r532, r533, r534, r535 :: ptr
    r536 :: dict
    r537 :: str
    r538, r539 :: object
    r540 :: dict
    r541 :: str
    r542 :: object
    r543 :: dict
    r544 :: str
    r545 :: object
    r546 :: dict
    r547 :: str
    r548, r549 :: object
    r550 :: tuple[object, object, object]
    r551, r552 :: object
    r553 :: tuple[object, object]
    r554, r555 :: object
    r556 :: tuple[list, object]
    r557, r558 :: object
    r559 :: dict
    r560 :: str
    r561 :: i32
    r562 :: bit
    r563 :: dict
    r564 :: frozenset
    r565 :: bool
    r566, r567 :: object
    r568 :: str
    r569 :: dict
    r570 :: str
    r571 :: object
    r572 :: i32
    r573, r574 :: bit
    r575 :: dict
    r576 :: frozenset
    r577 :: bool
    r578, r579 :: object
    r580 :: str
    r581 :: dict
    r582 :: str
    r583 :: object
    r584 :: i32
    r585, r586 :: bit
    r587 :: dict
    r588 :: frozenset
    r589 :: bool
    r590, r591 :: object
    r592 :: str
    r593 :: dict
    r594 :: str
    r595 :: object
    r596 :: i32
    r597, r598 :: bit
    r599 :: dict
    r600 :: frozenset
    r601 :: bool
    r602, r603 :: object
    r604 :: str
    r605 :: dict
    r606 :: str
    r607 :: object
    r608 :: i32
    r609, r610 :: bit
    r611 :: dict
    r612 :: i32
    r613 :: bit
    r614 :: i32
    r615 :: bit
    r616 :: i32
    r617 :: bit
    r618 :: i32
    r619 :: bit
    r620 :: dict
    r621 :: str
    r622 :: i32
    r623 :: bit
    r624 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L287 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address asyncio :: module
    r6 = load_address hashlib :: module
    r7 = load_address threading :: module
    r8 = [r5, r6, r7]
    r9 = load_address r8
    r10 = [1, 2, 3]
    r11 = load_address r10
    r12 = (('asyncio', 'asyncio', 'asyncio'), ('hashlib', 'hashlib', 'hashlib'), ('threading', 'threading', 'threading'))
    r13 = faster_web3._utils.caching.caching_utils.globals :: static
    r14 = 'faster_web3/_utils/caching/caching_utils.py'
    r15 = '<module>'
    r16 = CPyImport_ImportMany(r12, r9, r13, r14, r15, r11)
    if not r16 goto L287 else goto L4 :: bool
L4:
    r17 = ('TYPE_CHECKING', 'Any', 'Callable', 'Coroutine', 'Dict', 'Final', 'Generator', 'List', 'Optional', 'Sequence', 'Tuple', 'Union', 'final')
    r18 = 'typing'
    r19 = faster_web3._utils.caching.caching_utils.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L287 (error at <module>:4) else goto L5
L5:
    typing = r20 :: module
    dec_ref r20
    r21 = load_address faster_eth_utils :: module
    r22 = [r21]
    r23 = load_address r22
    r24 = [20]
    r25 = load_address r24
    r26 = (('faster_eth_utils', 'faster_eth_utils', 'faster_eth_utils'),)
    r27 = faster_web3._utils.caching.caching_utils.globals :: static
    r28 = 'faster_web3/_utils/caching/caching_utils.py'
    r29 = '<module>'
    r30 = CPyImport_ImportMany(r26, r23, r27, r28, r29, r25)
    if not r30 goto L287 else goto L6 :: bool
L6:
    r31 = ('ChainId',)
    r32 = 'eth_typing'
    r33 = faster_web3._utils.caching.caching_utils.globals :: static
    r34 = CPyImport_ImportFromMany(r32, r31, r31, r33)
    if is_error(r34) goto L287 (error at <module>:21) else goto L7
L7:
    eth_typing = r34 :: module
    dec_ref r34
    r35 = ('ASYNC_PROVIDER_TYPE', 'SYNC_PROVIDER_TYPE')
    r36 = 'faster_web3._utils.caching'
    r37 = faster_web3._utils.caching.caching_utils.globals :: static
    r38 = CPyImport_ImportFromMany(r36, r35, r35, r37)
    if is_error(r38) goto L287 (error at <module>:25) else goto L8
L8:
    faster_web3._utils.caching = r38 :: module
    dec_ref r38
    r39 = ('UNCACHEABLE_BLOCK_IDS', 'always_cache_request', 'async_validate_from_block_id_in_params', 'async_validate_from_blockhash_in_params', 'async_validate_from_blocknum_in_result', 'validate_from_block_id_in_params', 'validate_from_blockhash_in_params', 'validate_from_blocknum_in_result')
    r40 = 'faster_web3._utils.caching.request_caching_validation'
    r41 = faster_web3._utils.caching.caching_utils.globals :: static
    r42 = CPyImport_ImportFromMany(r40, r39, r39, r41)
    if is_error(r42) goto L287 (error at <module>:29) else goto L9
L9:
    faster_web3._utils.caching.request_caching_validation = r42 :: module
    dec_ref r42
    r43 = ('empty',)
    r44 = 'faster_web3._utils.empty'
    r45 = faster_web3._utils.caching.caching_utils.globals :: static
    r46 = CPyImport_ImportFromMany(r44, r43, r43, r45)
    if is_error(r46) goto L287 (error at <module>:39) else goto L10
L10:
    faster_web3._utils.empty = r46 :: module
    dec_ref r46
    r47 = ('RPC',)
    r48 = 'faster_web3._utils.rpc_abi'
    r49 = faster_web3._utils.caching.caching_utils.globals :: static
    r50 = CPyImport_ImportFromMany(r48, r47, r47, r49)
    if is_error(r50) goto L287 (error at <module>:42) else goto L11
L11:
    faster_web3._utils.rpc_abi = r50 :: module
    dec_ref r50
    r51 = ('Web3TypeError',)
    r52 = 'faster_web3.exceptions'
    r53 = faster_web3._utils.caching.caching_utils.globals :: static
    r54 = CPyImport_ImportFromMany(r52, r51, r51, r53)
    if is_error(r54) goto L287 (error at <module>:45) else goto L12
L12:
    faster_web3.exceptions = r54 :: module
    dec_ref r54
    r55 = ('RPCEndpoint',)
    r56 = 'faster_web3.types'
    r57 = faster_web3._utils.caching.caching_utils.globals :: static
    r58 = CPyImport_ImportFromMany(r56, r55, r55, r57)
    if is_error(r58) goto L287 (error at <module>:48) else goto L13
L13:
    faster_web3.types = r58 :: module
    dec_ref r58
    r59 = ('RequestCacheValidationThreshold',)
    r60 = 'faster_web3.utils'
    r61 = faster_web3._utils.caching.caching_utils.globals :: static
    r62 = CPyImport_ImportFromMany(r60, r59, r59, r61)
    if is_error(r62) goto L287 (error at <module>:51) else goto L14
L14:
    faster_web3.utils = r62 :: module
    dec_ref r62
    if 0 goto L15 else goto L15 :: bool
L15:
    r63 = asyncio :: module
    r64 = 'iscoroutinefunction'
    r65 = CPyObject_GetAttr(r63, r64)
    if is_error(r65) goto L287 (error at <module>:69) else goto L16
L16:
    faster_web3._utils.caching.caching_utils.iscoroutinefunction = r65 :: static
    r66 = faster_web3._utils.caching.caching_utils.globals :: static
    r67 = 'iscoroutinefunction'
    r68 = CPyDict_SetItem(r66, r67, r65)
    dec_ref r65
    r69 = r68 >= 0 :: signed
    if not r69 goto L287 (error at <module>:69) else goto L17 :: bool
L17:
    r70 = hashlib :: module
    r71 = 'md5'
    r72 = CPyObject_GetAttr(r70, r71)
    if is_error(r72) goto L287 (error at <module>:71) else goto L18
L18:
    faster_web3._utils.caching.caching_utils.md5 = r72 :: static
    r73 = faster_web3._utils.caching.caching_utils.globals :: static
    r74 = 'md5'
    r75 = CPyDict_SetItem(r73, r74, r72)
    dec_ref r72
    r76 = r75 >= 0 :: signed
    if not r76 goto L287 (error at <module>:71) else goto L19 :: bool
L19:
    r77 = threading :: module
    r78 = 'get_ident'
    r79 = CPyObject_GetAttr(r77, r78)
    if is_error(r79) goto L287 (error at <module>:73) else goto L20
L20:
    faster_web3._utils.caching.caching_utils.get_ident = r79 :: static
    r80 = faster_web3._utils.caching.caching_utils.globals :: static
    r81 = 'get_ident'
    r82 = CPyDict_SetItem(r80, r81, r79)
    dec_ref r79
    r83 = r82 >= 0 :: signed
    if not r83 goto L287 (error at <module>:73) else goto L21 :: bool
L21:
    r84 = faster_eth_utils :: module
    r85 = 'is_boolean'
    r86 = CPyObject_GetAttr(r84, r85)
    if is_error(r86) goto L287 (error at <module>:75) else goto L22
L22:
    faster_web3._utils.caching.caching_utils.is_boolean = r86 :: static
    r87 = faster_web3._utils.caching.caching_utils.globals :: static
    r88 = 'is_boolean'
    r89 = CPyDict_SetItem(r87, r88, r86)
    dec_ref r86
    r90 = r89 >= 0 :: signed
    if not r90 goto L287 (error at <module>:75) else goto L23 :: bool
L23:
    r91 = faster_eth_utils :: module
    r92 = 'is_bytes'
    r93 = CPyObject_GetAttr(r91, r92)
    if is_error(r93) goto L287 (error at <module>:76) else goto L24
L24:
    faster_web3._utils.caching.caching_utils.is_bytes = r93 :: static
    r94 = faster_web3._utils.caching.caching_utils.globals :: static
    r95 = 'is_bytes'
    r96 = CPyDict_SetItem(r94, r95, r93)
    dec_ref r93
    r97 = r96 >= 0 :: signed
    if not r97 goto L287 (error at <module>:76) else goto L25 :: bool
L25:
    r98 = faster_eth_utils :: module
    r99 = 'is_dict'
    r100 = CPyObject_GetAttr(r98, r99)
    if is_error(r100) goto L287 (error at <module>:77) else goto L26
L26:
    faster_web3._utils.caching.caching_utils.is_dict = r100 :: static
    r101 = faster_web3._utils.caching.caching_utils.globals :: static
    r102 = 'is_dict'
    r103 = CPyDict_SetItem(r101, r102, r100)
    dec_ref r100
    r104 = r103 >= 0 :: signed
    if not r104 goto L287 (error at <module>:77) else goto L27 :: bool
L27:
    r105 = faster_eth_utils :: module
    r106 = 'is_list_like'
    r107 = CPyObject_GetAttr(r105, r106)
    if is_error(r107) goto L287 (error at <module>:78) else goto L28
L28:
    faster_web3._utils.caching.caching_utils.is_list_like = r107 :: static
    r108 = faster_web3._utils.caching.caching_utils.globals :: static
    r109 = 'is_list_like'
    r110 = CPyDict_SetItem(r108, r109, r107)
    dec_ref r107
    r111 = r110 >= 0 :: signed
    if not r111 goto L287 (error at <module>:78) else goto L29 :: bool
L29:
    r112 = faster_eth_utils :: module
    r113 = 'is_null'
    r114 = CPyObject_GetAttr(r112, r113)
    if is_error(r114) goto L287 (error at <module>:79) else goto L30
L30:
    faster_web3._utils.caching.caching_utils.is_null = r114 :: static
    r115 = faster_web3._utils.caching.caching_utils.globals :: static
    r116 = 'is_null'
    r117 = CPyDict_SetItem(r115, r116, r114)
    dec_ref r114
    r118 = r117 >= 0 :: signed
    if not r118 goto L287 (error at <module>:79) else goto L31 :: bool
L31:
    r119 = faster_eth_utils :: module
    r120 = 'is_number'
    r121 = CPyObject_GetAttr(r119, r120)
    if is_error(r121) goto L287 (error at <module>:80) else goto L32
L32:
    faster_web3._utils.caching.caching_utils.is_number = r121 :: static
    r122 = faster_web3._utils.caching.caching_utils.globals :: static
    r123 = 'is_number'
    r124 = CPyDict_SetItem(r122, r123, r121)
    dec_ref r121
    r125 = r124 >= 0 :: signed
    if not r125 goto L287 (error at <module>:80) else goto L33 :: bool
L33:
    r126 = faster_eth_utils :: module
    r127 = 'is_text'
    r128 = CPyObject_GetAttr(r126, r127)
    if is_error(r128) goto L287 (error at <module>:81) else goto L34
L34:
    faster_web3._utils.caching.caching_utils.is_text = r128 :: static
    r129 = faster_web3._utils.caching.caching_utils.globals :: static
    r130 = 'is_text'
    r131 = CPyDict_SetItem(r129, r130, r128)
    dec_ref r128
    r132 = r131 >= 0 :: signed
    if not r132 goto L287 (error at <module>:81) else goto L35 :: bool
L35:
    r133 = faster_eth_utils :: module
    r134 = 'to_bytes'
    r135 = CPyObject_GetAttr(r133, r134)
    if is_error(r135) goto L287 (error at <module>:82) else goto L36
L36:
    faster_web3._utils.caching.caching_utils.to_bytes = r135 :: static
    r136 = faster_web3._utils.caching.caching_utils.globals :: static
    r137 = 'to_bytes'
    r138 = CPyDict_SetItem(r136, r137, r135)
    dec_ref r135
    r139 = r138 >= 0 :: signed
    if not r139 goto L287 (error at <module>:82) else goto L37 :: bool
L37:
    r140 = <error> :: object
    r141 = 'faster_web3._utils.caching.caching_utils'
    r142 = faster_web3._utils.caching.caching_utils.RequestInformation_template :: type
    r143 = CPyType_FromTemplate(r142, r140, r141)
    if is_error(r143) goto L287 (error at <module>:111) else goto L38
L38:
    r144 = RequestInformation_trait_vtable_setup()
    if is_error(r144) goto L288 (error at <module>:-1) else goto L39
L39:
    r145 = '__mypyc_attrs__'
    r146 = 'method'
    r147 = 'params'
    r148 = 'response_formatters'
    r149 = 'subscription_id'
    r150 = 'middleware_response_processors'
    r151 = PyTuple_Pack(5, r146, r147, r148, r149, r150)
    if is_error(r151) goto L288 (error at <module>:111) else goto L40
L40:
    r152 = PyObject_SetAttr(r143, r145, r151)
    dec_ref r151
    r153 = r152 >= 0 :: signed
    if not r153 goto L288 (error at <module>:111) else goto L41 :: bool
L41:
    faster_web3._utils.caching.caching_utils.RequestInformation = r143 :: type
    r154 = faster_web3._utils.caching.caching_utils.globals :: static
    r155 = 'RequestInformation'
    r156 = PyDict_SetItem(r154, r155, r143)
    dec_ref r143
    r157 = r156 >= 0 :: signed
    if not r157 goto L287 (error at <module>:111) else goto L42 :: bool
L42:
    r158 = faster_web3._utils.caching.caching_utils.globals :: static
    r159 = 'DEFAULT_VALIDATION_THRESHOLD'
    r160 = object 3600
    r161 = CPyDict_SetItem(r158, r159, r160)
    r162 = r161 >= 0 :: signed
    if not r162 goto L287 (error at <module>:130) else goto L43 :: bool
L43:
    r163 = faster_web3._utils.caching.caching_utils.globals :: static
    r164 = 'ChainId'
    r165 = CPyDict_GetItem(r163, r164)
    if is_error(r165) goto L287 (error at <module>:137) else goto L44
L44:
    r166 = 'ETH'
    r167 = CPyObject_GetAttr(r165, r166)
    dec_ref r165
    if is_error(r167) goto L287 (error at <module>:137) else goto L45
L45:
    r168 = 'value'
    r169 = CPyObject_GetAttr(r167, r168)
    dec_ref r167
    if is_error(r169) goto L287 (error at <module>:137) else goto L46
L46:
    r170 = unbox(int, r169)
    dec_ref r169
    if is_error(r170) goto L287 (error at <module>:137) else goto L47
L47:
    r171 = faster_web3.utils.caching.RequestCacheValidationThreshold.FINALIZED :: static
    if is_error(r171) goto L289 else goto L50
L48:
    r172 = raise NameError('value for final name "FINALIZED" was not set')
    if not r172 goto L287 (error at <module>:137) else goto L49 :: bool
L49:
    unreachable
L50:
    r173 = faster_web3._utils.caching.caching_utils.globals :: static
    r174 = 'ChainId'
    r175 = CPyDict_GetItem(r173, r174)
    if is_error(r175) goto L290 (error at <module>:138) else goto L51
L51:
    r176 = 'ARB1'
    r177 = CPyObject_GetAttr(r175, r176)
    dec_ref r175
    if is_error(r177) goto L290 (error at <module>:138) else goto L52
L52:
    r178 = 'value'
    r179 = CPyObject_GetAttr(r177, r178)
    dec_ref r177
    if is_error(r179) goto L290 (error at <module>:138) else goto L53
L53:
    r180 = unbox(int, r179)
    dec_ref r179
    if is_error(r180) goto L290 (error at <module>:138) else goto L54
L54:
    r181 = faster_web3._utils.caching.caching_utils.globals :: static
    r182 = 'ChainId'
    r183 = CPyDict_GetItem(r181, r182)
    if is_error(r183) goto L291 (error at <module>:139) else goto L55
L55:
    r184 = 'ZKSYNC'
    r185 = CPyObject_GetAttr(r183, r184)
    dec_ref r183
    if is_error(r185) goto L291 (error at <module>:139) else goto L56
L56:
    r186 = 'value'
    r187 = CPyObject_GetAttr(r185, r186)
    dec_ref r185
    if is_error(r187) goto L291 (error at <module>:139) else goto L57
L57:
    r188 = unbox(int, r187)
    dec_ref r187
    if is_error(r188) goto L291 (error at <module>:139) else goto L58
L58:
    r189 = faster_web3._utils.caching.caching_utils.globals :: static
    r190 = 'ChainId'
    r191 = CPyDict_GetItem(r189, r190)
    if is_error(r191) goto L292 (error at <module>:140) else goto L59
L59:
    r192 = 'OETH'
    r193 = CPyObject_GetAttr(r191, r192)
    dec_ref r191
    if is_error(r193) goto L292 (error at <module>:140) else goto L60
L60:
    r194 = 'value'
    r195 = CPyObject_GetAttr(r193, r194)
    dec_ref r193
    if is_error(r195) goto L292 (error at <module>:140) else goto L61
L61:
    r196 = unbox(int, r195)
    dec_ref r195
    if is_error(r196) goto L292 (error at <module>:140) else goto L62
L62:
    r197 = faster_web3._utils.caching.caching_utils.globals :: static
    r198 = 'ChainId'
    r199 = CPyDict_GetItem(r197, r198)
    if is_error(r199) goto L293 (error at <module>:141) else goto L63
L63:
    r200 = 'MATIC'
    r201 = CPyObject_GetAttr(r199, r200)
    dec_ref r199
    if is_error(r201) goto L293 (error at <module>:141) else goto L64
L64:
    r202 = 'value'
    r203 = CPyObject_GetAttr(r201, r202)
    dec_ref r201
    if is_error(r203) goto L293 (error at <module>:141) else goto L65
L65:
    r204 = unbox(int, r203)
    dec_ref r203
    if is_error(r204) goto L293 (error at <module>:141) else goto L66
L66:
    r205 = faster_web3._utils.caching.caching_utils.globals :: static
    r206 = 'ChainId'
    r207 = CPyDict_GetItem(r205, r206)
    if is_error(r207) goto L294 (error at <module>:142) else goto L67
L67:
    r208 = 'ZKEVM'
    r209 = CPyObject_GetAttr(r207, r208)
    dec_ref r207
    if is_error(r209) goto L294 (error at <module>:142) else goto L68
L68:
    r210 = 'value'
    r211 = CPyObject_GetAttr(r209, r210)
    dec_ref r209
    if is_error(r211) goto L294 (error at <module>:142) else goto L69
L69:
    r212 = unbox(int, r211)
    dec_ref r211
    if is_error(r212) goto L294 (error at <module>:142) else goto L70
L70:
    r213 = faster_web3._utils.caching.caching_utils.globals :: static
    r214 = 'ChainId'
    r215 = CPyDict_GetItem(r213, r214)
    if is_error(r215) goto L295 (error at <module>:143) else goto L71
L71:
    r216 = 'BASE'
    r217 = CPyObject_GetAttr(r215, r216)
    dec_ref r215
    if is_error(r217) goto L295 (error at <module>:143) else goto L72
L72:
    r218 = 'value'
    r219 = CPyObject_GetAttr(r217, r218)
    dec_ref r217
    if is_error(r219) goto L295 (error at <module>:143) else goto L73
L73:
    r220 = unbox(int, r219)
    dec_ref r219
    if is_error(r220) goto L295 (error at <module>:143) else goto L74
L74:
    r221 = faster_web3._utils.caching.caching_utils.globals :: static
    r222 = 'ChainId'
    r223 = CPyDict_GetItem(r221, r222)
    if is_error(r223) goto L296 (error at <module>:144) else goto L75
L75:
    r224 = 'SCR'
    r225 = CPyObject_GetAttr(r223, r224)
    dec_ref r223
    if is_error(r225) goto L296 (error at <module>:144) else goto L76
L76:
    r226 = 'value'
    r227 = CPyObject_GetAttr(r225, r226)
    dec_ref r225
    if is_error(r227) goto L296 (error at <module>:144) else goto L77
L77:
    r228 = unbox(int, r227)
    dec_ref r227
    if is_error(r228) goto L296 (error at <module>:144) else goto L78
L78:
    r229 = faster_web3._utils.caching.caching_utils.globals :: static
    r230 = 'ChainId'
    r231 = CPyDict_GetItem(r229, r230)
    if is_error(r231) goto L297 (error at <module>:145) else goto L79
L79:
    r232 = 'GNO'
    r233 = CPyObject_GetAttr(r231, r232)
    dec_ref r231
    if is_error(r233) goto L297 (error at <module>:145) else goto L80
L80:
    r234 = 'value'
    r235 = CPyObject_GetAttr(r233, r234)
    dec_ref r233
    if is_error(r235) goto L297 (error at <module>:145) else goto L81
L81:
    r236 = unbox(int, r235)
    dec_ref r235
    if is_error(r236) goto L297 (error at <module>:145) else goto L82
L82:
    r237 = faster_web3._utils.caching.caching_utils.globals :: static
    r238 = 'ChainId'
    r239 = CPyDict_GetItem(r237, r238)
    if is_error(r239) goto L298 (error at <module>:146) else goto L83
L83:
    r240 = 'AVAX'
    r241 = CPyObject_GetAttr(r239, r240)
    dec_ref r239
    if is_error(r241) goto L298 (error at <module>:146) else goto L84
L84:
    r242 = 'value'
    r243 = CPyObject_GetAttr(r241, r242)
    dec_ref r241
    if is_error(r243) goto L298 (error at <module>:146) else goto L85
L85:
    r244 = unbox(int, r243)
    dec_ref r243
    if is_error(r244) goto L298 (error at <module>:146) else goto L86
L86:
    r245 = faster_web3._utils.caching.caching_utils.globals :: static
    r246 = 'ChainId'
    r247 = CPyDict_GetItem(r245, r246)
    if is_error(r247) goto L299 (error at <module>:147) else goto L87
L87:
    r248 = 'BNB'
    r249 = CPyObject_GetAttr(r247, r248)
    dec_ref r247
    if is_error(r249) goto L299 (error at <module>:147) else goto L88
L88:
    r250 = 'value'
    r251 = CPyObject_GetAttr(r249, r250)
    dec_ref r249
    if is_error(r251) goto L299 (error at <module>:147) else goto L89
L89:
    r252 = unbox(int, r251)
    dec_ref r251
    if is_error(r252) goto L299 (error at <module>:147) else goto L90
L90:
    r253 = faster_web3._utils.caching.caching_utils.globals :: static
    r254 = 'ChainId'
    r255 = CPyDict_GetItem(r253, r254)
    if is_error(r255) goto L300 (error at <module>:148) else goto L91
L91:
    r256 = 'FTM'
    r257 = CPyObject_GetAttr(r255, r256)
    dec_ref r255
    if is_error(r257) goto L300 (error at <module>:148) else goto L92
L92:
    r258 = 'value'
    r259 = CPyObject_GetAttr(r257, r258)
    dec_ref r257
    if is_error(r259) goto L300 (error at <module>:148) else goto L93
L93:
    r260 = unbox(int, r259)
    dec_ref r259
    if is_error(r260) goto L300 (error at <module>:148) else goto L94
L94:
    r261 = box(int, r170)
    r262 = box(int, r180)
    r263 = object 604800
    r264 = box(int, r188)
    r265 = object 3600
    r266 = box(int, r196)
    r267 = object 180
    r268 = box(int, r204)
    r269 = object 1800
    r270 = box(int, r212)
    r271 = object 3600
    r272 = box(int, r220)
    r273 = object 604800
    r274 = box(int, r228)
    r275 = object 3600
    r276 = box(int, r236)
    r277 = object 300
    r278 = box(int, r244)
    r279 = object 120
    r280 = box(int, r252)
    r281 = object 120
    r282 = box(int, r260)
    r283 = object 60
    r284 = CPyDict_Build(12, r261, r171, r262, r263, r264, r265, r266, r267, r268, r269, r270, r271, r272, r273, r274, r275, r276, r277, r278, r279, r280, r281, r282, r283)
    dec_ref r261
    dec_ref r262
    dec_ref r264
    dec_ref r266
    dec_ref r268
    dec_ref r270
    dec_ref r272
    dec_ref r274
    dec_ref r276
    dec_ref r278
    dec_ref r280
    dec_ref r282
    if is_error(r284) goto L287 (error at <module>:134) else goto L95
L95:
    faster_web3._utils.caching.caching_utils.CHAIN_VALIDATION_THRESHOLD_DEFAULTS = r284 :: static
    r285 = faster_web3._utils.caching.caching_utils.globals :: static
    r286 = 'CHAIN_VALIDATION_THRESHOLD_DEFAULTS'
    r287 = CPyDict_SetItem(r285, r286, r284)
    dec_ref r284
    r288 = r287 >= 0 :: signed
    if not r288 goto L287 (error at <module>:134) else goto L96 :: bool
L96:
    r289 = faster_web3._utils.caching.caching_utils.globals :: static
    r290 = 'RPC'
    r291 = CPyDict_GetItem(r289, r290)
    if is_error(r291) goto L287 (error at <module>:169) else goto L97
L97:
    r292 = 'eth_chainId'
    r293 = CPyObject_GetAttr(r291, r292)
    dec_ref r291
    if is_error(r293) goto L287 (error at <module>:169) else goto L98
L98:
    r294 = cast(str, r293)
    if is_error(r294) goto L287 (error at <module>:169) else goto L99
L99:
    r295 = faster_web3._utils.caching.caching_utils.globals :: static
    r296 = 'RPC'
    r297 = CPyDict_GetItem(r295, r296)
    if is_error(r297) goto L301 (error at <module>:170) else goto L100
L100:
    r298 = 'web3_clientVersion'
    r299 = CPyObject_GetAttr(r297, r298)
    dec_ref r297
    if is_error(r299) goto L301 (error at <module>:170) else goto L101
L101:
    r300 = cast(str, r299)
    if is_error(r300) goto L301 (error at <module>:170) else goto L102
L102:
    r301 = faster_web3._utils.caching.caching_utils.globals :: static
    r302 = 'RPC'
    r303 = CPyDict_GetItem(r301, r302)
    if is_error(r303) goto L302 (error at <module>:171) else goto L103
L103:
    r304 = 'net_version'
    r305 = CPyObject_GetAttr(r303, r304)
    dec_ref r303
    if is_error(r305) goto L302 (error at <module>:171) else goto L104
L104:
    r306 = cast(str, r305)
    if is_error(r306) goto L302 (error at <module>:171) else goto L105
L105:
    r307 = PySet_New(0)
    if is_error(r307) goto L303 (error at <module>:168) else goto L106
L106:
    r308 = PySet_Add(r307, r294)
    dec_ref r294
    r309 = r308 >= 0 :: signed
    if not r309 goto L304 (error at <module>:168) else goto L107 :: bool
L107:
    r310 = PySet_Add(r307, r300)
    dec_ref r300
    r311 = r310 >= 0 :: signed
    if not r311 goto L305 (error at <module>:168) else goto L108 :: bool
L108:
    r312 = PySet_Add(r307, r306)
    dec_ref r306
    r313 = r312 >= 0 :: signed
    if not r313 goto L306 (error at <module>:168) else goto L109 :: bool
L109:
    r314 = PyFrozenSet_New(r307)
    dec_ref r307
    if is_error(r314) goto L287 (error at <module>:168) else goto L110
L110:
    faster_web3._utils.caching.caching_utils.ALWAYS_CACHE = r314 :: static
    r315 = faster_web3._utils.caching.caching_utils.globals :: static
    r316 = 'ALWAYS_CACHE'
    r317 = CPyDict_SetItem(r315, r316, r314)
    dec_ref r314
    r318 = r317 >= 0 :: signed
    if not r318 goto L287 (error at <module>:168) else goto L111 :: bool
L111:
    r319 = faster_web3._utils.caching.caching_utils.globals :: static
    r320 = 'RPC'
    r321 = CPyDict_GetItem(r319, r320)
    if is_error(r321) goto L287 (error at <module>:174) else goto L112
L112:
    r322 = 'eth_getBlockByNumber'
    r323 = CPyObject_GetAttr(r321, r322)
    dec_ref r321
    if is_error(r323) goto L287 (error at <module>:174) else goto L113
L113:
    r324 = cast(str, r323)
    if is_error(r324) goto L287 (error at <module>:174) else goto L114
L114:
    r325 = faster_web3._utils.caching.caching_utils.globals :: static
    r326 = 'RPC'
    r327 = CPyDict_GetItem(r325, r326)
    if is_error(r327) goto L307 (error at <module>:175) else goto L115
L115:
    r328 = 'eth_getRawTransactionByBlockNumberAndIndex'
    r329 = CPyObject_GetAttr(r327, r328)
    dec_ref r327
    if is_error(r329) goto L307 (error at <module>:175) else goto L116
L116:
    r330 = cast(str, r329)
    if is_error(r330) goto L307 (error at <module>:175) else goto L117
L117:
    r331 = faster_web3._utils.caching.caching_utils.globals :: static
    r332 = 'RPC'
    r333 = CPyDict_GetItem(r331, r332)
    if is_error(r333) goto L308 (error at <module>:176) else goto L118
L118:
    r334 = 'eth_getBlockTransactionCountByNumber'
    r335 = CPyObject_GetAttr(r333, r334)
    dec_ref r333
    if is_error(r335) goto L308 (error at <module>:176) else goto L119
L119:
    r336 = cast(str, r335)
    if is_error(r336) goto L308 (error at <module>:176) else goto L120
L120:
    r337 = faster_web3._utils.caching.caching_utils.globals :: static
    r338 = 'RPC'
    r339 = CPyDict_GetItem(r337, r338)
    if is_error(r339) goto L309 (error at <module>:177) else goto L121
L121:
    r340 = 'eth_getUncleByBlockNumberAndIndex'
    r341 = CPyObject_GetAttr(r339, r340)
    dec_ref r339
    if is_error(r341) goto L309 (error at <module>:177) else goto L122
L122:
    r342 = cast(str, r341)
    if is_error(r342) goto L309 (error at <module>:177) else goto L123
L123:
    r343 = faster_web3._utils.caching.caching_utils.globals :: static
    r344 = 'RPC'
    r345 = CPyDict_GetItem(r343, r344)
    if is_error(r345) goto L310 (error at <module>:178) else goto L124
L124:
    r346 = 'eth_getUncleCountByBlockNumber'
    r347 = CPyObject_GetAttr(r345, r346)
    dec_ref r345
    if is_error(r347) goto L310 (error at <module>:178) else goto L125
L125:
    r348 = cast(str, r347)
    if is_error(r348) goto L310 (error at <module>:178) else goto L126
L126:
    r349 = PySet_New(0)
    if is_error(r349) goto L311 (error at <module>:173) else goto L127
L127:
    r350 = PySet_Add(r349, r324)
    dec_ref r324
    r351 = r350 >= 0 :: signed
    if not r351 goto L312 (error at <module>:173) else goto L128 :: bool
L128:
    r352 = PySet_Add(r349, r330)
    dec_ref r330
    r353 = r352 >= 0 :: signed
    if not r353 goto L313 (error at <module>:173) else goto L129 :: bool
L129:
    r354 = PySet_Add(r349, r336)
    dec_ref r336
    r355 = r354 >= 0 :: signed
    if not r355 goto L314 (error at <module>:173) else goto L130 :: bool
L130:
    r356 = PySet_Add(r349, r342)
    dec_ref r342
    r357 = r356 >= 0 :: signed
    if not r357 goto L315 (error at <module>:173) else goto L131 :: bool
L131:
    r358 = PySet_Add(r349, r348)
    dec_ref r348
    r359 = r358 >= 0 :: signed
    if not r359 goto L316 (error at <module>:173) else goto L132 :: bool
L132:
    r360 = PyFrozenSet_New(r349)
    dec_ref r349
    if is_error(r360) goto L287 (error at <module>:173) else goto L133
L133:
    faster_web3._utils.caching.caching_utils.BLOCKNUM_IN_PARAMS = r360 :: static
    r361 = faster_web3._utils.caching.caching_utils.globals :: static
    r362 = 'BLOCKNUM_IN_PARAMS'
    r363 = CPyDict_SetItem(r361, r362, r360)
    dec_ref r360
    r364 = r363 >= 0 :: signed
    if not r364 goto L287 (error at <module>:173) else goto L134 :: bool
L134:
    r365 = faster_web3._utils.caching.caching_utils.globals :: static
    r366 = 'RPC'
    r367 = CPyDict_GetItem(r365, r366)
    if is_error(r367) goto L287 (error at <module>:181) else goto L135
L135:
    r368 = 'eth_getBlockByHash'
    r369 = CPyObject_GetAttr(r367, r368)
    dec_ref r367
    if is_error(r369) goto L287 (error at <module>:181) else goto L136
L136:
    r370 = cast(str, r369)
    if is_error(r370) goto L287 (error at <module>:181) else goto L137
L137:
    r371 = faster_web3._utils.caching.caching_utils.globals :: static
    r372 = 'RPC'
    r373 = CPyDict_GetItem(r371, r372)
    if is_error(r373) goto L317 (error at <module>:182) else goto L138
L138:
    r374 = 'eth_getTransactionByHash'
    r375 = CPyObject_GetAttr(r373, r374)
    dec_ref r373
    if is_error(r375) goto L317 (error at <module>:182) else goto L139
L139:
    r376 = cast(str, r375)
    if is_error(r376) goto L317 (error at <module>:182) else goto L140
L140:
    r377 = faster_web3._utils.caching.caching_utils.globals :: static
    r378 = 'RPC'
    r379 = CPyDict_GetItem(r377, r378)
    if is_error(r379) goto L318 (error at <module>:183) else goto L141
L141:
    r380 = 'eth_getTransactionByBlockNumberAndIndex'
    r381 = CPyObject_GetAttr(r379, r380)
    dec_ref r379
    if is_error(r381) goto L318 (error at <module>:183) else goto L142
L142:
    r382 = cast(str, r381)
    if is_error(r382) goto L318 (error at <module>:183) else goto L143
L143:
    r383 = faster_web3._utils.caching.caching_utils.globals :: static
    r384 = 'RPC'
    r385 = CPyDict_GetItem(r383, r384)
    if is_error(r385) goto L319 (error at <module>:184) else goto L144
L144:
    r386 = 'eth_getTransactionByBlockHashAndIndex'
    r387 = CPyObject_GetAttr(r385, r386)
    dec_ref r385
    if is_error(r387) goto L319 (error at <module>:184) else goto L145
L145:
    r388 = cast(str, r387)
    if is_error(r388) goto L319 (error at <module>:184) else goto L146
L146:
    r389 = faster_web3._utils.caching.caching_utils.globals :: static
    r390 = 'RPC'
    r391 = CPyDict_GetItem(r389, r390)
    if is_error(r391) goto L320 (error at <module>:185) else goto L147
L147:
    r392 = 'eth_getBlockTransactionCountByHash'
    r393 = CPyObject_GetAttr(r391, r392)
    dec_ref r391
    if is_error(r393) goto L320 (error at <module>:185) else goto L148
L148:
    r394 = cast(str, r393)
    if is_error(r394) goto L320 (error at <module>:185) else goto L149
L149:
    r395 = PySet_New(0)
    if is_error(r395) goto L321 (error at <module>:180) else goto L150
L150:
    r396 = PySet_Add(r395, r370)
    dec_ref r370
    r397 = r396 >= 0 :: signed
    if not r397 goto L322 (error at <module>:180) else goto L151 :: bool
L151:
    r398 = PySet_Add(r395, r376)
    dec_ref r376
    r399 = r398 >= 0 :: signed
    if not r399 goto L323 (error at <module>:180) else goto L152 :: bool
L152:
    r400 = PySet_Add(r395, r382)
    dec_ref r382
    r401 = r400 >= 0 :: signed
    if not r401 goto L324 (error at <module>:180) else goto L153 :: bool
L153:
    r402 = PySet_Add(r395, r388)
    dec_ref r388
    r403 = r402 >= 0 :: signed
    if not r403 goto L325 (error at <module>:180) else goto L154 :: bool
L154:
    r404 = PySet_Add(r395, r394)
    dec_ref r394
    r405 = r404 >= 0 :: signed
    if not r405 goto L326 (error at <module>:180) else goto L155 :: bool
L155:
    r406 = PyFrozenSet_New(r395)
    dec_ref r395
    if is_error(r406) goto L287 (error at <module>:180) else goto L156
L156:
    faster_web3._utils.caching.caching_utils.BLOCK_IN_RESULT = r406 :: static
    r407 = faster_web3._utils.caching.caching_utils.globals :: static
    r408 = 'BLOCK_IN_RESULT'
    r409 = CPyDict_SetItem(r407, r408, r406)
    dec_ref r406
    r410 = r409 >= 0 :: signed
    if not r410 goto L287 (error at <module>:180) else goto L157 :: bool
L157:
    r411 = faster_web3._utils.caching.caching_utils.globals :: static
    r412 = 'RPC'
    r413 = CPyDict_GetItem(r411, r412)
    if is_error(r413) goto L287 (error at <module>:188) else goto L158
L158:
    r414 = 'eth_getRawTransactionByBlockHashAndIndex'
    r415 = CPyObject_GetAttr(r413, r414)
    dec_ref r413
    if is_error(r415) goto L287 (error at <module>:188) else goto L159
L159:
    r416 = cast(str, r415)
    if is_error(r416) goto L287 (error at <module>:188) else goto L160
L160:
    r417 = faster_web3._utils.caching.caching_utils.globals :: static
    r418 = 'RPC'
    r419 = CPyDict_GetItem(r417, r418)
    if is_error(r419) goto L327 (error at <module>:189) else goto L161
L161:
    r420 = 'eth_getUncleByBlockHashAndIndex'
    r421 = CPyObject_GetAttr(r419, r420)
    dec_ref r419
    if is_error(r421) goto L327 (error at <module>:189) else goto L162
L162:
    r422 = cast(str, r421)
    if is_error(r422) goto L327 (error at <module>:189) else goto L163
L163:
    r423 = faster_web3._utils.caching.caching_utils.globals :: static
    r424 = 'RPC'
    r425 = CPyDict_GetItem(r423, r424)
    if is_error(r425) goto L328 (error at <module>:190) else goto L164
L164:
    r426 = 'eth_getUncleCountByBlockHash'
    r427 = CPyObject_GetAttr(r425, r426)
    dec_ref r425
    if is_error(r427) goto L328 (error at <module>:190) else goto L165
L165:
    r428 = cast(str, r427)
    if is_error(r428) goto L328 (error at <module>:190) else goto L166
L166:
    r429 = PySet_New(0)
    if is_error(r429) goto L329 (error at <module>:187) else goto L167
L167:
    r430 = PySet_Add(r429, r416)
    dec_ref r416
    r431 = r430 >= 0 :: signed
    if not r431 goto L330 (error at <module>:187) else goto L168 :: bool
L168:
    r432 = PySet_Add(r429, r422)
    dec_ref r422
    r433 = r432 >= 0 :: signed
    if not r433 goto L331 (error at <module>:187) else goto L169 :: bool
L169:
    r434 = PySet_Add(r429, r428)
    dec_ref r428
    r435 = r434 >= 0 :: signed
    if not r435 goto L332 (error at <module>:187) else goto L170 :: bool
L170:
    r436 = PyFrozenSet_New(r429)
    dec_ref r429
    if is_error(r436) goto L287 (error at <module>:187) else goto L171
L171:
    faster_web3._utils.caching.caching_utils.BLOCKHASH_IN_PARAMS = r436 :: static
    r437 = faster_web3._utils.caching.caching_utils.globals :: static
    r438 = 'BLOCKHASH_IN_PARAMS'
    r439 = CPyDict_SetItem(r437, r438, r436)
    dec_ref r436
    r440 = r439 >= 0 :: signed
    if not r440 goto L287 (error at <module>:187) else goto L172 :: bool
L172:
    r441 = PyDict_New()
    if is_error(r441) goto L287 (error at <module>:202) else goto L173
L173:
    r442 = faster_web3._utils.caching.caching_utils.ALWAYS_CACHE :: static
    if is_error(r442) goto L333 else goto L176
L174:
    r443 = raise NameError('value for final name "ALWAYS_CACHE" was not set')
    if not r443 goto L287 (error at <module>:202) else goto L175 :: bool
L175:
    unreachable
L176:
    r444 = PyObject_GetIter(r442)
    if is_error(r444) goto L334 (error at <module>:202) else goto L177
L177:
    r445 = PyIter_Next(r444)
    if is_error(r445) goto L335 else goto L178
L178:
    r446 = cast(str, r445)
    if is_error(r446) goto L336 (error at <module>:202) else goto L179
L179:
    r447 = faster_web3._utils.caching.caching_utils.globals :: static
    r448 = 'always_cache_request'
    r449 = CPyDict_GetItem(r447, r448)
    if is_error(r449) goto L337 (error at <module>:202) else goto L180
L180:
    r450 = PyDict_SetItem(r441, r446, r449)
    dec_ref r446
    dec_ref r449
    r451 = r450 >= 0 :: signed
    if not r451 goto L336 (error at <module>:202) else goto L177 :: bool
L181:
    r452 = CPy_NoErrOccurred()
    if not r452 goto L334 (error at <module>:202) else goto L182 :: bool
L182:
    r453 = PyDict_New()
    if is_error(r453) goto L334 (error at <module>:203) else goto L183
L183:
    r454 = faster_web3._utils.caching.caching_utils.BLOCKNUM_IN_PARAMS :: static
    if is_error(r454) goto L338 else goto L186
L184:
    r455 = raise NameError('value for final name "BLOCKNUM_IN_PARAMS" was not set')
    if not r455 goto L287 (error at <module>:203) else goto L185 :: bool
L185:
    unreachable
L186:
    r456 = PyObject_GetIter(r454)
    if is_error(r456) goto L339 (error at <module>:203) else goto L187
L187:
    r457 = PyIter_Next(r456)
    if is_error(r457) goto L340 else goto L188
L188:
    r458 = cast(str, r457)
    if is_error(r458) goto L341 (error at <module>:203) else goto L189
L189:
    r459 = faster_web3._utils.caching.caching_utils.globals :: static
    r460 = 'validate_from_block_id_in_params'
    r461 = CPyDict_GetItem(r459, r460)
    if is_error(r461) goto L342 (error at <module>:203) else goto L190
L190:
    r462 = PyDict_SetItem(r453, r458, r461)
    dec_ref r458
    dec_ref r461
    r463 = r462 >= 0 :: signed
    if not r463 goto L341 (error at <module>:203) else goto L187 :: bool
L191:
    r464 = CPy_NoErrOccurred()
    if not r464 goto L339 (error at <module>:203) else goto L192 :: bool
L192:
    r465 = PyDict_New()
    if is_error(r465) goto L339 (error at <module>:204) else goto L193
L193:
    r466 = faster_web3._utils.caching.caching_utils.BLOCK_IN_RESULT :: static
    if is_error(r466) goto L343 else goto L196
L194:
    r467 = raise NameError('value for final name "BLOCK_IN_RESULT" was not set')
    if not r467 goto L287 (error at <module>:204) else goto L195 :: bool
L195:
    unreachable
L196:
    r468 = PyObject_GetIter(r466)
    if is_error(r468) goto L344 (error at <module>:204) else goto L197
L197:
    r469 = PyIter_Next(r468)
    if is_error(r469) goto L345 else goto L198
L198:
    r470 = cast(str, r469)
    if is_error(r470) goto L346 (error at <module>:204) else goto L199
L199:
    r471 = faster_web3._utils.caching.caching_utils.globals :: static
    r472 = 'validate_from_blocknum_in_result'
    r473 = CPyDict_GetItem(r471, r472)
    if is_error(r473) goto L347 (error at <module>:204) else goto L200
L200:
    r474 = PyDict_SetItem(r465, r470, r473)
    dec_ref r470
    dec_ref r473
    r475 = r474 >= 0 :: signed
    if not r475 goto L346 (error at <module>:204) else goto L197 :: bool
L201:
    r476 = CPy_NoErrOccurred()
    if not r476 goto L344 (error at <module>:204) else goto L202 :: bool
L202:
    r477 = PyDict_New()
    if is_error(r477) goto L344 (error at <module>:205) else goto L203
L203:
    r478 = faster_web3._utils.caching.caching_utils.BLOCKHASH_IN_PARAMS :: static
    if is_error(r478) goto L348 else goto L206
L204:
    r479 = raise NameError('value for final name "BLOCKHASH_IN_PARAMS" was not set')
    if not r479 goto L287 (error at <module>:205) else goto L205 :: bool
L205:
    unreachable
L206:
    r480 = PyObject_GetIter(r478)
    if is_error(r480) goto L349 (error at <module>:205) else goto L207
L207:
    r481 = PyIter_Next(r480)
    if is_error(r481) goto L350 else goto L208
L208:
    r482 = cast(str, r481)
    if is_error(r482) goto L351 (error at <module>:205) else goto L209
L209:
    r483 = faster_web3._utils.caching.caching_utils.globals :: static
    r484 = 'validate_from_blockhash_in_params'
    r485 = CPyDict_GetItem(r483, r484)
    if is_error(r485) goto L352 (error at <module>:205) else goto L210
L210:
    r486 = PyDict_SetItem(r477, r482, r485)
    dec_ref r482
    dec_ref r485
    r487 = r486 >= 0 :: signed
    if not r487 goto L351 (error at <module>:205) else goto L207 :: bool
L211:
    r488 = CPy_NoErrOccurred()
    if not r488 goto L349 (error at <module>:205) else goto L212 :: bool
L212:
    r489 = PyDict_New()
    if is_error(r489) goto L349 (error at <module>:201) else goto L213
L213:
    r490 = CPyDict_UpdateInDisplay(r489, r441)
    dec_ref r441
    r491 = r490 >= 0 :: signed
    if not r491 goto L353 (error at <module>:201) else goto L214 :: bool
L214:
    r492 = CPyDict_UpdateInDisplay(r489, r453)
    dec_ref r453
    r493 = r492 >= 0 :: signed
    if not r493 goto L354 (error at <module>:201) else goto L215 :: bool
L215:
    r494 = CPyDict_UpdateInDisplay(r489, r465)
    dec_ref r465
    r495 = r494 >= 0 :: signed
    if not r495 goto L355 (error at <module>:201) else goto L216 :: bool
L216:
    r496 = CPyDict_UpdateInDisplay(r489, r477)
    dec_ref r477
    r497 = r496 >= 0 :: signed
    if not r497 goto L356 (error at <module>:201) else goto L217 :: bool
L217:
    faster_web3._utils.caching.caching_utils.INTERNAL_VALIDATION_MAP = r489 :: static
    r498 = faster_web3._utils.caching.caching_utils.globals :: static
    r499 = 'INTERNAL_VALIDATION_MAP'
    r500 = CPyDict_SetItem(r498, r499, r489)
    dec_ref r489
    r501 = r500 >= 0 :: signed
    if not r501 goto L287 (error at <module>:201) else goto L218 :: bool
L218:
    r502 = faster_web3._utils.caching.caching_utils.INTERNAL_VALIDATION_MAP :: static
    if is_error(r502) goto L219 else goto L221
L219:
    r503 = raise NameError('value for final name "INTERNAL_VALIDATION_MAP" was not set')
    if not r503 goto L287 (error at <module>:207) else goto L220 :: bool
L220:
    unreachable
L221:
    r504 = CPyDict_KeysView(r502)
    if is_error(r504) goto L287 (error at <module>:207) else goto L222
L222:
    r505 = PySequence_Tuple(r504)
    dec_ref r504
    if is_error(r505) goto L287 (error at <module>:207) else goto L223
L223:
    faster_web3._utils.caching.caching_utils.CACHEABLE_REQUESTS = r505 :: static
    r506 = faster_web3._utils.caching.caching_utils.globals :: static
    r507 = 'CACHEABLE_REQUESTS'
    r508 = CPyDict_SetItem(r506, r507, r505)
    dec_ref r505
    r509 = r508 >= 0 :: signed
    if not r509 goto L287 (error at <module>:207) else goto L224 :: bool
L224:
    r510 = faster_web3._utils.caching.caching_utils.globals :: static
    r511 = 'Callable'
    r512 = CPyDict_GetItem(r510, r511)
    if is_error(r512) goto L287 (error at <module>:286) else goto L225
L225:
    r513 = 'AsyncBaseProvider'
    r514 = faster_web3._utils.caching.caching_utils.globals :: static
    r515 = 'Sequence'
    r516 = CPyDict_GetItem(r514, r515)
    if is_error(r516) goto L357 (error at <module>:287) else goto L226
L226:
    r517 = faster_web3._utils.caching.caching_utils.globals :: static
    r518 = 'Any'
    r519 = CPyDict_GetItem(r517, r518)
    if is_error(r519) goto L358 (error at <module>:287) else goto L227
L227:
    r520 = PyObject_GetItem(r516, r519)
    dec_ref r516
    dec_ref r519
    if is_error(r520) goto L357 (error at <module>:287) else goto L228
L228:
    r521 = faster_web3._utils.caching.caching_utils.globals :: static
    r522 = 'Dict'
    r523 = CPyDict_GetItem(r521, r522)
    if is_error(r523) goto L359 (error at <module>:287) else goto L229
L229:
    r524 = load_address PyUnicode_Type
    r525 = faster_web3._utils.caching.caching_utils.globals :: static
    r526 = 'Any'
    r527 = CPyDict_GetItem(r525, r526)
    if is_error(r527) goto L360 (error at <module>:287) else goto L230
L230:
    inc_ref r524
    r528 = (r524, r527)
    r529 = box(tuple[object, object], r528)
    r530 = PyObject_GetItem(r523, r529)
    dec_ref r523
    dec_ref r529
    if is_error(r530) goto L359 (error at <module>:287) else goto L231
L231:
    r531 = PyList_New(3)
    if is_error(r531) goto L361 (error at <module>:287) else goto L232
L232:
    r532 = get_element_ptr r531 ob_item :: PyListObject
    r533 = load_mem r532 :: ptr*
    inc_ref r513
    set_mem r533, r513 :: builtins.object*
    r534 = r533 + 8
    set_mem r534, r520 :: builtins.object*
    r535 = r533 + 16
    set_mem r535, r530 :: builtins.object*
    r536 = faster_web3._utils.caching.caching_utils.globals :: static
    r537 = 'Union'
    r538 = CPyDict_GetItem(r536, r537)
    if is_error(r538) goto L362 (error at <module>:288) else goto L233
L233:
    r539 = load_address PyBool_Type
    r540 = faster_web3._utils.caching.caching_utils.globals :: static
    r541 = 'Coroutine'
    r542 = CPyDict_GetItem(r540, r541)
    if is_error(r542) goto L363 (error at <module>:288) else goto L234
L234:
    r543 = faster_web3._utils.caching.caching_utils.globals :: static
    r544 = 'Any'
    r545 = CPyDict_GetItem(r543, r544)
    if is_error(r545) goto L364 (error at <module>:288) else goto L235
L235:
    r546 = faster_web3._utils.caching.caching_utils.globals :: static
    r547 = 'Any'
    r548 = CPyDict_GetItem(r546, r547)
    if is_error(r548) goto L365 (error at <module>:288) else goto L236
L236:
    r549 = load_address PyBool_Type
    inc_ref r549
    r550 = (r545, r548, r549)
    r551 = box(tuple[object, object, object], r550)
    r552 = PyObject_GetItem(r542, r551)
    dec_ref r542
    dec_ref r551
    if is_error(r552) goto L363 (error at <module>:288) else goto L237
L237:
    inc_ref r539
    r553 = (r539, r552)
    r554 = box(tuple[object, object], r553)
    r555 = PyObject_GetItem(r538, r554)
    dec_ref r538
    dec_ref r554
    if is_error(r555) goto L362 (error at <module>:288) else goto L238
L238:
    r556 = (r531, r555)
    r557 = box(tuple[list, object], r556)
    r558 = PyObject_GetItem(r512, r557)
    dec_ref r512
    dec_ref r557
    if is_error(r558) goto L287 (error at <module>:286) else goto L239
L239:
    r559 = faster_web3._utils.caching.caching_utils.globals :: static
    r560 = 'ASYNC_VALIDATOR_TYPE'
    r561 = CPyDict_SetItem(r559, r560, r558)
    dec_ref r558
    r562 = r561 >= 0 :: signed
    if not r562 goto L287 (error at <module>:286) else goto L240 :: bool
L240:
    r563 = PyDict_New()
    if is_error(r563) goto L287 (error at <module>:292) else goto L241
L241:
    r564 = faster_web3._utils.caching.caching_utils.ALWAYS_CACHE :: static
    if is_error(r564) goto L366 else goto L244
L242:
    r565 = raise NameError('value for final name "ALWAYS_CACHE" was not set')
    if not r565 goto L287 (error at <module>:292) else goto L243 :: bool
L243:
    unreachable
L244:
    r566 = PyObject_GetIter(r564)
    if is_error(r566) goto L367 (error at <module>:292) else goto L245
L245:
    r567 = PyIter_Next(r566)
    if is_error(r567) goto L368 else goto L246
L246:
    r568 = cast(str, r567)
    if is_error(r568) goto L369 (error at <module>:292) else goto L247
L247:
    r569 = faster_web3._utils.caching.caching_utils.globals :: static
    r570 = 'always_cache_request'
    r571 = CPyDict_GetItem(r569, r570)
    if is_error(r571) goto L370 (error at <module>:292) else goto L248
L248:
    r572 = PyDict_SetItem(r563, r568, r571)
    dec_ref r568
    dec_ref r571
    r573 = r572 >= 0 :: signed
    if not r573 goto L369 (error at <module>:292) else goto L245 :: bool
L249:
    r574 = CPy_NoErrOccurred()
    if not r574 goto L367 (error at <module>:292) else goto L250 :: bool
L250:
    r575 = PyDict_New()
    if is_error(r575) goto L367 (error at <module>:293) else goto L251
L251:
    r576 = faster_web3._utils.caching.caching_utils.BLOCKNUM_IN_PARAMS :: static
    if is_error(r576) goto L371 else goto L254
L252:
    r577 = raise NameError('value for final name "BLOCKNUM_IN_PARAMS" was not set')
    if not r577 goto L287 (error at <module>:295) else goto L253 :: bool
L253:
    unreachable
L254:
    r578 = PyObject_GetIter(r576)
    if is_error(r578) goto L372 (error at <module>:293) else goto L255
L255:
    r579 = PyIter_Next(r578)
    if is_error(r579) goto L373 else goto L256
L256:
    r580 = cast(str, r579)
    if is_error(r580) goto L374 (error at <module>:293) else goto L257
L257:
    r581 = faster_web3._utils.caching.caching_utils.globals :: static
    r582 = 'async_validate_from_block_id_in_params'
    r583 = CPyDict_GetItem(r581, r582)
    if is_error(r583) goto L375 (error at <module>:294) else goto L258
L258:
    r584 = PyDict_SetItem(r575, r580, r583)
    dec_ref r580
    dec_ref r583
    r585 = r584 >= 0 :: signed
    if not r585 goto L374 (error at <module>:293) else goto L255 :: bool
L259:
    r586 = CPy_NoErrOccurred()
    if not r586 goto L372 (error at <module>:293) else goto L260 :: bool
L260:
    r587 = PyDict_New()
    if is_error(r587) goto L372 (error at <module>:297) else goto L261
L261:
    r588 = faster_web3._utils.caching.caching_utils.BLOCK_IN_RESULT :: static
    if is_error(r588) goto L376 else goto L264
L262:
    r589 = raise NameError('value for final name "BLOCK_IN_RESULT" was not set')
    if not r589 goto L287 (error at <module>:298) else goto L263 :: bool
L263:
    unreachable
L264:
    r590 = PyObject_GetIter(r588)
    if is_error(r590) goto L377 (error at <module>:297) else goto L265
L265:
    r591 = PyIter_Next(r590)
    if is_error(r591) goto L378 else goto L266
L266:
    r592 = cast(str, r591)
    if is_error(r592) goto L379 (error at <module>:297) else goto L267
L267:
    r593 = faster_web3._utils.caching.caching_utils.globals :: static
    r594 = 'async_validate_from_blocknum_in_result'
    r595 = CPyDict_GetItem(r593, r594)
    if is_error(r595) goto L380 (error at <module>:298) else goto L268
L268:
    r596 = PyDict_SetItem(r587, r592, r595)
    dec_ref r592
    dec_ref r595
    r597 = r596 >= 0 :: signed
    if not r597 goto L379 (error at <module>:297) else goto L265 :: bool
L269:
    r598 = CPy_NoErrOccurred()
    if not r598 goto L377 (error at <module>:297) else goto L270 :: bool
L270:
    r599 = PyDict_New()
    if is_error(r599) goto L377 (error at <module>:300) else goto L271
L271:
    r600 = faster_web3._utils.caching.caching_utils.BLOCKHASH_IN_PARAMS :: static
    if is_error(r600) goto L381 else goto L274
L272:
    r601 = raise NameError('value for final name "BLOCKHASH_IN_PARAMS" was not set')
    if not r601 goto L287 (error at <module>:302) else goto L273 :: bool
L273:
    unreachable
L274:
    r602 = PyObject_GetIter(r600)
    if is_error(r602) goto L382 (error at <module>:300) else goto L275
L275:
    r603 = PyIter_Next(r602)
    if is_error(r603) goto L383 else goto L276
L276:
    r604 = cast(str, r603)
    if is_error(r604) goto L384 (error at <module>:300) else goto L277
L277:
    r605 = faster_web3._utils.caching.caching_utils.globals :: static
    r606 = 'async_validate_from_blockhash_in_params'
    r607 = CPyDict_GetItem(r605, r606)
    if is_error(r607) goto L385 (error at <module>:301) else goto L278
L278:
    r608 = PyDict_SetItem(r599, r604, r607)
    dec_ref r604
    dec_ref r607
    r609 = r608 >= 0 :: signed
    if not r609 goto L384 (error at <module>:300) else goto L275 :: bool
L279:
    r610 = CPy_NoErrOccurred()
    if not r610 goto L382 (error at <module>:300) else goto L280 :: bool
L280:
    r611 = PyDict_New()
    if is_error(r611) goto L382 (error at <module>:291) else goto L281
L281:
    r612 = CPyDict_UpdateInDisplay(r611, r563)
    dec_ref r563
    r613 = r612 >= 0 :: signed
    if not r613 goto L386 (error at <module>:291) else goto L282 :: bool
L282:
    r614 = CPyDict_UpdateInDisplay(r611, r575)
    dec_ref r575
    r615 = r614 >= 0 :: signed
    if not r615 goto L387 (error at <module>:291) else goto L283 :: bool
L283:
    r616 = CPyDict_UpdateInDisplay(r611, r587)
    dec_ref r587
    r617 = r616 >= 0 :: signed
    if not r617 goto L388 (error at <module>:291) else goto L284 :: bool
L284:
    r618 = CPyDict_UpdateInDisplay(r611, r599)
    dec_ref r599
    r619 = r618 >= 0 :: signed
    if not r619 goto L389 (error at <module>:291) else goto L285 :: bool
L285:
    faster_web3._utils.caching.caching_utils.ASYNC_INTERNAL_VALIDATION_MAP = r611 :: static
    r620 = faster_web3._utils.caching.caching_utils.globals :: static
    r621 = 'ASYNC_INTERNAL_VALIDATION_MAP'
    r622 = CPyDict_SetItem(r620, r621, r611)
    dec_ref r611
    r623 = r622 >= 0 :: signed
    if not r623 goto L287 (error at <module>:291) else goto L286 :: bool
L286:
    return 1
L287:
    r624 = <error> :: None
    return r624
L288:
    dec_ref r143
    goto L287
L289:
    dec_ref r170 :: int
    goto L48
L290:
    dec_ref r170 :: int
    goto L287
L291:
    dec_ref r170 :: int
    dec_ref r180 :: int
    goto L287
L292:
    dec_ref r170 :: int
    dec_ref r180 :: int
    dec_ref r188 :: int
    goto L287
L293:
    dec_ref r170 :: int
    dec_ref r180 :: int
    dec_ref r188 :: int
    dec_ref r196 :: int
    goto L287
L294:
    dec_ref r170 :: int
    dec_ref r180 :: int
    dec_ref r188 :: int
    dec_ref r196 :: int
    dec_ref r204 :: int
    goto L287
L295:
    dec_ref r170 :: int
    dec_ref r180 :: int
    dec_ref r188 :: int
    dec_ref r196 :: int
    dec_ref r204 :: int
    dec_ref r212 :: int
    goto L287
L296:
    dec_ref r170 :: int
    dec_ref r180 :: int
    dec_ref r188 :: int
    dec_ref r196 :: int
    dec_ref r204 :: int
    dec_ref r212 :: int
    dec_ref r220 :: int
    goto L287
L297:
    dec_ref r170 :: int
    dec_ref r180 :: int
    dec_ref r188 :: int
    dec_ref r196 :: int
    dec_ref r204 :: int
    dec_ref r212 :: int
    dec_ref r220 :: int
    dec_ref r228 :: int
    goto L287
L298:
    dec_ref r170 :: int
    dec_ref r180 :: int
    dec_ref r188 :: int
    dec_ref r196 :: int
    dec_ref r204 :: int
    dec_ref r212 :: int
    dec_ref r220 :: int
    dec_ref r228 :: int
    dec_ref r236 :: int
    goto L287
L299:
    dec_ref r170 :: int
    dec_ref r180 :: int
    dec_ref r188 :: int
    dec_ref r196 :: int
    dec_ref r204 :: int
    dec_ref r212 :: int
    dec_ref r220 :: int
    dec_ref r228 :: int
    dec_ref r236 :: int
    dec_ref r244 :: int
    goto L287
L300:
    dec_ref r170 :: int
    dec_ref r180 :: int
    dec_ref r188 :: int
    dec_ref r196 :: int
    dec_ref r204 :: int
    dec_ref r212 :: int
    dec_ref r220 :: int
    dec_ref r228 :: int
    dec_ref r236 :: int
    dec_ref r244 :: int
    dec_ref r252 :: int
    goto L287
L301:
    dec_ref r294
    goto L287
L302:
    dec_ref r294
    dec_ref r300
    goto L287
L303:
    dec_ref r294
    dec_ref r300
    dec_ref r306
    goto L287
L304:
    dec_ref r300
    dec_ref r306
    dec_ref r307
    goto L287
L305:
    dec_ref r306
    dec_ref r307
    goto L287
L306:
    dec_ref r307
    goto L287
L307:
    dec_ref r324
    goto L287
L308:
    dec_ref r324
    dec_ref r330
    goto L287
L309:
    dec_ref r324
    dec_ref r330
    dec_ref r336
    goto L287
L310:
    dec_ref r324
    dec_ref r330
    dec_ref r336
    dec_ref r342
    goto L287
L311:
    dec_ref r324
    dec_ref r330
    dec_ref r336
    dec_ref r342
    dec_ref r348
    goto L287
L312:
    dec_ref r330
    dec_ref r336
    dec_ref r342
    dec_ref r348
    dec_ref r349
    goto L287
L313:
    dec_ref r336
    dec_ref r342
    dec_ref r348
    dec_ref r349
    goto L287
L314:
    dec_ref r342
    dec_ref r348
    dec_ref r349
    goto L287
L315:
    dec_ref r348
    dec_ref r349
    goto L287
L316:
    dec_ref r349
    goto L287
L317:
    dec_ref r370
    goto L287
L318:
    dec_ref r370
    dec_ref r376
    goto L287
L319:
    dec_ref r370
    dec_ref r376
    dec_ref r382
    goto L287
L320:
    dec_ref r370
    dec_ref r376
    dec_ref r382
    dec_ref r388
    goto L287
L321:
    dec_ref r370
    dec_ref r376
    dec_ref r382
    dec_ref r388
    dec_ref r394
    goto L287
L322:
    dec_ref r376
    dec_ref r382
    dec_ref r388
    dec_ref r394
    dec_ref r395
    goto L287
L323:
    dec_ref r382
    dec_ref r388
    dec_ref r394
    dec_ref r395
    goto L287
L324:
    dec_ref r388
    dec_ref r394
    dec_ref r395
    goto L287
L325:
    dec_ref r394
    dec_ref r395
    goto L287
L326:
    dec_ref r395
    goto L287
L327:
    dec_ref r416
    goto L287
L328:
    dec_ref r416
    dec_ref r422
    goto L287
L329:
    dec_ref r416
    dec_ref r422
    dec_ref r428
    goto L287
L330:
    dec_ref r422
    dec_ref r428
    dec_ref r429
    goto L287
L331:
    dec_ref r428
    dec_ref r429
    goto L287
L332:
    dec_ref r429
    goto L287
L333:
    dec_ref r441
    goto L174
L334:
    dec_ref r441
    goto L287
L335:
    dec_ref r444
    goto L181
L336:
    dec_ref r441
    dec_ref r444
    goto L287
L337:
    dec_ref r441
    dec_ref r444
    dec_ref r446
    goto L287
L338:
    dec_ref r441
    dec_ref r453
    goto L184
L339:
    dec_ref r441
    dec_ref r453
    goto L287
L340:
    dec_ref r456
    goto L191
L341:
    dec_ref r441
    dec_ref r453
    dec_ref r456
    goto L287
L342:
    dec_ref r441
    dec_ref r453
    dec_ref r456
    dec_ref r458
    goto L287
L343:
    dec_ref r441
    dec_ref r453
    dec_ref r465
    goto L194
L344:
    dec_ref r441
    dec_ref r453
    dec_ref r465
    goto L287
L345:
    dec_ref r468
    goto L201
L346:
    dec_ref r441
    dec_ref r453
    dec_ref r465
    dec_ref r468
    goto L287
L347:
    dec_ref r441
    dec_ref r453
    dec_ref r465
    dec_ref r468
    dec_ref r470
    goto L287
L348:
    dec_ref r441
    dec_ref r453
    dec_ref r465
    dec_ref r477
    goto L204
L349:
    dec_ref r441
    dec_ref r453
    dec_ref r465
    dec_ref r477
    goto L287
L350:
    dec_ref r480
    goto L211
L351:
    dec_ref r441
    dec_ref r453
    dec_ref r465
    dec_ref r477
    dec_ref r480
    goto L287
L352:
    dec_ref r441
    dec_ref r453
    dec_ref r465
    dec_ref r477
    dec_ref r480
    dec_ref r482
    goto L287
L353:
    dec_ref r453
    dec_ref r465
    dec_ref r477
    dec_ref r489
    goto L287
L354:
    dec_ref r465
    dec_ref r477
    dec_ref r489
    goto L287
L355:
    dec_ref r477
    dec_ref r489
    goto L287
L356:
    dec_ref r489
    goto L287
L357:
    dec_ref r512
    goto L287
L358:
    dec_ref r512
    dec_ref r516
    goto L287
L359:
    dec_ref r512
    dec_ref r520
    goto L287
L360:
    dec_ref r512
    dec_ref r520
    dec_ref r523
    goto L287
L361:
    dec_ref r512
    dec_ref r520
    dec_ref r530
    goto L287
L362:
    dec_ref r512
    dec_ref r531
    goto L287
L363:
    dec_ref r512
    dec_ref r531
    dec_ref r538
    goto L287
L364:
    dec_ref r512
    dec_ref r531
    dec_ref r538
    dec_ref r542
    goto L287
L365:
    dec_ref r512
    dec_ref r531
    dec_ref r538
    dec_ref r542
    dec_ref r545
    goto L287
L366:
    dec_ref r563
    goto L242
L367:
    dec_ref r563
    goto L287
L368:
    dec_ref r566
    goto L249
L369:
    dec_ref r563
    dec_ref r566
    goto L287
L370:
    dec_ref r563
    dec_ref r566
    dec_ref r568
    goto L287
L371:
    dec_ref r563
    dec_ref r575
    goto L252
L372:
    dec_ref r563
    dec_ref r575
    goto L287
L373:
    dec_ref r578
    goto L259
L374:
    dec_ref r563
    dec_ref r575
    dec_ref r578
    goto L287
L375:
    dec_ref r563
    dec_ref r575
    dec_ref r578
    dec_ref r580
    goto L287
L376:
    dec_ref r563
    dec_ref r575
    dec_ref r587
    goto L262
L377:
    dec_ref r563
    dec_ref r575
    dec_ref r587
    goto L287
L378:
    dec_ref r590
    goto L269
L379:
    dec_ref r563
    dec_ref r575
    dec_ref r587
    dec_ref r590
    goto L287
L380:
    dec_ref r563
    dec_ref r575
    dec_ref r587
    dec_ref r590
    dec_ref r592
    goto L287
L381:
    dec_ref r563
    dec_ref r575
    dec_ref r587
    dec_ref r599
    goto L272
L382:
    dec_ref r563
    dec_ref r575
    dec_ref r587
    dec_ref r599
    goto L287
L383:
    dec_ref r602
    goto L279
L384:
    dec_ref r563
    dec_ref r575
    dec_ref r587
    dec_ref r599
    dec_ref r602
    goto L287
L385:
    dec_ref r563
    dec_ref r575
    dec_ref r587
    dec_ref r599
    dec_ref r602
    dec_ref r604
    goto L287
L386:
    dec_ref r575
    dec_ref r587
    dec_ref r599
    dec_ref r611
    goto L287
L387:
    dec_ref r587
    dec_ref r599
    dec_ref r611
    goto L287
L388:
    dec_ref r599
    dec_ref r611
    goto L287
L389:
    dec_ref r611
    goto L287

def _get_avg_block_time(w3, sample_size):
    w3 :: object
    sample_size :: int
    r0 :: str
    r1 :: object
    r2, r3 :: str
    r4 :: object[2]
    r5 :: object_ptr
    r6 :: object
    latest :: union[dict, object]
    r7 :: str
    r8, r9 :: object
    r10 :: union[int, object]
    r11, r12 :: object
    r13 :: i32
    r14 :: bit
    r15 :: bool
    r16 :: union[int, object]
    r17 :: object
    constrained_sample_size :: union[int, object]
    r18, r19 :: object
    r20 :: i32
    r21 :: bit
    r22 :: bool
    r23 :: str
    r24 :: dict
    r25 :: str
    r26 :: object
    r27 :: object[1]
    r28 :: object_ptr
    r29 :: object
    r30 :: str
    r31 :: object
    r32 :: str
    r33, r34 :: object
    r35 :: union[int, object]
    r36 :: object
    r37 :: int
    r38 :: str
    r39 :: object
    r40 :: object[2]
    r41 :: object_ptr
    r42 :: object
    oldest :: union[dict, object]
    r43 :: str
    r44, r45 :: object
    r46 :: union[int, object]
    r47 :: str
    r48, r49 :: object
    r50 :: union[int, object]
    r51, r52 :: object
    r53 :: float
    r54 :: bit
    r55 :: object
    r56 :: float
L0:
    r0 = 'eth'
    r1 = CPyObject_GetAttr(w3, r0)
    if is_error(r1) goto L31 (error at _get_avg_block_time:52) else goto L1
L1:
    r2 = 'latest'
    r3 = 'get_block'
    r4 = [r1, r2]
    r5 = load_address r4
    r6 = PyObject_VectorcallMethod(r3, r5, 9223372036854775810, 0)
    if is_error(r6) goto L32 (error at _get_avg_block_time:52) else goto L2
L2:
    dec_ref r1
    latest = r6
    r7 = 'number'
    inc_ref latest
    r8 = latest
    r9 = PyObject_GetItem(r8, r7)
    dec_ref r8
    if is_error(r9) goto L33 (error at _get_avg_block_time:54) else goto L3
L3:
    r10 = r9
L4:
    inc_ref sample_size :: int
    r11 = box(int, sample_size)
    r12 = PyObject_RichCompare(r10, r11, 0)
    dec_ref r11
    if is_error(r12) goto L34 (error at _get_avg_block_time:54) else goto L5
L5:
    r13 = PyObject_IsTrue(r12)
    dec_ref r12
    r14 = r13 >= 0 :: signed
    if not r14 goto L34 (error at _get_avg_block_time:54) else goto L6 :: bool
L6:
    r15 = truncate r13: i32 to builtins.bool
    if r15 goto L7 else goto L35 :: bool
L7:
    r16 = r10
    goto L9
L8:
    inc_ref sample_size :: int
    r17 = box(int, sample_size)
    r16 = r17
L9:
    constrained_sample_size = r16
    r18 = object 0
    r19 = PyObject_RichCompare(constrained_sample_size, r18, 2)
    if is_error(r19) goto L36 (error at _get_avg_block_time:55) else goto L10
L10:
    r20 = PyObject_IsTrue(r19)
    dec_ref r19
    r21 = r20 >= 0 :: signed
    if not r21 goto L36 (error at _get_avg_block_time:55) else goto L11 :: bool
L11:
    r22 = truncate r20: i32 to builtins.bool
    if r22 goto L37 else goto L16 :: bool
L12:
    r23 = 'Constrained sample size is 0'
    r24 = faster_web3.gas_strategies.time_based.globals :: static
    r25 = 'Web3ValidationError'
    r26 = CPyDict_GetItem(r24, r25)
    if is_error(r26) goto L31 (error at _get_avg_block_time:56) else goto L13
L13:
    r27 = [r23]
    r28 = load_address r27
    r29 = PyObject_Vectorcall(r26, r28, 1, 0)
    dec_ref r26
    if is_error(r29) goto L31 (error at _get_avg_block_time:56) else goto L14
L14:
    CPy_Raise(r29)
    dec_ref r29
    if not 0 goto L31 (error at _get_avg_block_time:56) else goto L15 :: bool
L15:
    unreachable
L16:
    r30 = 'eth'
    r31 = CPyObject_GetAttr(w3, r30)
    if is_error(r31) goto L36 (error at _get_avg_block_time:58) else goto L17
L17:
    r32 = 'number'
    inc_ref latest
    r33 = latest
    r34 = PyObject_GetItem(r33, r32)
    dec_ref r33
    if is_error(r34) goto L38 (error at _get_avg_block_time:58) else goto L18
L18:
    r35 = r34
L19:
    r36 = PyNumber_Subtract(r35, constrained_sample_size)
    dec_ref r35
    if is_error(r36) goto L38 (error at _get_avg_block_time:58) else goto L20
L20:
    r37 = unbox(int, r36)
    dec_ref r36
    if is_error(r37) goto L38 (error at _get_avg_block_time:58) else goto L21
L21:
    r38 = 'get_block'
    r39 = box(int, r37)
    r40 = [r31, r39]
    r41 = load_address r40
    r42 = PyObject_VectorcallMethod(r38, r41, 9223372036854775810, 0)
    if is_error(r42) goto L39 (error at _get_avg_block_time:58) else goto L22
L22:
    dec_ref r31
    dec_ref r39
    oldest = r42
    r43 = 'timestamp'
    r44 = latest
    r45 = PyObject_GetItem(r44, r43)
    dec_ref r44
    if is_error(r45) goto L40 (error at _get_avg_block_time:59) else goto L23
L23:
    r46 = r45
L24:
    r47 = 'timestamp'
    r48 = oldest
    r49 = PyObject_GetItem(r48, r47)
    dec_ref r48
    if is_error(r49) goto L41 (error at _get_avg_block_time:59) else goto L25
L25:
    r50 = r49
L26:
    r51 = PyNumber_Subtract(r46, r50)
    dec_ref r46
    dec_ref r50
    if is_error(r51) goto L42 (error at _get_avg_block_time:59) else goto L27
L27:
    r52 = PyNumber_TrueDivide(r51, constrained_sample_size)
    dec_ref r51
    dec_ref constrained_sample_size
    if is_error(r52) goto L31 (error at _get_avg_block_time:59) else goto L28
L28:
    r53 = unbox(float, r52)
    dec_ref r52
    r54 = r53 == -113.0
    if r54 goto L30 else goto L29 :: bool
L29:
    return r53
L30:
    r55 = PyErr_Occurred()
    if not is_error(r55) goto L31 (error at _get_avg_block_time:59) else goto L29
L31:
    r56 = <error> :: float
    return r56
L32:
    dec_ref r1
    goto L31
L33:
    dec_ref latest
    goto L31
L34:
    dec_ref latest
    dec_ref r10
    goto L31
L35:
    dec_ref r10
    goto L8
L36:
    dec_ref latest
    dec_ref constrained_sample_size
    goto L31
L37:
    dec_ref latest
    dec_ref constrained_sample_size
    goto L12
L38:
    dec_ref latest
    dec_ref constrained_sample_size
    dec_ref r31
    goto L31
L39:
    dec_ref latest
    dec_ref constrained_sample_size
    dec_ref r31
    dec_ref r39
    goto L31
L40:
    dec_ref constrained_sample_size
    dec_ref oldest
    goto L31
L41:
    dec_ref constrained_sample_size
    dec_ref r46
    goto L31
L42:
    dec_ref constrained_sample_size
    goto L31

def _get_weighted_avg_block_time(w3, sample_size):
    w3 :: object
    sample_size :: int
    r0 :: str
    r1 :: object
    r2, r3 :: str
    r4 :: object[2]
    r5 :: object_ptr
    r6 :: object
    r7 :: str
    r8 :: object
    latest_block_number :: union[int, object]
    r9, r10 :: object
    r11 :: i32
    r12 :: bit
    r13 :: bool
    r14 :: union[int, object]
    r15 :: object
    constrained_sample_size :: union[int, object]
    r16, r17 :: object
    r18 :: i32
    r19 :: bit
    r20 :: bool
    r21 :: str
    r22 :: dict
    r23 :: str
    r24 :: object
    r25 :: object[1]
    r26 :: object_ptr
    r27 :: object
    r28 :: str
    r29, r30 :: object
    r31 :: int
    r32 :: str
    r33 :: object
    r34 :: object[2]
    r35 :: object_ptr
    r36 :: object
    oldest_block :: union[dict, object]
    r37 :: str
    r38, r39 :: object
    r40 :: union[int, object]
    r41 :: str
    r42, r43 :: object
    r44, prev_timestamp :: union[int, object]
    weighted_sum, sum_of_weights :: float
    r45, r46, r47, r48 :: object
    r49, r50, i :: int
    r51, r52 :: object
    r53 :: i32
    r54 :: bit
    r55 :: bool
    r56 :: str
    r57 :: object
    r58 :: str
    r59 :: object
    r60 :: object[2]
    r61 :: object_ptr
    r62 :: object
    r63 :: str
    r64 :: object
    curr_timestamp :: union[int, object]
    r65 :: object
    time :: union[int, object]
    r66, r67 :: object
    r68 :: int
    r69, r70 :: object
    r71 :: float
    r72 :: bit
    r73, r74, r75, r76, r77 :: object
    r78 :: float
    r79 :: bit
    r80 :: float
    r81 :: object
    r82 :: int
    r83 :: bit
    r84 :: bool
    r85, r86 :: float
L0:
    r0 = 'eth'
    r1 = CPyObject_GetAttr(w3, r0)
    if is_error(r1) goto L49 (error at _get_weighted_avg_block_time:63) else goto L1
L1:
    r2 = 'latest'
    r3 = 'get_block'
    r4 = [r1, r2]
    r5 = load_address r4
    r6 = PyObject_VectorcallMethod(r3, r5, 9223372036854775810, 0)
    if is_error(r6) goto L50 (error at _get_weighted_avg_block_time:63) else goto L2
L2:
    dec_ref r1
    r7 = 'number'
    r8 = PyObject_GetItem(r6, r7)
    dec_ref r6
    if is_error(r8) goto L49 (error at _get_weighted_avg_block_time:63) else goto L3
L3:
    latest_block_number = r8
    inc_ref sample_size :: int
    r9 = box(int, sample_size)
    r10 = PyObject_RichCompare(latest_block_number, r9, 0)
    dec_ref r9
    if is_error(r10) goto L51 (error at _get_weighted_avg_block_time:64) else goto L4
L4:
    r11 = PyObject_IsTrue(r10)
    dec_ref r10
    r12 = r11 >= 0 :: signed
    if not r12 goto L51 (error at _get_weighted_avg_block_time:64) else goto L5 :: bool
L5:
    r13 = truncate r11: i32 to builtins.bool
    if r13 goto L6 else goto L7 :: bool
L6:
    inc_ref latest_block_number
    r14 = latest_block_number
    goto L8
L7:
    inc_ref sample_size :: int
    r15 = box(int, sample_size)
    r14 = r15
L8:
    constrained_sample_size = r14
    r16 = object 0
    r17 = PyObject_RichCompare(constrained_sample_size, r16, 2)
    if is_error(r17) goto L52 (error at _get_weighted_avg_block_time:65) else goto L9
L9:
    r18 = PyObject_IsTrue(r17)
    dec_ref r17
    r19 = r18 >= 0 :: signed
    if not r19 goto L52 (error at _get_weighted_avg_block_time:65) else goto L10 :: bool
L10:
    r20 = truncate r18: i32 to builtins.bool
    if r20 goto L53 else goto L15 :: bool
L11:
    r21 = 'Constrained sample size is 0'
    r22 = faster_web3.gas_strategies.time_based.globals :: static
    r23 = 'Web3ValidationError'
    r24 = CPyDict_GetItem(r22, r23)
    if is_error(r24) goto L49 (error at _get_weighted_avg_block_time:66) else goto L12
L12:
    r25 = [r21]
    r26 = load_address r25
    r27 = PyObject_Vectorcall(r24, r26, 1, 0)
    dec_ref r24
    if is_error(r27) goto L49 (error at _get_weighted_avg_block_time:66) else goto L13
L13:
    CPy_Raise(r27)
    dec_ref r27
    if not 0 goto L49 (error at _get_weighted_avg_block_time:66) else goto L14 :: bool
L14:
    unreachable
L15:
    r28 = 'eth'
    r29 = CPyObject_GetAttr(w3, r28)
    if is_error(r29) goto L52 (error at _get_weighted_avg_block_time:67) else goto L16
L16:
    r30 = PyNumber_Subtract(latest_block_number, constrained_sample_size)
    if is_error(r30) goto L54 (error at _get_weighted_avg_block_time:68) else goto L17
L17:
    r31 = unbox(int, r30)
    dec_ref r30
    if is_error(r31) goto L54 (error at _get_weighted_avg_block_time:68) else goto L18
L18:
    r32 = 'get_block'
    r33 = box(int, r31)
    r34 = [r29, r33]
    r35 = load_address r34
    r36 = PyObject_VectorcallMethod(r32, r35, 9223372036854775810, 0)
    if is_error(r36) goto L55 (error at _get_weighted_avg_block_time:67) else goto L19
L19:
    dec_ref r29
    dec_ref r33
    oldest_block = r36
    r37 = 'number'
    inc_ref oldest_block
    r38 = oldest_block
    r39 = PyObject_GetItem(r38, r37)
    dec_ref r38
    if is_error(r39) goto L56 (error at _get_weighted_avg_block_time:70) else goto L20
L20:
    r40 = r39
L21:
    r41 = 'timestamp'
    r42 = oldest_block
    r43 = PyObject_GetItem(r42, r41)
    dec_ref r42
    if is_error(r43) goto L57 (error at _get_weighted_avg_block_time:71) else goto L22
L22:
    r44 = r43
L23:
    prev_timestamp = r44
    weighted_sum = 0.0
    sum_of_weights = 0.0
    r45 = object 1
    r46 = PyNumber_Add(r40, r45)
    if is_error(r46) goto L58 (error at _get_weighted_avg_block_time:74) else goto L24
L24:
    r47 = object 1
    r48 = PyNumber_Add(latest_block_number, r47)
    dec_ref latest_block_number
    if is_error(r48) goto L59 (error at _get_weighted_avg_block_time:74) else goto L25
L25:
    r49 = unbox(int, r46)
    dec_ref r46
    if is_error(r49) goto L60 (error at _get_weighted_avg_block_time:-1) else goto L26
L26:
    r50 = r49
    inc_ref r50 :: int
    i = r50
L27:
    inc_ref r50 :: int
    r51 = box(int, r50)
    r52 = PyObject_RichCompare(r51, r48, 0)
    dec_ref r51
    if is_error(r52) goto L61 (error at _get_weighted_avg_block_time:74) else goto L28
L28:
    r53 = PyObject_IsTrue(r52)
    dec_ref r52
    r54 = r53 >= 0 :: signed
    if not r54 goto L61 (error at _get_weighted_avg_block_time:74) else goto L29 :: bool
L29:
    r55 = truncate r53: i32 to builtins.bool
    if r55 goto L30 else goto L62 :: bool
L30:
    r56 = 'eth'
    r57 = CPyObject_GetAttr(w3, r56)
    if is_error(r57) goto L61 (error at _get_weighted_avg_block_time:75) else goto L31
L31:
    r58 = 'get_block'
    inc_ref i :: int
    r59 = box(int, i)
    r60 = [r57, r59]
    r61 = load_address r60
    r62 = PyObject_VectorcallMethod(r58, r61, 9223372036854775810, 0)
    if is_error(r62) goto L63 (error at _get_weighted_avg_block_time:75) else goto L32
L32:
    dec_ref r57
    dec_ref r59
    r63 = 'timestamp'
    r64 = PyObject_GetItem(r62, r63)
    dec_ref r62
    if is_error(r64) goto L61 (error at _get_weighted_avg_block_time:75) else goto L33
L33:
    curr_timestamp = r64
    r65 = PyNumber_Subtract(curr_timestamp, prev_timestamp)
    dec_ref prev_timestamp
    if is_error(r65) goto L64 (error at _get_weighted_avg_block_time:76) else goto L34
L34:
    time = r65
    r66 = box(int, i)
    r67 = PyNumber_Subtract(r66, r40)
    dec_ref r66
    if is_error(r67) goto L65 (error at _get_weighted_avg_block_time:77) else goto L35
L35:
    r68 = unbox(int, r67)
    dec_ref r67
    if is_error(r68) goto L65 (error at _get_weighted_avg_block_time:77) else goto L36
L36:
    r69 = box(int, r68)
    r70 = PyNumber_TrueDivide(r69, constrained_sample_size)
    dec_ref r69
    if is_error(r70) goto L65 (error at _get_weighted_avg_block_time:77) else goto L37
L37:
    r71 = unbox(float, r70)
    dec_ref r70
    r72 = r71 == -113.0
    if r72 goto L39 else goto L38 :: bool
L38:
    r73 = box(float, r71)
    r74 = PyNumber_Multiply(time, r73)
    dec_ref time
    dec_ref r73
    if is_error(r74) goto L66 (error at _get_weighted_avg_block_time:78) else goto L40
L39:
    r75 = PyErr_Occurred()
    if not is_error(r75) goto L65 (error at _get_weighted_avg_block_time:77) else goto L38
L40:
    r76 = box(float, weighted_sum)
    r77 = PyNumber_InPlaceAdd(r76, r74)
    dec_ref r76
    dec_ref r74
    if is_error(r77) goto L66 (error at _get_weighted_avg_block_time:78) else goto L41
L41:
    r78 = unbox(float, r77)
    dec_ref r77
    r79 = r78 == -113.0
    if r79 goto L43 else goto L42 :: bool
L42:
    weighted_sum = r78
    r80 = sum_of_weights + r71
    sum_of_weights = r80
    prev_timestamp = curr_timestamp
    goto L44
L43:
    r81 = PyErr_Occurred()
    if not is_error(r81) goto L66 (error at _get_weighted_avg_block_time:78) else goto L42
L44:
    r82 = CPyTagged_Add(r50, 2)
    dec_ref r50 :: int
    inc_ref r82 :: int
    r50 = r82
    i = r82
    goto L27
L45:
    r83 = sum_of_weights == 0.0
    if r83 goto L46 else goto L48 :: bool
L46:
    r84 = raise ZeroDivisionError('float division by zero')
    if not r84 goto L49 (error at _get_weighted_avg_block_time:81) else goto L47 :: bool
L47:
    unreachable
L48:
    r85 = weighted_sum / sum_of_weights
    return r85
L49:
    r86 = <error> :: float
    return r86
L50:
    dec_ref r1
    goto L49
L51:
    dec_ref latest_block_number
    goto L49
L52:
    dec_ref latest_block_number
    dec_ref constrained_sample_size
    goto L49
L53:
    dec_ref latest_block_number
    dec_ref constrained_sample_size
    goto L11
L54:
    dec_ref latest_block_number
    dec_ref constrained_sample_size
    dec_ref r29
    goto L49
L55:
    dec_ref latest_block_number
    dec_ref constrained_sample_size
    dec_ref r29
    dec_ref r33
    goto L49
L56:
    dec_ref latest_block_number
    dec_ref constrained_sample_size
    dec_ref oldest_block
    goto L49
L57:
    dec_ref latest_block_number
    dec_ref constrained_sample_size
    dec_ref r40
    goto L49
L58:
    dec_ref latest_block_number
    dec_ref constrained_sample_size
    dec_ref r40
    dec_ref prev_timestamp
    goto L49
L59:
    dec_ref constrained_sample_size
    dec_ref r40
    dec_ref prev_timestamp
    dec_ref r46
    goto L49
L60:
    dec_ref constrained_sample_size
    dec_ref r40
    dec_ref prev_timestamp
    dec_ref r48
    goto L49
L61:
    dec_ref constrained_sample_size
    dec_ref r40
    dec_ref prev_timestamp
    dec_ref r48
    dec_ref r50 :: int
    dec_ref i :: int
    goto L49
L62:
    dec_ref constrained_sample_size
    dec_ref r40
    dec_ref prev_timestamp
    dec_ref r48
    dec_ref r50 :: int
    dec_ref i :: int
    goto L45
L63:
    dec_ref constrained_sample_size
    dec_ref r40
    dec_ref prev_timestamp
    dec_ref r48
    dec_ref r50 :: int
    dec_ref i :: int
    dec_ref r57
    dec_ref r59
    goto L49
L64:
    dec_ref constrained_sample_size
    dec_ref r40
    dec_ref r48
    dec_ref r50 :: int
    dec_ref i :: int
    dec_ref curr_timestamp
    goto L49
L65:
    dec_ref constrained_sample_size
    dec_ref r40
    dec_ref r48
    dec_ref r50 :: int
    dec_ref curr_timestamp
    dec_ref time
    goto L49
L66:
    dec_ref constrained_sample_size
    dec_ref r40
    dec_ref r48
    dec_ref r50 :: int
    dec_ref curr_timestamp
    goto L49

def _get_raw_miner_data_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0 :: i32
    r1 :: object
    r2 :: bit
    r3 :: object
    r4 :: str
    r5 :: object
    r6, r7 :: str
    r8 :: object
    r9 :: object[3]
    r10 :: object_ptr
    r11, r12 :: object
    r13 :: bool
    r14 :: union[dict, object]
    r15 :: str
    r16, r17, r18 :: object
    r19, r20 :: bool
    r21, r22 :: object
    r23 :: bool
    r24 :: union[dict, object]
    r25 :: str
    r26, r27 :: object
    r28 :: union[str, object]
    r29 :: union[dict, object]
    r30 :: str
    r31, r32 :: object
    r33 :: union[object, dict]
    r34 :: str
    r35, r36 :: object
    r37 :: union[object, int]
    r38 :: tuple[union[str, object], object, union[object, int]]
    r39 :: object
    r40 :: bool
    r41 :: object
    r42, r43 :: bit
    r44 :: union[dict, object]
    r45 :: bool
    r46, r47 :: int
    r48 :: bool
    r49 :: int
    r50 :: bool
    r51 :: int
    r52 :: object
    r53 :: bool
    r54, r55 :: int
    r56 :: native_int
    r57 :: bit
    r58 :: native_int
    r59, r60 :: bit
    r61 :: bool
    r62 :: bit
    r63 :: union[dict, object]
    r64 :: str
    r65, r66 :: object
    r67 :: union[int, object]
    r68, r69 :: object
    r70 :: i32
    r71 :: bit
    r72 :: bool
    r73 :: object
    r74 :: str
    r75 :: object
    r76 :: union[dict, object]
    r77 :: str
    r78, r79 :: object
    r80 :: str
    r81 :: object
    r82 :: object[3]
    r83 :: object_ptr
    r84, r85 :: object
    r86 :: bool
    r87 :: union[dict, object]
    r88 :: str
    r89, r90, r91 :: object
    r92, r93 :: bool
    r94, r95 :: object
    r96 :: bool
    r97 :: union[dict, object]
    r98 :: str
    r99, r100 :: object
    r101 :: union[str, object]
    r102 :: union[dict, object]
    r103 :: str
    r104, r105 :: object
    r106 :: union[object, dict]
    r107 :: str
    r108, r109 :: object
    r110 :: union[object, int]
    r111 :: tuple[union[str, object], object, union[object, int]]
    r112 :: object
    r113 :: bool
    r114 :: object
    r115, r116 :: bit
    r117, r118 :: int
    r119 :: bool
    r120 :: object
    r121 :: bool
    r122 :: object
    r123 :: bool
    r124, r125, r126 :: bit
    r127 :: bool
    r128 :: object
L0:
    r0 = __mypyc_self__.__mypyc_next_label__
    goto L89
L1:
    r1 = load_address _Py_NoneStruct
    r2 = type != r1
    if r2 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L94 (error at _get_raw_miner_data:84) else goto L3 :: bool
L3:
    unreachable
L4:
    r3 = __mypyc_self__.__mypyc_generator_attribute__w3
    if is_error(r3) goto L94 (error at _get_raw_miner_data:87) else goto L5
L5:
    r4 = 'eth'
    r5 = CPyObject_GetAttr(r3, r4)
    dec_ref r3
    if is_error(r5) goto L94 (error at _get_raw_miner_data:87) else goto L6
L6:
    r6 = 'latest'
    r7 = 'get_block'
    r8 = box(bool, 1)
    r9 = [r5, r6, r8]
    r10 = load_address r9
    r11 = ('full_transactions',)
    r12 = PyObject_VectorcallMethod(r7, r10, 9223372036854775810, r11)
    if is_error(r12) goto L95 (error at _get_raw_miner_data:87) else goto L7
L7:
    dec_ref r5
    __mypyc_self__.__mypyc_generator_attribute__latest = r12; r13 = is_error
    if not r13 goto L94 (error at _get_raw_miner_data:87) else goto L8 :: bool
L8:
    r14 = __mypyc_self__.__mypyc_generator_attribute__latest
    if is_error(r14) goto L94 (error at _get_raw_miner_data:89) else goto L9
L9:
    r15 = 'transactions'
    r16 = r14
    r17 = PyObject_GetItem(r16, r15)
    dec_ref r16
    if is_error(r17) goto L94 (error at _get_raw_miner_data:89) else goto L10
L10:
L11:
    r18 = PyObject_GetIter(r17)
    if is_error(r18) goto L96 (error at _get_raw_miner_data:89) else goto L12
L12:
    __mypyc_self__.__mypyc_temp__0 = r17; r19 = is_error
    if not r19 goto L97 (error at _get_raw_miner_data:-1) else goto L13 :: bool
L13:
    __mypyc_self__.__mypyc_temp__1 = r18; r20 = is_error
    if not r20 goto L94 (error at _get_raw_miner_data:-1) else goto L14 :: bool
L14:
    r21 = __mypyc_self__.__mypyc_temp__1
    if is_error(r21) goto L94 (error at _get_raw_miner_data:89) else goto L15
L15:
    r22 = PyIter_Next(r21)
    dec_ref r21
    if is_error(r22) goto L30 else goto L16
L16:
    __mypyc_self__.__mypyc_generator_attribute__transaction = r22; r23 = is_error
    if not r23 goto L94 (error at _get_raw_miner_data:89) else goto L17 :: bool
L17:
    r24 = __mypyc_self__.__mypyc_generator_attribute__latest
    if is_error(r24) goto L94 (error at _get_raw_miner_data:90) else goto L18
L18:
    r25 = 'miner'
    r26 = r24
    r27 = PyObject_GetItem(r26, r25)
    dec_ref r26
    if is_error(r27) goto L94 (error at _get_raw_miner_data:90) else goto L19
L19:
    r28 = r27
L20:
    r29 = __mypyc_self__.__mypyc_generator_attribute__latest
    if is_error(r29) goto L98 (error at _get_raw_miner_data:90) else goto L21
L21:
    r30 = 'hash'
    r31 = r29
    r32 = PyObject_GetItem(r31, r30)
    dec_ref r31
    if is_error(r32) goto L98 (error at _get_raw_miner_data:90) else goto L22
L22:
L23:
    r33 = __mypyc_self__.__mypyc_generator_attribute__transaction
    if is_error(r33) goto L99 (error at _get_raw_miner_data:90) else goto L24
L24:
    r34 = 'gasPrice'
    r35 = r33
    r36 = PyObject_GetItem(r35, r34)
    dec_ref r35
    if is_error(r36) goto L99 (error at _get_raw_miner_data:90) else goto L25
L25:
    r37 = r36
L26:
    r38 = (r28, r32, r37)
    r39 = box(tuple[union[str, object], object, union[object, int]], r38)
    __mypyc_self__.__mypyc_next_label__ = 1
    return r39
L27:
    r41 = load_address _Py_NoneStruct
    r42 = type != r41
    if r42 goto L28 else goto L14 :: bool
L28:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L94 (error at _get_raw_miner_data:90) else goto L29 :: bool
L29:
    unreachable
L30:
    r43 = CPy_NoErrOccurred()
    if not r43 goto L94 (error at _get_raw_miner_data:89) else goto L31 :: bool
L31:
    r44 = __mypyc_self__.__mypyc_generator_attribute__latest
    if is_error(r44) goto L94 (error at _get_raw_miner_data:92) else goto L32
L32:
    __mypyc_self__.__mypyc_generator_attribute__block = r44; r45 = is_error
    if not r45 goto L94 (error at _get_raw_miner_data:92) else goto L33 :: bool
L33:
    r46 = __mypyc_self__.__mypyc_generator_attribute__sample_size
    if is_error(r46) goto L94 (error at _get_raw_miner_data:94) else goto L34
L34:
    r47 = CPyTagged_Subtract(r46, 2)
    dec_ref r46 :: int
    __mypyc_self__.__mypyc_temp__2 = r47; r48 = is_error
    if not r48 goto L94 (error at _get_raw_miner_data:-1) else goto L35 :: bool
L35:
    r49 = 0
    __mypyc_self__.__mypyc_temp__3 = r49; r50 = is_error
    if not r50 goto L94 (error at _get_raw_miner_data:-1) else goto L36 :: bool
L36:
    r51 = __mypyc_self__.__mypyc_temp__3
    if is_error(r51) goto L94 (error at _get_raw_miner_data:94) else goto L37
L37:
    r52 = box(int, r51)
    __mypyc_self__.__mypyc_generator_attribute___ = r52; r53 = is_error
    if not r53 goto L94 (error at _get_raw_miner_data:94) else goto L38 :: bool
L38:
    r54 = __mypyc_self__.__mypyc_temp__3
    if is_error(r54) goto L94 (error at _get_raw_miner_data:94) else goto L39
L39:
    r55 = __mypyc_self__.__mypyc_temp__2
    if is_error(r55) goto L100 (error at _get_raw_miner_data:94) else goto L40
L40:
    r56 = r54 & 1
    r57 = r56 != 0
    if r57 goto L42 else goto L41 :: bool
L41:
    r58 = r55 & 1
    r59 = r58 != 0
    if r59 goto L42 else goto L43 :: bool
L42:
    r60 = CPyTagged_IsLt_(r54, r55)
    r61 = r60
    goto L44
L43:
    r62 = r54 < r55 :: signed
    r61 = r62
L44:
    dec_ref r54 :: int
    dec_ref r55 :: int
    if r61 goto L45 else goto L84 :: bool
L45:
    r63 = __mypyc_self__.__mypyc_generator_attribute__block
    if is_error(r63) goto L94 (error at _get_raw_miner_data:95) else goto L46
L46:
    r64 = 'number'
    r65 = r63
    r66 = PyObject_GetItem(r65, r64)
    dec_ref r65
    if is_error(r66) goto L94 (error at _get_raw_miner_data:95) else goto L47
L47:
    r67 = r66
L48:
    r68 = object 0
    r69 = PyObject_RichCompare(r67, r68, 2)
    dec_ref r67
    if is_error(r69) goto L94 (error at _get_raw_miner_data:95) else goto L49
L49:
    r70 = PyObject_IsTrue(r69)
    dec_ref r69
    r71 = r70 >= 0 :: signed
    if not r71 goto L94 (error at _get_raw_miner_data:95) else goto L50 :: bool
L50:
    r72 = truncate r70: i32 to builtins.bool
    if r72 goto L84 else goto L51 :: bool
L51:
    r73 = __mypyc_self__.__mypyc_generator_attribute__w3
    if is_error(r73) goto L94 (error at _get_raw_miner_data:100) else goto L52
L52:
    r74 = 'eth'
    r75 = CPyObject_GetAttr(r73, r74)
    dec_ref r73
    if is_error(r75) goto L94 (error at _get_raw_miner_data:100) else goto L53
L53:
    r76 = __mypyc_self__.__mypyc_generator_attribute__block
    if is_error(r76) goto L101 (error at _get_raw_miner_data:100) else goto L54
L54:
    r77 = 'parentHash'
    r78 = r76
    r79 = PyObject_GetItem(r78, r77)
    dec_ref r78
    if is_error(r79) goto L101 (error at _get_raw_miner_data:100) else goto L55
L55:
L56:
    r80 = 'get_block'
    r81 = box(bool, 1)
    r82 = [r75, r79, r81]
    r83 = load_address r82
    r84 = ('full_transactions',)
    r85 = PyObject_VectorcallMethod(r80, r83, 9223372036854775810, r84)
    if is_error(r85) goto L102 (error at _get_raw_miner_data:100) else goto L57
L57:
    dec_ref r75
    dec_ref r79
    __mypyc_self__.__mypyc_generator_attribute__block = r85; r86 = is_error
    if not r86 goto L94 (error at _get_raw_miner_data:100) else goto L58 :: bool
L58:
    r87 = __mypyc_self__.__mypyc_generator_attribute__block
    if is_error(r87) goto L94 (error at _get_raw_miner_data:101) else goto L59
L59:
    r88 = 'transactions'
    r89 = r87
    r90 = PyObject_GetItem(r89, r88)
    dec_ref r89
    if is_error(r90) goto L94 (error at _get_raw_miner_data:101) else goto L60
L60:
L61:
    r91 = PyObject_GetIter(r90)
    if is_error(r91) goto L103 (error at _get_raw_miner_data:101) else goto L62
L62:
    __mypyc_self__.__mypyc_temp__4 = r90; r92 = is_error
    if not r92 goto L104 (error at _get_raw_miner_data:-1) else goto L63 :: bool
L63:
    __mypyc_self__.__mypyc_temp__5 = r91; r93 = is_error
    if not r93 goto L94 (error at _get_raw_miner_data:-1) else goto L64 :: bool
L64:
    r94 = __mypyc_self__.__mypyc_temp__5
    if is_error(r94) goto L94 (error at _get_raw_miner_data:101) else goto L65
L65:
    r95 = PyIter_Next(r94)
    dec_ref r94
    if is_error(r95) goto L80 else goto L66
L66:
    __mypyc_self__.__mypyc_generator_attribute__transaction = r95; r96 = is_error
    if not r96 goto L94 (error at _get_raw_miner_data:101) else goto L67 :: bool
L67:
    r97 = __mypyc_self__.__mypyc_generator_attribute__block
    if is_error(r97) goto L94 (error at _get_raw_miner_data:102) else goto L68
L68:
    r98 = 'miner'
    r99 = r97
    r100 = PyObject_GetItem(r99, r98)
    dec_ref r99
    if is_error(r100) goto L94 (error at _get_raw_miner_data:102) else goto L69
L69:
    r101 = r100
L70:
    r102 = __mypyc_self__.__mypyc_generator_attribute__block
    if is_error(r102) goto L105 (error at _get_raw_miner_data:102) else goto L71
L71:
    r103 = 'hash'
    r104 = r102
    r105 = PyObject_GetItem(r104, r103)
    dec_ref r104
    if is_error(r105) goto L105 (error at _get_raw_miner_data:102) else goto L72
L72:
L73:
    r106 = __mypyc_self__.__mypyc_generator_attribute__transaction
    if is_error(r106) goto L106 (error at _get_raw_miner_data:102) else goto L74
L74:
    r107 = 'gasPrice'
    r108 = r106
    r109 = PyObject_GetItem(r108, r107)
    dec_ref r108
    if is_error(r109) goto L106 (error at _get_raw_miner_data:102) else goto L75
L75:
    r110 = r109
L76:
    r111 = (r101, r105, r110)
    r112 = box(tuple[union[str, object], object, union[object, int]], r111)
    __mypyc_self__.__mypyc_next_label__ = 2
    return r112
L77:
    r114 = load_address _Py_NoneStruct
    r115 = type != r114
    if r115 goto L78 else goto L64 :: bool
L78:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L94 (error at _get_raw_miner_data:102) else goto L79 :: bool
L79:
    unreachable
L80:
    r116 = CPy_NoErrOccurred()
    if not r116 goto L94 (error at _get_raw_miner_data:101) else goto L81 :: bool
L81:
    r117 = __mypyc_self__.__mypyc_temp__3
    if is_error(r117) goto L94 (error at _get_raw_miner_data:94) else goto L82
L82:
    r118 = CPyTagged_Add(r117, 2)
    dec_ref r117 :: int
    inc_ref r118 :: int
    __mypyc_self__.__mypyc_temp__3 = r118; r119 = is_error
    if not r119 goto L107 (error at _get_raw_miner_data:94) else goto L83 :: bool
L83:
    r120 = box(int, r118)
    __mypyc_self__.__mypyc_generator_attribute___ = r120; r121 = is_error
    if not r121 goto L94 (error at _get_raw_miner_data:94) else goto L38 :: bool
L84:
    r122 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L85:
    if is_error(stop_iter_ptr) goto L86 else goto L88
L86:
    CPyGen_SetStopIterationValue(r122)
    if not 0 goto L94 else goto L87 :: bool
L87:
    unreachable
L88:
    inc_ref r122
    set_mem stop_iter_ptr, r122 :: builtins.object*
    return 0
L89:
    r124 = r0 == 0
    if r124 goto L1 else goto L90 :: bool
L90:
    r125 = r0 == 1
    if r125 goto L27 else goto L91 :: bool
L91:
    r126 = r0 == 2
    if r126 goto L77 else goto L92 :: bool
L92:
    r127 = raise StopIteration
    if not r127 goto L94 (error at _get_raw_miner_data:84) else goto L93 :: bool
L93:
    unreachable
L94:
    r128 = <error> :: object
    return r128
L95:
    dec_ref r5
    goto L94
L96:
    dec_ref r17
    goto L94
L97:
    dec_ref r18
    goto L94
L98:
    dec_ref r28
    goto L94
L99:
    dec_ref r28
    dec_ref r32
    goto L94
L100:
    dec_ref r54 :: int
    goto L94
L101:
    dec_ref r75
    goto L94
L102:
    dec_ref r75
    dec_ref r79
    goto L94
L103:
    dec_ref r90
    goto L94
L104:
    dec_ref r91
    goto L94
L105:
    dec_ref r101
    goto L94
L106:
    dec_ref r101
    dec_ref r105
    goto L94
L107:
    dec_ref r118 :: int
    goto L94

def _get_raw_miner_data_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _get_raw_miner_data_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _get_raw_miner_data_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _get_raw_miner_data_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _get_raw_miner_data_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def _get_raw_miner_data_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = _get_raw_miner_data_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def _get_raw_miner_data_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def _get_raw_miner_data(w3, sample_size):
    w3 :: object
    sample_size :: int
    r0 :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
L0:
    r0 = _get_raw_miner_data_gen()
    if is_error(r0) goto L4 (error at _get_raw_miner_data:84) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref w3
    r0.__mypyc_generator_attribute__w3 = w3; r2 = is_error
    if not r2 goto L5 (error at _get_raw_miner_data:84) else goto L2 :: bool
L2:
    inc_ref sample_size :: int
    r0.__mypyc_generator_attribute__sample_size = sample_size; r3 = is_error
    if not r3 goto L5 (error at _get_raw_miner_data:84) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
    return r4
L5:
    dec_ref r0
    goto L4

def _aggregate_miner_data_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0 :: i32
    r1 :: object
    r2 :: bit
    r3 :: object
    r4 :: dict
    r5 :: str
    r6, r7 :: object
    r8 :: object[2]
    r9 :: object_ptr
    r10 :: object
    r11 :: bool
    r12 :: object
    r13 :: str
    r14 :: object[1]
    r15 :: object_ptr
    r16, r17 :: object
    r18, r19 :: bool
    r20, r21, r22, r23 :: object
    r24, r25 :: bool
    r26 :: object
    r27, r28 :: bool
    r29 :: object
    r30 :: bool
    r31, r32, r33 :: object
    r34 :: str
    r35 :: object
    r36 :: tuple
    r37, r38 :: object
    r39 :: str
    r40 :: object
    r41 :: object[2]
    r42 :: object_ptr
    r43, r44, r45 :: object
    r46, r47 :: bool
    r48 :: object
    r49 :: bool
    r50 :: set
    r51 :: bool
    r52 :: object
    r53 :: bool
    r54 :: set
    r55 :: bool
    r56 :: object
    r57 :: bool
    r58 :: set
    r59 :: float
    r60 :: bit
    r61 :: bool
    r62 :: object
    r63 :: tuple[object, object, object]
    r64 :: bool
    r65 :: dict
    r66 :: str
    r67 :: object
    r68 :: bit
    r69 :: set
    r70 :: object
    r71 :: str
    r72 :: object
    r73 :: object[1]
    r74 :: object_ptr
    r75 :: object
    r76 :: float
    r77 :: bit
    r78 :: bool
    r79 :: object
    r80, r81 :: tuple[object, object, object]
    r82 :: bit
    r83 :: object
    r84, r85 :: set
    r86 :: ptr
    r87 :: native_int
    r88 :: short_int
    r89 :: set
    r90 :: object
    r91 :: str
    r92 :: object
    r93 :: object[1]
    r94 :: object_ptr
    r95 :: object
    r96 :: float
    r97 :: bit
    r98 :: dict
    r99 :: str
    r100, r101, r102, r103 :: object
    r104 :: object[4]
    r105 :: object_ptr
    r106 :: object
    r107 :: tuple
    r108 :: bool
    r109 :: object
    r110, r111 :: bit
    r112 :: object
    r113 :: bool
    r114, r115 :: bit
    r116 :: bool
    r117 :: object
L0:
    r0 = __mypyc_self__.__mypyc_next_label__
    goto L92
L1:
    r1 = load_address _Py_NoneStruct
    r2 = type != r1
    if r2 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L96 (error at _aggregate_miner_data:105) else goto L3 :: bool
L3:
    unreachable
L4:
    r3 = __mypyc_self__.__mypyc_generator_attribute__raw_data
    if is_error(r3) goto L96 (error at _aggregate_miner_data:108) else goto L5
L5:
    r4 = faster_web3.gas_strategies.time_based.globals :: static
    r5 = 'groupby'
    r6 = CPyDict_GetItem(r4, r5)
    if is_error(r6) goto L97 (error at _aggregate_miner_data:108) else goto L6
L6:
    r7 = object 0
    r8 = [r7, r3]
    r9 = load_address r8
    r10 = PyObject_Vectorcall(r6, r9, 2, 0)
    dec_ref r6
    if is_error(r10) goto L97 (error at _aggregate_miner_data:108) else goto L7
L7:
    dec_ref r3
    __mypyc_self__.__mypyc_generator_attribute__data_by_miner = r10; r11 = is_error
    if not r11 goto L96 (error at _aggregate_miner_data:108) else goto L8 :: bool
L8:
    r12 = __mypyc_self__.__mypyc_generator_attribute__data_by_miner
    if is_error(r12) goto L96 (error at _aggregate_miner_data:110) else goto L9
L9:
    r13 = 'items'
    r14 = [r12]
    r15 = load_address r14
    r16 = PyObject_VectorcallMethod(r13, r15, 9223372036854775809, 0)
    if is_error(r16) goto L98 (error at _aggregate_miner_data:110) else goto L10
L10:
    dec_ref r12
    r17 = PyObject_GetIter(r16)
    if is_error(r17) goto L99 (error at _aggregate_miner_data:110) else goto L11
L11:
    __mypyc_self__.__mypyc_temp__6 = r16; r18 = is_error
    if not r18 goto L100 (error at _aggregate_miner_data:-1) else goto L12 :: bool
L12:
    __mypyc_self__.__mypyc_temp__7 = r17; r19 = is_error
    if not r19 goto L96 (error at _aggregate_miner_data:-1) else goto L13 :: bool
L13:
    r20 = __mypyc_self__.__mypyc_temp__7
    if is_error(r20) goto L96 (error at _aggregate_miner_data:110) else goto L14
L14:
    r21 = PyIter_Next(r20)
    dec_ref r20
    if is_error(r21) goto L86 else goto L15
L15:
    r22 = PyObject_GetIter(r21)
    dec_ref r21
    if is_error(r22) goto L96 (error at _aggregate_miner_data:110) else goto L16
L16:
    r23 = PyIter_Next(r22)
    if is_error(r23) goto L101 else goto L19
L17:
    r24 = raise ValueError('not enough values to unpack')
    if not r24 goto L96 (error at _aggregate_miner_data:110) else goto L18 :: bool
L18:
    unreachable
L19:
    __mypyc_self__.__mypyc_generator_attribute__miner = r23; r25 = is_error
    if not r25 goto L102 (error at _aggregate_miner_data:110) else goto L20 :: bool
L20:
    r26 = PyIter_Next(r22)
    if is_error(r26) goto L103 else goto L23
L21:
    r27 = raise ValueError('not enough values to unpack')
    if not r27 goto L96 (error at _aggregate_miner_data:110) else goto L22 :: bool
L22:
    unreachable
L23:
    __mypyc_self__.__mypyc_generator_attribute__miner_data = r26; r28 = is_error
    if not r28 goto L102 (error at _aggregate_miner_data:110) else goto L24 :: bool
L24:
    r29 = PyIter_Next(r22)
    dec_ref r22
    if is_error(r29) goto L27 else goto L104
L25:
    r30 = raise ValueError('too many values to unpack')
    if not r30 goto L96 (error at _aggregate_miner_data:110) else goto L26 :: bool
L26:
    unreachable
L27:
    r31 = load_address PySet_Type
    r32 = __mypyc_self__.__mypyc_generator_attribute__miner_data
    if is_error(r32) goto L96 (error at _aggregate_miner_data:111) else goto L28
L28:
    r33 = builtins :: module
    r34 = 'zip'
    r35 = CPyObject_GetAttr(r33, r34)
    if is_error(r35) goto L105 (error at _aggregate_miner_data:111) else goto L29
L29:
    r36 = PySequence_Tuple(r32)
    dec_ref r32
    if is_error(r36) goto L106 (error at _aggregate_miner_data:111) else goto L30
L30:
    r37 = PyObject_CallObject(r35, r36)
    dec_ref r35
    dec_ref r36
    if is_error(r37) goto L96 (error at _aggregate_miner_data:111) else goto L31
L31:
    r38 = builtins :: module
    r39 = 'map'
    r40 = CPyObject_GetAttr(r38, r39)
    if is_error(r40) goto L107 (error at _aggregate_miner_data:111) else goto L32
L32:
    r41 = [r31, r37]
    r42 = load_address r41
    r43 = PyObject_Vectorcall(r40, r42, 2, 0)
    dec_ref r40
    if is_error(r43) goto L107 (error at _aggregate_miner_data:111) else goto L33
L33:
    dec_ref r37
    r44 = PyObject_GetIter(r43)
    dec_ref r43
    if is_error(r44) goto L96 (error at _aggregate_miner_data:111) else goto L34
L34:
    r45 = PyIter_Next(r44)
    if is_error(r45) goto L108 else goto L37
L35:
    r46 = raise ValueError('not enough values to unpack')
    if not r46 goto L96 (error at _aggregate_miner_data:111) else goto L36 :: bool
L36:
    unreachable
L37:
    __mypyc_self__.__mypyc_generator_attribute___ = r45; r47 = is_error
    if not r47 goto L109 (error at _aggregate_miner_data:111) else goto L38 :: bool
L38:
    r48 = PyIter_Next(r44)
    if is_error(r48) goto L110 else goto L41
L39:
    r49 = raise ValueError('not enough values to unpack')
    if not r49 goto L96 (error at _aggregate_miner_data:111) else goto L40 :: bool
L40:
    unreachable
L41:
    r50 = cast(set, r48)
    if is_error(r50) goto L109 (error at _aggregate_miner_data:111) else goto L42
L42:
    __mypyc_self__.__mypyc_generator_attribute__block_hashes = r50; r51 = is_error
    if not r51 goto L109 (error at _aggregate_miner_data:111) else goto L43 :: bool
L43:
    r52 = PyIter_Next(r44)
    if is_error(r52) goto L111 else goto L46
L44:
    r53 = raise ValueError('not enough values to unpack')
    if not r53 goto L96 (error at _aggregate_miner_data:111) else goto L45 :: bool
L45:
    unreachable
L46:
    r54 = cast(set, r52)
    if is_error(r54) goto L109 (error at _aggregate_miner_data:111) else goto L47
L47:
    __mypyc_self__.__mypyc_generator_attribute__gas_prices = r54; r55 = is_error
    if not r55 goto L109 (error at _aggregate_miner_data:111) else goto L48 :: bool
L48:
    r56 = PyIter_Next(r44)
    dec_ref r44
    if is_error(r56) goto L51 else goto L112
L49:
    r57 = raise ValueError('too many values to unpack')
    if not r57 goto L96 (error at _aggregate_miner_data:111) else goto L50 :: bool
L50:
    unreachable
L51:
    r58 = __mypyc_self__.__mypyc_generator_attribute__gas_prices
    if is_error(r58) goto L55 (error at _aggregate_miner_data:114) else goto L52
L52:
    r59 = percentile(r58, 20.0)
    dec_ref r58
    r60 = r59 == -113.0
    if r60 goto L54 else goto L53 :: bool
L53:
    __mypyc_self__.__mypyc_generator_attribute__price_percentile = r59; r61 = is_error
    if not r61 goto L55 (error at _aggregate_miner_data:114) else goto L71 :: bool
L54:
    r62 = PyErr_Occurred()
    if not is_error(r62) goto L55 (error at _aggregate_miner_data:114) else goto L53
L55:
    r63 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__8 = r63; r64 = is_error
    if not r64 goto L68 (error at _aggregate_miner_data:-1) else goto L56 :: bool
L56:
    r65 = faster_web3.gas_strategies.time_based.globals :: static
    r66 = 'InsufficientData'
    r67 = CPyDict_GetItem(r65, r66)
    if is_error(r67) goto L68 (error at _aggregate_miner_data:115) else goto L57
L57:
    r68 = CPy_ExceptionMatches(r67)
    dec_ref r67
    if r68 goto L58 else goto L64 :: bool
L58:
    r69 = __mypyc_self__.__mypyc_generator_attribute__gas_prices
    if is_error(r69) goto L68 (error at _aggregate_miner_data:116) else goto L59
L59:
    r70 = builtins :: module
    r71 = 'min'
    r72 = CPyObject_GetAttr(r70, r71)
    if is_error(r72) goto L113 (error at _aggregate_miner_data:116) else goto L60
L60:
    r73 = [r69]
    r74 = load_address r73
    r75 = PyObject_Vectorcall(r72, r74, 1, 0)
    dec_ref r72
    if is_error(r75) goto L113 (error at _aggregate_miner_data:116) else goto L61
L61:
    dec_ref r69
    r76 = unbox(float, r75)
    dec_ref r75
    r77 = r76 == -113.0
    if r77 goto L63 else goto L62 :: bool
L62:
    __mypyc_self__.__mypyc_generator_attribute__price_percentile = r76; r78 = is_error
    if not r78 goto L68 (error at _aggregate_miner_data:116) else goto L66 :: bool
L63:
    r79 = PyErr_Occurred()
    if not is_error(r79) goto L68 (error at _aggregate_miner_data:116) else goto L62
L64:
    CPy_Reraise()
    if not 0 goto L68 else goto L65 :: bool
L65:
    unreachable
L66:
    r80 = __mypyc_self__.__mypyc_temp__8
    if is_error(r80) goto L96 (error at _aggregate_miner_data:-1) else goto L67
L67:
    CPy_RestoreExcInfo(r80)
    dec_ref r80
    goto L71
L68:
    r81 = __mypyc_self__.__mypyc_temp__8
    if is_error(r81) goto L96 (error at _aggregate_miner_data:-1) else goto L69
L69:
    CPy_RestoreExcInfo(r81)
    dec_ref r81
    r82 = CPy_KeepPropagating()
    if not r82 goto L96 else goto L70 :: bool
L70:
    unreachable
L71:
    r83 = __mypyc_self__.__mypyc_generator_attribute__miner
    if is_error(r83) goto L96 (error at _aggregate_miner_data:118) else goto L72
L72:
    r84 = __mypyc_self__.__mypyc_generator_attribute__block_hashes
    if is_error(r84) goto L114 (error at _aggregate_miner_data:119) else goto L73
L73:
    r85 = PySet_New(r84)
    dec_ref r84
    if is_error(r85) goto L114 (error at _aggregate_miner_data:119) else goto L74
L74:
    r86 = get_element_ptr r85 used :: PySetObject
    r87 = load_mem r86 :: native_int*
    dec_ref r85
    r88 = r87 << 1
    r89 = __mypyc_self__.__mypyc_generator_attribute__gas_prices
    if is_error(r89) goto L114 (error at _aggregate_miner_data:120) else goto L75
L75:
    r90 = builtins :: module
    r91 = 'min'
    r92 = CPyObject_GetAttr(r90, r91)
    if is_error(r92) goto L115 (error at _aggregate_miner_data:120) else goto L76
L76:
    r93 = [r89]
    r94 = load_address r93
    r95 = PyObject_Vectorcall(r92, r94, 1, 0)
    dec_ref r92
    if is_error(r95) goto L115 (error at _aggregate_miner_data:120) else goto L77
L77:
    dec_ref r89
    r96 = __mypyc_self__.__mypyc_generator_attribute__price_percentile
    r97 = r96 == -113.0
    if r97 goto L79 else goto L78 :: bool
L78:
    r98 = faster_web3.gas_strategies.time_based.globals :: static
    r99 = 'MinerData'
    r100 = CPyDict_GetItem(r98, r99)
    if is_error(r100) goto L116 (error at _aggregate_miner_data:117) else goto L80
L79:
    r101 = PyErr_Occurred()
    if not is_error(r101) goto L116 (error at _aggregate_miner_data:121) else goto L78
L80:
    r102 = box(short_int, r88)
    r103 = box(float, r96)
    r104 = [r83, r102, r95, r103]
    r105 = load_address r104
    r106 = PyObject_Vectorcall(r100, r105, 4, 0)
    dec_ref r100
    if is_error(r106) goto L117 (error at _aggregate_miner_data:117) else goto L81
L81:
    dec_ref r83
    dec_ref r102
    dec_ref r95
    dec_ref r103
    r107 = cast(tuple, r106)
    if is_error(r107) goto L96 (error at _aggregate_miner_data:117) else goto L82
L82:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r107
L83:
    r109 = load_address _Py_NoneStruct
    r110 = type != r109
    if r110 goto L84 else goto L13 :: bool
L84:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L96 (error at _aggregate_miner_data:117) else goto L85 :: bool
L85:
    unreachable
L86:
    r111 = CPy_NoErrOccurred()
    if not r111 goto L96 (error at _aggregate_miner_data:110) else goto L87 :: bool
L87:
    r112 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L88:
    if is_error(stop_iter_ptr) goto L89 else goto L91
L89:
    CPyGen_SetStopIterationValue(r112)
    if not 0 goto L96 else goto L90 :: bool
L90:
    unreachable
L91:
    inc_ref r112
    set_mem stop_iter_ptr, r112 :: builtins.object*
    return 0
L92:
    r114 = r0 == 0
    if r114 goto L1 else goto L93 :: bool
L93:
    r115 = r0 == 1
    if r115 goto L83 else goto L94 :: bool
L94:
    r116 = raise StopIteration
    if not r116 goto L96 (error at _aggregate_miner_data:105) else goto L95 :: bool
L95:
    unreachable
L96:
    r117 = <error> :: object
    return r117
L97:
    dec_ref r3
    goto L96
L98:
    dec_ref r12
    goto L96
L99:
    dec_ref r16
    goto L96
L100:
    dec_ref r17
    goto L96
L101:
    dec_ref r22
    goto L17
L102:
    dec_ref r22
    goto L96
L103:
    dec_ref r22
    goto L21
L104:
    dec_ref r29
    goto L25
L105:
    dec_ref r32
    goto L96
L106:
    dec_ref r35
    goto L96
L107:
    dec_ref r37
    goto L96
L108:
    dec_ref r44
    goto L35
L109:
    dec_ref r44
    goto L96
L110:
    dec_ref r44
    goto L39
L111:
    dec_ref r44
    goto L44
L112:
    dec_ref r56
    goto L49
L113:
    dec_ref r69
    goto L68
L114:
    dec_ref r83
    goto L96
L115:
    dec_ref r83
    dec_ref r89
    goto L96
L116:
    dec_ref r83
    dec_ref r95
    goto L96
L117:
    dec_ref r83
    dec_ref r95
    dec_ref r102
    dec_ref r103
    goto L96

def _aggregate_miner_data_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _aggregate_miner_data_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _aggregate_miner_data_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _aggregate_miner_data_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _aggregate_miner_data_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def _aggregate_miner_data_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = _aggregate_miner_data_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def _aggregate_miner_data_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def _aggregate_miner_data(raw_data):
    raw_data :: object
    r0 :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
    r1, r2 :: bool
    r3 :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
L0:
    r0 = _aggregate_miner_data_gen()
    if is_error(r0) goto L3 (error at _aggregate_miner_data:105) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref raw_data
    r0.__mypyc_generator_attribute__raw_data = raw_data; r2 = is_error
    if not r2 goto L4 (error at _aggregate_miner_data:105) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
    return r3
L4:
    dec_ref r0
    goto L3

def _compute_probabilities_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._compute_probabilities_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0 :: i32
    r1 :: object
    r2 :: bit
    r3 :: object
    r4 :: str
    r5 :: object
    r6 :: str
    r7 :: object
    r8 :: object[1]
    r9 :: object_ptr
    r10, r11 :: object
    r12 :: str
    r13, r14 :: object
    r15 :: object[3]
    r16 :: object_ptr
    r17, r18 :: object
    r19 :: list
    r20 :: tuple
    r21 :: bool
    r22 :: tuple
    r23 :: ptr
    r24 :: native_int
    r25 :: short_int
    r26, r27 :: bool
    r28 :: short_int
    r29 :: bool
    r30, r31 :: short_int
    r32 :: bit
    r33 :: tuple
    r34 :: int
    r35 :: object
    r36 :: tuple
    r37 :: object
    r38 :: bool
    r39, r40 :: object
    r41 :: tuple
    r42 :: int
    r43 :: object
    r44 :: tuple
    r45 :: bool
    r46 :: tuple
    r47 :: ptr
    r48 :: native_int
    r49, r50 :: bool
    r51, r52 :: native_int
    r53 :: bit
    r54 :: tuple
    r55 :: native_int
    r56 :: object
    r57 :: tuple
    r58 :: bool
    r59 :: tuple
    r60, r61 :: object
    r62, r63 :: native_int
    r64, r65 :: bool
    r66 :: int
    r67, r68, r69 :: object
    r70 :: int
    r71, r72 :: object
    r73 :: bool
    r74 :: object
    r75 :: int
    r76, r77, r78, r79 :: object
    r80 :: bool
    r81, r82 :: object
    r83 :: dict
    r84 :: str
    r85 :: object
    r86 :: object[2]
    r87 :: object_ptr
    r88 :: object
    r89 :: tuple
    r90 :: bool
    r91 :: object
    r92 :: bit
    r93, r94 :: short_int
    r95, r96 :: bool
    r97 :: object
    r98 :: bool
    r99, r100 :: bit
    r101 :: bool
    r102 :: object
L0:
    r0 = __mypyc_self__.__mypyc_next_label__
    goto L76
L1:
    r1 = load_address _Py_NoneStruct
    r2 = type != r1
    if r2 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L80 (error at _compute_probabilities:126) else goto L3 :: bool
L3:
    unreachable
L4:
    r3 = __mypyc_self__.__mypyc_generator_attribute__miner_data
    if is_error(r3) goto L80 (error at _compute_probabilities:135) else goto L5
L5:
    r4 = 'low_percentile_gas_price'
    r5 = operator :: module
    r6 = 'attrgetter'
    r7 = CPyObject_GetAttr(r5, r6)
    if is_error(r7) goto L81 (error at _compute_probabilities:136) else goto L6
L6:
    r8 = [r4]
    r9 = load_address r8
    r10 = PyObject_Vectorcall(r7, r9, 1, 0)
    dec_ref r7
    if is_error(r10) goto L81 (error at _compute_probabilities:136) else goto L7
L7:
    r11 = builtins :: module
    r12 = 'sorted'
    r13 = CPyObject_GetAttr(r11, r12)
    if is_error(r13) goto L82 (error at _compute_probabilities:134) else goto L8
L8:
    r14 = box(bool, 1)
    r15 = [r3, r10, r14]
    r16 = load_address r15
    r17 = ('key', 'reverse')
    r18 = PyObject_Vectorcall(r13, r16, 1, r17)
    dec_ref r13
    if is_error(r18) goto L82 (error at _compute_probabilities:134) else goto L9
L9:
    dec_ref r3
    dec_ref r10
    r19 = cast(list, r18)
    if is_error(r19) goto L80 (error at _compute_probabilities:134) else goto L10
L10:
    r20 = PyList_AsTuple(r19)
    dec_ref r19
    if is_error(r20) goto L80 (error at _compute_probabilities:133) else goto L11
L11:
    __mypyc_self__.__mypyc_generator_attribute__miner_data_by_price = r20; r21 = is_error
    if not r21 goto L80 (error at _compute_probabilities:133) else goto L12 :: bool
L12:
    r22 = __mypyc_self__.__mypyc_generator_attribute__miner_data_by_price
    if is_error(r22) goto L80 (error at _compute_probabilities:140) else goto L13
L13:
    r23 = get_element_ptr r22 ob_size :: PyVarObject
    r24 = load_mem r23 :: native_int*
    dec_ref r22
    r25 = r24 << 1
    __mypyc_self__.__mypyc_temp__9 = r25; r26 = is_error
    if not r26 goto L80 (error at _compute_probabilities:-1) else goto L14 :: bool
L14:
    __mypyc_self__.__mypyc_temp__10 = 0; r27 = is_error
    if not r27 goto L80 (error at _compute_probabilities:-1) else goto L15 :: bool
L15:
    r28 = __mypyc_self__.__mypyc_temp__10
    if is_error(r28) goto L80 (error at _compute_probabilities:140) else goto L16
L16:
    __mypyc_self__.__mypyc_generator_attribute__idx = r28; r29 = is_error
    if not r29 goto L80 (error at _compute_probabilities:140) else goto L17 :: bool
L17:
    r30 = __mypyc_self__.__mypyc_temp__10
    if is_error(r30) goto L80 (error at _compute_probabilities:140) else goto L18
L18:
    r31 = __mypyc_self__.__mypyc_temp__9
    if is_error(r31) goto L80 (error at _compute_probabilities:140) else goto L19
L19:
    r32 = r30 < r31 :: signed
    if r32 goto L20 else goto L71 :: bool
L20:
    r33 = __mypyc_self__.__mypyc_generator_attribute__miner_data_by_price
    if is_error(r33) goto L80 (error at _compute_probabilities:141) else goto L21
L21:
    r34 = __mypyc_self__.__mypyc_generator_attribute__idx
    if is_error(r34) goto L83 (error at _compute_probabilities:141) else goto L22
L22:
    r35 = CPySequenceTuple_GetItem(r33, r34)
    dec_ref r33
    dec_ref r34 :: int
    if is_error(r35) goto L80 (error at _compute_probabilities:141) else goto L23
L23:
    r36 = cast(tuple, r35)
    if is_error(r36) goto L80 (error at _compute_probabilities:141) else goto L24
L24:
    r37 = CPySequenceTuple_GetItem(r36, 6)
    dec_ref r36
    if is_error(r37) goto L80 (error at _compute_probabilities:141) else goto L25
L25:
    __mypyc_self__.__mypyc_generator_attribute__low_percentile_gas_price = r37; r38 = is_error
    if not r38 goto L80 (error at _compute_probabilities:141) else goto L26 :: bool
L26:
    r39 = object 0
    inc_ref r39
    r40 = r39
    r41 = __mypyc_self__.__mypyc_generator_attribute__miner_data_by_price
    if is_error(r41) goto L84 (error at _compute_probabilities:143) else goto L27
L27:
    r42 = __mypyc_self__.__mypyc_generator_attribute__idx
    if is_error(r42) goto L85 (error at _compute_probabilities:143) else goto L28
L28:
    r43 = CPySequenceTuple_GetSlice(r41, r42, 9223372036854775806)
    dec_ref r41
    dec_ref r42 :: int
    if is_error(r43) goto L84 (error at _compute_probabilities:143) else goto L29
L29:
    r44 = cast(tuple, r43)
    if is_error(r44) goto L84 (error at _compute_probabilities:143) else goto L30
L30:
    __mypyc_self__.__mypyc_temp__11 = r44; r45 = is_error
    if not r45 goto L84 (error at _compute_probabilities:-1) else goto L31 :: bool
L31:
    r46 = __mypyc_self__.__mypyc_temp__11
    if is_error(r46) goto L84 (error at _compute_probabilities:142) else goto L32
L32:
    r47 = get_element_ptr r46 ob_size :: PyVarObject
    r48 = load_mem r47 :: native_int*
    dec_ref r46
    __mypyc_self__.__mypyc_temp__12 = r48; r49 = is_error
    if not r49 goto L84 (error at _compute_probabilities:-1) else goto L33 :: bool
L33:
    __mypyc_self__.__mypyc_temp__13 = 0; r50 = is_error
    if not r50 goto L84 (error at _compute_probabilities:-1) else goto L34 :: bool
L34:
    r51 = __mypyc_self__.__mypyc_temp__12
    if is_error(r51) goto L84 (error at _compute_probabilities:142) else goto L35
L35:
    r52 = __mypyc_self__.__mypyc_temp__13
    if is_error(r52) goto L84 (error at _compute_probabilities:142) else goto L36
L36:
    r53 = r52 < r51 :: signed
    if r53 goto L37 else goto L47 :: bool
L37:
    r54 = __mypyc_self__.__mypyc_temp__11
    if is_error(r54) goto L84 (error at _compute_probabilities:142) else goto L38
L38:
    r55 = __mypyc_self__.__mypyc_temp__13
    if is_error(r55) goto L86 (error at _compute_probabilities:142) else goto L39
L39:
    r56 = CPySequenceTuple_GetItemUnsafe(r54, r55)
    dec_ref r54
    r57 = cast(tuple, r56)
    if is_error(r57) goto L84 (error at _compute_probabilities:142) else goto L40
L40:
    __mypyc_self__.__mypyc_generator_attribute__m = r57; r58 = is_error
    if not r58 goto L84 (error at _compute_probabilities:142) else goto L41 :: bool
L41:
    r59 = __mypyc_self__.__mypyc_generator_attribute__m
    if is_error(r59) goto L84 (error at _compute_probabilities:143) else goto L42
L42:
    r60 = CPySequenceTuple_GetItem(r59, 2)
    dec_ref r59
    if is_error(r60) goto L84 (error at _compute_probabilities:143) else goto L43
L43:
    r61 = PyNumber_Add(r40, r60)
    dec_ref r40
    dec_ref r60
    if is_error(r61) goto L80 (error at _compute_probabilities:-1) else goto L44
L44:
    r40 = r61
L45:
    r62 = __mypyc_self__.__mypyc_temp__13
    if is_error(r62) goto L84 (error at _compute_probabilities:142) else goto L46
L46:
    r63 = r62 + 1
    __mypyc_self__.__mypyc_temp__13 = r63; r64 = is_error
    if not r64 goto L84 (error at _compute_probabilities:142) else goto L34 :: bool
L47:
    __mypyc_self__.__mypyc_generator_attribute__num_blocks_accepting_price = r40; r65 = is_error
    if not r65 goto L80 (error at _compute_probabilities:142) else goto L48 :: bool
L48:
    r66 = __mypyc_self__.__mypyc_generator_attribute__sample_size
    if is_error(r66) goto L80 (error at _compute_probabilities:145) else goto L49
L49:
    r67 = __mypyc_self__.__mypyc_generator_attribute__num_blocks_accepting_price
    if is_error(r67) goto L87 (error at _compute_probabilities:145) else goto L50
L50:
    r68 = box(int, r66)
    r69 = PyNumber_Subtract(r68, r67)
    dec_ref r68
    dec_ref r67
    if is_error(r69) goto L80 (error at _compute_probabilities:145) else goto L51
L51:
    r70 = __mypyc_self__.__mypyc_generator_attribute__sample_size
    if is_error(r70) goto L88 (error at _compute_probabilities:145) else goto L52
L52:
    r71 = box(int, r70)
    r72 = PyNumber_TrueDivide(r69, r71)
    dec_ref r69
    dec_ref r71
    if is_error(r72) goto L80 (error at _compute_probabilities:145) else goto L53
L53:
    __mypyc_self__.__mypyc_generator_attribute__inv_prob_per_block = r72; r73 = is_error
    if not r73 goto L80 (error at _compute_probabilities:145) else goto L54 :: bool
L54:
    r74 = __mypyc_self__.__mypyc_generator_attribute__inv_prob_per_block
    if is_error(r74) goto L80 (error at _compute_probabilities:146) else goto L55
L55:
    r75 = __mypyc_self__.__mypyc_generator_attribute__wait_blocks
    if is_error(r75) goto L89 (error at _compute_probabilities:146) else goto L56
L56:
    r76 = box(int, r75)
    r77 = CPyNumber_Power(r74, r76)
    dec_ref r74
    dec_ref r76
    if is_error(r77) goto L80 (error at _compute_probabilities:146) else goto L57
L57:
    r78 = object 1
    r79 = PyNumber_Subtract(r78, r77)
    dec_ref r77
    if is_error(r79) goto L80 (error at _compute_probabilities:146) else goto L58
L58:
    __mypyc_self__.__mypyc_generator_attribute__probability_accepted = r79; r80 = is_error
    if not r80 goto L80 (error at _compute_probabilities:146) else goto L59 :: bool
L59:
    r81 = __mypyc_self__.__mypyc_generator_attribute__low_percentile_gas_price
    if is_error(r81) goto L80 (error at _compute_probabilities:147) else goto L60
L60:
    r82 = __mypyc_self__.__mypyc_generator_attribute__probability_accepted
    if is_error(r82) goto L90 (error at _compute_probabilities:147) else goto L61
L61:
    r83 = faster_web3.gas_strategies.time_based.globals :: static
    r84 = 'Probability'
    r85 = CPyDict_GetItem(r83, r84)
    if is_error(r85) goto L91 (error at _compute_probabilities:147) else goto L62
L62:
    r86 = [r81, r82]
    r87 = load_address r86
    r88 = PyObject_Vectorcall(r85, r87, 2, 0)
    dec_ref r85
    if is_error(r88) goto L91 (error at _compute_probabilities:147) else goto L63
L63:
    dec_ref r81
    dec_ref r82
    r89 = cast(tuple, r88)
    if is_error(r89) goto L80 (error at _compute_probabilities:147) else goto L64
L64:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r89
L65:
    r91 = load_address _Py_NoneStruct
    r92 = type != r91
    if r92 goto L66 else goto L68 :: bool
L66:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L80 (error at _compute_probabilities:147) else goto L67 :: bool
L67:
    unreachable
L68:
    r93 = __mypyc_self__.__mypyc_temp__10
    if is_error(r93) goto L80 (error at _compute_probabilities:140) else goto L69
L69:
    r94 = r93 + 2
    __mypyc_self__.__mypyc_temp__10 = r94; r95 = is_error
    if not r95 goto L80 (error at _compute_probabilities:140) else goto L70 :: bool
L70:
    __mypyc_self__.__mypyc_generator_attribute__idx = r94; r96 = is_error
    if not r96 goto L80 (error at _compute_probabilities:140) else goto L17 :: bool
L71:
    r97 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L72:
    if is_error(stop_iter_ptr) goto L73 else goto L75
L73:
    CPyGen_SetStopIterationValue(r97)
    if not 0 goto L80 else goto L74 :: bool
L74:
    unreachable
L75:
    inc_ref r97
    set_mem stop_iter_ptr, r97 :: builtins.object*
    return 0
L76:
    r99 = r0 == 0
    if r99 goto L1 else goto L77 :: bool
L77:
    r100 = r0 == 1
    if r100 goto L65 else goto L78 :: bool
L78:
    r101 = raise StopIteration
    if not r101 goto L80 (error at _compute_probabilities:126) else goto L79 :: bool
L79:
    unreachable
L80:
    r102 = <error> :: object
    return r102
L81:
    dec_ref r3
    goto L80
L82:
    dec_ref r3
    dec_ref r10
    goto L80
L83:
    dec_ref r33
    goto L80
L84:
    dec_ref r40
    goto L80
L85:
    dec_ref r40
    dec_ref r41
    goto L80
L86:
    dec_ref r40
    dec_ref r54
    goto L80
L87:
    dec_ref r66 :: int
    goto L80
L88:
    dec_ref r69
    goto L80
L89:
    dec_ref r74
    goto L80
L90:
    dec_ref r81
    goto L80
L91:
    dec_ref r81
    dec_ref r82
    goto L80

def _compute_probabilities_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._compute_probabilities_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _compute_probabilities_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _compute_probabilities_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._compute_probabilities_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _compute_probabilities_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _compute_probabilities_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._compute_probabilities_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def _compute_probabilities_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._compute_probabilities_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = _compute_probabilities_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def _compute_probabilities_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based._compute_probabilities_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def _compute_probabilities(miner_data, wait_blocks, sample_size):
    miner_data :: object
    wait_blocks, sample_size :: int
    r0 :: faster_web3.gas_strategies.time_based._compute_probabilities_gen
    r1, r2, r3, r4 :: bool
    r5 :: object
L0:
    r0 = _compute_probabilities_gen()
    if is_error(r0) goto L5 (error at _compute_probabilities:126) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref miner_data
    r0.__mypyc_generator_attribute__miner_data = miner_data; r2 = is_error
    if not r2 goto L6 (error at _compute_probabilities:126) else goto L2 :: bool
L2:
    inc_ref wait_blocks :: int
    r0.__mypyc_generator_attribute__wait_blocks = wait_blocks; r3 = is_error
    if not r3 goto L6 (error at _compute_probabilities:126) else goto L3 :: bool
L3:
    inc_ref sample_size :: int
    r0.__mypyc_generator_attribute__sample_size = sample_size; r4 = is_error
    if not r4 goto L6 (error at _compute_probabilities:126) else goto L4 :: bool
L4:
    return r0
L5:
    r5 = <error> :: object
    return r5
L6:
    dec_ref r0
    goto L5

def _compute_gas_price(probabilities, desired_probability):
    probabilities :: object
    desired_probability :: float
    r0, r1 :: object
    r2 :: tuple
    r3, r4 :: object
    r5 :: tuple
    r6, r7, r8 :: object
    r9 :: i32
    r10 :: bit
    r11 :: bool
    r12, r13 :: object
    r14 :: object[1]
    r15 :: object_ptr
    r16 :: object
    r17 :: int
    r18, r19, r20 :: object
    r21 :: i32
    r22 :: bit
    r23 :: bool
    r24, r25 :: object
    r26 :: object[1]
    r27 :: object_ptr
    r28 :: object
    r29 :: int
    r30 :: dict
    r31 :: str
    r32, r33 :: object
    r34 :: object[2]
    r35 :: object_ptr
    r36, r37, r38, r39, r40 :: object
    r41 :: bool
    r42 :: object
    r43 :: bool
    r44 :: object
    r45 :: bool
    r46 :: str
    r47, r48, r49 :: object
    r50 :: i32
    r51 :: bit
    r52 :: bool
    r53 :: str
    r54, r55, r56 :: object
    r57 :: i32
    r58 :: bit
    r59 :: bool
    r60 :: str
    r61 :: object
    r62 :: str
    r63 :: object
    r64 :: object[1]
    r65 :: object_ptr
    r66 :: object
    r67 :: str
    r68, r69, r70 :: object
    r71 :: str
    r72 :: object
    r73 :: str
    r74, r75, r76 :: object
    r77 :: str
    r78 :: object
    r79 :: str
    r80, r81 :: object
    r82 :: str
    r83, r84, r85, r86 :: object
    r87 :: str
    r88 :: object
    r89 :: object[1]
    r90 :: object_ptr
    r91, r92 :: object
    r93 :: object[1]
    r94 :: object_ptr
    r95 :: object
    r96 :: int
    r97 :: bit
    r98 :: str
    r99 :: object
    r100 :: str
    r101 :: object
    r102 :: object[1]
    r103 :: object_ptr
    r104 :: object
    r105 :: int
L0:
    r0 = object 0
    r1 = PyObject_GetItem(probabilities, r0)
    if is_error(r1) goto L68 (error at _compute_gas_price:163) else goto L1
L1:
    r2 = cast(tuple, r1)
    if is_error(r2) goto L68 (error at _compute_gas_price:163) else goto L2
L2:
    r3 = object -1
    r4 = PyObject_GetItem(probabilities, r3)
    if is_error(r4) goto L69 (error at _compute_gas_price:164) else goto L3
L3:
    r5 = cast(tuple, r4)
    if is_error(r5) goto L69 (error at _compute_gas_price:164) else goto L4
L4:
    r6 = CPySequenceTuple_GetItem(r2, 2)
    if is_error(r6) goto L70 (error at _compute_gas_price:166) else goto L5
L5:
    r7 = box(float, desired_probability)
    r8 = PyObject_RichCompare(r7, r6, 5)
    dec_ref r7
    dec_ref r6
    if is_error(r8) goto L70 (error at _compute_gas_price:166) else goto L6
L6:
    r9 = PyObject_IsTrue(r8)
    dec_ref r8
    r10 = r9 >= 0 :: signed
    if not r10 goto L70 (error at _compute_gas_price:166) else goto L7 :: bool
L7:
    r11 = truncate r9: i32 to builtins.bool
    if r11 goto L71 else goto L72 :: bool
L8:
    r12 = CPySequenceTuple_GetItem(r2, 0)
    dec_ref r2
    if is_error(r12) goto L68 (error at _compute_gas_price:167) else goto L9
L9:
    r13 = load_address PyLong_Type
    r14 = [r12]
    r15 = load_address r14
    r16 = PyObject_Vectorcall(r13, r15, 1, 0)
    if is_error(r16) goto L73 (error at _compute_gas_price:167) else goto L10
L10:
    dec_ref r12
    r17 = unbox(int, r16)
    dec_ref r16
    if is_error(r17) goto L68 (error at _compute_gas_price:167) else goto L11
L11:
    return r17
L12:
    r18 = CPySequenceTuple_GetItem(r5, 2)
    if is_error(r18) goto L74 (error at _compute_gas_price:168) else goto L13
L13:
    r19 = box(float, desired_probability)
    r20 = PyObject_RichCompare(r19, r18, 1)
    dec_ref r19
    dec_ref r18
    if is_error(r20) goto L74 (error at _compute_gas_price:168) else goto L14
L14:
    r21 = PyObject_IsTrue(r20)
    dec_ref r20
    r22 = r21 >= 0 :: signed
    if not r22 goto L74 (error at _compute_gas_price:168) else goto L15 :: bool
L15:
    r23 = truncate r21: i32 to builtins.bool
    if r23 goto L16 else goto L75 :: bool
L16:
    r24 = CPySequenceTuple_GetItem(r5, 0)
    dec_ref r5
    if is_error(r24) goto L68 (error at _compute_gas_price:169) else goto L17
L17:
    r25 = load_address PyLong_Type
    r26 = [r24]
    r27 = load_address r26
    r28 = PyObject_Vectorcall(r25, r27, 1, 0)
    if is_error(r28) goto L76 (error at _compute_gas_price:169) else goto L18
L18:
    dec_ref r24
    r29 = unbox(int, r28)
    dec_ref r28
    if is_error(r29) goto L68 (error at _compute_gas_price:169) else goto L19
L19:
    return r29
L20:
    r30 = faster_web3.gas_strategies.time_based.globals :: static
    r31 = 'sliding_window'
    r32 = CPyDict_GetItem(r30, r31)
    if is_error(r32) goto L68 (error at _compute_gas_price:171) else goto L21
L21:
    r33 = object 2
    r34 = [r33, probabilities]
    r35 = load_address r34
    r36 = PyObject_Vectorcall(r32, r35, 2, 0)
    dec_ref r32
    if is_error(r36) goto L68 (error at _compute_gas_price:171) else goto L22
L22:
    r37 = PyObject_GetIter(r36)
    dec_ref r36
    if is_error(r37) goto L68 (error at _compute_gas_price:171) else goto L23
L23:
    r38 = PyIter_Next(r37)
    if is_error(r38) goto L77 else goto L24
L24:
    r39 = PyObject_GetIter(r38)
    dec_ref r38
    if is_error(r39) goto L78 (error at _compute_gas_price:171) else goto L25
L25:
    r40 = PyIter_Next(r39)
    if is_error(r40) goto L79 else goto L28
L26:
    r41 = raise ValueError('not enough values to unpack')
    if not r41 goto L68 (error at _compute_gas_price:171) else goto L27 :: bool
L27:
    unreachable
L28:
    r42 = PyIter_Next(r39)
    if is_error(r42) goto L80 else goto L31
L29:
    r43 = raise ValueError('not enough values to unpack')
    if not r43 goto L68 (error at _compute_gas_price:171) else goto L30 :: bool
L30:
    unreachable
L31:
    r44 = PyIter_Next(r39)
    dec_ref r39
    if is_error(r44) goto L34 else goto L81
L32:
    r45 = raise ValueError('too many values to unpack')
    if not r45 goto L68 (error at _compute_gas_price:171) else goto L33 :: bool
L33:
    unreachable
L34:
    r46 = 'prob'
    r47 = CPyObject_GetAttr(r42, r46)
    if is_error(r47) goto L82 (error at _compute_gas_price:172) else goto L35
L35:
    r48 = box(float, desired_probability)
    r49 = PyObject_RichCompare(r48, r47, 0)
    dec_ref r48
    dec_ref r47
    if is_error(r49) goto L82 (error at _compute_gas_price:172) else goto L36
L36:
    r50 = PyObject_IsTrue(r49)
    dec_ref r49
    r51 = r50 >= 0 :: signed
    if not r51 goto L82 (error at _compute_gas_price:172) else goto L37 :: bool
L37:
    r52 = truncate r50: i32 to builtins.bool
    if r52 goto L83 else goto L84 :: bool
L38:
    r53 = 'prob'
    r54 = CPyObject_GetAttr(r40, r53)
    if is_error(r54) goto L85 (error at _compute_gas_price:174) else goto L39
L39:
    r55 = box(float, desired_probability)
    r56 = PyObject_RichCompare(r55, r54, 4)
    dec_ref r55
    dec_ref r54
    if is_error(r56) goto L85 (error at _compute_gas_price:174) else goto L40
L40:
    r57 = PyObject_IsTrue(r56)
    dec_ref r56
    r58 = r57 >= 0 :: signed
    if not r58 goto L85 (error at _compute_gas_price:174) else goto L41 :: bool
L41:
    r59 = truncate r57: i32 to builtins.bool
    if r59 goto L86 else goto L46 :: bool
L42:
    r60 = 'Invariant'
    r61 = builtins :: module
    r62 = 'Exception'
    r63 = CPyObject_GetAttr(r61, r62)
    if is_error(r63) goto L68 (error at _compute_gas_price:178) else goto L43
L43:
    r64 = [r60]
    r65 = load_address r64
    r66 = PyObject_Vectorcall(r63, r65, 1, 0)
    dec_ref r63
    if is_error(r66) goto L68 (error at _compute_gas_price:178) else goto L44
L44:
    CPy_Raise(r66)
    dec_ref r66
    if not 0 goto L68 (error at _compute_gas_price:178) else goto L45 :: bool
L45:
    unreachable
L46:
    r67 = 'prob'
    r68 = CPyObject_GetAttr(r42, r67)
    if is_error(r68) goto L85 (error at _compute_gas_price:180) else goto L47
L47:
    r69 = box(float, desired_probability)
    r70 = PyNumber_Subtract(r69, r68)
    dec_ref r69
    dec_ref r68
    if is_error(r70) goto L85 (error at _compute_gas_price:180) else goto L48
L48:
    r71 = 'prob'
    r72 = CPyObject_GetAttr(r40, r71)
    if is_error(r72) goto L87 (error at _compute_gas_price:181) else goto L49
L49:
    r73 = 'prob'
    r74 = CPyObject_GetAttr(r42, r73)
    if is_error(r74) goto L88 (error at _compute_gas_price:181) else goto L50
L50:
    r75 = PyNumber_Subtract(r72, r74)
    dec_ref r72
    dec_ref r74
    if is_error(r75) goto L87 (error at _compute_gas_price:181) else goto L51
L51:
    r76 = PyNumber_TrueDivide(r70, r75)
    dec_ref r70
    dec_ref r75
    if is_error(r76) goto L85 (error at _compute_gas_price:182) else goto L52
L52:
    r77 = 'gas_price'
    r78 = CPyObject_GetAttr(r40, r77)
    dec_ref r40
    if is_error(r78) goto L89 (error at _compute_gas_price:183) else goto L53
L53:
    r79 = 'gas_price'
    r80 = CPyObject_GetAttr(r42, r79)
    if is_error(r80) goto L90 (error at _compute_gas_price:183) else goto L54
L54:
    r81 = PyNumber_Subtract(r78, r80)
    dec_ref r78
    dec_ref r80
    if is_error(r81) goto L89 (error at _compute_gas_price:183) else goto L55
L55:
    r82 = 'gas_price'
    r83 = CPyObject_GetAttr(r42, r82)
    dec_ref r42
    if is_error(r83) goto L91 (error at _compute_gas_price:184) else goto L56
L56:
    r84 = PyNumber_Multiply(r81, r76)
    dec_ref r81
    dec_ref r76
    if is_error(r84) goto L92 (error at _compute_gas_price:184) else goto L57
L57:
    r85 = PyNumber_Add(r83, r84)
    dec_ref r83
    dec_ref r84
    if is_error(r85) goto L68 (error at _compute_gas_price:184) else goto L58
L58:
    r86 = math :: module
    r87 = 'ceil'
    r88 = CPyObject_GetAttr(r86, r87)
    if is_error(r88) goto L93 (error at _compute_gas_price:184) else goto L59
L59:
    r89 = [r85]
    r90 = load_address r89
    r91 = PyObject_Vectorcall(r88, r90, 1, 0)
    dec_ref r88
    if is_error(r91) goto L93 (error at _compute_gas_price:184) else goto L60
L60:
    dec_ref r85
    r92 = load_address PyLong_Type
    r93 = [r91]
    r94 = load_address r93
    r95 = PyObject_Vectorcall(r92, r94, 1, 0)
    if is_error(r95) goto L94 (error at _compute_gas_price:184) else goto L61
L61:
    dec_ref r91
    r96 = unbox(int, r95)
    dec_ref r95
    if is_error(r96) goto L68 (error at _compute_gas_price:184) else goto L62
L62:
    return r96
L63:
    r97 = CPy_NoErrOccurred()
    if not r97 goto L68 (error at _compute_gas_price:171) else goto L64 :: bool
L64:
    r98 = 'Invariant'
    r99 = builtins :: module
    r100 = 'Exception'
    r101 = CPyObject_GetAttr(r99, r100)
    if is_error(r101) goto L68 (error at _compute_gas_price:195) else goto L65
L65:
    r102 = [r98]
    r103 = load_address r102
    r104 = PyObject_Vectorcall(r101, r103, 1, 0)
    dec_ref r101
    if is_error(r104) goto L68 (error at _compute_gas_price:195) else goto L66
L66:
    CPy_Raise(r104)
    dec_ref r104
    if not 0 goto L68 (error at _compute_gas_price:195) else goto L67 :: bool
L67:
    unreachable
L68:
    r105 = <error> :: int
    return r105
L69:
    dec_ref r2
    goto L68
L70:
    dec_ref r2
    dec_ref r5
    goto L68
L71:
    dec_ref r5
    goto L8
L72:
    dec_ref r2
    goto L12
L73:
    dec_ref r12
    goto L68
L74:
    dec_ref r5
    goto L68
L75:
    dec_ref r5
    goto L20
L76:
    dec_ref r24
    goto L68
L77:
    dec_ref r37
    goto L63
L78:
    dec_ref r37
    goto L68
L79:
    dec_ref r37
    dec_ref r39
    goto L26
L80:
    dec_ref r37
    dec_ref r39
    dec_ref r40
    goto L29
L81:
    dec_ref r37
    dec_ref r40
    dec_ref r42
    dec_ref r44
    goto L32
L82:
    dec_ref r37
    dec_ref r40
    dec_ref r42
    goto L68
L83:
    dec_ref r40
    dec_ref r42
    goto L23
L84:
    dec_ref r37
    goto L38
L85:
    dec_ref r40
    dec_ref r42
    goto L68
L86:
    dec_ref r40
    dec_ref r42
    goto L42
L87:
    dec_ref r40
    dec_ref r42
    dec_ref r70
    goto L68
L88:
    dec_ref r40
    dec_ref r42
    dec_ref r70
    dec_ref r72
    goto L68
L89:
    dec_ref r42
    dec_ref r76
    goto L68
L90:
    dec_ref r42
    dec_ref r76
    dec_ref r78
    goto L68
L91:
    dec_ref r76
    dec_ref r81
    goto L68
L92:
    dec_ref r83
    goto L68
L93:
    dec_ref r85
    goto L68
L94:
    dec_ref r91
    goto L68

def time_based_gas_price_strategy_construct_time_based_gas_price_strategy_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2, r3 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    inc_ref __mypyc_self__
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    if is_error(r2) goto L4 else goto L3
L3:
    return r2
L4:
    r3 = <error> :: object
    return r3

def time_based_gas_price_strategy_construct_time_based_gas_price_strategy_obj.__call__(__mypyc_self__, w3, transaction_params):
    __mypyc_self__ :: faster_web3.gas_strategies.time_based.time_based_gas_price_strategy_construct_time_based_gas_price_strategy_obj
    w3 :: object
    transaction_params :: union[dict, None]
    r0 :: faster_web3.gas_strategies.time_based.construct_time_based_gas_price_strategy_env
    r1 :: str
    r2 :: object
    r3, r4 :: str
    r5 :: object[2]
    r6 :: object_ptr
    r7 :: object
    r8 :: str
    r9, r10, r11 :: object
    r12 :: i32
    r13 :: bit
    r14 :: bool
    r15 :: str
    r16 :: object
    r17 :: str
    r18 :: object
    r19 :: int
    r20 :: bool
    r21 :: int
    r22 :: float
    r23 :: bit
    avg_block_time :: float
    r24 :: object
    r25 :: int
    r26 :: float
    r27 :: bit
    r28 :: object
    r29 :: int
    r30 :: float
    r31, r32 :: bit
    r33 :: object
    r34 :: bool
    r35 :: float
    r36, r37 :: int
    r38 :: faster_web3.gas_strategies.time_based._get_raw_miner_data_gen
    raw_miner_data :: object
    r39 :: faster_web3.gas_strategies.time_based._aggregate_miner_data_gen
    miner_data :: object
    r40 :: int
    r41 :: dict
    r42 :: str
    r43, r44, r45 :: object
    r46 :: object[3]
    r47 :: object_ptr
    r48, r49 :: object
    r50 :: tuple
    r51 :: int
    r52 :: float
    r53 :: bit
    r54 :: int
    r55 :: object
    r56 :: int
L0:
    r0 = __mypyc_self__.__mypyc_env__
    if is_error(r0) goto L40 (error at time_based_gas_price_strategy:219) else goto L1
L1:
    r1 = 'eth'
    r2 = CPyObject_GetAttr(w3, r1)
    if is_error(r2) goto L41 (error at time_based_gas_price_strategy:221) else goto L2
L2:
    r3 = 'latest'
    r4 = 'get_block'
    r5 = [r2, r3]
    r6 = load_address r5
    r7 = PyObject_VectorcallMethod(r4, r6, 9223372036854775810, 0)
    if is_error(r7) goto L42 (error at time_based_gas_price_strategy:221) else goto L3
L3:
    dec_ref r2
    r8 = 'number'
    r9 = PyObject_GetItem(r7, r8)
    dec_ref r7
    if is_error(r9) goto L41 (error at time_based_gas_price_strategy:221) else goto L4
L4:
    r10 = object 0
    r11 = PyObject_RichCompare(r9, r10, 2)
    dec_ref r9
    if is_error(r11) goto L41 (error at time_based_gas_price_strategy:221) else goto L5
L5:
    r12 = PyObject_IsTrue(r11)
    dec_ref r11
    r13 = r12 >= 0 :: signed
    if not r13 goto L41 (error at time_based_gas_price_strategy:221) else goto L6 :: bool
L6:
    r14 = truncate r12: i32 to builtins.bool
    if r14 goto L43 else goto L11 :: bool
L7:
    r15 = 'eth'
    r16 = CPyObject_GetAttr(w3, r15)
    if is_error(r16) goto L40 (error at time_based_gas_price_strategy:222) else goto L8
L8:
    r17 = 'gas_price'
    r18 = CPyObject_GetAttr(r16, r17)
    dec_ref r16
    if is_error(r18) goto L40 (error at time_based_gas_price_strategy:222) else goto L9
L9:
    r19 = unbox(int, r18)
    dec_ref r18
    if is_error(r19) goto L40 (error at time_based_gas_price_strategy:222) else goto L10
L10:
    return r19
L11:
    r20 = r0.weighted
    if is_error(r20) goto L41 (error at time_based_gas_price_strategy:224) else goto L12
L12:
    if r20 goto L13 else goto L17 :: bool
L13:
    r21 = r0.sample_size
    if is_error(r21) goto L41 (error at time_based_gas_price_strategy:225) else goto L14
L14:
    r22 = _get_weighted_avg_block_time(w3, r21)
    dec_ref r21 :: int
    r23 = r22 == -113.0
    if r23 goto L16 else goto L15 :: bool
L15:
    avg_block_time = r22
    goto L21
L16:
    r24 = PyErr_Occurred()
    if not is_error(r24) goto L41 (error at time_based_gas_price_strategy:225) else goto L15
L17:
    r25 = r0.sample_size
    if is_error(r25) goto L41 (error at time_based_gas_price_strategy:227) else goto L18
L18:
    r26 = _get_avg_block_time(w3, r25)
    dec_ref r25 :: int
    r27 = r26 == -113.0
    if r27 goto L20 else goto L19 :: bool
L19:
    avg_block_time = r26
    goto L21
L20:
    r28 = PyErr_Occurred()
    if not is_error(r28) goto L41 (error at time_based_gas_price_strategy:227) else goto L19
L21:
    r29 = r0.max_wait_seconds
    if is_error(r29) goto L41 (error at time_based_gas_price_strategy:229) else goto L22
L22:
    r30 = CPyFloat_FromTagged(r29)
    dec_ref r29 :: int
    r31 = r30 == -113.0
    if r31 goto L24 else goto L23 :: bool
L23:
    r32 = avg_block_time == 0.0
    if r32 goto L44 else goto L27 :: bool
L24:
    r33 = PyErr_Occurred()
    if not is_error(r33) goto L41 (error at time_based_gas_price_strategy:229) else goto L23
L25:
    r34 = raise ZeroDivisionError('float division by zero')
    if not r34 goto L40 (error at time_based_gas_price_strategy:229) else goto L26 :: bool
L26:
    unreachable
L27:
    r35 = r30 / avg_block_time
    r36 = CPyFloat_Ceil(r35)
    if is_error(r36) goto L41 (error at time_based_gas_price_strategy:229) else goto L28
L28:
    r37 = r0.sample_size
    if is_error(r37) goto L45 (error at time_based_gas_price_strategy:230) else goto L29
L29:
    r38 = _get_raw_miner_data(w3, r37)
    dec_ref r37 :: int
    if is_error(r38) goto L45 (error at time_based_gas_price_strategy:230) else goto L30
L30:
    raw_miner_data = r38
    r39 = _aggregate_miner_data(raw_miner_data)
    dec_ref raw_miner_data
    if is_error(r39) goto L45 (error at time_based_gas_price_strategy:231) else goto L31
L31:
    miner_data = r39
    r40 = r0.sample_size
    if is_error(r40) goto L46 (error at time_based_gas_price_strategy:236) else goto L32
L32:
    r41 = faster_web3.gas_strategies.time_based.globals :: static
    r42 = '_compute_probabilities'
    r43 = CPyDict_GetItem(r41, r42)
    if is_error(r43) goto L47 (error at time_based_gas_price_strategy:233) else goto L33
L33:
    r44 = box(int, r36)
    r45 = box(int, r40)
    r46 = [miner_data, r44, r45]
    r47 = load_address r46
    r48 = ('wait_blocks', 'sample_size')
    r49 = PyObject_Vectorcall(r43, r47, 1, r48)
    dec_ref r43
    if is_error(r49) goto L48 (error at time_based_gas_price_strategy:233) else goto L34
L34:
    dec_ref miner_data
    dec_ref r44
    dec_ref r45
    r50 = cast(tuple, r49)
    if is_error(r50) goto L41 (error at time_based_gas_price_strategy:233) else goto L35
L35:
    r51 = r0.probability
    dec_ref r0
    if is_error(r51) goto L49 (error at time_based_gas_price_strategy:239) else goto L36
L36:
    r52 = CPyTagged_TrueDivide(r51, 200)
    dec_ref r51 :: int
    r53 = r52 == -113.0
    if r53 goto L38 else goto L37 :: bool
L37:
    r54 = _compute_gas_price(r50, r52)
    dec_ref r50
    if is_error(r54) goto L40 (error at time_based_gas_price_strategy:239) else goto L39
L38:
    r55 = PyErr_Occurred()
    if not is_error(r55) goto L49 (error at time_based_gas_price_strategy:239) else goto L37
L39:
    return r54
L40:
    r56 = <error> :: int
    return r56
L41:
    dec_ref r0
    goto L40
L42:
    dec_ref r0
    dec_ref r2
    goto L40
L43:
    dec_ref r0
    goto L7
L44:
    dec_ref r0
    goto L25
L45:
    dec_ref r0
    dec_ref r36 :: int
    goto L40
L46:
    dec_ref r0
    dec_ref r36 :: int
    dec_ref miner_data
    goto L40
L47:
    dec_ref r0
    dec_ref r36 :: int
    dec_ref miner_data
    dec_ref r40 :: int
    goto L40
L48:
    dec_ref r0
    dec_ref miner_data
    dec_ref r44
    dec_ref r45
    goto L40
L49:
    dec_ref r50
    goto L40

def construct_time_based_gas_price_strategy(max_wait_seconds, sample_size, probability, weighted):
    max_wait_seconds, sample_size, probability :: int
    weighted :: bool
    r0 :: faster_web3.gas_strategies.time_based.construct_time_based_gas_price_strategy_env
    r1, r2, r3, r4 :: bool
    r5 :: faster_web3.gas_strategies.time_based.time_based_gas_price_strategy_construct_time_based_gas_price_strategy_obj
    r6 :: bool
    time_based_gas_price_strategy, r7 :: object
L0:
    if is_error(sample_size) goto L1 else goto L15
L1:
    sample_size = 240
L2:
    if is_error(probability) goto L3 else goto L16
L3:
    probability = 196
L4:
    if is_error(weighted) goto L5 else goto L6
L5:
    weighted = 0
L6:
    r0 = construct_time_based_gas_price_strategy_env()
    if is_error(r0) goto L17 (error at construct_time_based_gas_price_strategy:199) else goto L7
L7:
    inc_ref max_wait_seconds :: int
    r0.max_wait_seconds = max_wait_seconds; r1 = is_error
    if not r1 goto L18 (error at construct_time_based_gas_price_strategy:199) else goto L8 :: bool
L8:
    r0.sample_size = sample_size; r2 = is_error
    if not r2 goto L19 (error at construct_time_based_gas_price_strategy:199) else goto L9 :: bool
L9:
    r0.probability = probability; r3 = is_error
    if not r3 goto L20 (error at construct_time_based_gas_price_strategy:199) else goto L10 :: bool
L10:
    r0.weighted = weighted; r4 = is_error
    if not r4 goto L20 (error at construct_time_based_gas_price_strategy:199) else goto L11 :: bool
L11:
    r5 = time_based_gas_price_strategy_construct_time_based_gas_price_strategy_obj()
    if is_error(r5) goto L20 (error at construct_time_based_gas_price_strategy:219) else goto L12
L12:
    r5.__mypyc_env__ = r0; r6 = is_error
    if not r6 goto L21 (error at construct_time_based_gas_price_strategy:219) else goto L13 :: bool
L13:
    time_based_gas_price_strategy = r5
    return time_based_gas_price_strategy
L14:
    r7 = <error> :: object
    return r7
L15:
    inc_ref sample_size :: int
    goto L2
L16:
    inc_ref probability :: int
    goto L4
L17:
    dec_ref sample_size :: int
    dec_ref probability :: int
    goto L14
L18:
    dec_ref sample_size :: int
    dec_ref probability :: int
    dec_ref r0
    goto L14
L19:
    dec_ref probability :: int
    dec_ref r0
    goto L14
L20:
    dec_ref r0
    goto L14
L21:
    dec_ref r5
    goto L14

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5, r6, r7 :: object_ptr
    r8 :: object_ptr[3]
    r9 :: c_ptr
    r10 :: native_int[3]
    r11 :: c_ptr
    r12 :: object
    r13 :: dict
    r14, r15 :: str
    r16 :: bit
    r17 :: object
    r18 :: str
    r19 :: dict
    r20, r21 :: object
    r22 :: str
    r23 :: dict
    r24, r25 :: object
    r26 :: str
    r27 :: dict
    r28, r29 :: object
    r30 :: str
    r31 :: dict
    r32, r33 :: object
    r34 :: str
    r35 :: dict
    r36, r37 :: object
    r38 :: str
    r39 :: dict
    r40, r41 :: object
    r42 :: str
    r43 :: dict
    r44, r45 :: object
    r46 :: str
    r47 :: dict
    r48, r49 :: object
    r50 :: str
    r51 :: dict
    r52 :: object
    r53, r54, r55, r56, r57 :: str
    r58 :: list
    r59, r60, r61, r62, r63 :: ptr
    r64 :: object
    r65 :: str
    r66 :: object
    r67 :: object[2]
    r68 :: object_ptr
    r69 :: object
    r70 :: dict
    r71 :: str
    r72 :: i32
    r73 :: bit
    r74, r75, r76 :: str
    r77 :: list
    r78, r79, r80 :: ptr
    r81 :: object
    r82 :: str
    r83 :: object
    r84 :: object[2]
    r85 :: object_ptr
    r86 :: object
    r87 :: dict
    r88 :: str
    r89 :: i32
    r90 :: bit
    r91 :: dict
    r92 :: str
    r93 :: object
    r94 :: dict
    r95 :: str
    r96 :: object
    r97 :: object[1]
    r98 :: object_ptr
    r99 :: object
    r100 :: dict
    r101 :: str
    r102 :: i32
    r103 :: bit
    r104 :: dict
    r105 :: str
    r106 :: object
    r107 :: dict
    r108 :: str
    r109 :: object
    r110 :: object[1]
    r111 :: object_ptr
    r112 :: object
    r113 :: dict
    r114 :: str
    r115 :: i32
    r116 :: bit
    r117 :: dict
    r118 :: str
    r119, r120, r121 :: object
    r122 :: object[2]
    r123 :: object_ptr
    r124, r125 :: object
    r126 :: dict
    r127 :: str
    r128 :: i32
    r129 :: bit
    r130 :: dict
    r131 :: str
    r132, r133, r134 :: object
    r135 :: object[2]
    r136 :: object_ptr
    r137, r138 :: object
    r139 :: dict
    r140 :: str
    r141 :: i32
    r142 :: bit
    r143 :: dict
    r144 :: str
    r145, r146, r147 :: object
    r148 :: object[2]
    r149 :: object_ptr
    r150, r151 :: object
    r152 :: dict
    r153 :: str
    r154 :: i32
    r155 :: bit
    r156 :: dict
    r157 :: str
    r158, r159, r160 :: object
    r161 :: object[2]
    r162 :: object_ptr
    r163, r164 :: object
    r165 :: dict
    r166 :: str
    r167 :: i32
    r168 :: bit
    r169 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L42 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address collections :: module
    r6 = load_address math :: module
    r7 = load_address operator :: module
    r8 = [r5, r6, r7]
    r9 = load_address r8
    r10 = [1, 2, 3]
    r11 = load_address r10
    r12 = (('collections', 'collections', 'collections'), ('math', 'math', 'math'), ('operator', 'operator', 'operator'))
    r13 = faster_web3.gas_strategies.time_based.globals :: static
    r14 = 'faster_web3/gas_strategies/time_based.py'
    r15 = '<module>'
    r16 = CPyImport_ImportMany(r12, r9, r13, r14, r15, r11)
    if not r16 goto L42 else goto L4 :: bool
L4:
    r17 = ('Final', 'Iterable', 'Optional', 'Sequence', 'Tuple')
    r18 = 'typing'
    r19 = faster_web3.gas_strategies.time_based.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L42 (error at <module>:4) else goto L5
L5:
    typing = r20 :: module
    dec_ref r20
    r21 = ('ChecksumAddress',)
    r22 = 'eth_typing'
    r23 = faster_web3.gas_strategies.time_based.globals :: static
    r24 = CPyImport_ImportFromMany(r22, r21, r21, r23)
    if is_error(r24) goto L42 (error at <module>:12) else goto L6
L6:
    eth_typing = r24 :: module
    dec_ref r24
    r25 = ('to_tuple',)
    r26 = 'faster_eth_utils'
    r27 = faster_web3.gas_strategies.time_based.globals :: static
    r28 = CPyImport_ImportFromMany(r26, r25, r25, r27)
    if is_error(r28) goto L42 (error at <module>:15) else goto L7
L7:
    faster_eth_utils = r28 :: module
    dec_ref r28
    r29 = ('curry', 'groupby', 'sliding_window')
    r30 = 'faster_eth_utils.toolz'
    r31 = faster_web3.gas_strategies.time_based.globals :: static
    r32 = CPyImport_ImportFromMany(r30, r29, r29, r31)
    if is_error(r32) goto L42 (error at <module>:18) else goto L8
L8:
    faster_eth_utils.toolz = r32 :: module
    dec_ref r32
    r33 = ('HexBytes',)
    r34 = 'faster_hexbytes'
    r35 = faster_web3.gas_strategies.time_based.globals :: static
    r36 = CPyImport_ImportFromMany(r34, r33, r33, r35)
    if is_error(r36) goto L42 (error at <module>:23) else goto L9
L9:
    faster_hexbytes = r36 :: module
    dec_ref r36
    r37 = ('Web3',)
    r38 = 'faster_web3'
    r39 = faster_web3.gas_strategies.time_based.globals :: static
    r40 = CPyImport_ImportFromMany(r38, r37, r37, r39)
    if is_error(r40) goto L42 (error at <module>:27) else goto L10
L10:
    faster_web3 = r40 :: module
    dec_ref r40
    r41 = ('percentile',)
    r42 = 'faster_web3._utils.math'
    r43 = faster_web3.gas_strategies.time_based.globals :: static
    r44 = CPyImport_ImportFromMany(r42, r41, r41, r43)
    if is_error(r44) goto L42 (error at <module>:30) else goto L11
L11:
    faster_web3._utils.math = r44 :: module
    dec_ref r44
    r45 = ('InsufficientData', 'Web3ValidationError')
    r46 = 'faster_web3.exceptions'
    r47 = faster_web3.gas_strategies.time_based.globals :: static
    r48 = CPyImport_ImportFromMany(r46, r45, r45, r47)
    if is_error(r48) goto L42 (error at <module>:33) else goto L12
L12:
    faster_web3.exceptions = r48 :: module
    dec_ref r48
    r49 = ('BlockNumber', 'GasPriceStrategy', 'TxData', 'TxParams', 'Wei')
    r50 = 'faster_web3.types'
    r51 = faster_web3.gas_strategies.time_based.globals :: static
    r52 = CPyImport_ImportFromMany(r50, r49, r49, r51)
    if is_error(r52) goto L42 (error at <module>:37) else goto L13
L13:
    faster_web3.types = r52 :: module
    dec_ref r52
    r53 = 'MinerData'
    r54 = 'miner'
    r55 = 'num_blocks'
    r56 = 'min_gas_price'
    r57 = 'low_percentile_gas_price'
    r58 = PyList_New(4)
    if is_error(r58) goto L42 (error at <module>:46) else goto L14
L14:
    r59 = get_element_ptr r58 ob_item :: PyListObject
    r60 = load_mem r59 :: ptr*
    inc_ref r54
    set_mem r60, r54 :: builtins.object*
    inc_ref r55
    r61 = r60 + 8
    set_mem r61, r55 :: builtins.object*
    inc_ref r56
    r62 = r60 + 16
    set_mem r62, r56 :: builtins.object*
    inc_ref r57
    r63 = r60 + 24
    set_mem r63, r57 :: builtins.object*
    r64 = collections :: module
    r65 = 'namedtuple'
    r66 = CPyObject_GetAttr(r64, r65)
    if is_error(r66) goto L43 (error at <module>:45) else goto L15
L15:
    r67 = [r53, r58]
    r68 = load_address r67
    r69 = PyObject_Vectorcall(r66, r68, 2, 0)
    dec_ref r66
    if is_error(r69) goto L43 (error at <module>:45) else goto L16
L16:
    dec_ref r58
    r70 = faster_web3.gas_strategies.time_based.globals :: static
    r71 = 'MinerData'
    r72 = CPyDict_SetItem(r70, r71, r69)
    dec_ref r69
    r73 = r72 >= 0 :: signed
    if not r73 goto L42 (error at <module>:45) else goto L17 :: bool
L17:
    r74 = 'Probability'
    r75 = 'gas_price'
    r76 = 'prob'
    r77 = PyList_New(2)
    if is_error(r77) goto L42 (error at <module>:48) else goto L18
L18:
    r78 = get_element_ptr r77 ob_item :: PyListObject
    r79 = load_mem r78 :: ptr*
    inc_ref r75
    set_mem r79, r75 :: builtins.object*
    inc_ref r76
    r80 = r79 + 8
    set_mem r80, r76 :: builtins.object*
    r81 = collections :: module
    r82 = 'namedtuple'
    r83 = CPyObject_GetAttr(r81, r82)
    if is_error(r83) goto L44 (error at <module>:48) else goto L19
L19:
    r84 = [r74, r77]
    r85 = load_address r84
    r86 = PyObject_Vectorcall(r83, r85, 2, 0)
    dec_ref r83
    if is_error(r86) goto L44 (error at <module>:48) else goto L20
L20:
    dec_ref r77
    r87 = faster_web3.gas_strategies.time_based.globals :: static
    r88 = 'Probability'
    r89 = CPyDict_SetItem(r87, r88, r86)
    dec_ref r86
    r90 = r89 >= 0 :: signed
    if not r90 goto L42 (error at <module>:48) else goto L21 :: bool
L21:
    r91 = faster_web3.gas_strategies.time_based.globals :: static
    r92 = '_compute_probabilities'
    r93 = CPyDict_GetItem(r91, r92)
    if is_error(r93) goto L42 (error at <module>:125) else goto L22
L22:
    r94 = faster_web3.gas_strategies.time_based.globals :: static
    r95 = 'to_tuple'
    r96 = CPyDict_GetItem(r94, r95)
    if is_error(r96) goto L45 (error at <module>:125) else goto L23
L23:
    r97 = [r93]
    r98 = load_address r97
    r99 = PyObject_Vectorcall(r96, r98, 1, 0)
    dec_ref r96
    if is_error(r99) goto L45 (error at <module>:125) else goto L24
L24:
    dec_ref r93
    r100 = faster_web3.gas_strategies.time_based.globals :: static
    r101 = '_compute_probabilities'
    r102 = PyDict_SetItem(r100, r101, r99)
    dec_ref r99
    r103 = r102 >= 0 :: signed
    if not r103 goto L42 (error at <module>:125) else goto L25 :: bool
L25:
    r104 = faster_web3.gas_strategies.time_based.globals :: static
    r105 = 'construct_time_based_gas_price_strategy'
    r106 = CPyDict_GetItem(r104, r105)
    if is_error(r106) goto L42 (error at <module>:198) else goto L26
L26:
    r107 = faster_web3.gas_strategies.time_based.globals :: static
    r108 = 'curry'
    r109 = CPyDict_GetItem(r107, r108)
    if is_error(r109) goto L46 (error at <module>:198) else goto L27
L27:
    r110 = [r106]
    r111 = load_address r110
    r112 = PyObject_Vectorcall(r109, r111, 1, 0)
    dec_ref r109
    if is_error(r112) goto L46 (error at <module>:198) else goto L28
L28:
    dec_ref r106
    r113 = faster_web3.gas_strategies.time_based.globals :: static
    r114 = 'construct_time_based_gas_price_strategy'
    r115 = PyDict_SetItem(r113, r114, r112)
    dec_ref r112
    r116 = r115 >= 0 :: signed
    if not r116 goto L42 (error at <module>:198) else goto L29 :: bool
L29:
    r117 = faster_web3.gas_strategies.time_based.globals :: static
    r118 = 'construct_time_based_gas_price_strategy'
    r119 = CPyDict_GetItem(r117, r118)
    if is_error(r119) goto L42 (error at <module>:246) else goto L30
L30:
    r120 = object 60
    r121 = object 120
    r122 = [r120, r121]
    r123 = load_address r122
    r124 = ('max_wait_seconds', 'sample_size')
    r125 = PyObject_Vectorcall(r119, r123, 0, r124)
    dec_ref r119
    if is_error(r125) goto L42 (error at <module>:246) else goto L31
L31:
    faster_web3.gas_strategies.time_based.fast_gas_price_strategy = r125 :: static
    r126 = faster_web3.gas_strategies.time_based.globals :: static
    r127 = 'fast_gas_price_strategy'
    r128 = CPyDict_SetItem(r126, r127, r125)
    dec_ref r125
    r129 = r128 >= 0 :: signed
    if not r129 goto L42 (error at <module>:246) else goto L32 :: bool
L32:
    r130 = faster_web3.gas_strategies.time_based.globals :: static
    r131 = 'construct_time_based_gas_price_strategy'
    r132 = CPyDict_GetItem(r130, r131)
    if is_error(r132) goto L42 (error at <module>:251) else goto L33
L33:
    r133 = object 600
    r134 = object 120
    r135 = [r133, r134]
    r136 = load_address r135
    r137 = ('max_wait_seconds', 'sample_size')
    r138 = PyObject_Vectorcall(r132, r136, 0, r137)
    dec_ref r132
    if is_error(r138) goto L42 (error at <module>:251) else goto L34
L34:
    faster_web3.gas_strategies.time_based.medium_gas_price_strategy = r138 :: static
    r139 = faster_web3.gas_strategies.time_based.globals :: static
    r140 = 'medium_gas_price_strategy'
    r141 = CPyDict_SetItem(r139, r140, r138)
    dec_ref r138
    r142 = r141 >= 0 :: signed
    if not r142 goto L42 (error at <module>:251) else goto L35 :: bool
L35:
    r143 = faster_web3.gas_strategies.time_based.globals :: static
    r144 = 'construct_time_based_gas_price_strategy'
    r145 = CPyDict_GetItem(r143, r144)
    if is_error(r145) goto L42 (error at <module>:256) else goto L36
L36:
    r146 = object 3600
    r147 = object 120
    r148 = [r146, r147]
    r149 = load_address r148
    r150 = ('max_wait_seconds', 'sample_size')
    r151 = PyObject_Vectorcall(r145, r149, 0, r150)
    dec_ref r145
    if is_error(r151) goto L42 (error at <module>:256) else goto L37
L37:
    faster_web3.gas_strategies.time_based.slow_gas_price_strategy = r151 :: static
    r152 = faster_web3.gas_strategies.time_based.globals :: static
    r153 = 'slow_gas_price_strategy'
    r154 = CPyDict_SetItem(r152, r153, r151)
    dec_ref r151
    r155 = r154 >= 0 :: signed
    if not r155 goto L42 (error at <module>:256) else goto L38 :: bool
L38:
    r156 = faster_web3.gas_strategies.time_based.globals :: static
    r157 = 'construct_time_based_gas_price_strategy'
    r158 = CPyDict_GetItem(r156, r157)
    if is_error(r158) goto L42 (error at <module>:261) else goto L39
L39:
    r159 = object 86400
    r160 = object 720
    r161 = [r159, r160]
    r162 = load_address r161
    r163 = ('max_wait_seconds', 'sample_size')
    r164 = PyObject_Vectorcall(r158, r162, 0, r163)
    dec_ref r158
    if is_error(r164) goto L42 (error at <module>:261) else goto L40
L40:
    faster_web3.gas_strategies.time_based.glacial_gas_price_strategy = r164 :: static
    r165 = faster_web3.gas_strategies.time_based.globals :: static
    r166 = 'glacial_gas_price_strategy'
    r167 = CPyDict_SetItem(r165, r166, r164)
    dec_ref r164
    r168 = r167 >= 0 :: signed
    if not r168 goto L42 (error at <module>:261) else goto L41 :: bool
L41:
    return 1
L42:
    r169 = <error> :: None
    return r169
L43:
    dec_ref r58
    goto L42
L44:
    dec_ref r77
    goto L42
L45:
    dec_ref r93
    goto L42
L46:
    dec_ref r106
    goto L42

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('ASYNC_PROVIDER_TYPE', 'SYNC_PROVIDER_TYPE')
    r6 = 'faster_web3._utils.caching.request_caching_validation'
    r7 = faster_web3._utils.caching.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    faster_web3._utils.caching.request_caching_validation = r8 :: module
    dec_ref r8
    r9 = ('CACHEABLE_REQUESTS', 'async_handle_request_caching', 'generate_cache_key', 'handle_request_caching', 'is_cacheable_request', 'RequestInformation')
    r10 = 'faster_web3._utils.caching.caching_utils'
    r11 = faster_web3._utils.caching.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L6 (error at <module>:5) else goto L5
L5:
    faster_web3._utils.caching.caching_utils = r12 :: module
    dec_ref r12
    return 1
L6:
    r13 = <error> :: None
    return r13

def GethBenchmarkFixture.__init__(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0 :: str
    r1 :: bool
    r2 :: str
    r3 :: bool
    r4 :: str
    r5 :: bool
    r6 :: None
L0:
    r0 = self._rpc_port()
    if is_error(r0) goto L7 (error at __init__:35) else goto L1
L1:
    self.rpc_port = r0; r1 = is_error
    if not r1 goto L7 (error at __init__:35) else goto L2 :: bool
L2:
    r2 = self._endpoint_uri()
    if is_error(r2) goto L7 (error at __init__:36) else goto L3
L3:
    self.endpoint_uri = r2; r3 = is_error
    if not r3 goto L7 (error at __init__:36) else goto L4 :: bool
L4:
    r4 = self._geth_binary()
    if is_error(r4) goto L7 (error at __init__:37) else goto L5
L5:
    self.geth_binary = r4; r5 = is_error
    if not r5 goto L7 (error at __init__:37) else goto L6 :: bool
L6:
    return 1
L7:
    r6 = <error> :: None
    return r6

def build_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0 :: i32
    r1 :: object
    r2 :: bit
    r3 :: dict
    r4 :: str
    r5, r6, r7 :: object
    r8 :: str
    r9 :: object
    r10 :: bool
    r11 :: str
    r12 :: object
    r13 :: object[1]
    r14 :: object_ptr
    r15 :: object
    r16, r17 :: bool
    r18 :: str
    r19 :: bool
    r20 :: dict
    r21 :: str
    r22 :: object
    r23 :: str
    r24 :: object
    r25 :: str
    r26 :: object
    r27 :: str
    r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31 :: object
    r32, r33, r34 :: str
    r35 :: object
    r36 :: str
    r37 :: object
    r38 :: str
    r39 :: object
    r40 :: object[2]
    r41 :: object_ptr
    r42 :: object
    r43 :: str
    r44 :: object
    r45 :: str
    r46 :: object
    r47 :: str
    r48 :: object
    r49 :: object[1]
    r50 :: object_ptr
    r51 :: object
    r52 :: str
    r53 :: bool
    r54, r55, r56 :: str
    r57 :: object
    r58 :: str
    r59 :: object
    r60 :: str
    r61 :: object
    r62 :: object[2]
    r63 :: object_ptr
    r64 :: object
    r65 :: str
    r66 :: bool
    r67, r68 :: str
    r69 :: object
    r70 :: str
    r71 :: object
    r72 :: object[2]
    r73 :: object_ptr
    r74, r75 :: object
    r76 :: str
    r77 :: object
    r78 :: bool
    r79 :: str
    r80 :: object
    r81 :: object[1]
    r82 :: object_ptr
    r83 :: object
    r84, r85, r86 :: bool
    r87 :: object
    r88, r89 :: str
    r90 :: object[2]
    r91 :: object_ptr
    r92 :: object
    r93 :: tuple[object, object, object]
    r94, r95 :: bool
    r96 :: tuple[object, object, object]
    r97, r98, r99, r100, r101 :: object
    r102 :: object[4]
    r103 :: object_ptr
    r104 :: object
    r105 :: i32
    r106 :: bit
    r107 :: bool
    r108, r109 :: tuple[object, object, object]
    r110 :: bit
    r111, r112, r113 :: tuple[object, object, object]
    r114 :: bool
    r115, r116, r117 :: object
    r118 :: object[4]
    r119 :: object_ptr
    r120 :: object
    r121 :: bit
    r122 :: str
    r123 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r124 :: bool
    r125 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r126, r127 :: str
    r128 :: object
    r129 :: str
    r130 :: object
    r131 :: str
    r132 :: object
    r133 :: object[2]
    r134 :: object_ptr
    r135 :: object
    r136 :: str
    r137 :: bool
    r138, r139 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r140, r141 :: str
    r142 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r143 :: str
    r144 :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    r145 :: bool
    r146 :: object
    r147 :: bit
    r148 :: tuple[object, object, object]
    r149, r150 :: bool
    r151 :: tuple[object, object, object]
    r152, r153, r154, r155, r156 :: object
    r157 :: object[4]
    r158 :: object_ptr
    r159 :: object
    r160 :: i32
    r161 :: bit
    r162 :: bool
    r163, r164 :: tuple[object, object, object]
    r165 :: bit
    r166, r167, r168 :: tuple[object, object, object]
    r169 :: bool
    r170, r171, r172 :: object
    r173 :: object[4]
    r174 :: object_ptr
    r175 :: object
    r176 :: bit
    r177 :: object
    r178 :: bool
    r179, r180 :: bit
    r181 :: bool
    r182 :: object
L0:
    r0 = __mypyc_self__.__mypyc_next_label__
    goto L135
L1:
    r1 = load_address _Py_NoneStruct
    r2 = type != r1
    if r2 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L139 (error at build:39) else goto L3 :: bool
L3:
    unreachable
L4:
    r3 = faster_web3.tools.benchmark.node.globals :: static
    r4 = 'TemporaryDirectory'
    r5 = CPyDict_GetItem(r3, r4)
    if is_error(r5) goto L139 (error at build:40) else goto L5
L5:
    r6 = PyObject_Vectorcall(r5, 0, 0, 0)
    dec_ref r5
    if is_error(r6) goto L139 (error at build:40) else goto L6
L6:
    r7 = CPy_TYPE(r6)
    r8 = '__exit__'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L140 (error at build:40) else goto L7
L7:
    __mypyc_self__.__mypyc_temp__0 = r9; r10 = is_error
    if not r10 goto L140 (error at build:-1) else goto L8 :: bool
L8:
    r11 = '__enter__'
    r12 = CPyObject_GetAttr(r7, r11)
    dec_ref r7
    if is_error(r12) goto L141 (error at build:40) else goto L9
L9:
    r13 = [r6]
    r14 = load_address r13
    r15 = PyObject_Vectorcall(r12, r14, 1, 0)
    dec_ref r12
    if is_error(r15) goto L141 (error at build:40) else goto L10
L10:
    __mypyc_self__.__mypyc_temp__1 = r6; r16 = is_error
    if not r16 goto L142 (error at build:-1) else goto L11 :: bool
L11:
    __mypyc_self__.__mypyc_temp__2 = 1; r17 = is_error
    if not r17 goto L142 (error at build:-1) else goto L12 :: bool
L12:
    r18 = cast(str, r15)
    if is_error(r18) goto L101 (error at build:40) else goto L13
L13:
    __mypyc_self__.__mypyc_generator_attribute__base_dir = r18; r19 = is_error
    if not r19 goto L101 (error at build:40) else goto L14 :: bool
L14:
    r20 = faster_web3.tools.benchmark.node.globals :: static
    r21 = '__file__'
    r22 = CPyDict_GetItem(r20, r21)
    if is_error(r22) goto L101 (error at build:43) else goto L15
L15:
    r23 = cast(str, r22)
    if is_error(r23) goto L101 (error at build:43) else goto L16
L16:
    r24 = os :: module
    r25 = 'path'
    r26 = CPyObject_GetAttr(r24, r25)
    if is_error(r26) goto L143 (error at build:43) else goto L17
L17:
    r27 = 'dirname'
    r28 = CPyObject_GetAttr(r26, r27)
    dec_ref r26
    if is_error(r28) goto L143 (error at build:43) else goto L18
L18:
    r29 = [r23]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r28, r30, 1, 0)
    dec_ref r28
    if is_error(r31) goto L143 (error at build:43) else goto L19
L19:
    dec_ref r23
    r32 = cast(str, r31)
    if is_error(r32) goto L101 (error at build:43) else goto L20
L20:
    r33 = '../../../tests/integration/geth-1.16.2-fixture.zip'
    r34 = CPyStr_Build(1, r33)
    if is_error(r34) goto L144 (error at build:44) else goto L21
L21:
    r35 = os :: module
    r36 = 'path'
    r37 = CPyObject_GetAttr(r35, r36)
    if is_error(r37) goto L145 (error at build:42) else goto L22
L22:
    r38 = 'join'
    r39 = CPyObject_GetAttr(r37, r38)
    dec_ref r37
    if is_error(r39) goto L145 (error at build:42) else goto L23
L23:
    r40 = [r32, r34]
    r41 = load_address r40
    r42 = PyObject_Vectorcall(r39, r41, 2, 0)
    dec_ref r39
    if is_error(r42) goto L145 (error at build:42) else goto L24
L24:
    dec_ref r32
    dec_ref r34
    r43 = cast(str, r42)
    if is_error(r43) goto L101 (error at build:42) else goto L25
L25:
    r44 = os :: module
    r45 = 'path'
    r46 = CPyObject_GetAttr(r44, r45)
    if is_error(r46) goto L146 (error at build:41) else goto L26
L26:
    r47 = 'abspath'
    r48 = CPyObject_GetAttr(r46, r47)
    dec_ref r46
    if is_error(r48) goto L146 (error at build:41) else goto L27
L27:
    r49 = [r43]
    r50 = load_address r49
    r51 = PyObject_Vectorcall(r48, r50, 1, 0)
    dec_ref r48
    if is_error(r51) goto L146 (error at build:41) else goto L28
L28:
    dec_ref r43
    r52 = cast(str, r51)
    if is_error(r52) goto L101 (error at build:41) else goto L29
L29:
    __mypyc_self__.__mypyc_generator_attribute__zipfile_path = r52; r53 = is_error
    if not r53 goto L101 (error at build:41) else goto L30 :: bool
L30:
    r54 = __mypyc_self__.__mypyc_generator_attribute__base_dir
    if is_error(r54) goto L101 (error at build:47) else goto L31
L31:
    r55 = PyObject_Str(r54)
    dec_ref r54
    if is_error(r55) goto L101 (error at build:47) else goto L32
L32:
    r56 = 'datadir'
    r57 = os :: module
    r58 = 'path'
    r59 = CPyObject_GetAttr(r57, r58)
    if is_error(r59) goto L147 (error at build:47) else goto L33
L33:
    r60 = 'join'
    r61 = CPyObject_GetAttr(r59, r60)
    dec_ref r59
    if is_error(r61) goto L147 (error at build:47) else goto L34
L34:
    r62 = [r55, r56]
    r63 = load_address r62
    r64 = PyObject_Vectorcall(r61, r63, 2, 0)
    dec_ref r61
    if is_error(r64) goto L147 (error at build:47) else goto L35
L35:
    dec_ref r55
    r65 = cast(str, r64)
    if is_error(r65) goto L101 (error at build:47) else goto L36
L36:
    __mypyc_self__.__mypyc_generator_attribute__tmp_datadir = r65; r66 = is_error
    if not r66 goto L101 (error at build:47) else goto L37 :: bool
L37:
    r67 = __mypyc_self__.__mypyc_generator_attribute__zipfile_path
    if is_error(r67) goto L101 (error at build:48) else goto L38
L38:
    r68 = 'r'
    r69 = zipfile :: module
    r70 = 'ZipFile'
    r71 = CPyObject_GetAttr(r69, r70)
    if is_error(r71) goto L148 (error at build:48) else goto L39
L39:
    r72 = [r67, r68]
    r73 = load_address r72
    r74 = PyObject_Vectorcall(r71, r73, 2, 0)
    dec_ref r71
    if is_error(r74) goto L148 (error at build:48) else goto L40
L40:
    dec_ref r67
    r75 = CPy_TYPE(r74)
    r76 = '__exit__'
    r77 = CPyObject_GetAttr(r75, r76)
    if is_error(r77) goto L149 (error at build:48) else goto L41
L41:
    __mypyc_self__.__mypyc_temp__3 = r77; r78 = is_error
    if not r78 goto L149 (error at build:-1) else goto L42 :: bool
L42:
    r79 = '__enter__'
    r80 = CPyObject_GetAttr(r75, r79)
    dec_ref r75
    if is_error(r80) goto L150 (error at build:48) else goto L43
L43:
    r81 = [r74]
    r82 = load_address r81
    r83 = PyObject_Vectorcall(r80, r82, 1, 0)
    dec_ref r80
    if is_error(r83) goto L150 (error at build:48) else goto L44
L44:
    __mypyc_self__.__mypyc_temp__4 = r74; r84 = is_error
    if not r84 goto L151 (error at build:-1) else goto L45 :: bool
L45:
    __mypyc_self__.__mypyc_temp__5 = 1; r85 = is_error
    if not r85 goto L151 (error at build:-1) else goto L46 :: bool
L46:
    __mypyc_self__.__mypyc_generator_attribute__zip_ref = r83; r86 = is_error
    if not r86 goto L51 (error at build:48) else goto L47 :: bool
L47:
    r87 = __mypyc_self__.__mypyc_generator_attribute__zip_ref
    if is_error(r87) goto L51 (error at build:49) else goto L48
L48:
    r88 = __mypyc_self__.__mypyc_generator_attribute__tmp_datadir
    if is_error(r88) goto L152 (error at build:49) else goto L49
L49:
    r89 = 'extractall'
    r90 = [r87, r88]
    r91 = load_address r90
    r92 = PyObject_VectorcallMethod(r89, r91, 9223372036854775810, 0)
    if is_error(r92) goto L153 (error at build:49) else goto L154
L50:
    dec_ref r87
    dec_ref r88
    goto L65
L51:
    r93 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__6 = r93; r94 = is_error
    if not r94 goto L62 (error at build:-1) else goto L52 :: bool
L52:
    __mypyc_self__.__mypyc_temp__5 = 0; r95 = is_error
    if not r95 goto L62 (error at build:48) else goto L53 :: bool
L53:
    r96 = CPy_GetExcInfo()
    r97 = r96[0]
    r98 = r96[1]
    r99 = r96[2]
    dec_ref r96
    r100 = __mypyc_self__.__mypyc_temp__3
    if is_error(r100) goto L155 (error at build:-1) else goto L54
L54:
    r101 = __mypyc_self__.__mypyc_temp__4
    if is_error(r101) goto L156 (error at build:-1) else goto L55
L55:
    r102 = [r101, r97, r98, r99]
    r103 = load_address r102
    r104 = PyObject_Vectorcall(r100, r103, 4, 0)
    dec_ref r100
    if is_error(r104) goto L157 (error at build:48) else goto L56
L56:
    dec_ref r101
    dec_ref r97
    dec_ref r98
    dec_ref r99
    r105 = PyObject_IsTrue(r104)
    dec_ref r104
    r106 = r105 >= 0 :: signed
    if not r106 goto L62 (error at build:48) else goto L57 :: bool
L57:
    r107 = truncate r105: i32 to builtins.bool
    if r107 goto L60 else goto L58 :: bool
L58:
    CPy_Reraise()
    if not 0 goto L62 else goto L59 :: bool
L59:
    unreachable
L60:
    r108 = __mypyc_self__.__mypyc_temp__6
    if is_error(r108) goto L66 (error at build:-1) else goto L61
L61:
    CPy_RestoreExcInfo(r108)
    dec_ref r108
    goto L65
L62:
    r109 = __mypyc_self__.__mypyc_temp__6
    if is_error(r109) goto L66 (error at build:-1) else goto L63
L63:
    CPy_RestoreExcInfo(r109)
    dec_ref r109
    r110 = CPy_KeepPropagating()
    if not r110 goto L66 else goto L64 :: bool
L64:
    unreachable
L65:
    r111 = <error> :: tuple[object, object, object]
    r112 = r111
    goto L67
L66:
    r113 = CPy_CatchError()
    r112 = r113
L67:
    r114 = __mypyc_self__.__mypyc_temp__5
    if is_error(r114) goto L76 (error at build:-1) else goto L68
L68:
    if r114 goto L69 else goto L73 :: bool
L69:
    r115 = load_address _Py_NoneStruct
    r116 = __mypyc_self__.__mypyc_temp__3
    if is_error(r116) goto L76 (error at build:-1) else goto L70
L70:
    r117 = __mypyc_self__.__mypyc_temp__4
    if is_error(r117) goto L158 (error at build:-1) else goto L71
L71:
    r118 = [r117, r115, r115, r115]
    r119 = load_address r118
    r120 = PyObject_Vectorcall(r116, r119, 4, 0)
    dec_ref r116
    if is_error(r120) goto L159 (error at build:48) else goto L160
L72:
    dec_ref r117
L73:
    if is_error(r112) goto L80 else goto L74
L74:
    CPy_Reraise()
    if not 0 goto L76 else goto L161 :: bool
L75:
    unreachable
L76:
    if is_error(r112) goto L78 else goto L77
L77:
    CPy_RestoreExcInfo(r112)
    xdec_ref r112
L78:
    r121 = CPy_KeepPropagating()
    if not r121 goto L101 else goto L79 :: bool
L79:
    unreachable
L80:
    r122 = __mypyc_self__.__mypyc_generator_attribute__tmp_datadir
    if is_error(r122) goto L101 (error at build:50) else goto L81
L81:
    r123 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r123) goto L162 (error at build:50) else goto L82
L82:
    r123.datadir = r122; r124 = is_error
    dec_ref r123
    if not r124 goto L101 (error at build:50) else goto L83 :: bool
L83:
    r125 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r125) goto L101 (error at build:52) else goto L84
L84:
    r126 = r125.datadir
    dec_ref r125
    if is_error(r126) goto L101 (error at build:52) else goto L85
L85:
    r127 = 'genesis.json'
    r128 = os :: module
    r129 = 'path'
    r130 = CPyObject_GetAttr(r128, r129)
    if is_error(r130) goto L163 (error at build:52) else goto L86
L86:
    r131 = 'join'
    r132 = CPyObject_GetAttr(r130, r131)
    dec_ref r130
    if is_error(r132) goto L163 (error at build:52) else goto L87
L87:
    r133 = [r126, r127]
    r134 = load_address r133
    r135 = PyObject_Vectorcall(r132, r134, 2, 0)
    dec_ref r132
    if is_error(r135) goto L163 (error at build:52) else goto L88
L88:
    dec_ref r126
    r136 = cast(str, r135)
    if is_error(r136) goto L101 (error at build:52) else goto L89
L89:
    __mypyc_self__.__mypyc_generator_attribute__genesis_file = r136; r137 = is_error
    if not r137 goto L101 (error at build:52) else goto L90 :: bool
L90:
    r138 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r138) goto L101 (error at build:54) else goto L91
L91:
    r139 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r139) goto L164 (error at build:54) else goto L92
L92:
    r140 = r139.datadir
    dec_ref r139
    if is_error(r140) goto L164 (error at build:54) else goto L93
L93:
    r141 = __mypyc_self__.__mypyc_generator_attribute__genesis_file
    if is_error(r141) goto L165 (error at build:54) else goto L94
L94:
    r142 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r142) goto L166 (error at build:54) else goto L95
L95:
    r143 = r142.rpc_port
    dec_ref r142
    if is_error(r143) goto L166 (error at build:54) else goto L96
L96:
    r144 = r138._geth_process(r140, r141, r143)
    dec_ref r140
    dec_ref r141
    dec_ref r143
    dec_ref r138
    if is_error(r144) goto L101 (error at build:54) else goto L97
L97:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r144
L98:
    r146 = load_address _Py_NoneStruct
    r147 = type != r146
    if r147 goto L99 else goto L115 :: bool
L99:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L101 (error at build:54) else goto L100 :: bool
L100:
    unreachable
L101:
    r148 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__7 = r148; r149 = is_error
    if not r149 goto L112 (error at build:-1) else goto L102 :: bool
L102:
    __mypyc_self__.__mypyc_temp__2 = 0; r150 = is_error
    if not r150 goto L112 (error at build:40) else goto L103 :: bool
L103:
    r151 = CPy_GetExcInfo()
    r152 = r151[0]
    r153 = r151[1]
    r154 = r151[2]
    dec_ref r151
    r155 = __mypyc_self__.__mypyc_temp__0
    if is_error(r155) goto L167 (error at build:-1) else goto L104
L104:
    r156 = __mypyc_self__.__mypyc_temp__1
    if is_error(r156) goto L168 (error at build:-1) else goto L105
L105:
    r157 = [r156, r152, r153, r154]
    r158 = load_address r157
    r159 = PyObject_Vectorcall(r155, r158, 4, 0)
    dec_ref r155
    if is_error(r159) goto L169 (error at build:40) else goto L106
L106:
    dec_ref r156
    dec_ref r152
    dec_ref r153
    dec_ref r154
    r160 = PyObject_IsTrue(r159)
    dec_ref r159
    r161 = r160 >= 0 :: signed
    if not r161 goto L112 (error at build:40) else goto L107 :: bool
L107:
    r162 = truncate r160: i32 to builtins.bool
    if r162 goto L110 else goto L108 :: bool
L108:
    CPy_Reraise()
    if not 0 goto L112 else goto L109 :: bool
L109:
    unreachable
L110:
    r163 = __mypyc_self__.__mypyc_temp__7
    if is_error(r163) goto L116 (error at build:-1) else goto L111
L111:
    CPy_RestoreExcInfo(r163)
    dec_ref r163
    goto L115
L112:
    r164 = __mypyc_self__.__mypyc_temp__7
    if is_error(r164) goto L116 (error at build:-1) else goto L113
L113:
    CPy_RestoreExcInfo(r164)
    dec_ref r164
    r165 = CPy_KeepPropagating()
    if not r165 goto L116 else goto L114 :: bool
L114:
    unreachable
L115:
    r166 = <error> :: tuple[object, object, object]
    r167 = r166
    goto L117
L116:
    r168 = CPy_CatchError()
    r167 = r168
L117:
    r169 = __mypyc_self__.__mypyc_temp__2
    if is_error(r169) goto L126 (error at build:-1) else goto L118
L118:
    if r169 goto L119 else goto L123 :: bool
L119:
    r170 = load_address _Py_NoneStruct
    r171 = __mypyc_self__.__mypyc_temp__0
    if is_error(r171) goto L126 (error at build:-1) else goto L120
L120:
    r172 = __mypyc_self__.__mypyc_temp__1
    if is_error(r172) goto L170 (error at build:-1) else goto L121
L121:
    r173 = [r172, r170, r170, r170]
    r174 = load_address r173
    r175 = PyObject_Vectorcall(r171, r174, 4, 0)
    dec_ref r171
    if is_error(r175) goto L171 (error at build:40) else goto L172
L122:
    dec_ref r172
L123:
    if is_error(r167) goto L130 else goto L124
L124:
    CPy_Reraise()
    if not 0 goto L126 else goto L173 :: bool
L125:
    unreachable
L126:
    if is_error(r167) goto L128 else goto L127
L127:
    CPy_RestoreExcInfo(r167)
    xdec_ref r167
L128:
    r176 = CPy_KeepPropagating()
    if not r176 goto L139 else goto L129 :: bool
L129:
    unreachable
L130:
    r177 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L131:
    if is_error(stop_iter_ptr) goto L132 else goto L134
L132:
    CPyGen_SetStopIterationValue(r177)
    if not 0 goto L139 else goto L133 :: bool
L133:
    unreachable
L134:
    inc_ref r177
    set_mem stop_iter_ptr, r177 :: builtins.object*
    return 0
L135:
    r179 = r0 == 0
    if r179 goto L1 else goto L136 :: bool
L136:
    r180 = r0 == 1
    if r180 goto L98 else goto L137 :: bool
L137:
    r181 = raise StopIteration
    if not r181 goto L139 (error at build:39) else goto L138 :: bool
L138:
    unreachable
L139:
    r182 = <error> :: object
    return r182
L140:
    dec_ref r6
    dec_ref r7
    goto L139
L141:
    dec_ref r6
    goto L139
L142:
    dec_ref r15
    goto L139
L143:
    dec_ref r23
    goto L101
L144:
    dec_ref r32
    goto L101
L145:
    dec_ref r32
    dec_ref r34
    goto L101
L146:
    dec_ref r43
    goto L101
L147:
    dec_ref r55
    goto L101
L148:
    dec_ref r67
    goto L101
L149:
    dec_ref r74
    dec_ref r75
    goto L101
L150:
    dec_ref r74
    goto L101
L151:
    dec_ref r83
    goto L101
L152:
    dec_ref r87
    goto L51
L153:
    dec_ref r87
    dec_ref r88
    goto L51
L154:
    dec_ref r92
    goto L50
L155:
    dec_ref r97
    dec_ref r98
    dec_ref r99
    goto L62
L156:
    dec_ref r97
    dec_ref r98
    dec_ref r99
    dec_ref r100
    goto L62
L157:
    dec_ref r97
    dec_ref r98
    dec_ref r99
    dec_ref r101
    goto L62
L158:
    dec_ref r116
    goto L76
L159:
    dec_ref r117
    goto L76
L160:
    dec_ref r120
    goto L72
L161:
    xdec_ref r112
    goto L75
L162:
    dec_ref r122
    goto L101
L163:
    dec_ref r126
    goto L101
L164:
    dec_ref r138
    goto L101
L165:
    dec_ref r138
    dec_ref r140
    goto L101
L166:
    dec_ref r138
    dec_ref r140
    dec_ref r141
    goto L101
L167:
    dec_ref r152
    dec_ref r153
    dec_ref r154
    goto L112
L168:
    dec_ref r152
    dec_ref r153
    dec_ref r154
    dec_ref r155
    goto L112
L169:
    dec_ref r152
    dec_ref r153
    dec_ref r154
    dec_ref r156
    goto L112
L170:
    dec_ref r171
    goto L126
L171:
    dec_ref r172
    goto L126
L172:
    dec_ref r175
    goto L122
L173:
    xdec_ref r167
    goto L125

def build_GethBenchmarkFixture_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = build_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def build_GethBenchmarkFixture_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = build_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def build_GethBenchmarkFixture_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def build_GethBenchmarkFixture_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = build_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def build_GethBenchmarkFixture_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def GethBenchmarkFixture.build(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0 :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    r1, r2 :: bool
    r3 :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
L0:
    r0 = build_GethBenchmarkFixture_gen()
    if is_error(r0) goto L3 (error at build:39) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at build:39) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.tools.benchmark.node.build_GethBenchmarkFixture_gen
    return r3
L4:
    dec_ref r0
    goto L3

def GethBenchmarkFixture._rpc_port(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: str
    r5 :: tuple[str, int]
    r6 :: str
    r7 :: object
    r8 :: object[2]
    r9 :: object_ptr
    r10 :: object
    r11 :: str
    r12 :: object[1]
    r13 :: object_ptr
    r14, r15, r16 :: object
    r17 :: str
    r18 :: object[1]
    r19 :: object_ptr
    r20 :: object
    r21, r22 :: str
L0:
    r0 = socket :: module
    r1 = 'socket'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L8 (error at _rpc_port:57) else goto L1
L1:
    r3 = PyObject_Vectorcall(r2, 0, 0, 0)
    dec_ref r2
    if is_error(r3) goto L8 (error at _rpc_port:57) else goto L2
L2:
    r4 = '127.0.0.1'
    inc_ref r4
    r5 = (r4, 0)
    r6 = 'bind'
    r7 = box(tuple[str, int], r5)
    r8 = [r3, r7]
    r9 = load_address r8
    r10 = PyObject_VectorcallMethod(r6, r9, 9223372036854775810, 0)
    if is_error(r10) goto L9 (error at _rpc_port:58) else goto L10
L3:
    dec_ref r7
    r11 = 'getsockname'
    r12 = [r3]
    r13 = load_address r12
    r14 = PyObject_VectorcallMethod(r11, r13, 9223372036854775809, 0)
    if is_error(r14) goto L11 (error at _rpc_port:59) else goto L4
L4:
    r15 = object 1
    r16 = PyObject_GetItem(r14, r15)
    dec_ref r14
    if is_error(r16) goto L11 (error at _rpc_port:59) else goto L5
L5:
    r17 = 'close'
    r18 = [r3]
    r19 = load_address r18
    r20 = PyObject_VectorcallMethod(r17, r19, 9223372036854775809, 0)
    if is_error(r20) goto L12 (error at _rpc_port:60) else goto L13
L6:
    dec_ref r3
    r21 = PyObject_Str(r16)
    dec_ref r16
    if is_error(r21) goto L8 (error at _rpc_port:61) else goto L7
L7:
    return r21
L8:
    r22 = <error> :: str
    return r22
L9:
    dec_ref r3
    dec_ref r7
    goto L8
L10:
    dec_ref r10
    goto L3
L11:
    dec_ref r3
    goto L8
L12:
    dec_ref r3
    dec_ref r16
    goto L8
L13:
    dec_ref r20
    goto L6

def GethBenchmarkFixture._endpoint_uri(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0, r1, r2, r3 :: str
L0:
    r0 = 'http://localhost:'
    r1 = self.rpc_port
    if is_error(r1) goto L3 (error at _endpoint_uri:64) else goto L1
L1:
    r2 = CPyStr_Build(2, r0, r1)
    dec_ref r1
    if is_error(r2) goto L3 (error at _endpoint_uri:64) else goto L2
L2:
    return r2
L3:
    r3 = <error> :: str
    return r3

def GethBenchmarkFixture._geth_binary(self):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r0 :: str
    r1 :: object
    r2 :: str
    r3 :: object
    r4 :: i32
    r5 :: bit
    r6 :: bool
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: str
    r11 :: object
    r12, r13 :: str
    r14 :: object
    r15 :: str
    r16 :: object
    r17 :: i32
    r18 :: bit
    r19 :: bool
    r20 :: object
    r21 :: str
    r22 :: object
    r23 :: str
    r24 :: object
    r25 :: str
    r26 :: dict
    r27 :: str
    r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31, r32 :: object
    r33 :: str
    r34 :: object
    r35 :: str
    r36 :: object
    r37 :: object[1]
    r38 :: object_ptr
    r39 :: object
    r40 :: bool
    r41 :: dict
    r42 :: str
    r43 :: object
    r44 :: object[1]
    r45 :: object_ptr
    r46, r47 :: object
    r48 :: str
    r49 :: object
    r50 :: str
    r51 :: object
    r52 :: object[1]
    r53 :: object_ptr
    r54 :: object
    r55, r56 :: bool
    r57, r58, r59 :: str
L0:
    r0 = 'GETH_BINARY'
    r1 = os :: module
    r2 = 'environ'
    r3 = CPyObject_GetAttr(r1, r2)
    if is_error(r3) goto L33 (error at _geth_binary:67) else goto L1
L1:
    r4 = PySequence_Contains(r3, r0)
    dec_ref r3
    r5 = r4 >= 0 :: signed
    if not r5 goto L33 (error at _geth_binary:67) else goto L2 :: bool
L2:
    r6 = truncate r4: i32 to builtins.bool
    if r6 goto L3 else goto L7 :: bool
L3:
    r7 = os :: module
    r8 = 'environ'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L33 (error at _geth_binary:68) else goto L4
L4:
    r10 = 'GETH_BINARY'
    r11 = PyObject_GetItem(r9, r10)
    dec_ref r9
    if is_error(r11) goto L33 (error at _geth_binary:68) else goto L5
L5:
    r12 = cast(str, r11)
    if is_error(r12) goto L33 (error at _geth_binary:68) else goto L6
L6:
    return r12
L7:
    r13 = 'GETH_VERSION'
    r14 = os :: module
    r15 = 'environ'
    r16 = CPyObject_GetAttr(r14, r15)
    if is_error(r16) goto L33 (error at _geth_binary:69) else goto L8
L8:
    r17 = PySequence_Contains(r16, r13)
    dec_ref r16
    r18 = r17 >= 0 :: signed
    if not r18 goto L33 (error at _geth_binary:69) else goto L9 :: bool
L9:
    r19 = truncate r17: i32 to builtins.bool
    if r19 goto L10 else goto L32 :: bool
L10:
    r20 = os :: module
    r21 = 'environ'
    r22 = CPyObject_GetAttr(r20, r21)
    if is_error(r22) goto L33 (error at _geth_binary:70) else goto L11
L11:
    r23 = 'GETH_VERSION'
    r24 = PyObject_GetItem(r22, r23)
    dec_ref r22
    if is_error(r24) goto L33 (error at _geth_binary:70) else goto L12
L12:
    r25 = cast(str, r24)
    if is_error(r25) goto L33 (error at _geth_binary:70) else goto L13
L13:
    r26 = faster_web3.tools.benchmark.node.globals :: static
    r27 = 'get_executable_path'
    r28 = CPyDict_GetItem(r26, r27)
    if is_error(r28) goto L34 (error at _geth_binary:71) else goto L14
L14:
    r29 = [r25]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r28, r30, 1, 0)
    dec_ref r28
    if is_error(r31) goto L34 (error at _geth_binary:71) else goto L15
L15:
    r32 = os :: module
    r33 = 'path'
    r34 = CPyObject_GetAttr(r32, r33)
    if is_error(r34) goto L35 (error at _geth_binary:72) else goto L16
L16:
    r35 = 'exists'
    r36 = CPyObject_GetAttr(r34, r35)
    dec_ref r34
    if is_error(r36) goto L35 (error at _geth_binary:72) else goto L17
L17:
    r37 = [r31]
    r38 = load_address r37
    r39 = PyObject_Vectorcall(r36, r38, 1, 0)
    dec_ref r36
    if is_error(r39) goto L35 (error at _geth_binary:72) else goto L18
L18:
    r40 = unbox(bool, r39)
    dec_ref r39
    if is_error(r40) goto L35 (error at _geth_binary:72) else goto L19
L19:
    if r40 goto L36 else goto L20 :: bool
L20:
    r41 = faster_web3.tools.benchmark.node.globals :: static
    r42 = 'install_geth'
    r43 = CPyDict_GetItem(r41, r42)
    if is_error(r43) goto L35 (error at _geth_binary:73) else goto L21
L21:
    r44 = [r25]
    r45 = load_address r44
    r46 = PyObject_Vectorcall(r43, r45, 1, 0)
    dec_ref r43
    if is_error(r46) goto L35 (error at _geth_binary:73) else goto L37
L22:
    dec_ref r25
L23:
    r47 = os :: module
    r48 = 'path'
    r49 = CPyObject_GetAttr(r47, r48)
    if is_error(r49) goto L38 (error at _geth_binary:74) else goto L24
L24:
    r50 = 'exists'
    r51 = CPyObject_GetAttr(r49, r50)
    dec_ref r49
    if is_error(r51) goto L38 (error at _geth_binary:74) else goto L25
L25:
    r52 = [r31]
    r53 = load_address r52
    r54 = PyObject_Vectorcall(r51, r53, 1, 0)
    dec_ref r51
    if is_error(r54) goto L38 (error at _geth_binary:74) else goto L26
L26:
    r55 = unbox(bool, r54)
    dec_ref r54
    if is_error(r55) goto L38 (error at _geth_binary:74) else goto L27
L27:
    if r55 goto L30 else goto L39 :: bool
L28:
    r56 = raise AssertionError
    if not r56 goto L33 (error at _geth_binary:74) else goto L29 :: bool
L29:
    unreachable
L30:
    r57 = cast(str, r31)
    if is_error(r57) goto L33 (error at _geth_binary:75) else goto L31
L31:
    return r57
L32:
    r58 = 'geth'
    inc_ref r58
    return r58
L33:
    r59 = <error> :: str
    return r59
L34:
    dec_ref r25
    goto L33
L35:
    dec_ref r25
    dec_ref r31
    goto L33
L36:
    dec_ref r25
    goto L23
L37:
    dec_ref r46
    goto L22
L38:
    dec_ref r31
    goto L33
L39:
    dec_ref r31
    goto L28

def GethBenchmarkFixture._geth_command_arguments(self, datadir):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    datadir, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14 :: str
    r15 :: object
    r16 :: str
    r17 :: object
    r18 :: str
    r19 :: object
    r20 :: object[3]
    r21 :: object_ptr
    r22 :: object
    r23 :: str
    r24 :: tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]
    r25, r26 :: object
L0:
    r0 = self.geth_binary
    if is_error(r0) goto L7 (error at _geth_command_arguments:81) else goto L1
L1:
    r1 = '--dev'
    r2 = '--dev.period'
    r3 = '100'
    r4 = '--datadir'
    r5 = '--nodiscover'
    r6 = '--http'
    r7 = '--http.port'
    r8 = self.rpc_port
    if is_error(r8) goto L8 (error at _geth_command_arguments:90) else goto L2
L2:
    r9 = '--http.api'
    r10 = 'admin,debug,eth,net,web3'
    r11 = '--ipcdisable'
    r12 = '--password'
    r13 = 'keystore'
    r14 = 'pw.txt'
    r15 = os :: module
    r16 = 'path'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L9 (error at _geth_command_arguments:95) else goto L3
L3:
    r18 = 'join'
    r19 = CPyObject_GetAttr(r17, r18)
    dec_ref r17
    if is_error(r19) goto L9 (error at _geth_command_arguments:95) else goto L4
L4:
    r20 = [datadir, r13, r14]
    r21 = load_address r20
    r22 = PyObject_Vectorcall(r19, r21, 3, 0)
    dec_ref r19
    if is_error(r22) goto L9 (error at _geth_command_arguments:95) else goto L5
L5:
    r23 = cast(str, r22)
    if is_error(r23) goto L9 (error at _geth_command_arguments:95) else goto L6
L6:
    inc_ref r1
    inc_ref r2
    inc_ref r3
    inc_ref r4
    inc_ref datadir
    inc_ref r5
    inc_ref r6
    inc_ref r7
    inc_ref r9
    inc_ref r10
    inc_ref r11
    inc_ref r12
    r24 = (r0, r1, r2, r3, r4, datadir, r5, r6, r7, r8, r9, r10, r11, r12, r23)
    r25 = box(tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], r24)
    return r25
L7:
    r26 = <error> :: object
    return r26
L8:
    dec_ref r0
    goto L7
L9:
    dec_ref r0
    dec_ref r8
    goto L7

def _geth_process_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0 :: i32
    r1 :: object
    r2 :: bit
    r3 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r4, r5, r6, r7, r8, r9, r10 :: str
    r11 :: tuple[str, str, str, str, str]
    r12 :: bool
    r13 :: tuple[str, str, str, str, str]
    r14 :: dict
    r15 :: str
    r16 :: object
    r17 :: int
    r18 :: dict
    r19 :: str
    r20 :: object
    r21 :: int
    r22 :: dict
    r23 :: str
    r24, r25, r26, r27 :: object
    r28 :: object[3]
    r29 :: object_ptr
    r30, r31 :: object
    r32 :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    r33 :: str
    r34 :: object
    r35 :: dict
    r36 :: str
    r37 :: object
    r38 :: int
    r39 :: dict
    r40 :: str
    r41 :: object
    r42 :: int
    r43 :: dict
    r44 :: str
    r45 :: object
    r46 :: int
    r47 :: dict
    r48 :: str
    r49, r50, r51, r52 :: object
    r53 :: object[4]
    r54 :: object_ptr
    r55, r56 :: object
    r57 :: bool
    r58 :: object
    r59 :: bool
    r60 :: object
    r61 :: bit
    r62, r63, r64 :: tuple[object, object, object]
    r65 :: object
    r66 :: None
    r67 :: bit
    r68 :: object
    r69 :: bool
    r70, r71 :: bit
    r72 :: bool
    r73 :: object
L0:
    r0 = __mypyc_self__.__mypyc_next_label__
    goto L51
L1:
    r1 = load_address _Py_NoneStruct
    r2 = type != r1
    if r2 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L55 (error at _geth_process:98) else goto L3 :: bool
L3:
    unreachable
L4:
    r3 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r3) goto L55 (error at _geth_process:102) else goto L5
L5:
    r4 = r3.geth_binary
    dec_ref r3
    if is_error(r4) goto L55 (error at _geth_process:102) else goto L6
L6:
    r5 = '--datadir'
    r6 = __mypyc_self__.__mypyc_generator_attribute__datadir
    if is_error(r6) goto L56 (error at _geth_process:104) else goto L7
L7:
    r7 = PyObject_Str(r6)
    dec_ref r6
    if is_error(r7) goto L56 (error at _geth_process:104) else goto L8
L8:
    r8 = 'init'
    r9 = __mypyc_self__.__mypyc_generator_attribute__genesis_file
    if is_error(r9) goto L57 (error at _geth_process:106) else goto L9
L9:
    r10 = PyObject_Str(r9)
    dec_ref r9
    if is_error(r10) goto L57 (error at _geth_process:106) else goto L10
L10:
    inc_ref r5
    inc_ref r8
    r11 = (r4, r5, r7, r8, r10)
    __mypyc_self__.__mypyc_generator_attribute__init_datadir_command = r11; r12 = is_error
    if not r12 goto L55 (error at _geth_process:101) else goto L11 :: bool
L11:
    r13 = __mypyc_self__.__mypyc_generator_attribute__init_datadir_command
    if is_error(r13) goto L55 (error at _geth_process:109) else goto L12
L12:
    r14 = faster_web3.tools.benchmark.node.globals :: static
    r15 = 'PIPE'
    r16 = CPyDict_GetItem(r14, r15)
    if is_error(r16) goto L58 (error at _geth_process:110) else goto L13
L13:
    r17 = unbox(int, r16)
    dec_ref r16
    if is_error(r17) goto L58 (error at _geth_process:110) else goto L14
L14:
    r18 = faster_web3.tools.benchmark.node.globals :: static
    r19 = 'PIPE'
    r20 = CPyDict_GetItem(r18, r19)
    if is_error(r20) goto L59 (error at _geth_process:111) else goto L15
L15:
    r21 = unbox(int, r20)
    dec_ref r20
    if is_error(r21) goto L59 (error at _geth_process:111) else goto L16
L16:
    r22 = faster_web3.tools.benchmark.node.globals :: static
    r23 = 'check_output'
    r24 = CPyDict_GetItem(r22, r23)
    if is_error(r24) goto L60 (error at _geth_process:108) else goto L17
L17:
    r25 = box(tuple[str, str, str, str, str], r13)
    r26 = box(int, r17)
    r27 = box(int, r21)
    r28 = [r25, r26, r27]
    r29 = load_address r28
    r30 = ('stdin', 'stderr')
    r31 = PyObject_Vectorcall(r24, r29, 1, r30)
    dec_ref r24
    if is_error(r31) goto L61 (error at _geth_process:108) else goto L62
L18:
    dec_ref r25
    dec_ref r26
    dec_ref r27
    r32 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r32) goto L55 (error at _geth_process:114) else goto L19
L19:
    r33 = __mypyc_self__.__mypyc_generator_attribute__datadir
    if is_error(r33) goto L63 (error at _geth_process:114) else goto L20
L20:
    r34 = r32._geth_command_arguments(r33)
    dec_ref r33
    dec_ref r32
    if is_error(r34) goto L55 (error at _geth_process:114) else goto L21
L21:
    r35 = faster_web3.tools.benchmark.node.globals :: static
    r36 = 'PIPE'
    r37 = CPyDict_GetItem(r35, r36)
    if is_error(r37) goto L64 (error at _geth_process:115) else goto L22
L22:
    r38 = unbox(int, r37)
    dec_ref r37
    if is_error(r38) goto L64 (error at _geth_process:115) else goto L23
L23:
    r39 = faster_web3.tools.benchmark.node.globals :: static
    r40 = 'PIPE'
    r41 = CPyDict_GetItem(r39, r40)
    if is_error(r41) goto L65 (error at _geth_process:116) else goto L24
L24:
    r42 = unbox(int, r41)
    dec_ref r41
    if is_error(r42) goto L65 (error at _geth_process:116) else goto L25
L25:
    r43 = faster_web3.tools.benchmark.node.globals :: static
    r44 = 'PIPE'
    r45 = CPyDict_GetItem(r43, r44)
    if is_error(r45) goto L66 (error at _geth_process:117) else goto L26
L26:
    r46 = unbox(int, r45)
    dec_ref r45
    if is_error(r46) goto L66 (error at _geth_process:117) else goto L27
L27:
    r47 = faster_web3.tools.benchmark.node.globals :: static
    r48 = 'Popen'
    r49 = CPyDict_GetItem(r47, r48)
    if is_error(r49) goto L67 (error at _geth_process:113) else goto L28
L28:
    r50 = box(int, r38)
    r51 = box(int, r42)
    r52 = box(int, r46)
    r53 = [r34, r50, r51, r52]
    r54 = load_address r53
    r55 = ('stdin', 'stdout', 'stderr')
    r56 = PyObject_Vectorcall(r49, r54, 1, r55)
    dec_ref r49
    if is_error(r56) goto L68 (error at _geth_process:113) else goto L29
L29:
    dec_ref r34
    dec_ref r50
    dec_ref r51
    dec_ref r52
    __mypyc_self__.__mypyc_generator_attribute__proc = r56; r57 = is_error
    if not r57 goto L55 (error at _geth_process:113) else goto L30 :: bool
L30:
    r58 = __mypyc_self__.__mypyc_generator_attribute__proc
    if is_error(r58) goto L36 (error at _geth_process:120) else goto L31
L31:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r58
L32:
    r60 = load_address _Py_NoneStruct
    r61 = type != r60
    if r61 goto L33 else goto L35 :: bool
L33:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L36 (error at _geth_process:120) else goto L34 :: bool
L34:
    unreachable
L35:
    r62 = <error> :: tuple[object, object, object]
    r63 = r62
    goto L37
L36:
    r64 = CPy_CatchError()
    r63 = r64
L37:
    r65 = __mypyc_self__.__mypyc_generator_attribute__proc
    if is_error(r65) goto L42 (error at _geth_process:122) else goto L38
L38:
    r66 = kill_proc_gracefully(r65)
    dec_ref r65
    if is_error(r66) goto L42 (error at _geth_process:122) else goto L39
L39:
    if is_error(r63) goto L46 else goto L40
L40:
    CPy_Reraise()
    if not 0 goto L42 else goto L69 :: bool
L41:
    unreachable
L42:
    if is_error(r63) goto L44 else goto L43
L43:
    CPy_RestoreExcInfo(r63)
    xdec_ref r63
L44:
    r67 = CPy_KeepPropagating()
    if not r67 goto L55 else goto L45 :: bool
L45:
    unreachable
L46:
    r68 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L47:
    if is_error(stop_iter_ptr) goto L48 else goto L50
L48:
    CPyGen_SetStopIterationValue(r68)
    if not 0 goto L55 else goto L49 :: bool
L49:
    unreachable
L50:
    inc_ref r68
    set_mem stop_iter_ptr, r68 :: builtins.object*
    return 0
L51:
    r70 = r0 == 0
    if r70 goto L1 else goto L52 :: bool
L52:
    r71 = r0 == 1
    if r71 goto L32 else goto L53 :: bool
L53:
    r72 = raise StopIteration
    if not r72 goto L55 (error at _geth_process:98) else goto L54 :: bool
L54:
    unreachable
L55:
    r73 = <error> :: object
    return r73
L56:
    dec_ref r4
    goto L55
L57:
    dec_ref r4
    dec_ref r7
    goto L55
L58:
    dec_ref r13
    goto L55
L59:
    dec_ref r13
    dec_ref r17 :: int
    goto L55
L60:
    dec_ref r13
    dec_ref r17 :: int
    dec_ref r21 :: int
    goto L55
L61:
    dec_ref r25
    dec_ref r26
    dec_ref r27
    goto L55
L62:
    dec_ref r31
    goto L18
L63:
    dec_ref r32
    goto L55
L64:
    dec_ref r34
    goto L55
L65:
    dec_ref r34
    dec_ref r38 :: int
    goto L55
L66:
    dec_ref r34
    dec_ref r38 :: int
    dec_ref r42 :: int
    goto L55
L67:
    dec_ref r34
    dec_ref r38 :: int
    dec_ref r42 :: int
    dec_ref r46 :: int
    goto L55
L68:
    dec_ref r34
    dec_ref r50
    dec_ref r51
    dec_ref r52
    goto L55
L69:
    xdec_ref r63
    goto L41

def _geth_process_GethBenchmarkFixture_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _geth_process_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _geth_process_GethBenchmarkFixture_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _geth_process_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _geth_process_GethBenchmarkFixture_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def _geth_process_GethBenchmarkFixture_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = _geth_process_GethBenchmarkFixture_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def _geth_process_GethBenchmarkFixture_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def GethBenchmarkFixture._geth_process(self, datadir, genesis_file, rpc_port):
    self :: faster_web3.tools.benchmark.node.GethBenchmarkFixture
    datadir, genesis_file, rpc_port :: str
    r0 :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    r1, r2, r3, r4, r5 :: bool
    r6 :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
L0:
    r0 = _geth_process_GethBenchmarkFixture_gen()
    if is_error(r0) goto L6 (error at _geth_process:98) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L7 (error at _geth_process:98) else goto L2 :: bool
L2:
    inc_ref datadir
    r0.__mypyc_generator_attribute__datadir = datadir; r3 = is_error
    if not r3 goto L7 (error at _geth_process:98) else goto L3 :: bool
L3:
    inc_ref genesis_file
    r0.__mypyc_generator_attribute__genesis_file = genesis_file; r4 = is_error
    if not r4 goto L7 (error at _geth_process:98) else goto L4 :: bool
L4:
    inc_ref rpc_port
    r0.__mypyc_generator_attribute__rpc_port = rpc_port; r5 = is_error
    if not r5 goto L7 (error at _geth_process:98) else goto L5 :: bool
L5:
    return r0
L6:
    r6 = <error> :: faster_web3.tools.benchmark.node._geth_process_GethBenchmarkFixture_gen
    return r6
L7:
    dec_ref r0
    goto L6

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5, r6 :: object_ptr
    r7 :: object_ptr[2]
    r8 :: c_ptr
    r9 :: native_int[2]
    r10 :: c_ptr
    r11 :: object
    r12 :: dict
    r13, r14 :: str
    r15 :: bit
    r16 :: object
    r17 :: str
    r18 :: dict
    r19, r20 :: object
    r21 :: str
    r22 :: dict
    r23, r24 :: object
    r25 :: str
    r26 :: dict
    r27 :: object
    r28 :: object_ptr
    r29 :: object_ptr[1]
    r30 :: c_ptr
    r31 :: native_int[1]
    r32 :: c_ptr
    r33 :: object
    r34 :: dict
    r35, r36 :: str
    r37 :: bit
    r38 :: object
    r39 :: str
    r40 :: dict
    r41, r42 :: object
    r43 :: str
    r44 :: dict
    r45 :: object
    r46 :: str
    r47 :: dict
    r48 :: str
    r49 :: i32
    r50 :: bit
    r51 :: object
    r52 :: str
    r53, r54 :: object
    r55 :: bool
    r56, r57, r58, r59, r60 :: str
    r61 :: tuple
    r62 :: i32
    r63 :: bit
    r64 :: dict
    r65 :: str
    r66 :: i32
    r67 :: bit
    r68 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L17 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address os :: module
    r6 = load_address socket :: module
    r7 = [r5, r6]
    r8 = load_address r7
    r9 = [1, 2]
    r10 = load_address r9
    r11 = (('os', 'os', 'os'), ('socket', 'socket', 'socket'))
    r12 = faster_web3.tools.benchmark.node.globals :: static
    r13 = 'faster_web3/tools/benchmark/node.py'
    r14 = '<module>'
    r15 = CPyImport_ImportMany(r11, r8, r12, r13, r14, r10)
    if not r15 goto L17 else goto L4 :: bool
L4:
    r16 = ('PIPE', 'Popen', 'check_output')
    r17 = 'subprocess'
    r18 = faster_web3.tools.benchmark.node.globals :: static
    r19 = CPyImport_ImportFromMany(r17, r16, r16, r18)
    if is_error(r19) goto L17 (error at <module>:3) else goto L5
L5:
    subprocess = r19 :: module
    dec_ref r19
    r20 = ('TemporaryDirectory',)
    r21 = 'tempfile'
    r22 = faster_web3.tools.benchmark.node.globals :: static
    r23 = CPyImport_ImportFromMany(r21, r20, r20, r22)
    if is_error(r23) goto L17 (error at <module>:8) else goto L6
L6:
    tempfile = r23 :: module
    dec_ref r23
    r24 = ('Any', 'Final', 'Generator', 'Sequence', 'final')
    r25 = 'typing'
    r26 = faster_web3.tools.benchmark.node.globals :: static
    r27 = CPyImport_ImportFromMany(r25, r24, r24, r26)
    if is_error(r27) goto L17 (error at <module>:11) else goto L7
L7:
    typing = r27 :: module
    dec_ref r27
    r28 = load_address zipfile :: module
    r29 = [r28]
    r30 = load_address r29
    r31 = [18]
    r32 = load_address r31
    r33 = (('zipfile', 'zipfile', 'zipfile'),)
    r34 = faster_web3.tools.benchmark.node.globals :: static
    r35 = 'faster_web3/tools/benchmark/node.py'
    r36 = '<module>'
    r37 = CPyImport_ImportMany(r33, r30, r34, r35, r36, r32)
    if not r37 goto L17 else goto L8 :: bool
L8:
    r38 = ('get_executable_path', 'install_geth')
    r39 = 'geth.install'
    r40 = faster_web3.tools.benchmark.node.globals :: static
    r41 = CPyImport_ImportFromMany(r39, r38, r38, r40)
    if is_error(r41) goto L17 (error at <module>:20) else goto L9
L9:
    geth.install = r41 :: module
    dec_ref r41
    r42 = ('kill_proc_gracefully',)
    r43 = 'faster_web3.tools.benchmark.utils'
    r44 = faster_web3.tools.benchmark.node.globals :: static
    r45 = CPyImport_ImportFromMany(r43, r42, r42, r44)
    if is_error(r45) goto L17 (error at <module>:25) else goto L10
L10:
    faster_web3.tools.benchmark.utils = r45 :: module
    dec_ref r45
    r46 = 'geth-1.16.2-fixture.zip'
    r47 = faster_web3.tools.benchmark.node.globals :: static
    r48 = 'GETH_FIXTURE_ZIP'
    r49 = CPyDict_SetItem(r47, r48, r46)
    r50 = r49 >= 0 :: signed
    if not r50 goto L17 (error at <module>:29) else goto L11 :: bool
L11:
    r51 = <error> :: object
    r52 = 'faster_web3.tools.benchmark.node'
    r53 = faster_web3.tools.benchmark.node.GethBenchmarkFixture_template :: type
    r54 = CPyType_FromTemplate(r53, r51, r52)
    if is_error(r54) goto L17 (error at <module>:33) else goto L12
L12:
    r55 = GethBenchmarkFixture_trait_vtable_setup()
    if is_error(r55) goto L18 (error at <module>:-1) else goto L13
L13:
    r56 = '__mypyc_attrs__'
    r57 = 'rpc_port'
    r58 = 'endpoint_uri'
    r59 = 'geth_binary'
    r60 = 'datadir'
    r61 = PyTuple_Pack(4, r57, r58, r59, r60)
    if is_error(r61) goto L18 (error at <module>:33) else goto L14
L14:
    r62 = PyObject_SetAttr(r54, r56, r61)
    dec_ref r61
    r63 = r62 >= 0 :: signed
    if not r63 goto L18 (error at <module>:33) else goto L15 :: bool
L15:
    faster_web3.tools.benchmark.node.GethBenchmarkFixture = r54 :: type
    r64 = faster_web3.tools.benchmark.node.globals :: static
    r65 = 'GethBenchmarkFixture'
    r66 = PyDict_SetItem(r64, r65, r54)
    dec_ref r54
    r67 = r66 >= 0 :: signed
    if not r67 goto L17 (error at <module>:33) else goto L16 :: bool
L16:
    return 1
L17:
    r68 = <error> :: None
    return r68
L18:
    dec_ref r54
    goto L17

def to_hex_if_bytes(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1, r2 :: str
    r3 :: i32
    r4 :: bool
    r5, r6, r7, r8, r9, r10 :: str
    r11 :: object[3]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: list
    r16, r17, r18 :: ptr
    r19 :: str
    r20 :: dict
    r21 :: str
    r22 :: object
    r23 :: object[1]
    r24 :: object_ptr
    r25 :: object
    r26 :: str
    r27 :: object
    r28 :: bool
    r29 :: object[1]
    r30 :: object_ptr
    r31, r32 :: object
    r33 :: str
    r34, r35 :: object
    r36 :: str
    r37 :: object
    r38 :: tuple[object, object]
    r39 :: object
    r40 :: i32
    r41 :: bit
    r42 :: bool
    r43 :: object
    r44 :: bool
    r45 :: object[1]
    r46 :: object_ptr
    r47 :: object
    r48, r49 :: str
    r50 :: object
    r51 :: bool
    r52 :: object[1]
    r53 :: object_ptr
    r54, r55 :: object
    r56, r57 :: str
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L19 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L35 (error at to_hex_if_bytes:26) else goto L2
L2:
    r2 = '0x'
    r3 = CPyStr_Startswith(r1, r2)
    dec_ref r1
    r4 = truncate r3: i32 to builtins.bool
    if r4 goto L12 else goto L3 :: bool
L3:
    r5 = ''
    r6 = 'Expected a hex string. Got: '
    r7 = '{!r:{}}'
    inc_ref val
    r8 = cast(str, val)
    if is_error(r8) goto L35 (error at to_hex_if_bytes:27) else goto L4
L4:
    r9 = ''
    r10 = 'format'
    r11 = [r7, r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775811, 0)
    if is_error(r13) goto L36 (error at to_hex_if_bytes:27) else goto L5
L5:
    dec_ref r8
    r14 = cast(str, r13)
    if is_error(r14) goto L35 (error at to_hex_if_bytes:27) else goto L6
L6:
    r15 = PyList_New(2)
    if is_error(r15) goto L37 (error at to_hex_if_bytes:27) else goto L7
L7:
    r16 = get_element_ptr r15 ob_item :: PyListObject
    r17 = load_mem r16 :: ptr*
    inc_ref r6
    set_mem r17, r6 :: builtins.object*
    r18 = r17 + 8
    set_mem r18, r14 :: builtins.object*
    r19 = PyUnicode_Join(r5, r15)
    dec_ref r15
    if is_error(r19) goto L35 (error at to_hex_if_bytes:27) else goto L8
L8:
    r20 = faster_web3._utils.type_conversion.globals :: static
    r21 = 'Web3ValueError'
    r22 = CPyDict_GetItem(r20, r21)
    if is_error(r22) goto L38 (error at to_hex_if_bytes:27) else goto L9
L9:
    r23 = [r19]
    r24 = load_address r23
    r25 = PyObject_Vectorcall(r22, r24, 1, 0)
    dec_ref r22
    if is_error(r25) goto L38 (error at to_hex_if_bytes:27) else goto L10
L10:
    dec_ref r19
    CPy_Raise(r25)
    dec_ref r25
    if not 0 goto L35 (error at to_hex_if_bytes:27) else goto L11 :: bool
L11:
    unreachable
L12:
    inc_ref val
    r26 = cast(str, val)
    if is_error(r26) goto L35 (error at to_hex_if_bytes:28) else goto L13
L13:
    r27 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r27) goto L39 else goto L16
L14:
    r28 = raise NameError('value for final name "to_hex" was not set')
    if not r28 goto L35 (error at to_hex_if_bytes:28) else goto L15 :: bool
L15:
    unreachable
L16:
    r29 = [r26]
    r30 = load_address r29
    r31 = ('hexstr',)
    r32 = PyObject_Vectorcall(r27, r30, 0, r31)
    if is_error(r32) goto L40 (error at to_hex_if_bytes:28) else goto L17
L17:
    dec_ref r26
    r33 = cast(str, r32)
    if is_error(r33) goto L35 (error at to_hex_if_bytes:28) else goto L18
L18:
    return r33
L19:
    r34 = load_address PyBytes_Type
    r35 = builtins :: module
    r36 = 'bytearray'
    r37 = CPyObject_GetAttr(r35, r36)
    if is_error(r37) goto L35 (error at to_hex_if_bytes:30) else goto L20
L20:
    inc_ref r34
    r38 = (r34, r37)
    r39 = box(tuple[object, object], r38)
    r40 = PyObject_IsInstance(val, r39)
    dec_ref r39
    r41 = r40 >= 0 :: signed
    if not r41 goto L35 (error at to_hex_if_bytes:30) else goto L21 :: bool
L21:
    r42 = truncate r40: i32 to builtins.bool
    if r42 goto L22 else goto L28 :: bool
L22:
    r43 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r43) goto L23 else goto L25
L23:
    r44 = raise NameError('value for final name "to_hex" was not set')
    if not r44 goto L35 (error at to_hex_if_bytes:30) else goto L24 :: bool
L24:
    unreachable
L25:
    r45 = [val]
    r46 = load_address r45
    r47 = PyObject_Vectorcall(r43, r46, 1, 0)
    if is_error(r47) goto L35 (error at to_hex_if_bytes:30) else goto L26
L26:
    r48 = cast(str, r47)
    if is_error(r48) goto L35 (error at to_hex_if_bytes:30) else goto L27
L27:
    r49 = r48
    goto L34
L28:
    r50 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r50) goto L29 else goto L31
L29:
    r51 = raise NameError('value for final name "to_hex" was not set')
    if not r51 goto L35 (error at to_hex_if_bytes:30) else goto L30 :: bool
L30:
    unreachable
L31:
    r52 = [val]
    r53 = load_address r52
    r54 = ('hexstr',)
    r55 = PyObject_Vectorcall(r50, r53, 0, r54)
    if is_error(r55) goto L35 (error at to_hex_if_bytes:30) else goto L32
L32:
    r56 = cast(str, r55)
    if is_error(r56) goto L35 (error at to_hex_if_bytes:30) else goto L33
L33:
    r49 = r56
L34:
    return r49
L35:
    r57 = <error> :: str
    return r57
L36:
    dec_ref r8
    goto L35
L37:
    dec_ref r14
    goto L35
L38:
    dec_ref r19
    goto L35
L39:
    dec_ref r26
    goto L14
L40:
    dec_ref r26
    goto L35

def to_bytes_if_hex(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1 :: str
    r2 :: object
    r3 :: bool
    r4 :: object[1]
    r5 :: object_ptr
    r6, r7 :: object
    r8 :: bytes
    r9 :: union[bytes, object]
    r10, r11 :: bytes
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L8 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L11 (error at to_bytes_if_hex:38) else goto L2
L2:
    r2 = faster_web3._utils.type_conversion.to_bytes :: static
    if is_error(r2) goto L12 else goto L5
L3:
    r3 = raise NameError('value for final name "to_bytes" was not set')
    if not r3 goto L11 (error at to_bytes_if_hex:38) else goto L4 :: bool
L4:
    unreachable
L5:
    r4 = [r1]
    r5 = load_address r4
    r6 = ('hexstr',)
    r7 = PyObject_Vectorcall(r2, r5, 0, r6)
    if is_error(r7) goto L13 (error at to_bytes_if_hex:38) else goto L6
L6:
    dec_ref r1
    r8 = cast(bytes, r7)
    if is_error(r8) goto L11 (error at to_bytes_if_hex:38) else goto L7
L7:
    r9 = r8
    goto L9
L8:
    inc_ref val
    r9 = val
L9:
    r10 = cast(bytes, r9)
    if is_error(r10) goto L11 (error at to_bytes_if_hex:38) else goto L10
L10:
    return r10
L11:
    r11 = <error> :: bytes
    return r11
L12:
    dec_ref r1
    goto L3
L13:
    dec_ref r1
    goto L11

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: object_ptr
    r10 :: object_ptr[1]
    r11 :: c_ptr
    r12 :: native_int[1]
    r13 :: c_ptr
    r14 :: object
    r15 :: dict
    r16, r17 :: str
    r18 :: bit
    r19 :: object
    r20 :: str
    r21 :: dict
    r22, r23 :: object
    r24 :: str
    r25 :: dict
    r26, r27 :: object
    r28 :: str
    r29 :: object
    r30 :: dict
    r31 :: str
    r32 :: i32
    r33 :: bit
    r34 :: object
    r35 :: str
    r36 :: object
    r37 :: dict
    r38 :: str
    r39 :: i32
    r40 :: bit
    r41 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L12 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final', 'Union')
    r6 = 'typing'
    r7 = faster_web3._utils.type_conversion.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L12 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = load_address faster_eth_utils :: module
    r10 = [r9]
    r11 = load_address r10
    r12 = [6]
    r13 = load_address r12
    r14 = (('faster_eth_utils', 'faster_eth_utils', 'faster_eth_utils'),)
    r15 = faster_web3._utils.type_conversion.globals :: static
    r16 = 'faster_web3/_utils/type_conversion.py'
    r17 = '<module>'
    r18 = CPyImport_ImportMany(r14, r11, r15, r16, r17, r13)
    if not r18 goto L12 else goto L5 :: bool
L5:
    r19 = ('HexStr',)
    r20 = 'eth_typing'
    r21 = faster_web3._utils.type_conversion.globals :: static
    r22 = CPyImport_ImportFromMany(r20, r19, r19, r21)
    if is_error(r22) goto L12 (error at <module>:7) else goto L6
L6:
    eth_typing = r22 :: module
    dec_ref r22
    r23 = ('Web3ValueError',)
    r24 = 'faster_web3.exceptions'
    r25 = faster_web3._utils.type_conversion.globals :: static
    r26 = CPyImport_ImportFromMany(r24, r23, r23, r25)
    if is_error(r26) goto L12 (error at <module>:11) else goto L7
L7:
    faster_web3.exceptions = r26 :: module
    dec_ref r26
    r27 = faster_eth_utils :: module
    r28 = 'to_bytes'
    r29 = CPyObject_GetAttr(r27, r28)
    if is_error(r29) goto L12 (error at <module>:16) else goto L8
L8:
    faster_web3._utils.type_conversion.to_bytes = r29 :: static
    r30 = faster_web3._utils.type_conversion.globals :: static
    r31 = 'to_bytes'
    r32 = CPyDict_SetItem(r30, r31, r29)
    dec_ref r29
    r33 = r32 >= 0 :: signed
    if not r33 goto L12 (error at <module>:16) else goto L9 :: bool
L9:
    r34 = faster_eth_utils :: module
    r35 = 'to_hex'
    r36 = CPyObject_GetAttr(r34, r35)
    if is_error(r36) goto L12 (error at <module>:17) else goto L10
L10:
    faster_web3._utils.type_conversion.to_hex = r36 :: static
    r37 = faster_web3._utils.type_conversion.globals :: static
    r38 = 'to_hex'
    r39 = CPyDict_SetItem(r37, r38, r36)
    dec_ref r36
    r40 = r39 >= 0 :: signed
    if not r40 goto L12 (error at <module>:17) else goto L11 :: bool
L11:
    return 1
L12:
    r41 = <error> :: None
    return r41

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13, r14 :: str
    r15 :: list
    r16, r17, r18 :: ptr
    r19 :: dict
    r20 :: str
    r21 :: i32
    r22 :: bit
    r23 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L8 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('AsyncBeacon',)
    r6 = 'faster_web3.beacon.async_beacon'
    r7 = faster_web3.beacon.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L8 (error at <module>:1) else goto L4
L4:
    faster_web3.beacon.async_beacon = r8 :: module
    dec_ref r8
    r9 = ('Beacon',)
    r10 = 'faster_web3.beacon.beacon'
    r11 = faster_web3.beacon.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L8 (error at <module>:2) else goto L5
L5:
    faster_web3.beacon.beacon = r12 :: module
    dec_ref r12
    r13 = 'AsyncBeacon'
    r14 = 'Beacon'
    r15 = PyList_New(2)
    if is_error(r15) goto L8 (error at <module>:4) else goto L6
L6:
    r16 = get_element_ptr r15 ob_item :: PyListObject
    r17 = load_mem r16 :: ptr*
    inc_ref r13
    set_mem r17, r13 :: builtins.object*
    inc_ref r14
    r18 = r17 + 8
    set_mem r18, r14 :: builtins.object*
    r19 = faster_web3.beacon.globals :: static
    r20 = '__all__'
    r21 = CPyDict_SetItem(r19, r20, r15)
    dec_ref r15
    r22 = r21 >= 0 :: signed
    if not r22 goto L8 (error at <module>:4) else goto L7 :: bool
L7:
    return 1
L8:
    r23 = <error> :: None
    return r23

def rpc_gas_price_strategy(w3, transaction_params):
    w3 :: object
    transaction_params :: union[dict, None]
    r0 :: object
    r1 :: str
    r2 :: object
    r3 :: str
    r4 :: object
    r5, r6 :: int
L0:
    if is_error(transaction_params) goto L1 else goto L2
L1:
    r0 = box(None, 1)
    inc_ref r0
    transaction_params = r0
    dec_ref transaction_params
L2:
    r1 = 'eth'
    r2 = CPyObject_GetAttr(w3, r1)
    if is_error(r2) goto L6 (error at rpc_gas_price_strategy:20) else goto L3
L3:
    r3 = 'gas_price'
    r4 = CPyObject_GetAttr(r2, r3)
    dec_ref r2
    if is_error(r4) goto L6 (error at rpc_gas_price_strategy:20) else goto L4
L4:
    r5 = unbox(int, r4)
    dec_ref r4
    if is_error(r5) goto L6 (error at rpc_gas_price_strategy:20) else goto L5
L5:
    return r5
L6:
    r6 = <error> :: int
    return r6

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16 :: object
    r17 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L7 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Optional',)
    r6 = 'typing'
    r7 = faster_web3.gas_strategies.rpc.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L7 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('Web3',)
    r10 = 'faster_web3'
    r11 = faster_web3.gas_strategies.rpc.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L7 (error at <module>:5) else goto L5
L5:
    faster_web3 = r12 :: module
    dec_ref r12
    r13 = ('TxParams', 'Wei')
    r14 = 'faster_web3.types'
    r15 = faster_web3.gas_strategies.rpc.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L7 (error at <module>:8) else goto L6
L6:
    faster_web3.types = r16 :: module
    dec_ref r16
    return 1
L7:
    r17 = <error> :: None
    return r17

def all_in_dict(values, d):
    values :: object
    d :: union[object, dict]
    r0 :: dict
    r1 :: bool
    r2, r3 :: object
    r4 :: dict
    r5 :: i32
    r6 :: bit
    r7, r8 :: bool
    r9 :: bit
    r10 :: bool
L0:
    r0 = CPyDict_FromAny(d)
    if is_error(r0) goto L9 (error at all_in_dict:27) else goto L1
L1:
    d = r0
    r1 = 1
    r2 = PyObject_GetIter(values)
    if is_error(r2) goto L10 (error at all_in_dict:28) else goto L2
L2:
    r3 = PyIter_Next(r2)
    if is_error(r3) goto L11 else goto L3
L3:
    inc_ref d
    r4 = cast(dict, d)
    if is_error(r4) goto L12 (error at all_in_dict:28) else goto L4
L4:
    r5 = PyDict_Contains(r4, r3)
    dec_ref r4
    dec_ref r3
    r6 = r5 >= 0 :: signed
    if not r6 goto L13 (error at all_in_dict:28) else goto L5 :: bool
L5:
    r7 = truncate r5: i32 to builtins.bool
    r8 = r7 ^ 1
    if r8 goto L14 else goto L2 :: bool
L6:
    r1 = 0
    goto L8
L7:
    r9 = CPy_NoErrOccurred()
    if not r9 goto L9 (error at all_in_dict:28) else goto L8 :: bool
L8:
    return r1
L9:
    r10 = <error> :: bool
    return r10
L10:
    dec_ref d
    goto L9
L11:
    dec_ref d
    dec_ref r2
    goto L7
L12:
    dec_ref d
    dec_ref r2
    dec_ref r3
    goto L9
L13:
    dec_ref d
    dec_ref r2
    goto L9
L14:
    dec_ref d
    dec_ref r2
    goto L6

def any_in_dict(values, d):
    values :: object
    d :: union[object, dict]
    r0 :: dict
    r1 :: bool
    r2, r3 :: object
    r4 :: dict
    r5 :: i32
    r6 :: bit
    r7 :: bool
    r8 :: bit
    r9 :: bool
L0:
    r0 = CPyDict_FromAny(d)
    if is_error(r0) goto L9 (error at any_in_dict:43) else goto L1
L1:
    d = r0
    r1 = 0
    r2 = PyObject_GetIter(values)
    if is_error(r2) goto L10 (error at any_in_dict:44) else goto L2
L2:
    r3 = PyIter_Next(r2)
    if is_error(r3) goto L11 else goto L3
L3:
    inc_ref d
    r4 = cast(dict, d)
    if is_error(r4) goto L12 (error at any_in_dict:44) else goto L4
L4:
    r5 = PyDict_Contains(r4, r3)
    dec_ref r4
    dec_ref r3
    r6 = r5 >= 0 :: signed
    if not r6 goto L13 (error at any_in_dict:44) else goto L5 :: bool
L5:
    r7 = truncate r5: i32 to builtins.bool
    if r7 goto L14 else goto L2 :: bool
L6:
    r1 = 1
    goto L8
L7:
    r8 = CPy_NoErrOccurred()
    if not r8 goto L9 (error at any_in_dict:44) else goto L8 :: bool
L8:
    return r1
L9:
    r9 = <error> :: bool
    return r9
L10:
    dec_ref d
    goto L9
L11:
    dec_ref d
    dec_ref r2
    goto L7
L12:
    dec_ref d
    dec_ref r2
    dec_ref r3
    goto L9
L13:
    dec_ref d
    dec_ref r2
    goto L9
L14:
    dec_ref d
    dec_ref r2
    goto L6

def none_in_dict(values, d):
    values :: object
    d :: union[object, dict]
    r0, r1, r2 :: bool
L0:
    r0 = any_in_dict(values, d)
    if is_error(r0) goto L2 (error at none_in_dict:59) else goto L1
L1:
    r1 = r0 ^ 1
    return r1
L2:
    r2 = <error> :: bool
    return r2

def either_set_is_a_subset(set1, set2, percentage):
    set1, set2 :: set
    percentage :: int
    r0 :: float
    r1 :: bit
    r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5, r6 :: object
    r7 :: set
    r8 :: ptr
    r9 :: native_int
    r10 :: short_int
    r11 :: ptr
    r12 :: native_int
    r13 :: short_int
    r14, r15, r16 :: object
    r17 :: float
    r18 :: bit
    r19, r20, r21, r22 :: object
    r23, r24 :: bool
    r25 :: str
    r26 :: object[2]
    r27 :: object_ptr
    r28 :: object
    r29 :: set
    r30 :: ptr
    r31 :: native_int
    r32 :: short_int
    r33 :: ptr
    r34 :: native_int
    r35 :: short_int
    r36, r37, r38 :: object
    r39 :: float
    r40 :: bit
    r41, r42, r43, r44 :: object
    r45, r46 :: bool
L0:
    if is_error(percentage) goto L1 else goto L23
L1:
    percentage = 200
L2:
    r0 = CPyTagged_TrueDivide(percentage, 200)
    dec_ref percentage :: int
    r1 = r0 == -113.0
    if r1 goto L4 else goto L3 :: bool
L3:
    r2 = 'intersection'
    r3 = [set1, set2]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L22 (error at either_set_is_a_subset:82) else goto L5
L4:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L22 (error at either_set_is_a_subset:79) else goto L3
L5:
    r7 = cast(set, r5)
    if is_error(r7) goto L22 (error at either_set_is_a_subset:82) else goto L6
L6:
    r8 = get_element_ptr r7 used :: PySetObject
    r9 = load_mem r8 :: native_int*
    dec_ref r7
    r10 = r9 << 1
    r11 = get_element_ptr set1 used :: PySetObject
    r12 = load_mem r11 :: native_int*
    r13 = r12 << 1
    r14 = box(short_int, r13)
    r15 = box(float, r0)
    r16 = PyNumber_Multiply(r14, r15)
    dec_ref r14
    dec_ref r15
    if is_error(r16) goto L22 (error at either_set_is_a_subset:82) else goto L7
L7:
    r17 = unbox(float, r16)
    dec_ref r16
    r18 = r17 == -113.0
    if r18 goto L9 else goto L8 :: bool
L8:
    r19 = box(short_int, r10)
    r20 = box(float, r17)
    r21 = PyObject_RichCompare(r19, r20, 5)
    dec_ref r19
    dec_ref r20
    if is_error(r21) goto L22 (error at either_set_is_a_subset:82) else goto L10
L9:
    r22 = PyErr_Occurred()
    if not is_error(r22) goto L22 (error at either_set_is_a_subset:82) else goto L8
L10:
    r23 = unbox(bool, r21)
    dec_ref r21
    if is_error(r23) goto L22 (error at either_set_is_a_subset:82) else goto L11
L11:
    if r23 goto L12 else goto L13 :: bool
L12:
    r24 = r23
    goto L21
L13:
    r25 = 'intersection'
    r26 = [set2, set1]
    r27 = load_address r26
    r28 = PyObject_VectorcallMethod(r25, r27, 9223372036854775810, 0)
    if is_error(r28) goto L22 (error at either_set_is_a_subset:83) else goto L14
L14:
    r29 = cast(set, r28)
    if is_error(r29) goto L22 (error at either_set_is_a_subset:83) else goto L15
L15:
    r30 = get_element_ptr r29 used :: PySetObject
    r31 = load_mem r30 :: native_int*
    dec_ref r29
    r32 = r31 << 1
    r33 = get_element_ptr set2 used :: PySetObject
    r34 = load_mem r33 :: native_int*
    r35 = r34 << 1
    r36 = box(short_int, r35)
    r37 = box(float, r0)
    r38 = PyNumber_Multiply(r36, r37)
    dec_ref r36
    dec_ref r37
    if is_error(r38) goto L22 (error at either_set_is_a_subset:83) else goto L16
L16:
    r39 = unbox(float, r38)
    dec_ref r38
    r40 = r39 == -113.0
    if r40 goto L18 else goto L17 :: bool
L17:
    r41 = box(short_int, r32)
    r42 = box(float, r39)
    r43 = PyObject_RichCompare(r41, r42, 5)
    dec_ref r41
    dec_ref r42
    if is_error(r43) goto L22 (error at either_set_is_a_subset:83) else goto L19
L18:
    r44 = PyErr_Occurred()
    if not is_error(r44) goto L22 (error at either_set_is_a_subset:83) else goto L17
L19:
    r45 = unbox(bool, r43)
    dec_ref r43
    if is_error(r45) goto L22 (error at either_set_is_a_subset:83) else goto L20
L20:
    r24 = r45
L21:
    return r24
L22:
    r46 = <error> :: bool
    return r46
L23:
    inc_ref percentage :: int
    goto L2

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Any', 'Iterable', 'Mapping', 'Set', 'Union')
    r6 = 'typing'
    r7 = faster_web3._utils.utility_methods.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('TxData', 'TxParams')
    r10 = 'faster_web3.types'
    r11 = faster_web3._utils.utility_methods.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L6 (error at <module>:9) else goto L5
L5:
    faster_web3.types = r12 :: module
    dec_ref r12
    return 1
L6:
    r13 = <error> :: None
    return r13

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: str
    r14 :: dict
    r15 :: str
    r16 :: i32
    r17 :: bit
    r18 :: str
    r19 :: bool
    r20 :: dict
    r21 :: str
    r22 :: i32
    r23 :: bit
    r24 :: str
    r25 :: dict
    r26 :: str
    r27 :: i32
    r28 :: bit
    r29 :: str
    r30 :: dict
    r31 :: str
    r32 :: i32
    r33 :: bit
    r34 :: dict
    r35 :: str
    r36 :: object
    r37 :: i32
    r38 :: bit
    r39, r40 :: str
    r41 :: tuple[str, str]
    r42 :: dict
    r43 :: str
    r44 :: object
    r45 :: i32
    r46 :: bit
    r47 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L15 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = faster_web3.constants.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L15 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('ChecksumAddress', 'HexAddress', 'HexStr')
    r10 = 'eth_typing'
    r11 = faster_web3.constants.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L15 (error at <module>:2) else goto L5
L5:
    eth_typing = r12 :: module
    dec_ref r12
    r13 = '0x0000000000000000000000000000000000000000'
    faster_web3.constants.ADDRESS_ZERO = r13 :: static
    r14 = faster_web3.constants.globals :: static
    r15 = 'ADDRESS_ZERO'
    r16 = CPyDict_SetItem(r14, r15, r13)
    r17 = r16 >= 0 :: signed
    if not r17 goto L15 (error at <module>:9) else goto L6 :: bool
L6:
    r18 = faster_web3.constants.ADDRESS_ZERO :: static
    if is_error(r18) goto L7 else goto L9
L7:
    r19 = raise NameError('value for final name "ADDRESS_ZERO" was not set')
    if not r19 goto L15 (error at <module>:10) else goto L8 :: bool
L8:
    unreachable
L9:
    faster_web3.constants.CHECKSUM_ADDRESSS_ZERO = r18 :: static
    r20 = faster_web3.constants.globals :: static
    r21 = 'CHECKSUM_ADDRESSS_ZERO'
    r22 = CPyDict_SetItem(r20, r21, r18)
    r23 = r22 >= 0 :: signed
    if not r23 goto L15 (error at <module>:10) else goto L10 :: bool
L10:
    r24 = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
    faster_web3.constants.MAX_INT = r24 :: static
    r25 = faster_web3.constants.globals :: static
    r26 = 'MAX_INT'
    r27 = CPyDict_SetItem(r25, r26, r24)
    r28 = r27 >= 0 :: signed
    if not r28 goto L15 (error at <module>:11) else goto L11 :: bool
L11:
    r29 = '0x0000000000000000000000000000000000000000000000000000000000000000'
    faster_web3.constants.HASH_ZERO = r29 :: static
    r30 = faster_web3.constants.globals :: static
    r31 = 'HASH_ZERO'
    r32 = CPyDict_SetItem(r30, r31, r29)
    r33 = r32 >= 0 :: signed
    if not r33 goto L15 (error at <module>:12) else goto L12 :: bool
L12:
    r34 = faster_web3.constants.globals :: static
    r35 = 'WEI_PER_ETHER'
    r36 = object 1000000000000000000
    r37 = CPyDict_SetItem(r34, r35, r36)
    r38 = r37 >= 0 :: signed
    if not r38 goto L15 (error at <module>:15) else goto L13 :: bool
L13:
    r39 = 'maxFeePerGas'
    r40 = 'maxPriorityFeePerGas'
    inc_ref r39
    inc_ref r40
    r41 = (r39, r40)
    faster_web3.constants.DYNAMIC_FEE_TXN_PARAMS = r41 :: static
    r42 = faster_web3.constants.globals :: static
    r43 = 'DYNAMIC_FEE_TXN_PARAMS'
    r44 = box(tuple[str, str], r41)
    r45 = CPyDict_SetItem(r42, r43, r44)
    dec_ref r44
    r46 = r45 >= 0 :: signed
    if not r46 goto L15 (error at <module>:18) else goto L14 :: bool
L14:
    return 1
L15:
    r47 = <error> :: None
    return r47

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: str
    r10 :: dict
    r11 :: str
    r12 :: i32
    r13 :: bit
    r14 :: str
    r15 :: dict
    r16 :: str
    r17 :: i32
    r18 :: bit
    r19 :: str
    r20 :: dict
    r21 :: str
    r22 :: i32
    r23 :: bit
    r24 :: str
    r25 :: dict
    r26 :: str
    r27 :: i32
    r28 :: bit
    r29 :: str
    r30 :: dict
    r31 :: str
    r32 :: i32
    r33 :: bit
    r34 :: str
    r35 :: dict
    r36 :: str
    r37 :: i32
    r38 :: bit
    r39 :: str
    r40 :: dict
    r41 :: str
    r42 :: i32
    r43 :: bit
    r44 :: str
    r45 :: dict
    r46 :: str
    r47 :: i32
    r48 :: bit
    r49 :: str
    r50 :: dict
    r51 :: str
    r52 :: i32
    r53 :: bit
    r54 :: str
    r55 :: dict
    r56 :: str
    r57 :: i32
    r58 :: bit
    r59 :: str
    r60 :: dict
    r61 :: str
    r62 :: i32
    r63 :: bit
    r64 :: str
    r65 :: dict
    r66 :: str
    r67 :: i32
    r68 :: bit
    r69 :: str
    r70 :: dict
    r71 :: str
    r72 :: i32
    r73 :: bit
    r74 :: str
    r75 :: dict
    r76 :: str
    r77 :: i32
    r78 :: bit
    r79 :: str
    r80 :: dict
    r81 :: str
    r82 :: i32
    r83 :: bit
    r84 :: str
    r85 :: dict
    r86 :: str
    r87 :: i32
    r88 :: bit
    r89 :: str
    r90 :: dict
    r91 :: str
    r92 :: i32
    r93 :: bit
    r94 :: str
    r95 :: dict
    r96 :: str
    r97 :: i32
    r98 :: bit
    r99 :: str
    r100 :: dict
    r101 :: str
    r102 :: i32
    r103 :: bit
    r104 :: str
    r105 :: dict
    r106 :: str
    r107 :: i32
    r108 :: bit
    r109 :: str
    r110 :: dict
    r111 :: str
    r112 :: i32
    r113 :: bit
    r114 :: str
    r115 :: dict
    r116 :: str
    r117 :: i32
    r118 :: bit
    r119 :: str
    r120 :: dict
    r121 :: str
    r122 :: i32
    r123 :: bit
    r124 :: str
    r125 :: dict
    r126 :: str
    r127 :: i32
    r128 :: bit
    r129 :: str
    r130 :: dict
    r131 :: str
    r132 :: i32
    r133 :: bit
    r134 :: str
    r135 :: dict
    r136 :: str
    r137 :: i32
    r138 :: bit
    r139 :: str
    r140 :: dict
    r141 :: str
    r142 :: i32
    r143 :: bit
    r144 :: str
    r145 :: dict
    r146 :: str
    r147 :: i32
    r148 :: bit
    r149 :: str
    r150 :: dict
    r151 :: str
    r152 :: i32
    r153 :: bit
    r154 :: str
    r155 :: dict
    r156 :: str
    r157 :: i32
    r158 :: bit
    r159 :: str
    r160 :: dict
    r161 :: str
    r162 :: i32
    r163 :: bit
    r164 :: str
    r165 :: dict
    r166 :: str
    r167 :: i32
    r168 :: bit
    r169 :: str
    r170 :: dict
    r171 :: str
    r172 :: i32
    r173 :: bit
    r174 :: str
    r175 :: dict
    r176 :: str
    r177 :: i32
    r178 :: bit
    r179 :: str
    r180 :: dict
    r181 :: str
    r182 :: i32
    r183 :: bit
    r184 :: str
    r185 :: dict
    r186 :: str
    r187 :: i32
    r188 :: bit
    r189 :: str
    r190 :: dict
    r191 :: str
    r192 :: i32
    r193 :: bit
    r194 :: str
    r195 :: dict
    r196 :: str
    r197 :: i32
    r198 :: bit
    r199 :: str
    r200 :: dict
    r201 :: str
    r202 :: i32
    r203 :: bit
    r204 :: str
    r205 :: dict
    r206 :: str
    r207 :: i32
    r208 :: bit
    r209 :: str
    r210 :: dict
    r211 :: str
    r212 :: i32
    r213 :: bit
    r214 :: str
    r215 :: dict
    r216 :: str
    r217 :: i32
    r218 :: bit
    r219 :: str
    r220 :: dict
    r221 :: str
    r222 :: i32
    r223 :: bit
    r224 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L48 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = faster_web3.beacon.api_endpoints.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L48 (error at <module>:2) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = '/eth/v1/beacon/genesis'
    r10 = faster_web3.beacon.api_endpoints.globals :: static
    r11 = 'GET_GENESIS'
    r12 = CPyDict_SetItem(r10, r11, r9)
    r13 = r12 >= 0 :: signed
    if not r13 goto L48 (error at <module>:6) else goto L5 :: bool
L5:
    r14 = '/eth/v1/beacon/states/{0}/root'
    r15 = faster_web3.beacon.api_endpoints.globals :: static
    r16 = 'GET_HASH_ROOT'
    r17 = CPyDict_SetItem(r15, r16, r14)
    r18 = r17 >= 0 :: signed
    if not r18 goto L48 (error at <module>:9) else goto L6 :: bool
L6:
    r19 = '/eth/v1/beacon/states/{0}/fork'
    r20 = faster_web3.beacon.api_endpoints.globals :: static
    r21 = 'GET_FORK_DATA'
    r22 = CPyDict_SetItem(r20, r21, r19)
    r23 = r22 >= 0 :: signed
    if not r23 goto L48 (error at <module>:10) else goto L7 :: bool
L7:
    r24 = '/eth/v1/beacon/states/{0}/finality_checkpoints'
    r25 = faster_web3.beacon.api_endpoints.globals :: static
    r26 = 'GET_FINALITY_CHECKPOINT'
    r27 = CPyDict_SetItem(r25, r26, r24)
    r28 = r27 >= 0 :: signed
    if not r28 goto L48 (error at <module>:11) else goto L8 :: bool
L8:
    r29 = '/eth/v1/beacon/states/{0}/validators'
    r30 = faster_web3.beacon.api_endpoints.globals :: static
    r31 = 'GET_VALIDATORS'
    r32 = CPyDict_SetItem(r30, r31, r29)
    r33 = r32 >= 0 :: signed
    if not r33 goto L48 (error at <module>:12) else goto L9 :: bool
L9:
    r34 = '/eth/v1/beacon/states/{0}/validators/{1}'
    r35 = faster_web3.beacon.api_endpoints.globals :: static
    r36 = 'GET_VALIDATOR'
    r37 = CPyDict_SetItem(r35, r36, r34)
    r38 = r37 >= 0 :: signed
    if not r38 goto L48 (error at <module>:13) else goto L10 :: bool
L10:
    r39 = '/eth/v1/beacon/states/{0}/validator_balances'
    r40 = faster_web3.beacon.api_endpoints.globals :: static
    r41 = 'GET_VALIDATOR_BALANCES'
    r42 = CPyDict_SetItem(r40, r41, r39)
    r43 = r42 >= 0 :: signed
    if not r43 goto L48 (error at <module>:14) else goto L11 :: bool
L11:
    r44 = '/eth/v1/beacon/states/{0}/committees'
    r45 = faster_web3.beacon.api_endpoints.globals :: static
    r46 = 'GET_EPOCH_COMMITTEES'
    r47 = CPyDict_SetItem(r45, r46, r44)
    r48 = r47 >= 0 :: signed
    if not r48 goto L48 (error at <module>:15) else goto L12 :: bool
L12:
    r49 = '/eth/v1/beacon/states/{0}/sync_committees'
    r50 = faster_web3.beacon.api_endpoints.globals :: static
    r51 = 'GET_EPOCH_SYNC_COMMITTEES'
    r52 = CPyDict_SetItem(r50, r51, r49)
    r53 = r52 >= 0 :: signed
    if not r53 goto L48 (error at <module>:16) else goto L13 :: bool
L13:
    r54 = '/eth/v1/beacon/states/{0}/randao'
    r55 = faster_web3.beacon.api_endpoints.globals :: static
    r56 = 'GET_EPOCH_RANDAO'
    r57 = CPyDict_SetItem(r55, r56, r54)
    r58 = r57 >= 0 :: signed
    if not r58 goto L48 (error at <module>:17) else goto L14 :: bool
L14:
    r59 = '/eth/v1/beacon/headers'
    r60 = faster_web3.beacon.api_endpoints.globals :: static
    r61 = 'GET_BLOCK_HEADERS'
    r62 = CPyDict_SetItem(r60, r61, r59)
    r63 = r62 >= 0 :: signed
    if not r63 goto L48 (error at <module>:20) else goto L15 :: bool
L15:
    r64 = '/eth/v1/beacon/headers/{0}'
    r65 = faster_web3.beacon.api_endpoints.globals :: static
    r66 = 'GET_BLOCK_HEADER'
    r67 = CPyDict_SetItem(r65, r66, r64)
    r68 = r67 >= 0 :: signed
    if not r68 goto L48 (error at <module>:21) else goto L16 :: bool
L16:
    r69 = '/eth/v2/beacon/blocks/{0}'
    r70 = faster_web3.beacon.api_endpoints.globals :: static
    r71 = 'GET_BLOCK'
    r72 = CPyDict_SetItem(r70, r71, r69)
    r73 = r72 >= 0 :: signed
    if not r73 goto L48 (error at <module>:24) else goto L17 :: bool
L17:
    r74 = '/eth/v1/beacon/blocks/{0}/root'
    r75 = faster_web3.beacon.api_endpoints.globals :: static
    r76 = 'GET_BLOCK_ROOT'
    r77 = CPyDict_SetItem(r75, r76, r74)
    r78 = r77 >= 0 :: signed
    if not r78 goto L48 (error at <module>:25) else goto L18 :: bool
L18:
    r79 = '/eth/v1/beacon/blocks/{0}/attestations'
    r80 = faster_web3.beacon.api_endpoints.globals :: static
    r81 = 'GET_BLOCK_ATTESTATIONS'
    r82 = CPyDict_SetItem(r80, r81, r79)
    r83 = r82 >= 0 :: signed
    if not r83 goto L48 (error at <module>:26) else goto L19 :: bool
L19:
    r84 = '/eth/v1/beacon/blinded_blocks/{0}'
    r85 = faster_web3.beacon.api_endpoints.globals :: static
    r86 = 'GET_BLINDED_BLOCKS'
    r87 = CPyDict_SetItem(r85, r86, r84)
    r88 = r87 >= 0 :: signed
    if not r88 goto L48 (error at <module>:27) else goto L20 :: bool
L20:
    r89 = '/eth/v1/beacon/rewards/blocks/{0}'
    r90 = faster_web3.beacon.api_endpoints.globals :: static
    r91 = 'GET_REWARDS'
    r92 = CPyDict_SetItem(r90, r91, r89)
    r93 = r92 >= 0 :: signed
    if not r93 goto L48 (error at <module>:30) else goto L21 :: bool
L21:
    r94 = '/eth/v1/beacon/blob_sidecars/{0}'
    r95 = faster_web3.beacon.api_endpoints.globals :: static
    r96 = 'GET_BLOB_SIDECARS'
    r97 = CPyDict_SetItem(r95, r96, r94)
    r98 = r97 >= 0 :: signed
    if not r98 goto L48 (error at <module>:33) else goto L22 :: bool
L22:
    r99 = '/eth/v1/beacon/light_client/bootstrap/{0}'
    r100 = faster_web3.beacon.api_endpoints.globals :: static
    r101 = 'GET_LIGHT_CLIENT_BOOTSTRAP_STRUCTURE'
    r102 = CPyDict_SetItem(r100, r101, r99)
    r103 = r102 >= 0 :: signed
    if not r103 goto L48 (error at <module>:36) else goto L23 :: bool
L23:
    r104 = '/eth/v1/beacon/light_client/updates'
    r105 = faster_web3.beacon.api_endpoints.globals :: static
    r106 = 'GET_LIGHT_CLIENT_UPDATES'
    r107 = CPyDict_SetItem(r105, r106, r104)
    r108 = r107 >= 0 :: signed
    if not r108 goto L48 (error at <module>:37) else goto L24 :: bool
L24:
    r109 = '/eth/v1/beacon/light_client/finality_update'
    r110 = faster_web3.beacon.api_endpoints.globals :: static
    r111 = 'GET_LIGHT_CLIENT_FINALITY_UPDATE'
    r112 = CPyDict_SetItem(r110, r111, r109)
    r113 = r112 >= 0 :: signed
    if not r113 goto L48 (error at <module>:38) else goto L25 :: bool
L25:
    r114 = '/eth/v1/beacon/light_client/optimistic_update'
    r115 = faster_web3.beacon.api_endpoints.globals :: static
    r116 = 'GET_LIGHT_CLIENT_OPTIMISTIC_UPDATE'
    r117 = CPyDict_SetItem(r115, r116, r114)
    r118 = r117 >= 0 :: signed
    if not r118 goto L48 (error at <module>:39) else goto L26 :: bool
L26:
    r119 = '/eth/v1/beacon/pool/attestations'
    r120 = faster_web3.beacon.api_endpoints.globals :: static
    r121 = 'GET_ATTESTATIONS'
    r122 = CPyDict_SetItem(r120, r121, r119)
    r123 = r122 >= 0 :: signed
    if not r123 goto L48 (error at <module>:42) else goto L27 :: bool
L27:
    r124 = '/eth/v1/beacon/pool/attester_slashings'
    r125 = faster_web3.beacon.api_endpoints.globals :: static
    r126 = 'GET_ATTESTER_SLASHINGS'
    r127 = CPyDict_SetItem(r125, r126, r124)
    r128 = r127 >= 0 :: signed
    if not r128 goto L48 (error at <module>:43) else goto L28 :: bool
L28:
    r129 = '/eth/v1/beacon/pool/proposer_slashings'
    r130 = faster_web3.beacon.api_endpoints.globals :: static
    r131 = 'GET_PROPOSER_SLASHINGS'
    r132 = CPyDict_SetItem(r130, r131, r129)
    r133 = r132 >= 0 :: signed
    if not r133 goto L48 (error at <module>:44) else goto L29 :: bool
L29:
    r134 = '/eth/v1/beacon/pool/voluntary_exits'
    r135 = faster_web3.beacon.api_endpoints.globals :: static
    r136 = 'GET_VOLUNTARY_EXITS'
    r137 = CPyDict_SetItem(r135, r136, r134)
    r138 = r137 >= 0 :: signed
    if not r138 goto L48 (error at <module>:45) else goto L30 :: bool
L30:
    r139 = '/eth/v1/beacon/pool/bls_to_execution_changes'
    r140 = faster_web3.beacon.api_endpoints.globals :: static
    r141 = 'GET_BLS_TO_EXECUTION_CHANGES'
    r142 = CPyDict_SetItem(r140, r141, r139)
    r143 = r142 >= 0 :: signed
    if not r143 goto L48 (error at <module>:46) else goto L31 :: bool
L31:
    r144 = '/eth/v1/config/fork_schedule'
    r145 = faster_web3.beacon.api_endpoints.globals :: static
    r146 = 'GET_FORK_SCHEDULE'
    r147 = CPyDict_SetItem(r145, r146, r144)
    r148 = r147 >= 0 :: signed
    if not r148 goto L48 (error at <module>:51) else goto L32 :: bool
L32:
    r149 = '/eth/v1/config/spec'
    r150 = faster_web3.beacon.api_endpoints.globals :: static
    r151 = 'GET_SPEC'
    r152 = CPyDict_SetItem(r150, r151, r149)
    r153 = r152 >= 0 :: signed
    if not r153 goto L48 (error at <module>:52) else goto L33 :: bool
L33:
    r154 = '/eth/v1/config/deposit_contract'
    r155 = faster_web3.beacon.api_endpoints.globals :: static
    r156 = 'GET_DEPOSIT_CONTRACT'
    r157 = CPyDict_SetItem(r155, r156, r154)
    r158 = r157 >= 0 :: signed
    if not r158 goto L48 (error at <module>:53) else goto L34 :: bool
L34:
    r159 = '/eth/v1/debug/beacon/states/{0}'
    r160 = faster_web3.beacon.api_endpoints.globals :: static
    r161 = 'GET_BEACON_STATE'
    r162 = CPyDict_SetItem(r160, r161, r159)
    r163 = r162 >= 0 :: signed
    if not r163 goto L48 (error at <module>:57) else goto L35 :: bool
L35:
    r164 = '/eth/v1/debug/beacon/heads'
    r165 = faster_web3.beacon.api_endpoints.globals :: static
    r166 = 'GET_BEACON_HEADS'
    r167 = CPyDict_SetItem(r165, r166, r164)
    r168 = r167 >= 0 :: signed
    if not r168 goto L48 (error at <module>:58) else goto L36 :: bool
L36:
    r169 = '/eth/v1/node/identity'
    r170 = faster_web3.beacon.api_endpoints.globals :: static
    r171 = 'GET_NODE_IDENTITY'
    r172 = CPyDict_SetItem(r170, r171, r169)
    r173 = r172 >= 0 :: signed
    if not r173 goto L48 (error at <module>:62) else goto L37 :: bool
L37:
    r174 = '/eth/v1/node/peers'
    r175 = faster_web3.beacon.api_endpoints.globals :: static
    r176 = 'GET_PEERS'
    r177 = CPyDict_SetItem(r175, r176, r174)
    r178 = r177 >= 0 :: signed
    if not r178 goto L48 (error at <module>:63) else goto L38 :: bool
L38:
    r179 = '/eth/v1/node/peers/{0}'
    r180 = faster_web3.beacon.api_endpoints.globals :: static
    r181 = 'GET_PEER'
    r182 = CPyDict_SetItem(r180, r181, r179)
    r183 = r182 >= 0 :: signed
    if not r183 goto L48 (error at <module>:64) else goto L39 :: bool
L39:
    r184 = '/eth/v1/node/peer_count'
    r185 = faster_web3.beacon.api_endpoints.globals :: static
    r186 = 'GET_PEER_COUNT'
    r187 = CPyDict_SetItem(r185, r186, r184)
    r188 = r187 >= 0 :: signed
    if not r188 goto L48 (error at <module>:65) else goto L40 :: bool
L40:
    r189 = '/eth/v1/node/health'
    r190 = faster_web3.beacon.api_endpoints.globals :: static
    r191 = 'GET_HEALTH'
    r192 = CPyDict_SetItem(r190, r191, r189)
    r193 = r192 >= 0 :: signed
    if not r193 goto L48 (error at <module>:66) else goto L41 :: bool
L41:
    r194 = '/eth/v1/node/version'
    r195 = faster_web3.beacon.api_endpoints.globals :: static
    r196 = 'GET_VERSION'
    r197 = CPyDict_SetItem(r195, r196, r194)
    r198 = r197 >= 0 :: signed
    if not r198 goto L48 (error at <module>:67) else goto L42 :: bool
L42:
    r199 = '/eth/v1/node/syncing'
    r200 = faster_web3.beacon.api_endpoints.globals :: static
    r201 = 'GET_SYNCING'
    r202 = CPyDict_SetItem(r200, r201, r199)
    r203 = r202 >= 0 :: signed
    if not r203 goto L48 (error at <module>:68) else goto L43 :: bool
L43:
    r204 = '/eth/v1/validator/duties/attester/{0}'
    r205 = faster_web3.beacon.api_endpoints.globals :: static
    r206 = 'GET_ATTESTER_DUTIES'
    r207 = CPyDict_SetItem(r205, r206, r204)
    r208 = r207 >= 0 :: signed
    if not r208 goto L48 (error at <module>:72) else goto L44 :: bool
L44:
    r209 = '/eth/v1/validator/duties/proposer/{0}'
    r210 = faster_web3.beacon.api_endpoints.globals :: static
    r211 = 'GET_BLOCK_PROPOSERS_DUTIES'
    r212 = CPyDict_SetItem(r210, r211, r209)
    r213 = r212 >= 0 :: signed
    if not r213 goto L48 (error at <module>:73) else goto L45 :: bool
L45:
    r214 = '/eth/v1/validator/duties/sync/{0}'
    r215 = faster_web3.beacon.api_endpoints.globals :: static
    r216 = 'GET_SYNC_COMMITTEE_DUTIES'
    r217 = CPyDict_SetItem(r215, r216, r214)
    r218 = r217 >= 0 :: signed
    if not r218 goto L48 (error at <module>:74) else goto L46 :: bool
L46:
    r219 = '/eth/v1/beacon/rewards/attestations/{0}'
    r220 = faster_web3.beacon.api_endpoints.globals :: static
    r221 = 'GET_ATTESTATIONS_REWARDS'
    r222 = CPyDict_SetItem(r220, r221, r219)
    r223 = r222 >= 0 :: signed
    if not r223 goto L48 (error at <module>:77) else goto L47 :: bool
L47:
    return 1
L48:
    r224 = <error> :: None
    return r224

def print_header(logger, num_calls):
    logger :: object
    num_calls :: int
    r0, r1, r2, r3, r4, r5, r6, r7, r8, r9 :: str
    r10 :: object[6]
    r11 :: object_ptr
    r12 :: object
    r13, r14 :: str
    r15 :: object[2]
    r16 :: object_ptr
    r17 :: object
    r18, r19 :: str
    r20 :: object[2]
    r21 :: object_ptr
    r22 :: object
    r23 :: None
L0:
    r0 = '|{:^26}|{:^20}|{:^20}|{:^20}|{:^20}|'
    r1 = 'Method ('
    r2 = CPyTagged_Str(num_calls)
    if is_error(r2) goto L7 (error at print_header:13) else goto L1
L1:
    r3 = ' calls)'
    r4 = CPyStr_Build(3, r1, r2, r3)
    dec_ref r2
    if is_error(r4) goto L7 (error at print_header:13) else goto L2
L2:
    r5 = 'HTTPProvider'
    r6 = 'AsyncHTTProvider'
    r7 = 'IPCProvider'
    r8 = 'WebSocketProvider'
    r9 = 'format'
    r10 = [r0, r4, r5, r6, r7, r8]
    r11 = load_address r10
    r12 = PyObject_VectorcallMethod(r9, r11, 9223372036854775814, 0)
    if is_error(r12) goto L8 (error at print_header:12) else goto L3
L3:
    dec_ref r4
    r13 = cast(str, r12)
    if is_error(r13) goto L7 (error at print_header:12) else goto L4
L4:
    r14 = 'info'
    r15 = [logger, r13]
    r16 = load_address r15
    r17 = PyObject_VectorcallMethod(r14, r16, 9223372036854775810, 0)
    if is_error(r17) goto L9 (error at print_header:11) else goto L10
L5:
    dec_ref r13
    r18 = '----------------------------------------------------------------------------------------------------------------'
    r19 = 'info'
    r20 = [logger, r18]
    r21 = load_address r20
    r22 = PyObject_VectorcallMethod(r19, r21, 9223372036854775810, 0)
    if is_error(r22) goto L7 (error at print_header:20) else goto L11
L6:
    return 1
L7:
    r23 = <error> :: None
    return r23
L8:
    dec_ref r4
    goto L7
L9:
    dec_ref r13
    goto L7
L10:
    dec_ref r17
    goto L5
L11:
    dec_ref r22
    goto L6

def print_entry(logger, method_benchmarks):
    logger :: object
    method_benchmarks :: dict
    r0, r1 :: str
    r2 :: object
    r3 :: str
    r4 :: object
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: str
    r10 :: object
    r11 :: str
    r12 :: object[6]
    r13 :: object_ptr
    r14 :: object
    r15, r16 :: str
    r17 :: object[2]
    r18 :: object_ptr
    r19 :: object
    r20 :: None
L0:
    r0 = '|{:^26}|{:^20.10}|{:^20.10}|{:^20.10}|{:^20.10}|'
    r1 = 'name'
    r2 = CPyDict_GetItem(method_benchmarks, r1)
    if is_error(r2) goto L9 (error at print_entry:29) else goto L1
L1:
    r3 = 'HTTPProvider'
    r4 = CPyDict_GetItem(method_benchmarks, r3)
    if is_error(r4) goto L10 (error at print_entry:30) else goto L2
L2:
    r5 = 'AsyncHTTPProvider'
    r6 = CPyDict_GetItem(method_benchmarks, r5)
    if is_error(r6) goto L11 (error at print_entry:31) else goto L3
L3:
    r7 = 'IPCProvider'
    r8 = CPyDict_GetItem(method_benchmarks, r7)
    if is_error(r8) goto L12 (error at print_entry:32) else goto L4
L4:
    r9 = 'WebSocketProvider'
    r10 = CPyDict_GetItem(method_benchmarks, r9)
    if is_error(r10) goto L13 (error at print_entry:33) else goto L5
L5:
    r11 = 'format'
    r12 = [r0, r2, r4, r6, r8, r10]
    r13 = load_address r12
    r14 = PyObject_VectorcallMethod(r11, r13, 9223372036854775814, 0)
    if is_error(r14) goto L14 (error at print_entry:28) else goto L6
L6:
    dec_ref r2
    dec_ref r4
    dec_ref r6
    dec_ref r8
    dec_ref r10
    r15 = cast(str, r14)
    if is_error(r15) goto L9 (error at print_entry:28) else goto L7
L7:
    r16 = 'info'
    r17 = [logger, r15]
    r18 = load_address r17
    r19 = PyObject_VectorcallMethod(r16, r18, 9223372036854775810, 0)
    if is_error(r19) goto L15 (error at print_entry:27) else goto L16
L8:
    dec_ref r15
    return 1
L9:
    r20 = <error> :: None
    return r20
L10:
    dec_ref r2
    goto L9
L11:
    dec_ref r2
    dec_ref r4
    goto L9
L12:
    dec_ref r2
    dec_ref r4
    dec_ref r6
    goto L9
L13:
    dec_ref r2
    dec_ref r4
    dec_ref r6
    dec_ref r8
    goto L9
L14:
    dec_ref r2
    dec_ref r4
    dec_ref r6
    dec_ref r8
    dec_ref r10
    goto L9
L15:
    dec_ref r15
    goto L9
L16:
    dec_ref r19
    goto L8

def print_footer(logger):
    logger :: object
    r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: None
L0:
    r0 = '----------------------------------------------------------------------------------------------------------------'
    r1 = 'info'
    r2 = [logger, r0]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L2 (error at print_footer:39) else goto L3
L1:
    return 1
L2:
    r5 = <error> :: None
    return r5
L3:
    dec_ref r4
    goto L1

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Logger',)
    r6 = 'logging'
    r7 = faster_web3.tools.benchmark.reporting.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    logging = r8 :: module
    dec_ref r8
    r9 = ('Any', 'Dict')
    r10 = 'typing'
    r11 = faster_web3.tools.benchmark.reporting.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L6 (error at <module>:4) else goto L5
L5:
    typing = r12 :: module
    dec_ref r12
    return 1
L6:
    r13 = <error> :: None
    return r13

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: dict
    r14 :: str
    r15, r16 :: object
    r17 :: dict
    r18 :: str
    r19 :: i32
    r20 :: bit
    r21 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L9 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = faster_web3.auto.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L9 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('Web3',)
    r10 = 'faster_web3'
    r11 = faster_web3.auto.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L9 (error at <module>:5) else goto L5
L5:
    faster_web3 = r12 :: module
    dec_ref r12
    r13 = faster_web3.auto.globals :: static
    r14 = 'Web3'
    r15 = CPyDict_GetItem(r13, r14)
    if is_error(r15) goto L9 (error at <module>:9) else goto L6
L6:
    r16 = PyObject_Vectorcall(r15, 0, 0, 0)
    dec_ref r15
    if is_error(r16) goto L9 (error at <module>:9) else goto L7
L7:
    faster_web3.auto.w3 = r16 :: static
    r17 = faster_web3.auto.globals :: static
    r18 = 'w3'
    r19 = CPyDict_SetItem(r17, r18, r16)
    dec_ref r16
    r20 = r19 >= 0 :: signed
    if not r20 goto L9 (error at <module>:9) else goto L8 :: bool
L8:
    return 1
L9:
    r21 = <error> :: None
    return r21

def verify_attr(class_name, key, namespace):
    class_name, key :: str
    namespace :: object
    r0 :: i32
    r1 :: bit
    r2, r3 :: bool
    r4, r5, r6, r7, r8, r9 :: str
    r10 :: dict
    r11 :: str
    r12 :: object
    r13 :: object[1]
    r14 :: object_ptr
    r15 :: object
    r16 :: None
L0:
    r0 = PySequence_Contains(namespace, key)
    r1 = r0 >= 0 :: signed
    if not r1 goto L8 (error at verify_attr:27) else goto L1 :: bool
L1:
    r2 = truncate r0: i32 to builtins.bool
    r3 = r2 ^ 1
    if r3 goto L2 else goto L7 :: bool
L2:
    r4 = 'Property '
    r5 = ' not found on '
    r6 = ' class. `'
    r7 = '.factory` only accepts keyword arguments which are present on the '
    r8 = ' class'
    r9 = CPyStr_Build(9, r4, key, r5, class_name, r6, class_name, r7, class_name, r8)
    if is_error(r9) goto L8 (error at verify_attr:29) else goto L3
L3:
    r10 = faster_web3._utils.datatypes.globals :: static
    r11 = 'Web3AttributeError'
    r12 = CPyDict_GetItem(r10, r11)
    if is_error(r12) goto L9 (error at verify_attr:28) else goto L4
L4:
    r13 = [r9]
    r14 = load_address r13
    r15 = PyObject_Vectorcall(r12, r14, 1, 0)
    dec_ref r12
    if is_error(r15) goto L9 (error at verify_attr:28) else goto L5
L5:
    dec_ref r9
    CPy_Raise(r15)
    dec_ref r15
    if not 0 goto L8 (error at verify_attr:28) else goto L6 :: bool
L6:
    unreachable
L7:
    return 1
L8:
    r16 = <error> :: None
    return r16
L9:
    dec_ref r9
    goto L8

def __init___PropertyCheckingFactory_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2, r3 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    inc_ref __mypyc_self__
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    if is_error(r2) goto L4 else goto L3
L3:
    return r2
L4:
    r3 = <error> :: object
    return r3

def __init___PropertyCheckingFactory_obj.__call__(__mypyc_self__, cls, name, bases, namespace, kwargs):
    __mypyc_self__ :: faster_web3._utils.datatypes.__init___PropertyCheckingFactory_obj
    cls :: faster_web3._utils.datatypes.PropertyCheckingFactory
    name :: str
    bases :: tuple
    namespace, kwargs :: dict
    r0 :: object
    r1 :: str
    r2 :: object[5]
    r3 :: object_ptr
    r4 :: object
    r5 :: None
L0:
    r0 = load_address PyType_Type
    r1 = '__init__'
    r2 = [r0, cls, name, bases, namespace]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775813, 0)
    if is_error(r4) goto L2 (error at __init__:46) else goto L3
L1:
    return 1
L2:
    r5 = <error> :: None
    return r5
L3:
    dec_ref r4
    goto L1

def __new___PropertyCheckingFactory_obj.__get__(__mypyc_self__, instance, owner):
    __mypyc_self__, instance, owner, r0 :: object
    r1 :: bit
    r2, r3 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = instance == r0
    if r1 goto L1 else goto L2 :: bool
L1:
    inc_ref __mypyc_self__
    return __mypyc_self__
L2:
    r2 = PyMethod_New(__mypyc_self__, instance)
    if is_error(r2) goto L4 else goto L3
L3:
    return r2
L4:
    r3 = <error> :: object
    return r3

def __new___PropertyCheckingFactory_obj.__call__(__mypyc_self__, mcs, name, bases, namespace, normalizers):
    __mypyc_self__ :: faster_web3._utils.datatypes.__new___PropertyCheckingFactory_obj
    mcs :: object
    name :: str
    bases :: tuple[object]
    namespace :: dict
    normalizers :: union[dict, None]
    r0 :: object
    r1 :: list
    r2, r3, r4 :: object
    r5 :: str
    r6 :: object
    r7 :: tuple
    r8 :: i32
    r9, r10 :: bit
    r11, r12 :: object
    r13 :: bool
    r14 :: object[1]
    r15 :: object_ptr
    r16 :: object
    r17 :: set
    r18 :: list
    r19, r20 :: object
    r21 :: str
    r22 :: object
    r23 :: str
    r24 :: object[1]
    r25 :: object_ptr
    r26 :: object
    r27 :: i32
    r28, r29 :: bit
    r30, r31 :: object
    r32 :: bool
    r33 :: object[1]
    r34 :: object_ptr
    r35 :: object
    r36 :: set
    r37 :: short_int
    r38 :: native_int
    r39 :: object
    r40 :: tuple[bool, short_int, object]
    r41 :: short_int
    r42 :: bool
    r43 :: object
    r44 :: str
    r45 :: None
    r46, r47 :: bit
    r48 :: object
    r49 :: bit
    r50 :: dict
    r51 :: native_int
    r52 :: short_int
    r53 :: bit
    r54 :: dict
    r55 :: object
    r56 :: bool
    r57 :: object[2]
    r58 :: object_ptr
    r59 :: object
    r60, processed_namespace :: dict
    r61 :: object
    r62 :: str
    r63 :: object
    r64 :: object[5]
    r65 :: object_ptr
    r66 :: object
    r67, r68 :: faster_web3._utils.datatypes.PropertyCheckingFactory
L0:
    if is_error(normalizers) goto L1 else goto L49
L1:
    r0 = box(None, 1)
    inc_ref r0
    normalizers = r0
L2:
    r1 = PyList_New(0)
    if is_error(r1) goto L50 (error at __new__:56) else goto L3
L3:
    inc_ref bases
    r2 = box(tuple[object], bases)
    r3 = PyObject_GetIter(r2)
    dec_ref r2
    if is_error(r3) goto L51 (error at __new__:56) else goto L4
L4:
    r4 = PyIter_Next(r3)
    if is_error(r4) goto L52 else goto L5
L5:
    r5 = '__mro__'
    r6 = CPyObject_GetAttr(r4, r5)
    dec_ref r4
    if is_error(r6) goto L53 (error at __new__:56) else goto L6
L6:
    r7 = cast(tuple, r6)
    if is_error(r7) goto L53 (error at __new__:56) else goto L7
L7:
    r8 = PyList_Append(r1, r7)
    dec_ref r7
    r9 = r8 >= 0 :: signed
    if not r9 goto L53 (error at __new__:56) else goto L4 :: bool
L8:
    r10 = CPy_NoErrOccurred()
    if not r10 goto L51 (error at __new__:56) else goto L9 :: bool
L9:
    r11 = PyObject_GetIter(r1)
    dec_ref r1
    if is_error(r11) goto L50 (error at __new__:56) else goto L10
L10:
    r12 = faster_web3._utils.datatypes.concat :: static
    if is_error(r12) goto L54 else goto L13
L11:
    r13 = raise NameError('value for final name "concat" was not set')
    if not r13 goto L48 (error at __new__:56) else goto L12 :: bool
L12:
    unreachable
L13:
    r14 = [r11]
    r15 = load_address r14
    r16 = PyObject_Vectorcall(r12, r15, 1, 0)
    if is_error(r16) goto L55 (error at __new__:56) else goto L14
L14:
    dec_ref r11
    r17 = PySet_New(r16)
    dec_ref r16
    if is_error(r17) goto L50 (error at __new__:56) else goto L15
L15:
    r18 = PyList_New(0)
    if is_error(r18) goto L56 (error at __new__:57) else goto L16
L16:
    r19 = PyObject_GetIter(r17)
    dec_ref r17
    if is_error(r19) goto L57 (error at __new__:57) else goto L17
L17:
    r20 = PyIter_Next(r19)
    if is_error(r20) goto L58 else goto L18
L18:
    r21 = '__dict__'
    r22 = CPyObject_GetAttr(r20, r21)
    dec_ref r20
    if is_error(r22) goto L59 (error at __new__:57) else goto L19
L19:
    r23 = 'keys'
    r24 = [r22]
    r25 = load_address r24
    r26 = PyObject_VectorcallMethod(r23, r25, 9223372036854775809, 0)
    if is_error(r26) goto L60 (error at __new__:57) else goto L20
L20:
    dec_ref r22
    r27 = PyList_Append(r18, r26)
    dec_ref r26
    r28 = r27 >= 0 :: signed
    if not r28 goto L59 (error at __new__:57) else goto L17 :: bool
L21:
    r29 = CPy_NoErrOccurred()
    if not r29 goto L57 (error at __new__:57) else goto L22 :: bool
L22:
    r30 = PyObject_GetIter(r18)
    dec_ref r18
    if is_error(r30) goto L50 (error at __new__:57) else goto L23
L23:
    r31 = faster_web3._utils.datatypes.concat :: static
    if is_error(r31) goto L61 else goto L26
L24:
    r32 = raise NameError('value for final name "concat" was not set')
    if not r32 goto L48 (error at __new__:57) else goto L25 :: bool
L25:
    unreachable
L26:
    r33 = [r30]
    r34 = load_address r33
    r35 = PyObject_Vectorcall(r31, r34, 1, 0)
    if is_error(r35) goto L62 (error at __new__:57) else goto L27
L27:
    dec_ref r30
    r36 = PySet_New(r35)
    dec_ref r35
    if is_error(r36) goto L50 (error at __new__:57) else goto L28
L28:
    r37 = 0
    r38 = PyDict_Size(namespace)
    r39 = CPyDict_GetKeysIter(namespace)
    if is_error(r39) goto L63 (error at __new__:59) else goto L29
L29:
    r40 = CPyDict_NextKey(r39, r37)
    r41 = r40[1]
    r37 = r41
    r42 = r40[0]
    if r42 goto L30 else goto L64 :: bool
L30:
    r43 = r40[2]
    dec_ref r40
    r44 = cast(str, r43)
    if is_error(r44) goto L65 (error at __new__:59) else goto L31
L31:
    r45 = verify_attr(name, r44, r36)
    dec_ref r44
    if is_error(r45) goto L65 (error at __new__:60) else goto L32
L32:
    r46 = CPyDict_CheckSize(namespace, r38)
    if not r46 goto L65 (error at __new__:59) else goto L29 :: bool
L33:
    r47 = CPy_NoErrOccurred()
    if not r47 goto L50 (error at __new__:59) else goto L34 :: bool
L34:
    r48 = load_address _Py_NoneStruct
    r49 = normalizers != r48
    if r49 goto L35 else goto L66 :: bool
L35:
    inc_ref normalizers
    r50 = cast(dict, normalizers)
    if is_error(r50) goto L50 (error at __new__:54) else goto L36
L36:
    r51 = PyDict_Size(r50)
    dec_ref r50
    r52 = r51 << 1
    r53 = r52 != 0
    if r53 goto L37 else goto L66 :: bool
L37:
    r54 = cast(dict, normalizers)
    if is_error(r54) goto L48 (error at __new__:64) else goto L38
L38:
    r55 = faster_web3._utils.datatypes.apply_formatters_to_dict :: static
    if is_error(r55) goto L67 else goto L41
L39:
    r56 = raise NameError('value for final name "apply_formatters_to_dict" was not set')
    if not r56 goto L48 (error at __new__:63) else goto L40 :: bool
L40:
    unreachable
L41:
    r57 = [r54, namespace]
    r58 = load_address r57
    r59 = PyObject_Vectorcall(r55, r58, 2, 0)
    if is_error(r59) goto L68 (error at __new__:63) else goto L42
L42:
    dec_ref r54
    r60 = cast(dict, r59)
    if is_error(r60) goto L48 (error at __new__:63) else goto L43
L43:
    processed_namespace = r60
    goto L45
L44:
    inc_ref namespace
    processed_namespace = namespace
L45:
    r61 = load_address PyType_Type
    r62 = '__new__'
    inc_ref bases
    r63 = box(tuple[object], bases)
    r64 = [r61, mcs, name, r63, processed_namespace]
    r65 = load_address r64
    r66 = PyObject_VectorcallMethod(r62, r65, 9223372036854775813, 0)
    if is_error(r66) goto L69 (error at __new__:70) else goto L46
L46:
    dec_ref r63
    dec_ref processed_namespace
    r67 = cast(faster_web3._utils.datatypes.PropertyCheckingFactory, r66)
    if is_error(r67) goto L48 (error at __new__:70) else goto L47
L47:
    return r67
L48:
    r68 = <error> :: faster_web3._utils.datatypes.PropertyCheckingFactory
    return r68
L49:
    inc_ref normalizers
    goto L2
L50:
    dec_ref normalizers
    goto L48
L51:
    dec_ref normalizers
    dec_ref r1
    goto L48
L52:
    dec_ref r3
    goto L8
L53:
    dec_ref normalizers
    dec_ref r1
    dec_ref r3
    goto L48
L54:
    dec_ref normalizers
    dec_ref r11
    goto L11
L55:
    dec_ref normalizers
    dec_ref r11
    goto L48
L56:
    dec_ref normalizers
    dec_ref r17
    goto L48
L57:
    dec_ref normalizers
    dec_ref r18
    goto L48
L58:
    dec_ref r19
    goto L21
L59:
    dec_ref normalizers
    dec_ref r18
    dec_ref r19
    goto L48
L60:
    dec_ref normalizers
    dec_ref r18
    dec_ref r19
    dec_ref r22
    goto L48
L61:
    dec_ref normalizers
    dec_ref r30
    goto L24
L62:
    dec_ref normalizers
    dec_ref r30
    goto L48
L63:
    dec_ref normalizers
    dec_ref r36
    goto L48
L64:
    dec_ref r36
    dec_ref r39
    dec_ref r40
    goto L33
L65:
    dec_ref normalizers
    dec_ref r36
    dec_ref r39
    goto L48
L66:
    dec_ref normalizers
    goto L44
L67:
    dec_ref r54
    goto L39
L68:
    dec_ref r54
    goto L48
L69:
    dec_ref processed_namespace
    dec_ref r63
    goto L48

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9, r10 :: object_ptr
    r11 :: object_ptr[2]
    r12 :: c_ptr
    r13 :: native_int[2]
    r14 :: c_ptr
    r15 :: object
    r16 :: dict
    r17, r18 :: str
    r19 :: bit
    r20 :: object
    r21 :: str
    r22 :: dict
    r23, r24 :: object
    r25 :: str
    r26 :: dict
    r27, r28 :: object
    r29 :: str
    r30 :: object
    r31 :: dict
    r32 :: str
    r33 :: i32
    r34 :: bit
    r35 :: object
    r36 :: str
    r37 :: object
    r38 :: dict
    r39 :: str
    r40 :: i32
    r41 :: bit
    r42 :: object
    r43 :: str
    r44 :: object
    r45 :: tuple
    r46, r47 :: object
    r48 :: str
    r49 :: bool
    r50, r51 :: str
    r52 :: object
    r53 :: object[2]
    r54 :: object_ptr
    r55 :: object
    r56, r57, r58, r59 :: dict
    r60 :: faster_web3._utils.datatypes.__init___PropertyCheckingFactory_obj
    r61 :: str
    r62 :: i32
    r63 :: bit
    r64 :: faster_web3._utils.datatypes.__new___PropertyCheckingFactory_obj
    r65 :: object
    r66 :: str
    r67 :: object
    r68 :: object[1]
    r69 :: object_ptr
    r70 :: object
    r71 :: str
    r72 :: i32
    r73 :: bit
    r74, r75 :: str
    r76 :: i32
    r77 :: bit
    r78, r79 :: str
    r80 :: i32
    r81 :: bit
    r82, r83 :: str
    r84 :: i32
    r85 :: bit
    r86 :: object[3]
    r87 :: object_ptr
    r88 :: object
    r89 :: dict
    r90 :: str
    r91, r92 :: object
    r93 :: object[1]
    r94 :: object_ptr
    r95, r96 :: object
    r97 :: object[1]
    r98 :: object_ptr
    r99 :: object
    r100 :: dict
    r101 :: str
    r102 :: i32
    r103 :: bit
    r104 :: object
    r105 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L37 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Any', 'Collection', 'Dict', 'Final', 'Optional', 'Tuple', 'Type')
    r6 = 'typing'
    r7 = faster_web3._utils.datatypes.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L37 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = load_address faster_eth_utils :: module
    r10 = load_address faster_eth_utils.toolz :: module
    r11 = [r9, r10]
    r12 = load_address r11
    r13 = [11, 12]
    r14 = load_address r13
    r15 = (('faster_eth_utils', 'faster_eth_utils', 'faster_eth_utils'), ('faster_eth_utils.toolz', 'faster_eth_utils', 'faster_eth_utils'))
    r16 = faster_web3._utils.datatypes.globals :: static
    r17 = 'faster_web3/_utils/datatypes.py'
    r18 = '<module>'
    r19 = CPyImport_ImportMany(r15, r12, r16, r17, r18, r14)
    if not r19 goto L37 else goto L5 :: bool
L5:
    r20 = ('mypyc_attr',)
    r21 = 'mypy_extensions'
    r22 = faster_web3._utils.datatypes.globals :: static
    r23 = CPyImport_ImportFromMany(r21, r20, r20, r22)
    if is_error(r23) goto L37 (error at <module>:13) else goto L6
L6:
    mypy_extensions = r23 :: module
    dec_ref r23
    r24 = ('Web3AttributeError',)
    r25 = 'faster_web3.exceptions'
    r26 = faster_web3._utils.datatypes.globals :: static
    r27 = CPyImport_ImportFromMany(r25, r24, r24, r26)
    if is_error(r27) goto L37 (error at <module>:17) else goto L7
L7:
    faster_web3.exceptions = r27 :: module
    dec_ref r27
    r28 = faster_eth_utils :: module
    r29 = 'apply_formatters_to_dict'
    r30 = CPyObject_GetAttr(r28, r29)
    if is_error(r30) goto L37 (error at <module>:22) else goto L8
L8:
    faster_web3._utils.datatypes.apply_formatters_to_dict = r30 :: static
    r31 = faster_web3._utils.datatypes.globals :: static
    r32 = 'apply_formatters_to_dict'
    r33 = CPyDict_SetItem(r31, r32, r30)
    dec_ref r30
    r34 = r33 >= 0 :: signed
    if not r34 goto L37 (error at <module>:22) else goto L9 :: bool
L9:
    r35 = faster_eth_utils.toolz :: module
    r36 = 'concat'
    r37 = CPyObject_GetAttr(r35, r36)
    if is_error(r37) goto L37 (error at <module>:23) else goto L10
L10:
    faster_web3._utils.datatypes.concat = r37 :: static
    r38 = faster_web3._utils.datatypes.globals :: static
    r39 = 'concat'
    r40 = CPyDict_SetItem(r38, r39, r37)
    dec_ref r37
    r41 = r40 >= 0 :: signed
    if not r41 goto L37 (error at <module>:23) else goto L11 :: bool
L11:
    r42 = builtins :: module
    r43 = 'type'
    r44 = CPyObject_GetAttr(r42, r43)
    if is_error(r44) goto L37 (error at <module>:36) else goto L12
L12:
    r45 = PyTuple_Pack(1, r44)
    dec_ref r44
    if is_error(r45) goto L37 (error at <module>:36) else goto L13
L13:
    r46 = load_address PyType_Type
    r47 = CPy_CalculateMetaclass(r46, r45)
    if is_error(r47) goto L38 (error at <module>:36) else goto L14
L14:
    r48 = '__prepare__'
    r49 = PyObject_HasAttr(r47, r48)
    if r49 goto L15 else goto L19 :: bool
L15:
    r50 = 'PropertyCheckingFactory'
    r51 = '__prepare__'
    r52 = CPyObject_GetAttr(r47, r51)
    if is_error(r52) goto L38 (error at <module>:36) else goto L16
L16:
    r53 = [r50, r45]
    r54 = load_address r53
    r55 = PyObject_Vectorcall(r52, r54, 2, 0)
    dec_ref r52
    if is_error(r55) goto L38 (error at <module>:36) else goto L17
L17:
    r56 = cast(dict, r55)
    if is_error(r56) goto L38 (error at <module>:36) else goto L18
L18:
    r57 = r56
    goto L21
L19:
    r58 = PyDict_New()
    if is_error(r58) goto L38 (error at <module>:36) else goto L20
L20:
    r57 = r58
L21:
    r59 = PyDict_New()
    if is_error(r59) goto L39 (error at <module>:36) else goto L22
L22:
    r60 = __init___PropertyCheckingFactory_obj()
    if is_error(r60) goto L40 (error at <module>:37) else goto L23
L23:
    r61 = '__init__'
    r62 = CPyDict_SetItem(r57, r61, r60)
    dec_ref r60
    r63 = r62 >= 0 :: signed
    if not r63 goto L40 (error at <module>:37) else goto L24 :: bool
L24:
    r64 = __new___PropertyCheckingFactory_obj()
    if is_error(r64) goto L40 (error at <module>:49) else goto L25
L25:
    r65 = builtins :: module
    r66 = 'staticmethod'
    r67 = CPyObject_GetAttr(r65, r66)
    if is_error(r67) goto L41 (error at <module>:49) else goto L26
L26:
    r68 = [r64]
    r69 = load_address r68
    r70 = PyObject_Vectorcall(r67, r69, 1, 0)
    dec_ref r67
    if is_error(r70) goto L41 (error at <module>:49) else goto L27
L27:
    dec_ref r64
    r71 = '__new__'
    r72 = CPyDict_SetItem(r57, r71, r70)
    dec_ref r70
    r73 = r72 >= 0 :: signed
    if not r73 goto L40 (error at <module>:49) else goto L28 :: bool
L28:
    r74 = 'PropertyCheckingFactory'
    r75 = '__annotations__'
    r76 = CPyDict_SetItem(r57, r75, r59)
    dec_ref r59
    r77 = r76 >= 0 :: signed
    if not r77 goto L39 (error at <module>:36) else goto L29 :: bool
L29:
    r78 = 'mypyc filler docstring'
    r79 = '__doc__'
    r80 = CPyDict_SetItem(r57, r79, r78)
    r81 = r80 >= 0 :: signed
    if not r81 goto L39 (error at <module>:36) else goto L30 :: bool
L30:
    r82 = 'faster_web3._utils.datatypes'
    r83 = '__module__'
    r84 = CPyDict_SetItem(r57, r83, r82)
    r85 = r84 >= 0 :: signed
    if not r85 goto L39 (error at <module>:36) else goto L31 :: bool
L31:
    r86 = [r74, r45, r57]
    r87 = load_address r86
    r88 = PyObject_Vectorcall(r47, r87, 3, 0)
    if is_error(r88) goto L39 (error at <module>:36) else goto L32
L32:
    dec_ref r57
    dec_ref r45
    r89 = faster_web3._utils.datatypes.globals :: static
    r90 = 'mypyc_attr'
    r91 = CPyDict_GetItem(r89, r90)
    if is_error(r91) goto L42 (error at <module>:35) else goto L33
L33:
    r92 = box(bool, 0)
    r93 = [r92]
    r94 = load_address r93
    r95 = ('native_class',)
    r96 = PyObject_Vectorcall(r91, r94, 0, r95)
    dec_ref r91
    if is_error(r96) goto L42 (error at <module>:35) else goto L34
L34:
    r97 = [r88]
    r98 = load_address r97
    r99 = PyObject_Vectorcall(r96, r98, 1, 0)
    dec_ref r96
    if is_error(r99) goto L42 (error at <module>:36) else goto L35
L35:
    dec_ref r88
    faster_web3._utils.datatypes.PropertyCheckingFactory = r99 :: type
    r100 = faster_web3._utils.datatypes.globals :: static
    r101 = 'PropertyCheckingFactory'
    r102 = PyDict_SetItem(r100, r101, r99)
    dec_ref r99
    r103 = r102 >= 0 :: signed
    if not r103 goto L37 (error at <module>:36) else goto L36 :: bool
L36:
    r104 = faster_web3._utils.datatypes.PropertyCheckingFactory :: type
    return 1
L37:
    r105 = <error> :: None
    return r105
L38:
    dec_ref r45
    goto L37
L39:
    dec_ref r45
    dec_ref r57
    goto L37
L40:
    dec_ref r45
    dec_ref r57
    dec_ref r59
    goto L37
L41:
    dec_ref r45
    dec_ref r57
    dec_ref r59
    dec_ref r64
    goto L37
L42:
    dec_ref r88
    goto L37

def AsyncBeacon.__init__(self, base_url, request_timeout, __bitmap):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    base_url :: str
    request_timeout :: float
    __bitmap, r0 :: u32
    r1 :: bit
    r2 :: dict
    r3 :: str
    r4, r5 :: object
    r6 :: None
L0:
    r0 = __bitmap & 1
    r1 = r0 == 0
    if r1 goto L1 else goto L2 :: bool
L1:
    request_timeout = 10.0
L2:
    inc_ref base_url
    self.base_url = base_url
    self.request_timeout = request_timeout
    r2 = faster_web3.beacon.async_beacon.globals :: static
    r3 = 'HTTPSessionManager'
    r4 = CPyDict_GetItem(r2, r3)
    if is_error(r4) goto L5 (error at __init__:80) else goto L3
L3:
    r5 = PyObject_Vectorcall(r4, 0, 0, 0)
    dec_ref r4
    if is_error(r5) goto L5 (error at __init__:80) else goto L4
L4:
    self._request_session_manager = r5
    return 1
L5:
    r6 = <error> :: None
    return r6

def _async_make_get_request_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1 :: object
    r2 :: i32
    r3 :: object
    r4 :: bit
    r5 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r6, r7, r8 :: str
    r9 :: bool
    r10 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r11 :: object
    r12 :: str
    r13 :: union[dict, None]
    r14 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r15 :: float
    r16 :: dict
    r17 :: str
    r18, r19 :: object
    r20 :: object[1]
    r21 :: object_ptr
    r22 :: object
    r23 :: str
    r24 :: object[4]
    r25 :: object_ptr
    r26, r27, r28 :: object
    r29 :: bool
    r30, r31, r32, r33, r34 :: object
    r35 :: bool
    r36 :: object
    r37 :: bool
    r38 :: object
    r39 :: bit
    r40 :: tuple[object, object, object]
    r41 :: bool
    r42 :: object_ptr
    r43 :: object
    r44 :: bool
    r45, r46, r47 :: tuple[object, object, object]
    r48 :: bit
    r49, r50, r51 :: object
    r52 :: dict
    r53 :: bool
    r54, r55 :: bit
    r56 :: bool
    r57 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = __mypyc_self__.__mypyc_next_label__
    goto L49
L1:
    r3 = load_address _Py_NoneStruct
    r4 = type != r3
    if r4 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L53 (error at _async_make_get_request:82) else goto L3 :: bool
L3:
    unreachable
L4:
    r5 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r5) goto L53 (error at _async_make_get_request:85) else goto L5
L5:
    r6 = r5.base_url
    dec_ref r5
    r7 = __mypyc_self__.__mypyc_generator_attribute__endpoint_uri
    if is_error(r7) goto L54 (error at _async_make_get_request:85) else goto L6
L6:
    r8 = PyUnicode_Concat(r6, r7)
    dec_ref r6
    dec_ref r7
    if is_error(r8) goto L53 (error at _async_make_get_request:85) else goto L7
L7:
    __mypyc_self__.__mypyc_generator_attribute__uri = r8; r9 = is_error
    if not r9 goto L53 (error at _async_make_get_request:85) else goto L8 :: bool
L8:
    r10 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r10) goto L53 (error at _async_make_get_request:86) else goto L9
L9:
    r11 = r10._request_session_manager
    dec_ref r10
    r12 = __mypyc_self__.__mypyc_generator_attribute__uri
    if is_error(r12) goto L55 (error at _async_make_get_request:87) else goto L10
L10:
    r13 = __mypyc_self__.__mypyc_generator_attribute__params
    if is_error(r13) goto L56 (error at _async_make_get_request:87) else goto L11
L11:
    r14 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r14) goto L57 (error at _async_make_get_request:87) else goto L12
L12:
    r15 = r14.request_timeout
    dec_ref r14
    r16 = faster_web3.beacon.async_beacon.globals :: static
    r17 = 'ClientTimeout'
    r18 = CPyDict_GetItem(r16, r17)
    if is_error(r18) goto L57 (error at _async_make_get_request:87) else goto L13
L13:
    r19 = box(float, r15)
    r20 = [r19]
    r21 = load_address r20
    r22 = PyObject_Vectorcall(r18, r21, 1, 0)
    dec_ref r18
    if is_error(r22) goto L58 (error at _async_make_get_request:87) else goto L14
L14:
    dec_ref r19
    r23 = 'async_json_make_get_request'
    r24 = [r11, r12, r13, r22]
    r25 = load_address r24
    r26 = ('params', 'timeout')
    r27 = PyObject_VectorcallMethod(r23, r25, 9223372036854775810, r26)
    if is_error(r27) goto L59 (error at _async_make_get_request:86) else goto L15
L15:
    dec_ref r11
    dec_ref r12
    dec_ref r13
    dec_ref r22
    r28 = CPy_GetCoro(r27)
    dec_ref r27
    if is_error(r28) goto L53 (error at _async_make_get_request:86) else goto L16
L16:
    __mypyc_self__.__mypyc_temp__0 = r28; r29 = is_error
    if not r29 goto L53 (error at _async_make_get_request:-1) else goto L17 :: bool
L17:
    r30 = __mypyc_self__.__mypyc_temp__0
    if is_error(r30) goto L53 (error at _async_make_get_request:-1) else goto L18
L18:
    r31 = CPyIter_Next(r30)
    dec_ref r30
    if is_error(r31) goto L19 else goto L21
L19:
    r32 = CPy_FetchStopIterationValue()
    if is_error(r32) goto L53 (error at _async_make_get_request:86) else goto L20
L20:
    r33 = r32
    r34 = <error> :: object
    __mypyc_self__.__mypyc_temp__0 = r34; r35 = is_error
    if not r35 goto L60 (error at _async_make_get_request:86) else goto L43 :: bool
L21:
    r36 = r31
L22:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r36
L23:
    r38 = load_address _Py_NoneStruct
    r39 = type != r38
    if r39 goto L24 else goto L61 :: bool
L24:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L27 (error at _async_make_get_request:86) else goto L62 :: bool
L25:
    unreachable
L26:
    inc_ref arg
    goto L38
L27:
    r40 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__1 = r40; r41 = is_error
    if not r41 goto L63 (error at _async_make_get_request:-1) else goto L28 :: bool
L28:
    r42 = load_address r1
    r43 = __mypyc_self__.__mypyc_temp__0
    if is_error(r43) goto L63 (error at _async_make_get_request:-1) else goto L29
L29:
    r44 = CPy_YieldFromErrorHandle(r43, r42)
    dec_ref r43
    if is_error(r44) goto L63 (error at _async_make_get_request:86) else goto L30
L30:
    if r44 goto L33 else goto L31 :: bool
L31:
    r36 = r1
    r45 = __mypyc_self__.__mypyc_temp__1
    if is_error(r45) goto L64 (error at _async_make_get_request:-1) else goto L32
L32:
    CPy_RestoreExcInfo(r45)
    dec_ref r45
    goto L22
L33:
    r33 = r1
    r46 = __mypyc_self__.__mypyc_temp__1
    if is_error(r46) goto L65 (error at _async_make_get_request:-1) else goto L34
L34:
    CPy_RestoreExcInfo(r46)
    dec_ref r46
    goto L43
L35:
    r47 = __mypyc_self__.__mypyc_temp__1
    if is_error(r47) goto L53 (error at _async_make_get_request:-1) else goto L36
L36:
    CPy_RestoreExcInfo(r47)
    dec_ref r47
    r48 = CPy_KeepPropagating()
    if not r48 goto L53 else goto L37 :: bool
L37:
    unreachable
L38:
    r49 = __mypyc_self__.__mypyc_temp__0
    if is_error(r49) goto L66 (error at _async_make_get_request:-1) else goto L39
L39:
    r50 = CPyIter_Send(r49, arg)
    dec_ref r49
    dec_ref arg
    if is_error(r50) goto L41 else goto L40
L40:
    r36 = r50
    goto L22
L41:
    r51 = CPy_FetchStopIterationValue()
    if is_error(r51) goto L53 (error at _async_make_get_request:86) else goto L42
L42:
    r33 = r51
L43:
    r52 = cast(dict, r33)
    if is_error(r52) goto L53 (error at _async_make_get_request:86) else goto L44
L44:
    __mypyc_self__.__mypyc_next_label__ = -1
L45:
    if is_error(stop_iter_ptr) goto L46 else goto L48
L46:
    CPyGen_SetStopIterationValue(r52)
    dec_ref r52
    if not 0 goto L53 else goto L47 :: bool
L47:
    unreachable
L48:
    set_mem stop_iter_ptr, r52 :: builtins.object*
    return 0
L49:
    r54 = r2 == 0
    if r54 goto L67 else goto L50 :: bool
L50:
    r55 = r2 == 1
    if r55 goto L23 else goto L68 :: bool
L51:
    r56 = raise StopIteration
    if not r56 goto L53 (error at _async_make_get_request:82) else goto L52 :: bool
L52:
    unreachable
L53:
    r57 = <error> :: object
    return r57
L54:
    dec_ref r6
    goto L53
L55:
    dec_ref r11
    goto L53
L56:
    dec_ref r11
    dec_ref r12
    goto L53
L57:
    dec_ref r11
    dec_ref r12
    dec_ref r13
    goto L53
L58:
    dec_ref r11
    dec_ref r12
    dec_ref r13
    dec_ref r19
    goto L53
L59:
    dec_ref r11
    dec_ref r12
    dec_ref r13
    dec_ref r22
    goto L53
L60:
    dec_ref r33
    goto L53
L61:
    xdec_ref r1
    goto L26
L62:
    xdec_ref r1
    goto L25
L63:
    xdec_ref r1
    goto L35
L64:
    dec_ref r36
    goto L35
L65:
    dec_ref r33
    goto L35
L66:
    dec_ref arg
    goto L53
L67:
    xdec_ref r1
    goto L1
L68:
    xdec_ref r1
    goto L51

def _async_make_get_request_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _async_make_get_request_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _async_make_get_request_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _async_make_get_request_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _async_make_get_request_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def _async_make_get_request_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = _async_make_get_request_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def _async_make_get_request_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def _async_make_get_request_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon._async_make_get_request(self, endpoint_uri, params):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    endpoint_uri :: str
    params :: union[dict, None]
    r0 :: object
    r1 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r2, r3, r4, r5 :: bool
    r6 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
L0:
    if is_error(params) goto L1 else goto L8
L1:
    r0 = box(None, 1)
    inc_ref r0
    params = r0
L2:
    r1 = _async_make_get_request_AsyncBeacon_gen()
    if is_error(r1) goto L9 (error at _async_make_get_request:82) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L10 (error at _async_make_get_request:82) else goto L4 :: bool
L4:
    inc_ref endpoint_uri
    r1.__mypyc_generator_attribute__endpoint_uri = endpoint_uri; r4 = is_error
    if not r4 goto L10 (error at _async_make_get_request:82) else goto L5 :: bool
L5:
    r1.__mypyc_generator_attribute__params = params; r5 = is_error
    if not r5 goto L11 (error at _async_make_get_request:82) else goto L6 :: bool
L6:
    return r1
L7:
    r6 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    return r6
L8:
    inc_ref params
    goto L2
L9:
    dec_ref params
    goto L7
L10:
    dec_ref params
    dec_ref r1
    goto L7
L11:
    dec_ref r1
    goto L7

def _async_make_post_request_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1 :: object
    r2 :: i32
    r3 :: object
    r4 :: bit
    r5 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r6, r7, r8 :: str
    r9 :: bool
    r10 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r11 :: object
    r12 :: str
    r13 :: union[list, dict]
    r14 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r15 :: float
    r16 :: str
    r17 :: object
    r18 :: object[4]
    r19 :: object_ptr
    r20, r21, r22 :: object
    r23 :: bool
    r24, r25, r26, r27, r28 :: object
    r29 :: bool
    r30 :: object
    r31 :: bool
    r32 :: object
    r33 :: bit
    r34 :: tuple[object, object, object]
    r35 :: bool
    r36 :: object_ptr
    r37 :: object
    r38 :: bool
    r39, r40, r41 :: tuple[object, object, object]
    r42 :: bit
    r43, r44, r45 :: object
    r46 :: dict
    r47 :: bool
    r48, r49 :: bit
    r50 :: bool
    r51 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = __mypyc_self__.__mypyc_next_label__
    goto L47
L1:
    r3 = load_address _Py_NoneStruct
    r4 = type != r3
    if r4 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L51 (error at _async_make_post_request:90) else goto L3 :: bool
L3:
    unreachable
L4:
    r5 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r5) goto L51 (error at _async_make_post_request:93) else goto L5
L5:
    r6 = r5.base_url
    dec_ref r5
    r7 = __mypyc_self__.__mypyc_generator_attribute__endpoint_uri
    if is_error(r7) goto L52 (error at _async_make_post_request:93) else goto L6
L6:
    r8 = PyUnicode_Concat(r6, r7)
    dec_ref r6
    dec_ref r7
    if is_error(r8) goto L51 (error at _async_make_post_request:93) else goto L7
L7:
    __mypyc_self__.__mypyc_generator_attribute__uri = r8; r9 = is_error
    if not r9 goto L51 (error at _async_make_post_request:93) else goto L8 :: bool
L8:
    r10 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r10) goto L51 (error at _async_make_post_request:94) else goto L9
L9:
    r11 = r10._request_session_manager
    dec_ref r10
    r12 = __mypyc_self__.__mypyc_generator_attribute__uri
    if is_error(r12) goto L53 (error at _async_make_post_request:95) else goto L10
L10:
    r13 = __mypyc_self__.__mypyc_generator_attribute__body
    if is_error(r13) goto L54 (error at _async_make_post_request:95) else goto L11
L11:
    r14 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r14) goto L55 (error at _async_make_post_request:95) else goto L12
L12:
    r15 = r14.request_timeout
    dec_ref r14
    r16 = 'async_json_make_post_request'
    r17 = box(float, r15)
    r18 = [r11, r12, r13, r17]
    r19 = load_address r18
    r20 = ('json', 'timeout')
    r21 = PyObject_VectorcallMethod(r16, r19, 9223372036854775810, r20)
    if is_error(r21) goto L56 (error at _async_make_post_request:94) else goto L13
L13:
    dec_ref r11
    dec_ref r12
    dec_ref r13
    dec_ref r17
    r22 = CPy_GetCoro(r21)
    dec_ref r21
    if is_error(r22) goto L51 (error at _async_make_post_request:94) else goto L14
L14:
    __mypyc_self__.__mypyc_temp__2 = r22; r23 = is_error
    if not r23 goto L51 (error at _async_make_post_request:-1) else goto L15 :: bool
L15:
    r24 = __mypyc_self__.__mypyc_temp__2
    if is_error(r24) goto L51 (error at _async_make_post_request:-1) else goto L16
L16:
    r25 = CPyIter_Next(r24)
    dec_ref r24
    if is_error(r25) goto L17 else goto L19
L17:
    r26 = CPy_FetchStopIterationValue()
    if is_error(r26) goto L51 (error at _async_make_post_request:94) else goto L18
L18:
    r27 = r26
    r28 = <error> :: object
    __mypyc_self__.__mypyc_temp__2 = r28; r29 = is_error
    if not r29 goto L57 (error at _async_make_post_request:94) else goto L41 :: bool
L19:
    r30 = r25
L20:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r30
L21:
    r32 = load_address _Py_NoneStruct
    r33 = type != r32
    if r33 goto L22 else goto L58 :: bool
L22:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L25 (error at _async_make_post_request:94) else goto L59 :: bool
L23:
    unreachable
L24:
    inc_ref arg
    goto L36
L25:
    r34 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__3 = r34; r35 = is_error
    if not r35 goto L60 (error at _async_make_post_request:-1) else goto L26 :: bool
L26:
    r36 = load_address r1
    r37 = __mypyc_self__.__mypyc_temp__2
    if is_error(r37) goto L60 (error at _async_make_post_request:-1) else goto L27
L27:
    r38 = CPy_YieldFromErrorHandle(r37, r36)
    dec_ref r37
    if is_error(r38) goto L60 (error at _async_make_post_request:94) else goto L28
L28:
    if r38 goto L31 else goto L29 :: bool
L29:
    r30 = r1
    r39 = __mypyc_self__.__mypyc_temp__3
    if is_error(r39) goto L61 (error at _async_make_post_request:-1) else goto L30
L30:
    CPy_RestoreExcInfo(r39)
    dec_ref r39
    goto L20
L31:
    r27 = r1
    r40 = __mypyc_self__.__mypyc_temp__3
    if is_error(r40) goto L62 (error at _async_make_post_request:-1) else goto L32
L32:
    CPy_RestoreExcInfo(r40)
    dec_ref r40
    goto L41
L33:
    r41 = __mypyc_self__.__mypyc_temp__3
    if is_error(r41) goto L51 (error at _async_make_post_request:-1) else goto L34
L34:
    CPy_RestoreExcInfo(r41)
    dec_ref r41
    r42 = CPy_KeepPropagating()
    if not r42 goto L51 else goto L35 :: bool
L35:
    unreachable
L36:
    r43 = __mypyc_self__.__mypyc_temp__2
    if is_error(r43) goto L63 (error at _async_make_post_request:-1) else goto L37
L37:
    r44 = CPyIter_Send(r43, arg)
    dec_ref r43
    dec_ref arg
    if is_error(r44) goto L39 else goto L38
L38:
    r30 = r44
    goto L20
L39:
    r45 = CPy_FetchStopIterationValue()
    if is_error(r45) goto L51 (error at _async_make_post_request:94) else goto L40
L40:
    r27 = r45
L41:
    r46 = cast(dict, r27)
    if is_error(r46) goto L51 (error at _async_make_post_request:94) else goto L42
L42:
    __mypyc_self__.__mypyc_next_label__ = -1
L43:
    if is_error(stop_iter_ptr) goto L44 else goto L46
L44:
    CPyGen_SetStopIterationValue(r46)
    dec_ref r46
    if not 0 goto L51 else goto L45 :: bool
L45:
    unreachable
L46:
    set_mem stop_iter_ptr, r46 :: builtins.object*
    return 0
L47:
    r48 = r2 == 0
    if r48 goto L64 else goto L48 :: bool
L48:
    r49 = r2 == 1
    if r49 goto L21 else goto L65 :: bool
L49:
    r50 = raise StopIteration
    if not r50 goto L51 (error at _async_make_post_request:90) else goto L50 :: bool
L50:
    unreachable
L51:
    r51 = <error> :: object
    return r51
L52:
    dec_ref r6
    goto L51
L53:
    dec_ref r11
    goto L51
L54:
    dec_ref r11
    dec_ref r12
    goto L51
L55:
    dec_ref r11
    dec_ref r12
    dec_ref r13
    goto L51
L56:
    dec_ref r11
    dec_ref r12
    dec_ref r13
    dec_ref r17
    goto L51
L57:
    dec_ref r27
    goto L51
L58:
    xdec_ref r1
    goto L24
L59:
    xdec_ref r1
    goto L23
L60:
    xdec_ref r1
    goto L33
L61:
    dec_ref r30
    goto L33
L62:
    dec_ref r27
    goto L33
L63:
    dec_ref arg
    goto L51
L64:
    xdec_ref r1
    goto L1
L65:
    xdec_ref r1
    goto L49

def _async_make_post_request_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _async_make_post_request_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _async_make_post_request_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = _async_make_post_request_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def _async_make_post_request_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def _async_make_post_request_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = _async_make_post_request_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def _async_make_post_request_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def _async_make_post_request_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon._async_make_post_request(self, endpoint_uri, body):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    endpoint_uri :: str
    body :: union[list, dict]
    r0 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r1, r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
L0:
    r0 = _async_make_post_request_AsyncBeacon_gen()
    if is_error(r0) goto L5 (error at _async_make_post_request:90) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L6 (error at _async_make_post_request:90) else goto L2 :: bool
L2:
    inc_ref endpoint_uri
    r0.__mypyc_generator_attribute__endpoint_uri = endpoint_uri; r3 = is_error
    if not r3 goto L6 (error at _async_make_post_request:90) else goto L3 :: bool
L3:
    inc_ref body
    r0.__mypyc_generator_attribute__body = body; r4 = is_error
    if not r4 goto L6 (error at _async_make_post_request:90) else goto L4 :: bool
L4:
    return r0
L5:
    r5 = <error> :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    return r5
L6:
    dec_ref r0
    goto L5

def get_genesis_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_genesis:102) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_genesis:103) else goto L5
L5:
    r8 = '/eth/v1/beacon/genesis'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_genesis:103) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__4 = r10; r11 = is_error
    if not r11 goto L43 (error at get_genesis:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__4
    if is_error(r12) goto L43 (error at get_genesis:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_genesis:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__4 = r19; r20 = is_error
    if not r20 goto L46 (error at get_genesis:103) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_genesis:103) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__5 = r25; r26 = is_error
    if not r26 goto L49 (error at get_genesis:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__4
    if is_error(r28) goto L49 (error at get_genesis:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_genesis:103) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__5
    if is_error(r30) goto L50 (error at get_genesis:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__5
    if is_error(r31) goto L51 (error at get_genesis:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__5
    if is_error(r32) goto L43 (error at get_genesis:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__4
    if is_error(r34) goto L52 (error at get_genesis:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_genesis:103) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_genesis:103) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_genesis:102) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_genesis_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_genesis_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_genesis_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_genesis_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_genesis_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_genesis_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_genesis_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_genesis_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_genesis_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_genesis(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
L0:
    r0 = get_genesis_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_genesis:102) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_genesis:102) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_genesis_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_hash_root_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_hash_root:105) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_hash_root:106) else goto L5
L5:
    r8 = '/eth/v1/beacon/states/{0}/root'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L47 (error at get_hash_root:106) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_hash_root:106) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_hash_root:106) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_hash_root:106) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__6 = r16; r17 = is_error
    if not r17 goto L46 (error at get_hash_root:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__6
    if is_error(r18) goto L46 (error at get_hash_root:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_hash_root:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__6 = r25; r26 = is_error
    if not r26 goto L51 (error at get_hash_root:106) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_hash_root:106) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__7 = r31; r32 = is_error
    if not r32 goto L54 (error at get_hash_root:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__6
    if is_error(r34) goto L54 (error at get_hash_root:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_hash_root:106) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__7
    if is_error(r36) goto L55 (error at get_hash_root:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__7
    if is_error(r37) goto L56 (error at get_hash_root:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__7
    if is_error(r38) goto L46 (error at get_hash_root:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__6
    if is_error(r40) goto L57 (error at get_hash_root:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_hash_root:106) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_hash_root:106) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_hash_root:105) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_hash_root_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_hash_root_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_hash_root_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_hash_root_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_hash_root_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_hash_root_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_hash_root_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_hash_root_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_hash_root_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_hash_root(self, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
    r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_hash_root_AsyncBeacon_gen()
    if is_error(r1) goto L8 (error at get_hash_root:105) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L9 (error at get_hash_root:105) else goto L4 :: bool
L4:
    r1.__mypyc_generator_attribute__state_id = state_id; r4 = is_error
    if not r4 goto L10 (error at get_hash_root:105) else goto L5 :: bool
L5:
    return r1
L6:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_hash_root_AsyncBeacon_gen
    return r5
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6
L9:
    dec_ref state_id
    dec_ref r1
    goto L6
L10:
    dec_ref r1
    goto L6

def get_fork_data_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_fork_data:108) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_fork_data:109) else goto L5
L5:
    r8 = '/eth/v1/beacon/states/{0}/fork'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L47 (error at get_fork_data:109) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_fork_data:109) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_fork_data:109) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_fork_data:109) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__8 = r16; r17 = is_error
    if not r17 goto L46 (error at get_fork_data:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__8
    if is_error(r18) goto L46 (error at get_fork_data:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_fork_data:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__8 = r25; r26 = is_error
    if not r26 goto L51 (error at get_fork_data:109) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_fork_data:109) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__9 = r31; r32 = is_error
    if not r32 goto L54 (error at get_fork_data:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__8
    if is_error(r34) goto L54 (error at get_fork_data:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_fork_data:109) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__9
    if is_error(r36) goto L55 (error at get_fork_data:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__9
    if is_error(r37) goto L56 (error at get_fork_data:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__9
    if is_error(r38) goto L46 (error at get_fork_data:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__8
    if is_error(r40) goto L57 (error at get_fork_data:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_fork_data:109) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_fork_data:109) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_fork_data:108) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_fork_data_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_fork_data_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_fork_data_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_fork_data_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_fork_data_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_fork_data_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_fork_data_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_fork_data_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_fork_data_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_fork_data(self, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
    r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_fork_data_AsyncBeacon_gen()
    if is_error(r1) goto L8 (error at get_fork_data:108) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L9 (error at get_fork_data:108) else goto L4 :: bool
L4:
    r1.__mypyc_generator_attribute__state_id = state_id; r4 = is_error
    if not r4 goto L10 (error at get_fork_data:108) else goto L5 :: bool
L5:
    return r1
L6:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_fork_data_AsyncBeacon_gen
    return r5
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6
L9:
    dec_ref state_id
    dec_ref r1
    goto L6
L10:
    dec_ref r1
    goto L6

def get_finality_checkpoint_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_finality_checkpoint:111) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_finality_checkpoint:112) else goto L5
L5:
    r8 = '/eth/v1/beacon/states/{0}/finality_checkpoints'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L47 (error at get_finality_checkpoint:113) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_finality_checkpoint:113) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_finality_checkpoint:113) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_finality_checkpoint:112) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__10 = r16; r17 = is_error
    if not r17 goto L46 (error at get_finality_checkpoint:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__10
    if is_error(r18) goto L46 (error at get_finality_checkpoint:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_finality_checkpoint:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__10 = r25; r26 = is_error
    if not r26 goto L51 (error at get_finality_checkpoint:112) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_finality_checkpoint:112) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__11 = r31; r32 = is_error
    if not r32 goto L54 (error at get_finality_checkpoint:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__10
    if is_error(r34) goto L54 (error at get_finality_checkpoint:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_finality_checkpoint:112) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__11
    if is_error(r36) goto L55 (error at get_finality_checkpoint:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__11
    if is_error(r37) goto L56 (error at get_finality_checkpoint:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__11
    if is_error(r38) goto L46 (error at get_finality_checkpoint:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__10
    if is_error(r40) goto L57 (error at get_finality_checkpoint:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_finality_checkpoint:112) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_finality_checkpoint:112) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_finality_checkpoint:111) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_finality_checkpoint_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_finality_checkpoint_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_finality_checkpoint_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_finality_checkpoint_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_finality_checkpoint_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_finality_checkpoint_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_finality_checkpoint_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_finality_checkpoint_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_finality_checkpoint_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_finality_checkpoint(self, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
    r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_finality_checkpoint_AsyncBeacon_gen()
    if is_error(r1) goto L8 (error at get_finality_checkpoint:111) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L9 (error at get_finality_checkpoint:111) else goto L4 :: bool
L4:
    r1.__mypyc_generator_attribute__state_id = state_id; r4 = is_error
    if not r4 goto L10 (error at get_finality_checkpoint:111) else goto L5 :: bool
L5:
    return r1
L6:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_finality_checkpoint_AsyncBeacon_gen
    return r5
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6
L9:
    dec_ref state_id
    dec_ref r1
    goto L6
L10:
    dec_ref r1
    goto L6

def get_validators_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_validators:116) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_validators:117) else goto L5
L5:
    r8 = '/eth/v1/beacon/states/{0}/validators'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L47 (error at get_validators:117) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_validators:117) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_validators:117) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_validators:117) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__12 = r16; r17 = is_error
    if not r17 goto L46 (error at get_validators:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__12
    if is_error(r18) goto L46 (error at get_validators:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_validators:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__12 = r25; r26 = is_error
    if not r26 goto L51 (error at get_validators:117) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_validators:117) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__13 = r31; r32 = is_error
    if not r32 goto L54 (error at get_validators:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__12
    if is_error(r34) goto L54 (error at get_validators:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_validators:117) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__13
    if is_error(r36) goto L55 (error at get_validators:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__13
    if is_error(r37) goto L56 (error at get_validators:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__13
    if is_error(r38) goto L46 (error at get_validators:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__12
    if is_error(r40) goto L57 (error at get_validators:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_validators:117) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_validators:117) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_validators:116) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_validators_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_validators_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_validators_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_validators_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_validators_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_validators_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_validators_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_validators_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_validators_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_validators(self, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
    r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_validators_AsyncBeacon_gen()
    if is_error(r1) goto L8 (error at get_validators:116) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L9 (error at get_validators:116) else goto L4 :: bool
L4:
    r1.__mypyc_generator_attribute__state_id = state_id; r4 = is_error
    if not r4 goto L10 (error at get_validators:116) else goto L5 :: bool
L5:
    return r1
L6:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_validators_AsyncBeacon_gen
    return r5
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6
L9:
    dec_ref state_id
    dec_ref r1
    goto L6
L10:
    dec_ref r1
    goto L6

def get_validator_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10, r11 :: str
    r12 :: object[3]
    r13 :: object_ptr
    r14 :: object
    r15 :: str
    r16 :: union[dict, None]
    r17 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r18 :: bool
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20, r21 :: object
    r22 :: object_ptr
    r23 :: object
    r24 :: bit
    r25 :: object
    r26 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r27 :: bool
    r28 :: object
    r29 :: bool
    r30 :: object
    r31 :: bit
    r32 :: tuple[object, object, object]
    r33 :: bool
    r34 :: object_ptr
    r35 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r36 :: bool
    r37, r38, r39 :: tuple[object, object, object]
    r40 :: bit
    r41 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r42, r43 :: object
    r44 :: dict
    r45 :: bool
    r46, r47 :: bit
    r48 :: bool
    r49 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L43
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L47 (error at get_validator:119) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L47 (error at get_validator:122) else goto L5
L5:
    r8 = '/eth/v1/beacon/states/{0}/validators/{1}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L48 (error at get_validator:123) else goto L6
L6:
    r10 = __mypyc_self__.__mypyc_generator_attribute__validator_id
    if is_error(r10) goto L49 (error at get_validator:123) else goto L7
L7:
    r11 = 'format'
    r12 = [r8, r9, r10]
    r13 = load_address r12
    r14 = PyObject_VectorcallMethod(r11, r13, 9223372036854775811, 0)
    if is_error(r14) goto L50 (error at get_validator:123) else goto L8
L8:
    dec_ref r9
    dec_ref r10
    r15 = cast(str, r14)
    if is_error(r15) goto L48 (error at get_validator:123) else goto L9
L9:
    r16 = <error> :: union[dict, None]
    r17 = r7._async_make_get_request(r15, r16)
    dec_ref r15
    dec_ref r7
    if is_error(r17) goto L47 (error at get_validator:122) else goto L10
L10:
    __mypyc_self__.__mypyc_temp__14 = r17; r18 = is_error
    if not r18 goto L47 (error at get_validator:-1) else goto L11 :: bool
L11:
    r19 = __mypyc_self__.__mypyc_temp__14
    if is_error(r19) goto L47 (error at get_validator:-1) else goto L12
L12:
    r20 = load_address _Py_NoneStruct
    r21 = <error> :: object
    r1 = r21
    r22 = load_address r1
    r23 = r19.__mypyc_generator_helper__(r20, r20, r20, r20, r22)
    dec_ref r19
    if is_error(r23) goto L13 else goto L51
L13:
    r24 = r1 != 0
    if not r24 goto L52 (error at get_validator:-1) else goto L14 :: bool
L14:
    r25 = r1
    r26 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__14 = r26; r27 = is_error
    if not r27 goto L53 (error at get_validator:122) else goto L37 :: bool
L15:
    r28 = r23
L16:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r28
L17:
    r30 = load_address _Py_NoneStruct
    r31 = type != r30
    if r31 goto L18 else goto L54 :: bool
L18:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L21 (error at get_validator:122) else goto L55 :: bool
L19:
    unreachable
L20:
    inc_ref arg
    goto L32
L21:
    r32 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__15 = r32; r33 = is_error
    if not r33 goto L56 (error at get_validator:-1) else goto L22 :: bool
L22:
    r34 = load_address r3
    r35 = __mypyc_self__.__mypyc_temp__14
    if is_error(r35) goto L56 (error at get_validator:-1) else goto L23
L23:
    r36 = CPy_YieldFromErrorHandle(r35, r34)
    dec_ref r35
    if is_error(r36) goto L56 (error at get_validator:122) else goto L24
L24:
    if r36 goto L27 else goto L25 :: bool
L25:
    r28 = r3
    r37 = __mypyc_self__.__mypyc_temp__15
    if is_error(r37) goto L57 (error at get_validator:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L16
L27:
    r25 = r3
    r38 = __mypyc_self__.__mypyc_temp__15
    if is_error(r38) goto L58 (error at get_validator:-1) else goto L28
L28:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    goto L37
L29:
    r39 = __mypyc_self__.__mypyc_temp__15
    if is_error(r39) goto L47 (error at get_validator:-1) else goto L30
L30:
    CPy_RestoreExcInfo(r39)
    dec_ref r39
    r40 = CPy_KeepPropagating()
    if not r40 goto L47 else goto L31 :: bool
L31:
    unreachable
L32:
    r41 = __mypyc_self__.__mypyc_temp__14
    if is_error(r41) goto L59 (error at get_validator:-1) else goto L33
L33:
    r42 = CPyIter_Send(r41, arg)
    dec_ref r41
    dec_ref arg
    if is_error(r42) goto L35 else goto L34
L34:
    r28 = r42
    goto L16
L35:
    r43 = CPy_FetchStopIterationValue()
    if is_error(r43) goto L47 (error at get_validator:122) else goto L36
L36:
    r25 = r43
L37:
    r44 = cast(dict, r25)
    if is_error(r44) goto L47 (error at get_validator:122) else goto L38
L38:
    __mypyc_self__.__mypyc_next_label__ = -1
L39:
    if is_error(stop_iter_ptr) goto L40 else goto L42
L40:
    CPyGen_SetStopIterationValue(r44)
    dec_ref r44
    if not 0 goto L47 else goto L41 :: bool
L41:
    unreachable
L42:
    set_mem stop_iter_ptr, r44 :: builtins.object*
    return 0
L43:
    r46 = r4 == 0
    if r46 goto L60 else goto L44 :: bool
L44:
    r47 = r4 == 1
    if r47 goto L17 else goto L61 :: bool
L45:
    r48 = raise StopIteration
    if not r48 goto L47 (error at get_validator:119) else goto L46 :: bool
L46:
    unreachable
L47:
    r49 = <error> :: object
    return r49
L48:
    dec_ref r7
    goto L47
L49:
    dec_ref r7
    dec_ref r9
    goto L47
L50:
    dec_ref r7
    dec_ref r9
    dec_ref r10
    goto L47
L51:
    xdec_ref r1
    goto L15
L52:
    xdec_ref r1
    goto L47
L53:
    dec_ref r25
    goto L47
L54:
    xdec_ref r3
    goto L20
L55:
    xdec_ref r3
    goto L19
L56:
    xdec_ref r3
    goto L29
L57:
    dec_ref r28
    goto L29
L58:
    dec_ref r25
    goto L29
L59:
    dec_ref arg
    goto L47
L60:
    xdec_ref r3
    goto L1
L61:
    xdec_ref r3
    goto L45

def get_validator_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_validator_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_validator_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_validator_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_validator_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_validator_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_validator_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_validator_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_validator_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_validator(self, validator_id, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    validator_id, state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
    r2, r3, r4, r5 :: bool
    r6 :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L8
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_validator_AsyncBeacon_gen()
    if is_error(r1) goto L9 (error at get_validator:119) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L10 (error at get_validator:119) else goto L4 :: bool
L4:
    inc_ref validator_id
    r1.__mypyc_generator_attribute__validator_id = validator_id; r4 = is_error
    if not r4 goto L10 (error at get_validator:119) else goto L5 :: bool
L5:
    r1.__mypyc_generator_attribute__state_id = state_id; r5 = is_error
    if not r5 goto L11 (error at get_validator:119) else goto L6 :: bool
L6:
    return r1
L7:
    r6 = <error> :: faster_web3.beacon.async_beacon.get_validator_AsyncBeacon_gen
    return r6
L8:
    inc_ref state_id
    goto L2
L9:
    dec_ref state_id
    goto L7
L10:
    dec_ref state_id
    dec_ref r1
    goto L7
L11:
    dec_ref r1
    goto L7

def get_validator_balances_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_validator_balances:126) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_validator_balances:127) else goto L5
L5:
    r8 = '/eth/v1/beacon/states/{0}/validator_balances'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L47 (error at get_validator_balances:128) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_validator_balances:128) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_validator_balances:128) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_validator_balances:127) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__16 = r16; r17 = is_error
    if not r17 goto L46 (error at get_validator_balances:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__16
    if is_error(r18) goto L46 (error at get_validator_balances:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_validator_balances:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__16 = r25; r26 = is_error
    if not r26 goto L51 (error at get_validator_balances:127) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_validator_balances:127) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__17 = r31; r32 = is_error
    if not r32 goto L54 (error at get_validator_balances:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__16
    if is_error(r34) goto L54 (error at get_validator_balances:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_validator_balances:127) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__17
    if is_error(r36) goto L55 (error at get_validator_balances:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__17
    if is_error(r37) goto L56 (error at get_validator_balances:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__17
    if is_error(r38) goto L46 (error at get_validator_balances:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__16
    if is_error(r40) goto L57 (error at get_validator_balances:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_validator_balances:127) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_validator_balances:127) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_validator_balances:126) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_validator_balances_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_validator_balances_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_validator_balances_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_validator_balances_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_validator_balances_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_validator_balances_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_validator_balances_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_validator_balances_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_validator_balances_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_validator_balances(self, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
    r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_validator_balances_AsyncBeacon_gen()
    if is_error(r1) goto L8 (error at get_validator_balances:126) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L9 (error at get_validator_balances:126) else goto L4 :: bool
L4:
    r1.__mypyc_generator_attribute__state_id = state_id; r4 = is_error
    if not r4 goto L10 (error at get_validator_balances:126) else goto L5 :: bool
L5:
    return r1
L6:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_validator_balances_AsyncBeacon_gen
    return r5
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6
L9:
    dec_ref state_id
    dec_ref r1
    goto L6
L10:
    dec_ref r1
    goto L6

def get_epoch_committees_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_epoch_committees:131) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_epoch_committees:132) else goto L5
L5:
    r8 = '/eth/v1/beacon/states/{0}/committees'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L47 (error at get_epoch_committees:132) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_epoch_committees:132) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_epoch_committees:132) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_epoch_committees:132) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__18 = r16; r17 = is_error
    if not r17 goto L46 (error at get_epoch_committees:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__18
    if is_error(r18) goto L46 (error at get_epoch_committees:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_epoch_committees:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__18 = r25; r26 = is_error
    if not r26 goto L51 (error at get_epoch_committees:132) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_epoch_committees:132) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__19 = r31; r32 = is_error
    if not r32 goto L54 (error at get_epoch_committees:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__18
    if is_error(r34) goto L54 (error at get_epoch_committees:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_epoch_committees:132) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__19
    if is_error(r36) goto L55 (error at get_epoch_committees:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__19
    if is_error(r37) goto L56 (error at get_epoch_committees:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__19
    if is_error(r38) goto L46 (error at get_epoch_committees:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__18
    if is_error(r40) goto L57 (error at get_epoch_committees:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_epoch_committees:132) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_epoch_committees:132) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_epoch_committees:131) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_epoch_committees_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_epoch_committees_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_epoch_committees_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_epoch_committees_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_epoch_committees_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_epoch_committees_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_epoch_committees_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_epoch_committees_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_epoch_committees_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_epoch_committees(self, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
    r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_epoch_committees_AsyncBeacon_gen()
    if is_error(r1) goto L8 (error at get_epoch_committees:131) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L9 (error at get_epoch_committees:131) else goto L4 :: bool
L4:
    r1.__mypyc_generator_attribute__state_id = state_id; r4 = is_error
    if not r4 goto L10 (error at get_epoch_committees:131) else goto L5 :: bool
L5:
    return r1
L6:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_epoch_committees_AsyncBeacon_gen
    return r5
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6
L9:
    dec_ref state_id
    dec_ref r1
    goto L6
L10:
    dec_ref r1
    goto L6

def get_epoch_sync_committees_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_epoch_sync_committees:134) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_epoch_sync_committees:135) else goto L5
L5:
    r8 = '/eth/v1/beacon/states/{0}/sync_committees'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L47 (error at get_epoch_sync_committees:136) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_epoch_sync_committees:136) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_epoch_sync_committees:136) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_epoch_sync_committees:135) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__20 = r16; r17 = is_error
    if not r17 goto L46 (error at get_epoch_sync_committees:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__20
    if is_error(r18) goto L46 (error at get_epoch_sync_committees:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_epoch_sync_committees:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__20 = r25; r26 = is_error
    if not r26 goto L51 (error at get_epoch_sync_committees:135) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_epoch_sync_committees:135) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__21 = r31; r32 = is_error
    if not r32 goto L54 (error at get_epoch_sync_committees:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__20
    if is_error(r34) goto L54 (error at get_epoch_sync_committees:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_epoch_sync_committees:135) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__21
    if is_error(r36) goto L55 (error at get_epoch_sync_committees:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__21
    if is_error(r37) goto L56 (error at get_epoch_sync_committees:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__21
    if is_error(r38) goto L46 (error at get_epoch_sync_committees:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__20
    if is_error(r40) goto L57 (error at get_epoch_sync_committees:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_epoch_sync_committees:135) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_epoch_sync_committees:135) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_epoch_sync_committees:134) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_epoch_sync_committees_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_epoch_sync_committees_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_epoch_sync_committees_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_epoch_sync_committees_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_epoch_sync_committees_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_epoch_sync_committees_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_epoch_sync_committees_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_epoch_sync_committees_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_epoch_sync_committees_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_epoch_sync_committees(self, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
    r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_epoch_sync_committees_AsyncBeacon_gen()
    if is_error(r1) goto L8 (error at get_epoch_sync_committees:134) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L9 (error at get_epoch_sync_committees:134) else goto L4 :: bool
L4:
    r1.__mypyc_generator_attribute__state_id = state_id; r4 = is_error
    if not r4 goto L10 (error at get_epoch_sync_committees:134) else goto L5 :: bool
L5:
    return r1
L6:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_epoch_sync_committees_AsyncBeacon_gen
    return r5
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6
L9:
    dec_ref state_id
    dec_ref r1
    goto L6
L10:
    dec_ref r1
    goto L6

def get_epoch_randao_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_epoch_randao:139) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_epoch_randao:140) else goto L5
L5:
    r8 = '/eth/v1/beacon/states/{0}/randao'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L47 (error at get_epoch_randao:140) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_epoch_randao:140) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_epoch_randao:140) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_epoch_randao:140) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__22 = r16; r17 = is_error
    if not r17 goto L46 (error at get_epoch_randao:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__22
    if is_error(r18) goto L46 (error at get_epoch_randao:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_epoch_randao:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__22 = r25; r26 = is_error
    if not r26 goto L51 (error at get_epoch_randao:140) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_epoch_randao:140) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__23 = r31; r32 = is_error
    if not r32 goto L54 (error at get_epoch_randao:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__22
    if is_error(r34) goto L54 (error at get_epoch_randao:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_epoch_randao:140) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__23
    if is_error(r36) goto L55 (error at get_epoch_randao:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__23
    if is_error(r37) goto L56 (error at get_epoch_randao:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__23
    if is_error(r38) goto L46 (error at get_epoch_randao:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__22
    if is_error(r40) goto L57 (error at get_epoch_randao:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_epoch_randao:140) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_epoch_randao:140) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_epoch_randao:139) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_epoch_randao_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_epoch_randao_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_epoch_randao_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_epoch_randao_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_epoch_randao_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_epoch_randao_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_epoch_randao_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_epoch_randao_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_epoch_randao_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_epoch_randao(self, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
    r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_epoch_randao_AsyncBeacon_gen()
    if is_error(r1) goto L8 (error at get_epoch_randao:139) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L9 (error at get_epoch_randao:139) else goto L4 :: bool
L4:
    r1.__mypyc_generator_attribute__state_id = state_id; r4 = is_error
    if not r4 goto L10 (error at get_epoch_randao:139) else goto L5 :: bool
L5:
    return r1
L6:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_epoch_randao_AsyncBeacon_gen
    return r5
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6
L9:
    dec_ref state_id
    dec_ref r1
    goto L6
L10:
    dec_ref r1
    goto L6

def get_block_headers_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_block_headers:144) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_block_headers:145) else goto L5
L5:
    r8 = '/eth/v1/beacon/headers'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_block_headers:145) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__24 = r10; r11 = is_error
    if not r11 goto L43 (error at get_block_headers:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__24
    if is_error(r12) goto L43 (error at get_block_headers:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_block_headers:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__24 = r19; r20 = is_error
    if not r20 goto L46 (error at get_block_headers:145) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_block_headers:145) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__25 = r25; r26 = is_error
    if not r26 goto L49 (error at get_block_headers:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__24
    if is_error(r28) goto L49 (error at get_block_headers:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_block_headers:145) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__25
    if is_error(r30) goto L50 (error at get_block_headers:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__25
    if is_error(r31) goto L51 (error at get_block_headers:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__25
    if is_error(r32) goto L43 (error at get_block_headers:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__24
    if is_error(r34) goto L52 (error at get_block_headers:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_block_headers:145) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_block_headers:145) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_block_headers:144) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_block_headers_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_headers_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_headers_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_headers_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_headers_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_block_headers_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_block_headers_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_block_headers_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_block_headers_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_block_headers(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
L0:
    r0 = get_block_headers_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_block_headers:144) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_block_headers:144) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_block_headers_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_block_header_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_block_header:147) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_block_header:148) else goto L5
L5:
    r8 = '/eth/v1/beacon/headers/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__block_id
    if is_error(r9) goto L47 (error at get_block_header:148) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_block_header:148) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_block_header:148) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_block_header:148) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__26 = r16; r17 = is_error
    if not r17 goto L46 (error at get_block_header:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__26
    if is_error(r18) goto L46 (error at get_block_header:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_block_header:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__26 = r25; r26 = is_error
    if not r26 goto L51 (error at get_block_header:148) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_block_header:148) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__27 = r31; r32 = is_error
    if not r32 goto L54 (error at get_block_header:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__26
    if is_error(r34) goto L54 (error at get_block_header:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_block_header:148) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__27
    if is_error(r36) goto L55 (error at get_block_header:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__27
    if is_error(r37) goto L56 (error at get_block_header:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__27
    if is_error(r38) goto L46 (error at get_block_header:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__26
    if is_error(r40) goto L57 (error at get_block_header:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_block_header:148) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_block_header:148) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_block_header:147) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_block_header_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_header_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_header_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_header_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_header_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_block_header_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_block_header_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_block_header_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_block_header_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_block_header(self, block_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    block_id :: str
    r0 :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
L0:
    r0 = get_block_header_AsyncBeacon_gen()
    if is_error(r0) goto L4 (error at get_block_header:147) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L5 (error at get_block_header:147) else goto L2 :: bool
L2:
    inc_ref block_id
    r0.__mypyc_generator_attribute__block_id = block_id; r3 = is_error
    if not r3 goto L5 (error at get_block_header:147) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.beacon.async_beacon.get_block_header_AsyncBeacon_gen
    return r4
L5:
    dec_ref r0
    goto L4

def get_block_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_block:152) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_block:153) else goto L5
L5:
    r8 = '/eth/v2/beacon/blocks/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__block_id
    if is_error(r9) goto L47 (error at get_block:153) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_block:153) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_block:153) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_block:153) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__28 = r16; r17 = is_error
    if not r17 goto L46 (error at get_block:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__28
    if is_error(r18) goto L46 (error at get_block:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_block:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__28 = r25; r26 = is_error
    if not r26 goto L51 (error at get_block:153) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_block:153) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__29 = r31; r32 = is_error
    if not r32 goto L54 (error at get_block:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__28
    if is_error(r34) goto L54 (error at get_block:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_block:153) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__29
    if is_error(r36) goto L55 (error at get_block:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__29
    if is_error(r37) goto L56 (error at get_block:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__29
    if is_error(r38) goto L46 (error at get_block:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__28
    if is_error(r40) goto L57 (error at get_block:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_block:153) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_block:153) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_block:152) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_block_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_block_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_block_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_block_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_block_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_block(self, block_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    block_id :: str
    r0 :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
L0:
    r0 = get_block_AsyncBeacon_gen()
    if is_error(r0) goto L4 (error at get_block:152) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L5 (error at get_block:152) else goto L2 :: bool
L2:
    inc_ref block_id
    r0.__mypyc_generator_attribute__block_id = block_id; r3 = is_error
    if not r3 goto L5 (error at get_block:152) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.beacon.async_beacon.get_block_AsyncBeacon_gen
    return r4
L5:
    dec_ref r0
    goto L4

def get_block_root_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_block_root:155) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_block_root:156) else goto L5
L5:
    r8 = '/eth/v1/beacon/blocks/{0}/root'
    r9 = __mypyc_self__.__mypyc_generator_attribute__block_id
    if is_error(r9) goto L47 (error at get_block_root:156) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_block_root:156) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_block_root:156) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_block_root:156) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__30 = r16; r17 = is_error
    if not r17 goto L46 (error at get_block_root:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__30
    if is_error(r18) goto L46 (error at get_block_root:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_block_root:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__30 = r25; r26 = is_error
    if not r26 goto L51 (error at get_block_root:156) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_block_root:156) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__31 = r31; r32 = is_error
    if not r32 goto L54 (error at get_block_root:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__30
    if is_error(r34) goto L54 (error at get_block_root:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_block_root:156) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__31
    if is_error(r36) goto L55 (error at get_block_root:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__31
    if is_error(r37) goto L56 (error at get_block_root:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__31
    if is_error(r38) goto L46 (error at get_block_root:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__30
    if is_error(r40) goto L57 (error at get_block_root:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_block_root:156) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_block_root:156) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_block_root:155) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_block_root_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_root_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_root_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_root_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_root_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_block_root_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_block_root_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_block_root_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_block_root_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_block_root(self, block_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    block_id :: str
    r0 :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
L0:
    r0 = get_block_root_AsyncBeacon_gen()
    if is_error(r0) goto L4 (error at get_block_root:155) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L5 (error at get_block_root:155) else goto L2 :: bool
L2:
    inc_ref block_id
    r0.__mypyc_generator_attribute__block_id = block_id; r3 = is_error
    if not r3 goto L5 (error at get_block_root:155) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.beacon.async_beacon.get_block_root_AsyncBeacon_gen
    return r4
L5:
    dec_ref r0
    goto L4

def get_block_attestations_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_block_attestations:158) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_block_attestations:159) else goto L5
L5:
    r8 = '/eth/v1/beacon/blocks/{0}/attestations'
    r9 = __mypyc_self__.__mypyc_generator_attribute__block_id
    if is_error(r9) goto L47 (error at get_block_attestations:160) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_block_attestations:160) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_block_attestations:160) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_block_attestations:159) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__32 = r16; r17 = is_error
    if not r17 goto L46 (error at get_block_attestations:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__32
    if is_error(r18) goto L46 (error at get_block_attestations:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_block_attestations:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__32 = r25; r26 = is_error
    if not r26 goto L51 (error at get_block_attestations:159) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_block_attestations:159) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__33 = r31; r32 = is_error
    if not r32 goto L54 (error at get_block_attestations:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__32
    if is_error(r34) goto L54 (error at get_block_attestations:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_block_attestations:159) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__33
    if is_error(r36) goto L55 (error at get_block_attestations:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__33
    if is_error(r37) goto L56 (error at get_block_attestations:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__33
    if is_error(r38) goto L46 (error at get_block_attestations:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__32
    if is_error(r40) goto L57 (error at get_block_attestations:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_block_attestations:159) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_block_attestations:159) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_block_attestations:158) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_block_attestations_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_attestations_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_attestations_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_attestations_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_attestations_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_block_attestations_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_block_attestations_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_block_attestations_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_block_attestations_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_block_attestations(self, block_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    block_id :: str
    r0 :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
L0:
    r0 = get_block_attestations_AsyncBeacon_gen()
    if is_error(r0) goto L4 (error at get_block_attestations:158) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L5 (error at get_block_attestations:158) else goto L2 :: bool
L2:
    inc_ref block_id
    r0.__mypyc_generator_attribute__block_id = block_id; r3 = is_error
    if not r3 goto L5 (error at get_block_attestations:158) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.beacon.async_beacon.get_block_attestations_AsyncBeacon_gen
    return r4
L5:
    dec_ref r0
    goto L4

def get_blinded_blocks_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_blinded_blocks:163) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_blinded_blocks:164) else goto L5
L5:
    r8 = '/eth/v1/beacon/blinded_blocks/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__block_id
    if is_error(r9) goto L47 (error at get_blinded_blocks:164) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_blinded_blocks:164) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_blinded_blocks:164) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_blinded_blocks:164) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__34 = r16; r17 = is_error
    if not r17 goto L46 (error at get_blinded_blocks:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__34
    if is_error(r18) goto L46 (error at get_blinded_blocks:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_blinded_blocks:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__34 = r25; r26 = is_error
    if not r26 goto L51 (error at get_blinded_blocks:164) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_blinded_blocks:164) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__35 = r31; r32 = is_error
    if not r32 goto L54 (error at get_blinded_blocks:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__34
    if is_error(r34) goto L54 (error at get_blinded_blocks:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_blinded_blocks:164) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__35
    if is_error(r36) goto L55 (error at get_blinded_blocks:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__35
    if is_error(r37) goto L56 (error at get_blinded_blocks:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__35
    if is_error(r38) goto L46 (error at get_blinded_blocks:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__34
    if is_error(r40) goto L57 (error at get_blinded_blocks:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_blinded_blocks:164) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_blinded_blocks:164) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_blinded_blocks:163) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_blinded_blocks_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_blinded_blocks_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_blinded_blocks_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_blinded_blocks_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_blinded_blocks_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_blinded_blocks_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_blinded_blocks_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_blinded_blocks_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_blinded_blocks_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_blinded_blocks(self, block_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    block_id :: str
    r0 :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
L0:
    r0 = get_blinded_blocks_AsyncBeacon_gen()
    if is_error(r0) goto L4 (error at get_blinded_blocks:163) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L5 (error at get_blinded_blocks:163) else goto L2 :: bool
L2:
    inc_ref block_id
    r0.__mypyc_generator_attribute__block_id = block_id; r3 = is_error
    if not r3 goto L5 (error at get_blinded_blocks:163) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.beacon.async_beacon.get_blinded_blocks_AsyncBeacon_gen
    return r4
L5:
    dec_ref r0
    goto L4

def get_rewards_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_rewards:168) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_rewards:169) else goto L5
L5:
    r8 = '/eth/v1/beacon/rewards/blocks/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__block_id
    if is_error(r9) goto L47 (error at get_rewards:169) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_rewards:169) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_rewards:169) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_rewards:169) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__36 = r16; r17 = is_error
    if not r17 goto L46 (error at get_rewards:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__36
    if is_error(r18) goto L46 (error at get_rewards:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_rewards:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__36 = r25; r26 = is_error
    if not r26 goto L51 (error at get_rewards:169) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_rewards:169) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__37 = r31; r32 = is_error
    if not r32 goto L54 (error at get_rewards:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__36
    if is_error(r34) goto L54 (error at get_rewards:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_rewards:169) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__37
    if is_error(r36) goto L55 (error at get_rewards:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__37
    if is_error(r37) goto L56 (error at get_rewards:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__37
    if is_error(r38) goto L46 (error at get_rewards:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__36
    if is_error(r40) goto L57 (error at get_rewards:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_rewards:169) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_rewards:169) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_rewards:168) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_rewards_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_rewards_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_rewards_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_rewards_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_rewards_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_rewards_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_rewards_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_rewards_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_rewards_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_rewards(self, block_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    block_id :: str
    r0 :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
L0:
    r0 = get_rewards_AsyncBeacon_gen()
    if is_error(r0) goto L4 (error at get_rewards:168) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L5 (error at get_rewards:168) else goto L2 :: bool
L2:
    inc_ref block_id
    r0.__mypyc_generator_attribute__block_id = block_id; r3 = is_error
    if not r3 goto L5 (error at get_rewards:168) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.beacon.async_beacon.get_rewards_AsyncBeacon_gen
    return r4
L5:
    dec_ref r0
    goto L4

def get_light_client_bootstrap_structure_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_light_client_bootstrap_structure:173) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_light_client_bootstrap_structure:176) else goto L5
L5:
    r8 = '/eth/v1/beacon/light_client/bootstrap/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__block_root
    if is_error(r9) goto L47 (error at get_light_client_bootstrap_structure:177) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_light_client_bootstrap_structure:177) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_light_client_bootstrap_structure:177) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_light_client_bootstrap_structure:176) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__38 = r16; r17 = is_error
    if not r17 goto L46 (error at get_light_client_bootstrap_structure:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__38
    if is_error(r18) goto L46 (error at get_light_client_bootstrap_structure:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_light_client_bootstrap_structure:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__38 = r25; r26 = is_error
    if not r26 goto L51 (error at get_light_client_bootstrap_structure:176) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_light_client_bootstrap_structure:176) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__39 = r31; r32 = is_error
    if not r32 goto L54 (error at get_light_client_bootstrap_structure:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__38
    if is_error(r34) goto L54 (error at get_light_client_bootstrap_structure:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_light_client_bootstrap_structure:176) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__39
    if is_error(r36) goto L55 (error at get_light_client_bootstrap_structure:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__39
    if is_error(r37) goto L56 (error at get_light_client_bootstrap_structure:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__39
    if is_error(r38) goto L46 (error at get_light_client_bootstrap_structure:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__38
    if is_error(r40) goto L57 (error at get_light_client_bootstrap_structure:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_light_client_bootstrap_structure:176) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_light_client_bootstrap_structure:176) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_light_client_bootstrap_structure:173) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_light_client_bootstrap_structure_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_light_client_bootstrap_structure_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_light_client_bootstrap_structure_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_light_client_bootstrap_structure_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_light_client_bootstrap_structure_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_light_client_bootstrap_structure_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_light_client_bootstrap_structure_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_light_client_bootstrap_structure_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_light_client_bootstrap_structure_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_light_client_bootstrap_structure(self, block_root):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    block_root :: str
    r0 :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
L0:
    r0 = get_light_client_bootstrap_structure_AsyncBeacon_gen()
    if is_error(r0) goto L4 (error at get_light_client_bootstrap_structure:173) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L5 (error at get_light_client_bootstrap_structure:173) else goto L2 :: bool
L2:
    inc_ref block_root
    r0.__mypyc_generator_attribute__block_root = block_root; r3 = is_error
    if not r3 goto L5 (error at get_light_client_bootstrap_structure:173) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.beacon.async_beacon.get_light_client_bootstrap_structure_AsyncBeacon_gen
    return r4
L5:
    dec_ref r0
    goto L4

def get_light_client_updates_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_light_client_updates:180) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_light_client_updates:181) else goto L5
L5:
    r8 = '/eth/v1/beacon/light_client/updates'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_light_client_updates:181) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__40 = r10; r11 = is_error
    if not r11 goto L43 (error at get_light_client_updates:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__40
    if is_error(r12) goto L43 (error at get_light_client_updates:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_light_client_updates:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__40 = r19; r20 = is_error
    if not r20 goto L46 (error at get_light_client_updates:181) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_light_client_updates:181) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__41 = r25; r26 = is_error
    if not r26 goto L49 (error at get_light_client_updates:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__40
    if is_error(r28) goto L49 (error at get_light_client_updates:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_light_client_updates:181) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__41
    if is_error(r30) goto L50 (error at get_light_client_updates:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__41
    if is_error(r31) goto L51 (error at get_light_client_updates:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__41
    if is_error(r32) goto L43 (error at get_light_client_updates:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__40
    if is_error(r34) goto L52 (error at get_light_client_updates:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_light_client_updates:181) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_light_client_updates:181) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_light_client_updates:180) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_light_client_updates_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_light_client_updates_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_light_client_updates_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_light_client_updates_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_light_client_updates_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_light_client_updates_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_light_client_updates_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_light_client_updates_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_light_client_updates_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_light_client_updates(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
L0:
    r0 = get_light_client_updates_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_light_client_updates:180) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_light_client_updates:180) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_light_client_updates_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_light_client_finality_update_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_light_client_finality_update:183) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_light_client_finality_update:184) else goto L5
L5:
    r8 = '/eth/v1/beacon/light_client/finality_update'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_light_client_finality_update:184) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__42 = r10; r11 = is_error
    if not r11 goto L43 (error at get_light_client_finality_update:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__42
    if is_error(r12) goto L43 (error at get_light_client_finality_update:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_light_client_finality_update:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__42 = r19; r20 = is_error
    if not r20 goto L46 (error at get_light_client_finality_update:184) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_light_client_finality_update:184) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__43 = r25; r26 = is_error
    if not r26 goto L49 (error at get_light_client_finality_update:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__42
    if is_error(r28) goto L49 (error at get_light_client_finality_update:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_light_client_finality_update:184) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__43
    if is_error(r30) goto L50 (error at get_light_client_finality_update:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__43
    if is_error(r31) goto L51 (error at get_light_client_finality_update:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__43
    if is_error(r32) goto L43 (error at get_light_client_finality_update:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__42
    if is_error(r34) goto L52 (error at get_light_client_finality_update:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_light_client_finality_update:184) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_light_client_finality_update:184) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_light_client_finality_update:183) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_light_client_finality_update_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_light_client_finality_update_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_light_client_finality_update_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_light_client_finality_update_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_light_client_finality_update_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_light_client_finality_update_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_light_client_finality_update_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_light_client_finality_update_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_light_client_finality_update_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_light_client_finality_update(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
L0:
    r0 = get_light_client_finality_update_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_light_client_finality_update:183) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_light_client_finality_update:183) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_light_client_finality_update_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_light_client_optimistic_update_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_light_client_optimistic_update:186) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_light_client_optimistic_update:187) else goto L5
L5:
    r8 = '/eth/v1/beacon/light_client/optimistic_update'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_light_client_optimistic_update:187) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__44 = r10; r11 = is_error
    if not r11 goto L43 (error at get_light_client_optimistic_update:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__44
    if is_error(r12) goto L43 (error at get_light_client_optimistic_update:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_light_client_optimistic_update:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__44 = r19; r20 = is_error
    if not r20 goto L46 (error at get_light_client_optimistic_update:187) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_light_client_optimistic_update:187) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__45 = r25; r26 = is_error
    if not r26 goto L49 (error at get_light_client_optimistic_update:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__44
    if is_error(r28) goto L49 (error at get_light_client_optimistic_update:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_light_client_optimistic_update:187) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__45
    if is_error(r30) goto L50 (error at get_light_client_optimistic_update:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__45
    if is_error(r31) goto L51 (error at get_light_client_optimistic_update:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__45
    if is_error(r32) goto L43 (error at get_light_client_optimistic_update:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__44
    if is_error(r34) goto L52 (error at get_light_client_optimistic_update:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_light_client_optimistic_update:187) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_light_client_optimistic_update:187) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_light_client_optimistic_update:186) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_light_client_optimistic_update_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_light_client_optimistic_update_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_light_client_optimistic_update_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_light_client_optimistic_update_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_light_client_optimistic_update_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_light_client_optimistic_update_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_light_client_optimistic_update_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_light_client_optimistic_update_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_light_client_optimistic_update_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_light_client_optimistic_update(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
L0:
    r0 = get_light_client_optimistic_update_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_light_client_optimistic_update:186) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_light_client_optimistic_update:186) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_light_client_optimistic_update_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_attestations_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_attestations:191) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_attestations:192) else goto L5
L5:
    r8 = '/eth/v1/beacon/pool/attestations'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_attestations:192) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__46 = r10; r11 = is_error
    if not r11 goto L43 (error at get_attestations:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__46
    if is_error(r12) goto L43 (error at get_attestations:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_attestations:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__46 = r19; r20 = is_error
    if not r20 goto L46 (error at get_attestations:192) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_attestations:192) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__47 = r25; r26 = is_error
    if not r26 goto L49 (error at get_attestations:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__46
    if is_error(r28) goto L49 (error at get_attestations:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_attestations:192) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__47
    if is_error(r30) goto L50 (error at get_attestations:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__47
    if is_error(r31) goto L51 (error at get_attestations:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__47
    if is_error(r32) goto L43 (error at get_attestations:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__46
    if is_error(r34) goto L52 (error at get_attestations:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_attestations:192) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_attestations:192) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_attestations:191) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_attestations_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_attestations_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_attestations_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_attestations_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_attestations_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_attestations_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_attestations_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_attestations_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_attestations_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_attestations(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
L0:
    r0 = get_attestations_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_attestations:191) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_attestations:191) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_attestations_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_attester_slashings_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_attester_slashings:194) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_attester_slashings:195) else goto L5
L5:
    r8 = '/eth/v1/beacon/pool/attester_slashings'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_attester_slashings:195) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__48 = r10; r11 = is_error
    if not r11 goto L43 (error at get_attester_slashings:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__48
    if is_error(r12) goto L43 (error at get_attester_slashings:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_attester_slashings:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__48 = r19; r20 = is_error
    if not r20 goto L46 (error at get_attester_slashings:195) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_attester_slashings:195) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__49 = r25; r26 = is_error
    if not r26 goto L49 (error at get_attester_slashings:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__48
    if is_error(r28) goto L49 (error at get_attester_slashings:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_attester_slashings:195) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__49
    if is_error(r30) goto L50 (error at get_attester_slashings:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__49
    if is_error(r31) goto L51 (error at get_attester_slashings:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__49
    if is_error(r32) goto L43 (error at get_attester_slashings:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__48
    if is_error(r34) goto L52 (error at get_attester_slashings:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_attester_slashings:195) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_attester_slashings:195) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_attester_slashings:194) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_attester_slashings_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_attester_slashings_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_attester_slashings_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_attester_slashings_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_attester_slashings_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_attester_slashings_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_attester_slashings_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_attester_slashings_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_attester_slashings_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_attester_slashings(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
L0:
    r0 = get_attester_slashings_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_attester_slashings:194) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_attester_slashings:194) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_attester_slashings_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_proposer_slashings_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_proposer_slashings:197) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_proposer_slashings:198) else goto L5
L5:
    r8 = '/eth/v1/beacon/pool/proposer_slashings'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_proposer_slashings:198) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__50 = r10; r11 = is_error
    if not r11 goto L43 (error at get_proposer_slashings:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__50
    if is_error(r12) goto L43 (error at get_proposer_slashings:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_proposer_slashings:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__50 = r19; r20 = is_error
    if not r20 goto L46 (error at get_proposer_slashings:198) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_proposer_slashings:198) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__51 = r25; r26 = is_error
    if not r26 goto L49 (error at get_proposer_slashings:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__50
    if is_error(r28) goto L49 (error at get_proposer_slashings:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_proposer_slashings:198) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__51
    if is_error(r30) goto L50 (error at get_proposer_slashings:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__51
    if is_error(r31) goto L51 (error at get_proposer_slashings:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__51
    if is_error(r32) goto L43 (error at get_proposer_slashings:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__50
    if is_error(r34) goto L52 (error at get_proposer_slashings:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_proposer_slashings:198) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_proposer_slashings:198) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_proposer_slashings:197) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_proposer_slashings_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_proposer_slashings_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_proposer_slashings_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_proposer_slashings_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_proposer_slashings_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_proposer_slashings_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_proposer_slashings_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_proposer_slashings_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_proposer_slashings_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_proposer_slashings(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
L0:
    r0 = get_proposer_slashings_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_proposer_slashings:197) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_proposer_slashings:197) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_proposer_slashings_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_voluntary_exits_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_voluntary_exits:200) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_voluntary_exits:201) else goto L5
L5:
    r8 = '/eth/v1/beacon/pool/voluntary_exits'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_voluntary_exits:201) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__52 = r10; r11 = is_error
    if not r11 goto L43 (error at get_voluntary_exits:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__52
    if is_error(r12) goto L43 (error at get_voluntary_exits:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_voluntary_exits:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__52 = r19; r20 = is_error
    if not r20 goto L46 (error at get_voluntary_exits:201) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_voluntary_exits:201) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__53 = r25; r26 = is_error
    if not r26 goto L49 (error at get_voluntary_exits:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__52
    if is_error(r28) goto L49 (error at get_voluntary_exits:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_voluntary_exits:201) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__53
    if is_error(r30) goto L50 (error at get_voluntary_exits:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__53
    if is_error(r31) goto L51 (error at get_voluntary_exits:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__53
    if is_error(r32) goto L43 (error at get_voluntary_exits:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__52
    if is_error(r34) goto L52 (error at get_voluntary_exits:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_voluntary_exits:201) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_voluntary_exits:201) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_voluntary_exits:200) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_voluntary_exits_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_voluntary_exits_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_voluntary_exits_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_voluntary_exits_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_voluntary_exits_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_voluntary_exits_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_voluntary_exits_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_voluntary_exits_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_voluntary_exits_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_voluntary_exits(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
L0:
    r0 = get_voluntary_exits_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_voluntary_exits:200) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_voluntary_exits:200) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_voluntary_exits_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_bls_to_execution_changes_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_bls_to_execution_changes:203) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_bls_to_execution_changes:204) else goto L5
L5:
    r8 = '/eth/v1/beacon/pool/bls_to_execution_changes'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_bls_to_execution_changes:204) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__54 = r10; r11 = is_error
    if not r11 goto L43 (error at get_bls_to_execution_changes:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__54
    if is_error(r12) goto L43 (error at get_bls_to_execution_changes:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_bls_to_execution_changes:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__54 = r19; r20 = is_error
    if not r20 goto L46 (error at get_bls_to_execution_changes:204) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_bls_to_execution_changes:204) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__55 = r25; r26 = is_error
    if not r26 goto L49 (error at get_bls_to_execution_changes:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__54
    if is_error(r28) goto L49 (error at get_bls_to_execution_changes:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_bls_to_execution_changes:204) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__55
    if is_error(r30) goto L50 (error at get_bls_to_execution_changes:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__55
    if is_error(r31) goto L51 (error at get_bls_to_execution_changes:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__55
    if is_error(r32) goto L43 (error at get_bls_to_execution_changes:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__54
    if is_error(r34) goto L52 (error at get_bls_to_execution_changes:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_bls_to_execution_changes:204) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_bls_to_execution_changes:204) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_bls_to_execution_changes:203) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_bls_to_execution_changes_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_bls_to_execution_changes_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_bls_to_execution_changes_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_bls_to_execution_changes_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_bls_to_execution_changes_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_bls_to_execution_changes_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_bls_to_execution_changes_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_bls_to_execution_changes_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_bls_to_execution_changes_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_bls_to_execution_changes(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
L0:
    r0 = get_bls_to_execution_changes_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_bls_to_execution_changes:203) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_bls_to_execution_changes:203) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_bls_to_execution_changes_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_fork_schedule_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_fork_schedule:208) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_fork_schedule:209) else goto L5
L5:
    r8 = '/eth/v1/config/fork_schedule'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_fork_schedule:209) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__56 = r10; r11 = is_error
    if not r11 goto L43 (error at get_fork_schedule:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__56
    if is_error(r12) goto L43 (error at get_fork_schedule:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_fork_schedule:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__56 = r19; r20 = is_error
    if not r20 goto L46 (error at get_fork_schedule:209) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_fork_schedule:209) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__57 = r25; r26 = is_error
    if not r26 goto L49 (error at get_fork_schedule:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__56
    if is_error(r28) goto L49 (error at get_fork_schedule:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_fork_schedule:209) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__57
    if is_error(r30) goto L50 (error at get_fork_schedule:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__57
    if is_error(r31) goto L51 (error at get_fork_schedule:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__57
    if is_error(r32) goto L43 (error at get_fork_schedule:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__56
    if is_error(r34) goto L52 (error at get_fork_schedule:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_fork_schedule:209) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_fork_schedule:209) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_fork_schedule:208) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_fork_schedule_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_fork_schedule_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_fork_schedule_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_fork_schedule_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_fork_schedule_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_fork_schedule_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_fork_schedule_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_fork_schedule_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_fork_schedule_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_fork_schedule(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
L0:
    r0 = get_fork_schedule_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_fork_schedule:208) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_fork_schedule:208) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_fork_schedule_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_spec_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_spec:211) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_spec:212) else goto L5
L5:
    r8 = '/eth/v1/config/spec'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_spec:212) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__58 = r10; r11 = is_error
    if not r11 goto L43 (error at get_spec:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__58
    if is_error(r12) goto L43 (error at get_spec:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_spec:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__58 = r19; r20 = is_error
    if not r20 goto L46 (error at get_spec:212) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_spec:212) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__59 = r25; r26 = is_error
    if not r26 goto L49 (error at get_spec:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__58
    if is_error(r28) goto L49 (error at get_spec:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_spec:212) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__59
    if is_error(r30) goto L50 (error at get_spec:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__59
    if is_error(r31) goto L51 (error at get_spec:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__59
    if is_error(r32) goto L43 (error at get_spec:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__58
    if is_error(r34) goto L52 (error at get_spec:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_spec:212) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_spec:212) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_spec:211) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_spec_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_spec_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_spec_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_spec_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_spec_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_spec_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_spec_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_spec_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_spec_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_spec(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
L0:
    r0 = get_spec_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_spec:211) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_spec:211) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_spec_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_deposit_contract_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_deposit_contract:214) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_deposit_contract:215) else goto L5
L5:
    r8 = '/eth/v1/config/deposit_contract'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_deposit_contract:215) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__60 = r10; r11 = is_error
    if not r11 goto L43 (error at get_deposit_contract:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__60
    if is_error(r12) goto L43 (error at get_deposit_contract:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_deposit_contract:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__60 = r19; r20 = is_error
    if not r20 goto L46 (error at get_deposit_contract:215) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_deposit_contract:215) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__61 = r25; r26 = is_error
    if not r26 goto L49 (error at get_deposit_contract:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__60
    if is_error(r28) goto L49 (error at get_deposit_contract:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_deposit_contract:215) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__61
    if is_error(r30) goto L50 (error at get_deposit_contract:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__61
    if is_error(r31) goto L51 (error at get_deposit_contract:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__61
    if is_error(r32) goto L43 (error at get_deposit_contract:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__60
    if is_error(r34) goto L52 (error at get_deposit_contract:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_deposit_contract:215) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_deposit_contract:215) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_deposit_contract:214) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_deposit_contract_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_deposit_contract_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_deposit_contract_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_deposit_contract_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_deposit_contract_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_deposit_contract_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_deposit_contract_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_deposit_contract_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_deposit_contract_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_deposit_contract(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
L0:
    r0 = get_deposit_contract_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_deposit_contract:214) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_deposit_contract:214) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_deposit_contract_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_beacon_state_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_beacon_state:219) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_beacon_state:220) else goto L5
L5:
    r8 = '/eth/v1/debug/beacon/states/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__state_id
    if is_error(r9) goto L47 (error at get_beacon_state:220) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_beacon_state:220) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_beacon_state:220) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_beacon_state:220) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__62 = r16; r17 = is_error
    if not r17 goto L46 (error at get_beacon_state:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__62
    if is_error(r18) goto L46 (error at get_beacon_state:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_beacon_state:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__62 = r25; r26 = is_error
    if not r26 goto L51 (error at get_beacon_state:220) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_beacon_state:220) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__63 = r31; r32 = is_error
    if not r32 goto L54 (error at get_beacon_state:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__62
    if is_error(r34) goto L54 (error at get_beacon_state:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_beacon_state:220) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__63
    if is_error(r36) goto L55 (error at get_beacon_state:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__63
    if is_error(r37) goto L56 (error at get_beacon_state:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__63
    if is_error(r38) goto L46 (error at get_beacon_state:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__62
    if is_error(r40) goto L57 (error at get_beacon_state:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_beacon_state:220) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_beacon_state:220) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_beacon_state:219) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_beacon_state_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_beacon_state_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_beacon_state_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_beacon_state_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_beacon_state_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_beacon_state_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_beacon_state_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_beacon_state_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_beacon_state_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_beacon_state(self, state_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    state_id, r0 :: str
    r1 :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
    r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = get_beacon_state_AsyncBeacon_gen()
    if is_error(r1) goto L8 (error at get_beacon_state:219) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L9 (error at get_beacon_state:219) else goto L4 :: bool
L4:
    r1.__mypyc_generator_attribute__state_id = state_id; r4 = is_error
    if not r4 goto L10 (error at get_beacon_state:219) else goto L5 :: bool
L5:
    return r1
L6:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_beacon_state_AsyncBeacon_gen
    return r5
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6
L9:
    dec_ref state_id
    dec_ref r1
    goto L6
L10:
    dec_ref r1
    goto L6

def get_beacon_heads_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_beacon_heads:222) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_beacon_heads:223) else goto L5
L5:
    r8 = '/eth/v1/debug/beacon/heads'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_beacon_heads:223) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__64 = r10; r11 = is_error
    if not r11 goto L43 (error at get_beacon_heads:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__64
    if is_error(r12) goto L43 (error at get_beacon_heads:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_beacon_heads:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__64 = r19; r20 = is_error
    if not r20 goto L46 (error at get_beacon_heads:223) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_beacon_heads:223) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__65 = r25; r26 = is_error
    if not r26 goto L49 (error at get_beacon_heads:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__64
    if is_error(r28) goto L49 (error at get_beacon_heads:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_beacon_heads:223) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__65
    if is_error(r30) goto L50 (error at get_beacon_heads:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__65
    if is_error(r31) goto L51 (error at get_beacon_heads:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__65
    if is_error(r32) goto L43 (error at get_beacon_heads:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__64
    if is_error(r34) goto L52 (error at get_beacon_heads:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_beacon_heads:223) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_beacon_heads:223) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_beacon_heads:222) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_beacon_heads_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_beacon_heads_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_beacon_heads_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_beacon_heads_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_beacon_heads_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_beacon_heads_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_beacon_heads_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_beacon_heads_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_beacon_heads_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_beacon_heads(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
L0:
    r0 = get_beacon_heads_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_beacon_heads:222) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_beacon_heads:222) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_beacon_heads_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_node_identity_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_node_identity:227) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_node_identity:228) else goto L5
L5:
    r8 = '/eth/v1/node/identity'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_node_identity:228) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__66 = r10; r11 = is_error
    if not r11 goto L43 (error at get_node_identity:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__66
    if is_error(r12) goto L43 (error at get_node_identity:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_node_identity:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__66 = r19; r20 = is_error
    if not r20 goto L46 (error at get_node_identity:228) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_node_identity:228) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__67 = r25; r26 = is_error
    if not r26 goto L49 (error at get_node_identity:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__66
    if is_error(r28) goto L49 (error at get_node_identity:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_node_identity:228) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__67
    if is_error(r30) goto L50 (error at get_node_identity:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__67
    if is_error(r31) goto L51 (error at get_node_identity:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__67
    if is_error(r32) goto L43 (error at get_node_identity:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__66
    if is_error(r34) goto L52 (error at get_node_identity:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_node_identity:228) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_node_identity:228) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_node_identity:227) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_node_identity_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_node_identity_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_node_identity_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_node_identity_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_node_identity_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_node_identity_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_node_identity_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_node_identity_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_node_identity_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_node_identity(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
L0:
    r0 = get_node_identity_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_node_identity:227) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_node_identity:227) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_node_identity_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_peers_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_peers:230) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_peers:231) else goto L5
L5:
    r8 = '/eth/v1/node/peers'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_peers:231) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__68 = r10; r11 = is_error
    if not r11 goto L43 (error at get_peers:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__68
    if is_error(r12) goto L43 (error at get_peers:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_peers:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__68 = r19; r20 = is_error
    if not r20 goto L46 (error at get_peers:231) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_peers:231) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__69 = r25; r26 = is_error
    if not r26 goto L49 (error at get_peers:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__68
    if is_error(r28) goto L49 (error at get_peers:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_peers:231) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__69
    if is_error(r30) goto L50 (error at get_peers:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__69
    if is_error(r31) goto L51 (error at get_peers:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__69
    if is_error(r32) goto L43 (error at get_peers:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__68
    if is_error(r34) goto L52 (error at get_peers:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_peers:231) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_peers:231) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_peers:230) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_peers_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_peers_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_peers_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_peers_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_peers_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_peers_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_peers_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_peers_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_peers_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_peers(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
L0:
    r0 = get_peers_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_peers:230) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_peers:230) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_peers_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_peer_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_peer:233) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_peer:234) else goto L5
L5:
    r8 = '/eth/v1/node/peers/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__peer_id
    if is_error(r9) goto L47 (error at get_peer:234) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_peer:234) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_peer:234) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_peer:234) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__70 = r16; r17 = is_error
    if not r17 goto L46 (error at get_peer:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__70
    if is_error(r18) goto L46 (error at get_peer:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_peer:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__70 = r25; r26 = is_error
    if not r26 goto L51 (error at get_peer:234) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_peer:234) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__71 = r31; r32 = is_error
    if not r32 goto L54 (error at get_peer:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__70
    if is_error(r34) goto L54 (error at get_peer:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_peer:234) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__71
    if is_error(r36) goto L55 (error at get_peer:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__71
    if is_error(r37) goto L56 (error at get_peer:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__71
    if is_error(r38) goto L46 (error at get_peer:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__70
    if is_error(r40) goto L57 (error at get_peer:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_peer:234) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_peer:234) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_peer:233) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_peer_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_peer_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_peer_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_peer_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_peer_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_peer_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_peer_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_peer_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_peer_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_peer(self, peer_id):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    peer_id :: str
    r0 :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
L0:
    r0 = get_peer_AsyncBeacon_gen()
    if is_error(r0) goto L4 (error at get_peer:233) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L5 (error at get_peer:233) else goto L2 :: bool
L2:
    inc_ref peer_id
    r0.__mypyc_generator_attribute__peer_id = peer_id; r3 = is_error
    if not r3 goto L5 (error at get_peer:233) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.beacon.async_beacon.get_peer_AsyncBeacon_gen
    return r4
L5:
    dec_ref r0
    goto L4

def get_peer_count_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_peer_count:236) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_peer_count:237) else goto L5
L5:
    r8 = '/eth/v1/node/peer_count'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_peer_count:237) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__72 = r10; r11 = is_error
    if not r11 goto L43 (error at get_peer_count:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__72
    if is_error(r12) goto L43 (error at get_peer_count:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_peer_count:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__72 = r19; r20 = is_error
    if not r20 goto L46 (error at get_peer_count:237) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_peer_count:237) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__73 = r25; r26 = is_error
    if not r26 goto L49 (error at get_peer_count:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__72
    if is_error(r28) goto L49 (error at get_peer_count:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_peer_count:237) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__73
    if is_error(r30) goto L50 (error at get_peer_count:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__73
    if is_error(r31) goto L51 (error at get_peer_count:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__73
    if is_error(r32) goto L43 (error at get_peer_count:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__72
    if is_error(r34) goto L52 (error at get_peer_count:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_peer_count:237) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_peer_count:237) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_peer_count:236) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_peer_count_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_peer_count_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_peer_count_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_peer_count_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_peer_count_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_peer_count_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_peer_count_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_peer_count_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_peer_count_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_peer_count(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
L0:
    r0 = get_peer_count_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_peer_count:236) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_peer_count:236) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_peer_count_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_health_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1 :: object
    r2 :: i32
    r3 :: object
    r4 :: bit
    r5 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r6, r7, r8 :: str
    r9 :: bool
    r10 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r11 :: object
    r12, r13 :: str
    r14 :: object[2]
    r15 :: object_ptr
    r16, r17 :: object
    r18 :: bool
    r19, r20, r21, r22, r23 :: object
    r24 :: bool
    r25 :: object
    r26 :: bool
    r27 :: object
    r28 :: bit
    r29 :: tuple[object, object, object]
    r30 :: bool
    r31 :: object_ptr
    r32 :: object
    r33 :: bool
    r34, r35, r36 :: tuple[object, object, object]
    r37 :: bit
    r38, r39, r40 :: object
    r41 :: bool
    r42 :: object
    r43 :: str
    r44 :: object
    r45 :: bool
    r46, r47 :: bit
    r48 :: bool
    r49 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = __mypyc_self__.__mypyc_next_label__
    goto L46
L1:
    r3 = load_address _Py_NoneStruct
    r4 = type != r3
    if r4 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L50 (error at get_health:239) else goto L3 :: bool
L3:
    unreachable
L4:
    r5 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r5) goto L50 (error at get_health:240) else goto L5
L5:
    r6 = r5.base_url
    dec_ref r5
    r7 = '/eth/v1/node/health'
    r8 = PyUnicode_Concat(r6, r7)
    dec_ref r6
    if is_error(r8) goto L50 (error at get_health:240) else goto L6
L6:
    __mypyc_self__.__mypyc_generator_attribute__url = r8; r9 = is_error
    if not r9 goto L50 (error at get_health:240) else goto L7 :: bool
L7:
    r10 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r10) goto L50 (error at get_health:242) else goto L8
L8:
    r11 = r10._request_session_manager
    dec_ref r10
    r12 = __mypyc_self__.__mypyc_generator_attribute__url
    if is_error(r12) goto L51 (error at get_health:242) else goto L9
L9:
    r13 = 'async_get_response_from_get_request'
    r14 = [r11, r12]
    r15 = load_address r14
    r16 = PyObject_VectorcallMethod(r13, r15, 9223372036854775810, 0)
    if is_error(r16) goto L52 (error at get_health:242) else goto L10
L10:
    dec_ref r11
    dec_ref r12
    r17 = CPy_GetCoro(r16)
    dec_ref r16
    if is_error(r17) goto L50 (error at get_health:242) else goto L11
L11:
    __mypyc_self__.__mypyc_temp__74 = r17; r18 = is_error
    if not r18 goto L50 (error at get_health:-1) else goto L12 :: bool
L12:
    r19 = __mypyc_self__.__mypyc_temp__74
    if is_error(r19) goto L50 (error at get_health:-1) else goto L13
L13:
    r20 = CPyIter_Next(r19)
    dec_ref r19
    if is_error(r20) goto L14 else goto L16
L14:
    r21 = CPy_FetchStopIterationValue()
    if is_error(r21) goto L50 (error at get_health:242) else goto L15
L15:
    r22 = r21
    r23 = <error> :: object
    __mypyc_self__.__mypyc_temp__74 = r23; r24 = is_error
    if not r24 goto L53 (error at get_health:242) else goto L38 :: bool
L16:
    r25 = r20
L17:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r25
L18:
    r27 = load_address _Py_NoneStruct
    r28 = type != r27
    if r28 goto L19 else goto L54 :: bool
L19:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L22 (error at get_health:242) else goto L55 :: bool
L20:
    unreachable
L21:
    inc_ref arg
    goto L33
L22:
    r29 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__75 = r29; r30 = is_error
    if not r30 goto L56 (error at get_health:-1) else goto L23 :: bool
L23:
    r31 = load_address r1
    r32 = __mypyc_self__.__mypyc_temp__74
    if is_error(r32) goto L56 (error at get_health:-1) else goto L24
L24:
    r33 = CPy_YieldFromErrorHandle(r32, r31)
    dec_ref r32
    if is_error(r33) goto L56 (error at get_health:242) else goto L25
L25:
    if r33 goto L28 else goto L26 :: bool
L26:
    r25 = r1
    r34 = __mypyc_self__.__mypyc_temp__75
    if is_error(r34) goto L57 (error at get_health:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r34)
    dec_ref r34
    goto L17
L28:
    r22 = r1
    r35 = __mypyc_self__.__mypyc_temp__75
    if is_error(r35) goto L58 (error at get_health:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r35)
    dec_ref r35
    goto L38
L30:
    r36 = __mypyc_self__.__mypyc_temp__75
    if is_error(r36) goto L50 (error at get_health:-1) else goto L31
L31:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    r37 = CPy_KeepPropagating()
    if not r37 goto L50 else goto L32 :: bool
L32:
    unreachable
L33:
    r38 = __mypyc_self__.__mypyc_temp__74
    if is_error(r38) goto L59 (error at get_health:-1) else goto L34
L34:
    r39 = CPyIter_Send(r38, arg)
    dec_ref r38
    dec_ref arg
    if is_error(r39) goto L36 else goto L35
L35:
    r25 = r39
    goto L17
L36:
    r40 = CPy_FetchStopIterationValue()
    if is_error(r40) goto L50 (error at get_health:242) else goto L37
L37:
    r22 = r40
L38:
    __mypyc_self__.__mypyc_generator_attribute__response = r22; r41 = is_error
    if not r41 goto L50 (error at get_health:242) else goto L39 :: bool
L39:
    r42 = __mypyc_self__.__mypyc_generator_attribute__response
    if is_error(r42) goto L50 (error at get_health:244) else goto L40
L40:
    r43 = 'status'
    r44 = CPyObject_GetAttr(r42, r43)
    dec_ref r42
    if is_error(r44) goto L50 (error at get_health:244) else goto L41
L41:
    __mypyc_self__.__mypyc_next_label__ = -1
L42:
    if is_error(stop_iter_ptr) goto L43 else goto L45
L43:
    CPyGen_SetStopIterationValue(r44)
    dec_ref r44
    if not 0 goto L50 else goto L44 :: bool
L44:
    unreachable
L45:
    set_mem stop_iter_ptr, r44 :: builtins.object*
    return 0
L46:
    r46 = r2 == 0
    if r46 goto L60 else goto L47 :: bool
L47:
    r47 = r2 == 1
    if r47 goto L18 else goto L61 :: bool
L48:
    r48 = raise StopIteration
    if not r48 goto L50 (error at get_health:239) else goto L49 :: bool
L49:
    unreachable
L50:
    r49 = <error> :: object
    return r49
L51:
    dec_ref r11
    goto L50
L52:
    dec_ref r11
    dec_ref r12
    goto L50
L53:
    dec_ref r22
    goto L50
L54:
    xdec_ref r1
    goto L21
L55:
    xdec_ref r1
    goto L20
L56:
    xdec_ref r1
    goto L30
L57:
    dec_ref r25
    goto L30
L58:
    dec_ref r22
    goto L30
L59:
    dec_ref arg
    goto L50
L60:
    xdec_ref r1
    goto L1
L61:
    xdec_ref r1
    goto L48

def get_health_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_health_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_health_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_health_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_health_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_health_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_health_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_health_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_health_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_health(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
L0:
    r0 = get_health_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_health:239) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_health:239) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_health_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_version_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_version:246) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_version:247) else goto L5
L5:
    r8 = '/eth/v1/node/version'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_version:247) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__76 = r10; r11 = is_error
    if not r11 goto L43 (error at get_version:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__76
    if is_error(r12) goto L43 (error at get_version:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_version:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__76 = r19; r20 = is_error
    if not r20 goto L46 (error at get_version:247) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_version:247) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__77 = r25; r26 = is_error
    if not r26 goto L49 (error at get_version:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__76
    if is_error(r28) goto L49 (error at get_version:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_version:247) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__77
    if is_error(r30) goto L50 (error at get_version:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__77
    if is_error(r31) goto L51 (error at get_version:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__77
    if is_error(r32) goto L43 (error at get_version:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__76
    if is_error(r34) goto L52 (error at get_version:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_version:247) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_version:247) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_version:246) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_version_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_version_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_version_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_version_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_version_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_version_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_version_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_version_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_version_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_version(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
L0:
    r0 = get_version_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_version:246) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_version:246) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_version_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_syncing_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8 :: str
    r9 :: union[dict, None]
    r10 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r11 :: bool
    r12 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r13, r14 :: object
    r15 :: object_ptr
    r16 :: object
    r17 :: bit
    r18 :: object
    r19 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r20 :: bool
    r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: bit
    r25 :: tuple[object, object, object]
    r26 :: bool
    r27 :: object_ptr
    r28 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r29 :: bool
    r30, r31, r32 :: tuple[object, object, object]
    r33 :: bit
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35, r36 :: object
    r37 :: dict
    r38 :: bool
    r39, r40 :: bit
    r41 :: bool
    r42 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L39
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L43 (error at get_syncing:249) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L43 (error at get_syncing:250) else goto L5
L5:
    r8 = '/eth/v1/node/syncing'
    r9 = <error> :: union[dict, None]
    r10 = r7._async_make_get_request(r8, r9)
    dec_ref r7
    if is_error(r10) goto L43 (error at get_syncing:250) else goto L6
L6:
    __mypyc_self__.__mypyc_temp__78 = r10; r11 = is_error
    if not r11 goto L43 (error at get_syncing:-1) else goto L7 :: bool
L7:
    r12 = __mypyc_self__.__mypyc_temp__78
    if is_error(r12) goto L43 (error at get_syncing:-1) else goto L8
L8:
    r13 = load_address _Py_NoneStruct
    r14 = <error> :: object
    r1 = r14
    r15 = load_address r1
    r16 = r12.__mypyc_generator_helper__(r13, r13, r13, r13, r15)
    dec_ref r12
    if is_error(r16) goto L9 else goto L44
L9:
    r17 = r1 != 0
    if not r17 goto L45 (error at get_syncing:-1) else goto L10 :: bool
L10:
    r18 = r1
    r19 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__78 = r19; r20 = is_error
    if not r20 goto L46 (error at get_syncing:250) else goto L33 :: bool
L11:
    r21 = r16
L12:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r21
L13:
    r23 = load_address _Py_NoneStruct
    r24 = type != r23
    if r24 goto L14 else goto L47 :: bool
L14:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L17 (error at get_syncing:250) else goto L48 :: bool
L15:
    unreachable
L16:
    inc_ref arg
    goto L28
L17:
    r25 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__79 = r25; r26 = is_error
    if not r26 goto L49 (error at get_syncing:-1) else goto L18 :: bool
L18:
    r27 = load_address r3
    r28 = __mypyc_self__.__mypyc_temp__78
    if is_error(r28) goto L49 (error at get_syncing:-1) else goto L19
L19:
    r29 = CPy_YieldFromErrorHandle(r28, r27)
    dec_ref r28
    if is_error(r29) goto L49 (error at get_syncing:250) else goto L20
L20:
    if r29 goto L23 else goto L21 :: bool
L21:
    r21 = r3
    r30 = __mypyc_self__.__mypyc_temp__79
    if is_error(r30) goto L50 (error at get_syncing:-1) else goto L22
L22:
    CPy_RestoreExcInfo(r30)
    dec_ref r30
    goto L12
L23:
    r18 = r3
    r31 = __mypyc_self__.__mypyc_temp__79
    if is_error(r31) goto L51 (error at get_syncing:-1) else goto L24
L24:
    CPy_RestoreExcInfo(r31)
    dec_ref r31
    goto L33
L25:
    r32 = __mypyc_self__.__mypyc_temp__79
    if is_error(r32) goto L43 (error at get_syncing:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r32)
    dec_ref r32
    r33 = CPy_KeepPropagating()
    if not r33 goto L43 else goto L27 :: bool
L27:
    unreachable
L28:
    r34 = __mypyc_self__.__mypyc_temp__78
    if is_error(r34) goto L52 (error at get_syncing:-1) else goto L29
L29:
    r35 = CPyIter_Send(r34, arg)
    dec_ref r34
    dec_ref arg
    if is_error(r35) goto L31 else goto L30
L30:
    r21 = r35
    goto L12
L31:
    r36 = CPy_FetchStopIterationValue()
    if is_error(r36) goto L43 (error at get_syncing:250) else goto L32
L32:
    r18 = r36
L33:
    r37 = cast(dict, r18)
    if is_error(r37) goto L43 (error at get_syncing:250) else goto L34
L34:
    __mypyc_self__.__mypyc_next_label__ = -1
L35:
    if is_error(stop_iter_ptr) goto L36 else goto L38
L36:
    CPyGen_SetStopIterationValue(r37)
    dec_ref r37
    if not 0 goto L43 else goto L37 :: bool
L37:
    unreachable
L38:
    set_mem stop_iter_ptr, r37 :: builtins.object*
    return 0
L39:
    r39 = r4 == 0
    if r39 goto L53 else goto L40 :: bool
L40:
    r40 = r4 == 1
    if r40 goto L13 else goto L54 :: bool
L41:
    r41 = raise StopIteration
    if not r41 goto L43 (error at get_syncing:249) else goto L42 :: bool
L42:
    unreachable
L43:
    r42 = <error> :: object
    return r42
L44:
    xdec_ref r1
    goto L11
L45:
    xdec_ref r1
    goto L43
L46:
    dec_ref r18
    goto L43
L47:
    xdec_ref r3
    goto L16
L48:
    xdec_ref r3
    goto L15
L49:
    xdec_ref r3
    goto L25
L50:
    dec_ref r21
    goto L25
L51:
    dec_ref r18
    goto L25
L52:
    dec_ref arg
    goto L43
L53:
    xdec_ref r3
    goto L1
L54:
    xdec_ref r3
    goto L41

def get_syncing_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_syncing_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_syncing_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_syncing_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_syncing_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_syncing_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_syncing_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_syncing_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_syncing_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_syncing(self):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    r0 :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
    r1, r2 :: bool
    r3 :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
L0:
    r0 = get_syncing_AsyncBeacon_gen()
    if is_error(r0) goto L3 (error at get_syncing:249) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L4 (error at get_syncing:249) else goto L2 :: bool
L2:
    return r0
L3:
    r3 = <error> :: faster_web3.beacon.async_beacon.get_syncing_AsyncBeacon_gen
    return r3
L4:
    dec_ref r0
    goto L3

def get_blob_sidecars_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: union[list, None]
    r8 :: object
    r9 :: bit
    r10 :: list
    r11 :: ptr
    r12 :: native_int
    r13 :: short_int
    r14 :: bit
    r15, r16 :: str
    r17 :: object
    r18 :: union[list, None]
    r19 :: list
    r20 :: object
    r21 :: str
    r22 :: object
    r23 :: object[2]
    r24 :: object_ptr
    r25 :: object
    r26 :: str
    r27 :: dict
    r28 :: union[dict, None]
    r29 :: object
    r30 :: bool
    r31 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r32, r33, r34 :: str
    r35 :: object[2]
    r36 :: object_ptr
    r37 :: object
    r38 :: str
    r39 :: union[dict, None]
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41 :: bool
    r42 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r43, r44 :: object
    r45 :: object_ptr
    r46 :: object
    r47 :: bit
    r48 :: object
    r49 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r50 :: bool
    r51 :: object
    r52 :: bool
    r53 :: object
    r54 :: bit
    r55 :: tuple[object, object, object]
    r56 :: bool
    r57 :: object_ptr
    r58 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r59 :: bool
    r60, r61, r62 :: tuple[object, object, object]
    r63 :: bit
    r64 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r65, r66 :: object
    r67 :: dict
    r68 :: bool
    r69, r70 :: bit
    r71 :: bool
    r72 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L56
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L60 (error at get_blob_sidecars:254) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__indices
    if is_error(r7) goto L60 (error at get_blob_sidecars:257) else goto L5
L5:
    r8 = load_address _Py_NoneStruct
    r9 = r7 != r8
    if r9 goto L6 else goto L61 :: bool
L6:
    r10 = cast(list, r7)
    if is_error(r10) goto L60 (error at get_blob_sidecars:257) else goto L7
L7:
    r11 = get_element_ptr r10 ob_size :: PyVarObject
    r12 = load_mem r11 :: native_int*
    dec_ref r10
    r13 = r12 << 1
    r14 = r13 != 0
    if r14 goto L8 else goto L15 :: bool
L8:
    r15 = 'indices'
    r16 = ','
    r17 = load_address PyUnicode_Type
    r18 = __mypyc_self__.__mypyc_generator_attribute__indices
    if is_error(r18) goto L60 (error at get_blob_sidecars:257) else goto L9
L9:
    r19 = cast(list, r18)
    if is_error(r19) goto L60 (error at get_blob_sidecars:257) else goto L10
L10:
    r20 = builtins :: module
    r21 = 'map'
    r22 = CPyObject_GetAttr(r20, r21)
    if is_error(r22) goto L62 (error at get_blob_sidecars:257) else goto L11
L11:
    r23 = [r17, r19]
    r24 = load_address r23
    r25 = PyObject_Vectorcall(r22, r24, 2, 0)
    dec_ref r22
    if is_error(r25) goto L62 (error at get_blob_sidecars:257) else goto L12
L12:
    dec_ref r19
    r26 = PyUnicode_Join(r16, r25)
    dec_ref r25
    if is_error(r26) goto L60 (error at get_blob_sidecars:257) else goto L13
L13:
    r27 = CPyDict_Build(1, r15, r26)
    dec_ref r26
    if is_error(r27) goto L60 (error at get_blob_sidecars:257) else goto L14
L14:
    r28 = r27
    goto L16
L15:
    r29 = box(None, 1)
    inc_ref r29
    r28 = r29
L16:
    __mypyc_self__.__mypyc_generator_attribute__indices_param = r28; r30 = is_error
    if not r30 goto L60 (error at get_blob_sidecars:257) else goto L17 :: bool
L17:
    r31 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r31) goto L60 (error at get_blob_sidecars:258) else goto L18
L18:
    r32 = '/eth/v1/beacon/blob_sidecars/{0}'
    r33 = __mypyc_self__.__mypyc_generator_attribute__block_id
    if is_error(r33) goto L63 (error at get_blob_sidecars:259) else goto L19
L19:
    r34 = 'format'
    r35 = [r32, r33]
    r36 = load_address r35
    r37 = PyObject_VectorcallMethod(r34, r36, 9223372036854775810, 0)
    if is_error(r37) goto L64 (error at get_blob_sidecars:259) else goto L20
L20:
    dec_ref r33
    r38 = cast(str, r37)
    if is_error(r38) goto L63 (error at get_blob_sidecars:259) else goto L21
L21:
    r39 = __mypyc_self__.__mypyc_generator_attribute__indices_param
    if is_error(r39) goto L65 (error at get_blob_sidecars:260) else goto L22
L22:
    r40 = r31._async_make_get_request(r38, r39)
    dec_ref r38
    dec_ref r39
    dec_ref r31
    if is_error(r40) goto L60 (error at get_blob_sidecars:258) else goto L23
L23:
    __mypyc_self__.__mypyc_temp__80 = r40; r41 = is_error
    if not r41 goto L60 (error at get_blob_sidecars:-1) else goto L24 :: bool
L24:
    r42 = __mypyc_self__.__mypyc_temp__80
    if is_error(r42) goto L60 (error at get_blob_sidecars:-1) else goto L25
L25:
    r43 = load_address _Py_NoneStruct
    r44 = <error> :: object
    r1 = r44
    r45 = load_address r1
    r46 = r42.__mypyc_generator_helper__(r43, r43, r43, r43, r45)
    dec_ref r42
    if is_error(r46) goto L26 else goto L66
L26:
    r47 = r1 != 0
    if not r47 goto L67 (error at get_blob_sidecars:-1) else goto L27 :: bool
L27:
    r48 = r1
    r49 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__80 = r49; r50 = is_error
    if not r50 goto L68 (error at get_blob_sidecars:258) else goto L50 :: bool
L28:
    r51 = r46
L29:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r51
L30:
    r53 = load_address _Py_NoneStruct
    r54 = type != r53
    if r54 goto L31 else goto L69 :: bool
L31:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L34 (error at get_blob_sidecars:258) else goto L70 :: bool
L32:
    unreachable
L33:
    inc_ref arg
    goto L45
L34:
    r55 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__81 = r55; r56 = is_error
    if not r56 goto L71 (error at get_blob_sidecars:-1) else goto L35 :: bool
L35:
    r57 = load_address r3
    r58 = __mypyc_self__.__mypyc_temp__80
    if is_error(r58) goto L71 (error at get_blob_sidecars:-1) else goto L36
L36:
    r59 = CPy_YieldFromErrorHandle(r58, r57)
    dec_ref r58
    if is_error(r59) goto L71 (error at get_blob_sidecars:258) else goto L37
L37:
    if r59 goto L40 else goto L38 :: bool
L38:
    r51 = r3
    r60 = __mypyc_self__.__mypyc_temp__81
    if is_error(r60) goto L72 (error at get_blob_sidecars:-1) else goto L39
L39:
    CPy_RestoreExcInfo(r60)
    dec_ref r60
    goto L29
L40:
    r48 = r3
    r61 = __mypyc_self__.__mypyc_temp__81
    if is_error(r61) goto L73 (error at get_blob_sidecars:-1) else goto L41
L41:
    CPy_RestoreExcInfo(r61)
    dec_ref r61
    goto L50
L42:
    r62 = __mypyc_self__.__mypyc_temp__81
    if is_error(r62) goto L60 (error at get_blob_sidecars:-1) else goto L43
L43:
    CPy_RestoreExcInfo(r62)
    dec_ref r62
    r63 = CPy_KeepPropagating()
    if not r63 goto L60 else goto L44 :: bool
L44:
    unreachable
L45:
    r64 = __mypyc_self__.__mypyc_temp__80
    if is_error(r64) goto L74 (error at get_blob_sidecars:-1) else goto L46
L46:
    r65 = CPyIter_Send(r64, arg)
    dec_ref r64
    dec_ref arg
    if is_error(r65) goto L48 else goto L47
L47:
    r51 = r65
    goto L29
L48:
    r66 = CPy_FetchStopIterationValue()
    if is_error(r66) goto L60 (error at get_blob_sidecars:258) else goto L49
L49:
    r48 = r66
L50:
    r67 = cast(dict, r48)
    if is_error(r67) goto L60 (error at get_blob_sidecars:258) else goto L51
L51:
    __mypyc_self__.__mypyc_next_label__ = -1
L52:
    if is_error(stop_iter_ptr) goto L53 else goto L55
L53:
    CPyGen_SetStopIterationValue(r67)
    dec_ref r67
    if not 0 goto L60 else goto L54 :: bool
L54:
    unreachable
L55:
    set_mem stop_iter_ptr, r67 :: builtins.object*
    return 0
L56:
    r69 = r4 == 0
    if r69 goto L75 else goto L57 :: bool
L57:
    r70 = r4 == 1
    if r70 goto L30 else goto L76 :: bool
L58:
    r71 = raise StopIteration
    if not r71 goto L60 (error at get_blob_sidecars:254) else goto L59 :: bool
L59:
    unreachable
L60:
    r72 = <error> :: object
    return r72
L61:
    dec_ref r7
    goto L15
L62:
    dec_ref r19
    goto L60
L63:
    dec_ref r31
    goto L60
L64:
    dec_ref r31
    dec_ref r33
    goto L60
L65:
    dec_ref r31
    dec_ref r38
    goto L60
L66:
    xdec_ref r1
    goto L28
L67:
    xdec_ref r1
    goto L60
L68:
    dec_ref r48
    goto L60
L69:
    xdec_ref r3
    goto L33
L70:
    xdec_ref r3
    goto L32
L71:
    xdec_ref r3
    goto L42
L72:
    dec_ref r51
    goto L42
L73:
    dec_ref r48
    goto L42
L74:
    dec_ref arg
    goto L60
L75:
    xdec_ref r3
    goto L1
L76:
    xdec_ref r3
    goto L58

def get_blob_sidecars_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_blob_sidecars_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_blob_sidecars_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_blob_sidecars_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_blob_sidecars_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_blob_sidecars_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_blob_sidecars_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_blob_sidecars_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_blob_sidecars_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_blob_sidecars(self, block_id, indices):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    block_id :: str
    indices :: union[list, None]
    r0 :: object
    r1 :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
    r2, r3, r4, r5 :: bool
    r6 :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
L0:
    if is_error(indices) goto L1 else goto L8
L1:
    r0 = box(None, 1)
    inc_ref r0
    indices = r0
L2:
    r1 = get_blob_sidecars_AsyncBeacon_gen()
    if is_error(r1) goto L9 (error at get_blob_sidecars:254) else goto L3
L3:
    r1.__mypyc_next_label__ = 0
    inc_ref self
    r1.__mypyc_generator_attribute__self = self; r3 = is_error
    if not r3 goto L10 (error at get_blob_sidecars:254) else goto L4 :: bool
L4:
    inc_ref block_id
    r1.__mypyc_generator_attribute__block_id = block_id; r4 = is_error
    if not r4 goto L10 (error at get_blob_sidecars:254) else goto L5 :: bool
L5:
    r1.__mypyc_generator_attribute__indices = indices; r5 = is_error
    if not r5 goto L11 (error at get_blob_sidecars:254) else goto L6 :: bool
L6:
    return r1
L7:
    r6 = <error> :: faster_web3.beacon.async_beacon.get_blob_sidecars_AsyncBeacon_gen
    return r6
L8:
    inc_ref indices
    goto L2
L9:
    dec_ref indices
    goto L7
L10:
    dec_ref indices
    dec_ref r1
    goto L7
L11:
    dec_ref r1
    goto L7

def get_attester_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: list
    r16 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L43
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L47 (error at get_attester_duties:265) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L47 (error at get_attester_duties:268) else goto L5
L5:
    r8 = '/eth/v1/validator/duties/attester/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__epoch
    if is_error(r9) goto L48 (error at get_attester_duties:269) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L49 (error at get_attester_duties:269) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L48 (error at get_attester_duties:269) else goto L8
L8:
    r15 = __mypyc_self__.__mypyc_generator_attribute__validator_indices
    if is_error(r15) goto L50 (error at get_attester_duties:269) else goto L9
L9:
    r16 = r7._async_make_post_request(r14, r15)
    dec_ref r14
    dec_ref r15
    dec_ref r7
    if is_error(r16) goto L47 (error at get_attester_duties:268) else goto L10
L10:
    __mypyc_self__.__mypyc_temp__82 = r16; r17 = is_error
    if not r17 goto L47 (error at get_attester_duties:-1) else goto L11 :: bool
L11:
    r18 = __mypyc_self__.__mypyc_temp__82
    if is_error(r18) goto L47 (error at get_attester_duties:-1) else goto L12
L12:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L13 else goto L51
L13:
    r23 = r1 != 0
    if not r23 goto L52 (error at get_attester_duties:-1) else goto L14 :: bool
L14:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__82 = r25; r26 = is_error
    if not r26 goto L53 (error at get_attester_duties:268) else goto L37 :: bool
L15:
    r27 = r22
L16:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L17:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L18 else goto L54 :: bool
L18:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L21 (error at get_attester_duties:268) else goto L55 :: bool
L19:
    unreachable
L20:
    inc_ref arg
    goto L32
L21:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__83 = r31; r32 = is_error
    if not r32 goto L56 (error at get_attester_duties:-1) else goto L22 :: bool
L22:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__82
    if is_error(r34) goto L56 (error at get_attester_duties:-1) else goto L23
L23:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L56 (error at get_attester_duties:268) else goto L24
L24:
    if r35 goto L27 else goto L25 :: bool
L25:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__83
    if is_error(r36) goto L57 (error at get_attester_duties:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L16
L27:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__83
    if is_error(r37) goto L58 (error at get_attester_duties:-1) else goto L28
L28:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L37
L29:
    r38 = __mypyc_self__.__mypyc_temp__83
    if is_error(r38) goto L47 (error at get_attester_duties:-1) else goto L30
L30:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L47 else goto L31 :: bool
L31:
    unreachable
L32:
    r40 = __mypyc_self__.__mypyc_temp__82
    if is_error(r40) goto L59 (error at get_attester_duties:-1) else goto L33
L33:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L35 else goto L34
L34:
    r27 = r41
    goto L16
L35:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L47 (error at get_attester_duties:268) else goto L36
L36:
    r24 = r42
L37:
    r43 = cast(dict, r24)
    if is_error(r43) goto L47 (error at get_attester_duties:268) else goto L38
L38:
    __mypyc_self__.__mypyc_next_label__ = -1
L39:
    if is_error(stop_iter_ptr) goto L40 else goto L42
L40:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L47 else goto L41 :: bool
L41:
    unreachable
L42:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L43:
    r45 = r4 == 0
    if r45 goto L60 else goto L44 :: bool
L44:
    r46 = r4 == 1
    if r46 goto L17 else goto L61 :: bool
L45:
    r47 = raise StopIteration
    if not r47 goto L47 (error at get_attester_duties:265) else goto L46 :: bool
L46:
    unreachable
L47:
    r48 = <error> :: object
    return r48
L48:
    dec_ref r7
    goto L47
L49:
    dec_ref r7
    dec_ref r9
    goto L47
L50:
    dec_ref r7
    dec_ref r14
    goto L47
L51:
    xdec_ref r1
    goto L15
L52:
    xdec_ref r1
    goto L47
L53:
    dec_ref r24
    goto L47
L54:
    xdec_ref r3
    goto L20
L55:
    xdec_ref r3
    goto L19
L56:
    xdec_ref r3
    goto L29
L57:
    dec_ref r27
    goto L29
L58:
    dec_ref r24
    goto L29
L59:
    dec_ref arg
    goto L47
L60:
    xdec_ref r3
    goto L1
L61:
    xdec_ref r3
    goto L45

def get_attester_duties_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_attester_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_attester_duties_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_attester_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_attester_duties_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_attester_duties_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_attester_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_attester_duties_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_attester_duties_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_attester_duties(self, epoch, validator_indices):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    epoch :: str
    validator_indices :: list
    r0 :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
    r1, r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
L0:
    r0 = get_attester_duties_AsyncBeacon_gen()
    if is_error(r0) goto L5 (error at get_attester_duties:265) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L6 (error at get_attester_duties:265) else goto L2 :: bool
L2:
    inc_ref epoch
    r0.__mypyc_generator_attribute__epoch = epoch; r3 = is_error
    if not r3 goto L6 (error at get_attester_duties:265) else goto L3 :: bool
L3:
    inc_ref validator_indices
    r0.__mypyc_generator_attribute__validator_indices = validator_indices; r4 = is_error
    if not r4 goto L6 (error at get_attester_duties:265) else goto L4 :: bool
L4:
    return r0
L5:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_attester_duties_AsyncBeacon_gen
    return r5
L6:
    dec_ref r0
    goto L5

def get_block_proposer_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: union[dict, None]
    r16 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L42
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L46 (error at get_block_proposer_duties:272) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L46 (error at get_block_proposer_duties:273) else goto L5
L5:
    r8 = '/eth/v1/validator/duties/proposer/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__epoch
    if is_error(r9) goto L47 (error at get_block_proposer_duties:274) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L48 (error at get_block_proposer_duties:274) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L47 (error at get_block_proposer_duties:274) else goto L8
L8:
    r15 = <error> :: union[dict, None]
    r16 = r7._async_make_get_request(r14, r15)
    dec_ref r14
    dec_ref r7
    if is_error(r16) goto L46 (error at get_block_proposer_duties:273) else goto L9
L9:
    __mypyc_self__.__mypyc_temp__84 = r16; r17 = is_error
    if not r17 goto L46 (error at get_block_proposer_duties:-1) else goto L10 :: bool
L10:
    r18 = __mypyc_self__.__mypyc_temp__84
    if is_error(r18) goto L46 (error at get_block_proposer_duties:-1) else goto L11
L11:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L12 else goto L49
L12:
    r23 = r1 != 0
    if not r23 goto L50 (error at get_block_proposer_duties:-1) else goto L13 :: bool
L13:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_get_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__84 = r25; r26 = is_error
    if not r26 goto L51 (error at get_block_proposer_duties:273) else goto L36 :: bool
L14:
    r27 = r22
L15:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L16:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L17 else goto L52 :: bool
L17:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L20 (error at get_block_proposer_duties:273) else goto L53 :: bool
L18:
    unreachable
L19:
    inc_ref arg
    goto L31
L20:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__85 = r31; r32 = is_error
    if not r32 goto L54 (error at get_block_proposer_duties:-1) else goto L21 :: bool
L21:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__84
    if is_error(r34) goto L54 (error at get_block_proposer_duties:-1) else goto L22
L22:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L54 (error at get_block_proposer_duties:273) else goto L23
L23:
    if r35 goto L26 else goto L24 :: bool
L24:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__85
    if is_error(r36) goto L55 (error at get_block_proposer_duties:-1) else goto L25
L25:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L15
L26:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__85
    if is_error(r37) goto L56 (error at get_block_proposer_duties:-1) else goto L27
L27:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L36
L28:
    r38 = __mypyc_self__.__mypyc_temp__85
    if is_error(r38) goto L46 (error at get_block_proposer_duties:-1) else goto L29
L29:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L46 else goto L30 :: bool
L30:
    unreachable
L31:
    r40 = __mypyc_self__.__mypyc_temp__84
    if is_error(r40) goto L57 (error at get_block_proposer_duties:-1) else goto L32
L32:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L34 else goto L33
L33:
    r27 = r41
    goto L15
L34:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L46 (error at get_block_proposer_duties:273) else goto L35
L35:
    r24 = r42
L36:
    r43 = cast(dict, r24)
    if is_error(r43) goto L46 (error at get_block_proposer_duties:273) else goto L37
L37:
    __mypyc_self__.__mypyc_next_label__ = -1
L38:
    if is_error(stop_iter_ptr) goto L39 else goto L41
L39:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L46 else goto L40 :: bool
L40:
    unreachable
L41:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L42:
    r45 = r4 == 0
    if r45 goto L58 else goto L43 :: bool
L43:
    r46 = r4 == 1
    if r46 goto L16 else goto L59 :: bool
L44:
    r47 = raise StopIteration
    if not r47 goto L46 (error at get_block_proposer_duties:272) else goto L45 :: bool
L45:
    unreachable
L46:
    r48 = <error> :: object
    return r48
L47:
    dec_ref r7
    goto L46
L48:
    dec_ref r7
    dec_ref r9
    goto L46
L49:
    xdec_ref r1
    goto L14
L50:
    xdec_ref r1
    goto L46
L51:
    dec_ref r24
    goto L46
L52:
    xdec_ref r3
    goto L19
L53:
    xdec_ref r3
    goto L18
L54:
    xdec_ref r3
    goto L28
L55:
    dec_ref r27
    goto L28
L56:
    dec_ref r24
    goto L28
L57:
    dec_ref arg
    goto L46
L58:
    xdec_ref r3
    goto L1
L59:
    xdec_ref r3
    goto L44

def get_block_proposer_duties_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_proposer_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_proposer_duties_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_block_proposer_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_block_proposer_duties_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_block_proposer_duties_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_block_proposer_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_block_proposer_duties_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_block_proposer_duties_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_block_proposer_duties(self, epoch):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    epoch :: str
    r0 :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
L0:
    r0 = get_block_proposer_duties_AsyncBeacon_gen()
    if is_error(r0) goto L4 (error at get_block_proposer_duties:272) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L5 (error at get_block_proposer_duties:272) else goto L2 :: bool
L2:
    inc_ref epoch
    r0.__mypyc_generator_attribute__epoch = epoch; r3 = is_error
    if not r3 goto L5 (error at get_block_proposer_duties:272) else goto L3 :: bool
L3:
    return r0
L4:
    r4 = <error> :: faster_web3.beacon.async_beacon.get_block_proposer_duties_AsyncBeacon_gen
    return r4
L5:
    dec_ref r0
    goto L4

def get_sync_committee_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: list
    r16 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L43
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L47 (error at get_sync_committee_duties:277) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L47 (error at get_sync_committee_duties:280) else goto L5
L5:
    r8 = '/eth/v1/validator/duties/sync/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__epoch
    if is_error(r9) goto L48 (error at get_sync_committee_duties:281) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L49 (error at get_sync_committee_duties:281) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L48 (error at get_sync_committee_duties:281) else goto L8
L8:
    r15 = __mypyc_self__.__mypyc_generator_attribute__validator_indices
    if is_error(r15) goto L50 (error at get_sync_committee_duties:281) else goto L9
L9:
    r16 = r7._async_make_post_request(r14, r15)
    dec_ref r14
    dec_ref r15
    dec_ref r7
    if is_error(r16) goto L47 (error at get_sync_committee_duties:280) else goto L10
L10:
    __mypyc_self__.__mypyc_temp__86 = r16; r17 = is_error
    if not r17 goto L47 (error at get_sync_committee_duties:-1) else goto L11 :: bool
L11:
    r18 = __mypyc_self__.__mypyc_temp__86
    if is_error(r18) goto L47 (error at get_sync_committee_duties:-1) else goto L12
L12:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L13 else goto L51
L13:
    r23 = r1 != 0
    if not r23 goto L52 (error at get_sync_committee_duties:-1) else goto L14 :: bool
L14:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__86 = r25; r26 = is_error
    if not r26 goto L53 (error at get_sync_committee_duties:280) else goto L37 :: bool
L15:
    r27 = r22
L16:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L17:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L18 else goto L54 :: bool
L18:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L21 (error at get_sync_committee_duties:280) else goto L55 :: bool
L19:
    unreachable
L20:
    inc_ref arg
    goto L32
L21:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__87 = r31; r32 = is_error
    if not r32 goto L56 (error at get_sync_committee_duties:-1) else goto L22 :: bool
L22:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__86
    if is_error(r34) goto L56 (error at get_sync_committee_duties:-1) else goto L23
L23:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L56 (error at get_sync_committee_duties:280) else goto L24
L24:
    if r35 goto L27 else goto L25 :: bool
L25:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__87
    if is_error(r36) goto L57 (error at get_sync_committee_duties:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L16
L27:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__87
    if is_error(r37) goto L58 (error at get_sync_committee_duties:-1) else goto L28
L28:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L37
L29:
    r38 = __mypyc_self__.__mypyc_temp__87
    if is_error(r38) goto L47 (error at get_sync_committee_duties:-1) else goto L30
L30:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L47 else goto L31 :: bool
L31:
    unreachable
L32:
    r40 = __mypyc_self__.__mypyc_temp__86
    if is_error(r40) goto L59 (error at get_sync_committee_duties:-1) else goto L33
L33:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L35 else goto L34
L34:
    r27 = r41
    goto L16
L35:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L47 (error at get_sync_committee_duties:280) else goto L36
L36:
    r24 = r42
L37:
    r43 = cast(dict, r24)
    if is_error(r43) goto L47 (error at get_sync_committee_duties:280) else goto L38
L38:
    __mypyc_self__.__mypyc_next_label__ = -1
L39:
    if is_error(stop_iter_ptr) goto L40 else goto L42
L40:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L47 else goto L41 :: bool
L41:
    unreachable
L42:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L43:
    r45 = r4 == 0
    if r45 goto L60 else goto L44 :: bool
L44:
    r46 = r4 == 1
    if r46 goto L17 else goto L61 :: bool
L45:
    r47 = raise StopIteration
    if not r47 goto L47 (error at get_sync_committee_duties:277) else goto L46 :: bool
L46:
    unreachable
L47:
    r48 = <error> :: object
    return r48
L48:
    dec_ref r7
    goto L47
L49:
    dec_ref r7
    dec_ref r9
    goto L47
L50:
    dec_ref r7
    dec_ref r14
    goto L47
L51:
    xdec_ref r1
    goto L15
L52:
    xdec_ref r1
    goto L47
L53:
    dec_ref r24
    goto L47
L54:
    xdec_ref r3
    goto L20
L55:
    xdec_ref r3
    goto L19
L56:
    xdec_ref r3
    goto L29
L57:
    dec_ref r27
    goto L29
L58:
    dec_ref r24
    goto L29
L59:
    dec_ref arg
    goto L47
L60:
    xdec_ref r3
    goto L1
L61:
    xdec_ref r3
    goto L45

def get_sync_committee_duties_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_sync_committee_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_sync_committee_duties_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_sync_committee_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_sync_committee_duties_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_sync_committee_duties_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_sync_committee_duties_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_sync_committee_duties_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_sync_committee_duties_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_sync_committee_duties(self, epoch, validator_indices):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    epoch :: str
    validator_indices :: list
    r0 :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
    r1, r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
L0:
    r0 = get_sync_committee_duties_AsyncBeacon_gen()
    if is_error(r0) goto L5 (error at get_sync_committee_duties:277) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L6 (error at get_sync_committee_duties:277) else goto L2 :: bool
L2:
    inc_ref epoch
    r0.__mypyc_generator_attribute__epoch = epoch; r3 = is_error
    if not r3 goto L6 (error at get_sync_committee_duties:277) else goto L3 :: bool
L3:
    inc_ref validator_indices
    r0.__mypyc_generator_attribute__validator_indices = validator_indices; r4 = is_error
    if not r4 goto L6 (error at get_sync_committee_duties:277) else goto L4 :: bool
L4:
    return r0
L5:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_sync_committee_duties_AsyncBeacon_gen
    return r5
L6:
    dec_ref r0
    goto L5

def get_attestations_rewards_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: faster_web3.beacon.async_beacon.AsyncBeacon
    r8, r9, r10 :: str
    r11 :: object[2]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: list
    r16 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r17 :: bool
    r18 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r19, r20 :: object
    r21 :: object_ptr
    r22 :: object
    r23 :: bit
    r24 :: object
    r25 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r26 :: bool
    r27 :: object
    r28 :: bool
    r29 :: object
    r30 :: bit
    r31 :: tuple[object, object, object]
    r32 :: bool
    r33 :: object_ptr
    r34 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r35 :: bool
    r36, r37, r38 :: tuple[object, object, object]
    r39 :: bit
    r40 :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    r41, r42 :: object
    r43 :: dict
    r44 :: bool
    r45, r46 :: bit
    r47 :: bool
    r48 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L43
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L47 (error at get_attestations_rewards:286) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r7) goto L47 (error at get_attestations_rewards:289) else goto L5
L5:
    r8 = '/eth/v1/beacon/rewards/attestations/{0}'
    r9 = __mypyc_self__.__mypyc_generator_attribute__epoch
    if is_error(r9) goto L48 (error at get_attestations_rewards:290) else goto L6
L6:
    r10 = 'format'
    r11 = [r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775810, 0)
    if is_error(r13) goto L49 (error at get_attestations_rewards:290) else goto L7
L7:
    dec_ref r9
    r14 = cast(str, r13)
    if is_error(r14) goto L48 (error at get_attestations_rewards:290) else goto L8
L8:
    r15 = __mypyc_self__.__mypyc_generator_attribute__validator_indices
    if is_error(r15) goto L50 (error at get_attestations_rewards:290) else goto L9
L9:
    r16 = r7._async_make_post_request(r14, r15)
    dec_ref r14
    dec_ref r15
    dec_ref r7
    if is_error(r16) goto L47 (error at get_attestations_rewards:289) else goto L10
L10:
    __mypyc_self__.__mypyc_temp__88 = r16; r17 = is_error
    if not r17 goto L47 (error at get_attestations_rewards:-1) else goto L11 :: bool
L11:
    r18 = __mypyc_self__.__mypyc_temp__88
    if is_error(r18) goto L47 (error at get_attestations_rewards:-1) else goto L12
L12:
    r19 = load_address _Py_NoneStruct
    r20 = <error> :: object
    r1 = r20
    r21 = load_address r1
    r22 = r18.__mypyc_generator_helper__(r19, r19, r19, r19, r21)
    dec_ref r18
    if is_error(r22) goto L13 else goto L51
L13:
    r23 = r1 != 0
    if not r23 goto L52 (error at get_attestations_rewards:-1) else goto L14 :: bool
L14:
    r24 = r1
    r25 = <error> :: faster_web3.beacon.async_beacon._async_make_post_request_AsyncBeacon_gen
    __mypyc_self__.__mypyc_temp__88 = r25; r26 = is_error
    if not r26 goto L53 (error at get_attestations_rewards:289) else goto L37 :: bool
L15:
    r27 = r22
L16:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r27
L17:
    r29 = load_address _Py_NoneStruct
    r30 = type != r29
    if r30 goto L18 else goto L54 :: bool
L18:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L21 (error at get_attestations_rewards:289) else goto L55 :: bool
L19:
    unreachable
L20:
    inc_ref arg
    goto L32
L21:
    r31 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__89 = r31; r32 = is_error
    if not r32 goto L56 (error at get_attestations_rewards:-1) else goto L22 :: bool
L22:
    r33 = load_address r3
    r34 = __mypyc_self__.__mypyc_temp__88
    if is_error(r34) goto L56 (error at get_attestations_rewards:-1) else goto L23
L23:
    r35 = CPy_YieldFromErrorHandle(r34, r33)
    dec_ref r34
    if is_error(r35) goto L56 (error at get_attestations_rewards:289) else goto L24
L24:
    if r35 goto L27 else goto L25 :: bool
L25:
    r27 = r3
    r36 = __mypyc_self__.__mypyc_temp__89
    if is_error(r36) goto L57 (error at get_attestations_rewards:-1) else goto L26
L26:
    CPy_RestoreExcInfo(r36)
    dec_ref r36
    goto L16
L27:
    r24 = r3
    r37 = __mypyc_self__.__mypyc_temp__89
    if is_error(r37) goto L58 (error at get_attestations_rewards:-1) else goto L28
L28:
    CPy_RestoreExcInfo(r37)
    dec_ref r37
    goto L37
L29:
    r38 = __mypyc_self__.__mypyc_temp__89
    if is_error(r38) goto L47 (error at get_attestations_rewards:-1) else goto L30
L30:
    CPy_RestoreExcInfo(r38)
    dec_ref r38
    r39 = CPy_KeepPropagating()
    if not r39 goto L47 else goto L31 :: bool
L31:
    unreachable
L32:
    r40 = __mypyc_self__.__mypyc_temp__88
    if is_error(r40) goto L59 (error at get_attestations_rewards:-1) else goto L33
L33:
    r41 = CPyIter_Send(r40, arg)
    dec_ref r40
    dec_ref arg
    if is_error(r41) goto L35 else goto L34
L34:
    r27 = r41
    goto L16
L35:
    r42 = CPy_FetchStopIterationValue()
    if is_error(r42) goto L47 (error at get_attestations_rewards:289) else goto L36
L36:
    r24 = r42
L37:
    r43 = cast(dict, r24)
    if is_error(r43) goto L47 (error at get_attestations_rewards:289) else goto L38
L38:
    __mypyc_self__.__mypyc_next_label__ = -1
L39:
    if is_error(stop_iter_ptr) goto L40 else goto L42
L40:
    CPyGen_SetStopIterationValue(r43)
    dec_ref r43
    if not 0 goto L47 else goto L41 :: bool
L41:
    unreachable
L42:
    set_mem stop_iter_ptr, r43 :: builtins.object*
    return 0
L43:
    r45 = r4 == 0
    if r45 goto L60 else goto L44 :: bool
L44:
    r46 = r4 == 1
    if r46 goto L17 else goto L61 :: bool
L45:
    r47 = raise StopIteration
    if not r47 goto L47 (error at get_attestations_rewards:286) else goto L46 :: bool
L46:
    unreachable
L47:
    r48 = <error> :: object
    return r48
L48:
    dec_ref r7
    goto L47
L49:
    dec_ref r7
    dec_ref r9
    goto L47
L50:
    dec_ref r7
    dec_ref r14
    goto L47
L51:
    xdec_ref r1
    goto L15
L52:
    xdec_ref r1
    goto L47
L53:
    dec_ref r24
    goto L47
L54:
    xdec_ref r3
    goto L20
L55:
    xdec_ref r3
    goto L19
L56:
    xdec_ref r3
    goto L29
L57:
    dec_ref r27
    goto L29
L58:
    dec_ref r24
    goto L29
L59:
    dec_ref arg
    goto L47
L60:
    xdec_ref r3
    goto L1
L61:
    xdec_ref r3
    goto L45

def get_attestations_rewards_AsyncBeacon_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_attestations_rewards_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_attestations_rewards_AsyncBeacon_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = get_attestations_rewards_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def get_attestations_rewards_AsyncBeacon_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def get_attestations_rewards_AsyncBeacon_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = get_attestations_rewards_AsyncBeacon_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def get_attestations_rewards_AsyncBeacon_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def get_attestations_rewards_AsyncBeacon_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def AsyncBeacon.get_attestations_rewards(self, epoch, validator_indices):
    self :: faster_web3.beacon.async_beacon.AsyncBeacon
    epoch :: str
    validator_indices :: list
    r0 :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
    r1, r2, r3, r4 :: bool
    r5 :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
L0:
    r0 = get_attestations_rewards_AsyncBeacon_gen()
    if is_error(r0) goto L5 (error at get_attestations_rewards:286) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref self
    r0.__mypyc_generator_attribute__self = self; r2 = is_error
    if not r2 goto L6 (error at get_attestations_rewards:286) else goto L2 :: bool
L2:
    inc_ref epoch
    r0.__mypyc_generator_attribute__epoch = epoch; r3 = is_error
    if not r3 goto L6 (error at get_attestations_rewards:286) else goto L3 :: bool
L3:
    inc_ref validator_indices
    r0.__mypyc_generator_attribute__validator_indices = validator_indices; r4 = is_error
    if not r4 goto L6 (error at get_attestations_rewards:286) else goto L4 :: bool
L4:
    return r0
L5:
    r5 = <error> :: faster_web3.beacon.async_beacon.get_attestations_rewards_AsyncBeacon_gen
    return r5
L6:
    dec_ref r0
    goto L5

def AsyncBeacon.__mypyc_defaults_setup(__mypyc_self__):
    __mypyc_self__ :: faster_web3.beacon.async_beacon.AsyncBeacon
L0:
    __mypyc_self__.is_async = 1
    return 1

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16, r17 :: object
    r18 :: str
    r19 :: dict
    r20, r21 :: object
    r22 :: str
    r23 :: dict
    r24, r25 :: object
    r26 :: str
    r27, r28 :: object
    r29 :: bool
    r30, r31, r32, r33, r34 :: str
    r35 :: tuple
    r36 :: i32
    r37 :: bit
    r38 :: dict
    r39 :: str
    r40 :: i32
    r41 :: bit
    r42 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L14 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Any', 'Dict', 'Final', 'List', 'Optional', 'Union', 'final')
    r6 = 'typing'
    r7 = faster_web3.beacon.async_beacon.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L14 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('ClientTimeout',)
    r10 = 'aiohttp'
    r11 = faster_web3.beacon.async_beacon.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L14 (error at <module>:11) else goto L5
L5:
    aiohttp = r12 :: module
    dec_ref r12
    r13 = ('URI', 'HexStr')
    r14 = 'eth_typing'
    r15 = faster_web3.beacon.async_beacon.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L14 (error at <module>:14) else goto L6
L6:
    eth_typing = r16 :: module
    dec_ref r16
    r17 = ('HTTPSessionManager',)
    r18 = 'faster_web3._utils.http_session_manager'
    r19 = faster_web3.beacon.async_beacon.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L14 (error at <module>:19) else goto L7
L7:
    faster_web3._utils.http_session_manager = r20 :: module
    dec_ref r20
    r21 = ('GET_ATTESTATIONS', 'GET_ATTESTATIONS_REWARDS', 'GET_ATTESTER_DUTIES', 'GET_ATTESTER_SLASHINGS', 'GET_BEACON_HEADS', 'GET_BEACON_STATE', 'GET_BLINDED_BLOCKS', 'GET_BLOB_SIDECARS', 'GET_BLOCK', 'GET_BLOCK_ATTESTATIONS', 'GET_BLOCK_HEADER', 'GET_BLOCK_HEADERS', 'GET_BLOCK_PROPOSERS_DUTIES', 'GET_BLOCK_ROOT', 'GET_BLS_TO_EXECUTION_CHANGES', 'GET_DEPOSIT_CONTRACT', 'GET_EPOCH_COMMITTEES', 'GET_EPOCH_RANDAO', 'GET_EPOCH_SYNC_COMMITTEES', 'GET_FINALITY_CHECKPOINT', 'GET_FORK_DATA', 'GET_FORK_SCHEDULE', 'GET_GENESIS', 'GET_HASH_ROOT', 'GET_HEALTH', 'GET_LIGHT_CLIENT_BOOTSTRAP_STRUCTURE', 'GET_LIGHT_CLIENT_FINALITY_UPDATE', 'GET_LIGHT_CLIENT_OPTIMISTIC_UPDATE', 'GET_LIGHT_CLIENT_UPDATES', 'GET_NODE_IDENTITY', 'GET_PEER', 'GET_PEER_COUNT', 'GET_PEERS', 'GET_PROPOSER_SLASHINGS', 'GET_REWARDS', 'GET_SPEC', 'GET_SYNC_COMMITTEE_DUTIES', 'GET_SYNCING', 'GET_VALIDATOR', 'GET_VALIDATOR_BALANCES', 'GET_VALIDATORS', 'GET_VERSION', 'GET_VOLUNTARY_EXITS')
    r22 = 'faster_web3.beacon.api_endpoints'
    r23 = faster_web3.beacon.async_beacon.globals :: static
    r24 = CPyImport_ImportFromMany(r22, r21, r21, r23)
    if is_error(r24) goto L14 (error at <module>:22) else goto L8
L8:
    faster_web3.beacon.api_endpoints = r24 :: module
    dec_ref r24
    r25 = <error> :: object
    r26 = 'faster_web3.beacon.async_beacon'
    r27 = faster_web3.beacon.async_beacon.AsyncBeacon_template :: type
    r28 = CPyType_FromTemplate(r27, r25, r26)
    if is_error(r28) goto L14 (error at <module>:70) else goto L9
L9:
    r29 = AsyncBeacon_trait_vtable_setup()
    if is_error(r29) goto L15 (error at <module>:-1) else goto L10
L10:
    r30 = '__mypyc_attrs__'
    r31 = 'is_async'
    r32 = 'base_url'
    r33 = 'request_timeout'
    r34 = '_request_session_manager'
    r35 = PyTuple_Pack(4, r31, r32, r33, r34)
    if is_error(r35) goto L15 (error at <module>:70) else goto L11
L11:
    r36 = PyObject_SetAttr(r28, r30, r35)
    dec_ref r35
    r37 = r36 >= 0 :: signed
    if not r37 goto L15 (error at <module>:70) else goto L12 :: bool
L12:
    faster_web3.beacon.async_beacon.AsyncBeacon = r28 :: type
    r38 = faster_web3.beacon.async_beacon.globals :: static
    r39 = 'AsyncBeacon'
    r40 = PyDict_SetItem(r38, r39, r28)
    dec_ref r28
    r41 = r40 >= 0 :: signed
    if not r41 goto L14 (error at <module>:70) else goto L13 :: bool
L13:
    return 1
L14:
    r42 = <error> :: None
    return r42
L15:
    dec_ref r28
    goto L14

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16, r17 :: object
    r18 :: str
    r19 :: dict
    r20, r21 :: object
    r22 :: str
    r23 :: dict
    r24, r25 :: object
    r26 :: str
    r27 :: dict
    r28 :: object
    r29 :: str
    r30 :: dict
    r31 :: str
    r32, r33 :: object
    r34 :: dict
    r35 :: str
    r36 :: object
    r37 :: tuple[object, object]
    r38, r39 :: object
    r40 :: dict
    r41 :: str
    r42 :: object
    r43 :: object[2]
    r44 :: object_ptr
    r45, r46 :: object
    r47 :: dict
    r48 :: str
    r49 :: i32
    r50 :: bit
    r51 :: str
    r52 :: dict
    r53 :: str
    r54 :: object
    r55 :: object[1]
    r56 :: object_ptr
    r57 :: object
    r58 :: dict
    r59 :: str
    r60 :: i32
    r61 :: bit
    r62 :: str
    r63 :: dict
    r64 :: str
    r65 :: object
    r66 :: object[1]
    r67 :: object_ptr
    r68 :: object
    r69 :: dict
    r70 :: str
    r71 :: i32
    r72 :: bit
    r73 :: str
    r74 :: dict
    r75 :: str
    r76 :: object
    r77 :: object[1]
    r78 :: object_ptr
    r79 :: object
    r80 :: dict
    r81 :: str
    r82 :: i32
    r83 :: bit
    r84 :: dict
    r85 :: str
    r86 :: object
    r87, r88, r89, r90, r91 :: str
    r92 :: tuple[str, str, str, str, str]
    r93, r94 :: object
    r95 :: dict
    r96 :: str
    r97 :: i32
    r98 :: bit
    r99 :: dict
    r100 :: str
    r101 :: object
    r102 :: dict
    r103 :: str
    r104 :: object
    r105 :: dict
    r106 :: str
    r107 :: object
    r108 :: dict
    r109 :: str
    r110 :: object
    r111 :: dict
    r112 :: str
    r113 :: object
    r114 :: dict
    r115 :: str
    r116, r117 :: object
    r118 :: tuple[object, object, object, object, object, object]
    r119, r120 :: object
    r121 :: dict
    r122 :: str
    r123 :: i32
    r124 :: bit
    r125 :: dict
    r126 :: str
    r127 :: object
    r128 :: str
    r129 :: object
    r130 :: dict
    r131 :: str
    r132 :: i32
    r133 :: bit
    r134 :: dict
    r135 :: str
    r136, r137 :: object
    r138 :: dict
    r139 :: str
    r140 :: object
    r141 :: dict
    r142 :: str
    r143, r144 :: object
    r145 :: dict
    r146 :: str
    r147 :: object
    r148 :: dict
    r149 :: str
    r150, r151 :: object
    r152 :: tuple[object, object, object]
    r153, r154 :: object
    r155 :: dict
    r156 :: str
    r157 :: i32
    r158 :: bit
    r159 :: dict
    r160 :: str
    r161 :: object
    r162 :: dict
    r163 :: str
    r164 :: object
    r165 :: dict
    r166 :: str
    r167 :: object
    r168 :: dict
    r169 :: str
    r170 :: object
    r171 :: tuple[object, object, object]
    r172, r173 :: object
    r174 :: dict
    r175 :: str
    r176 :: i32
    r177 :: bit
    r178 :: dict
    r179 :: str
    r180, r181 :: object
    r182 :: dict
    r183 :: str
    r184 :: object
    r185 :: dict
    r186 :: str
    r187 :: object
    r188 :: dict
    r189 :: str
    r190, r191 :: object
    r192 :: dict
    r193 :: str
    r194 :: object
    r195 :: tuple[object, object]
    r196, r197, r198 :: object
    r199 :: dict
    r200 :: str
    r201 :: object
    r202 :: str
    r203 :: object
    r204 :: tuple[object, object, object, object]
    r205, r206 :: object
    r207 :: dict
    r208 :: str
    r209 :: i32
    r210 :: bit
    r211 :: str
    r212 :: object
    r213 :: dict
    r214 :: str
    r215 :: object
    r216 :: object[2]
    r217 :: object_ptr
    r218 :: object
    r219 :: dict
    r220 :: str
    r221 :: i32
    r222 :: bit
    r223 :: str
    r224 :: object
    r225 :: dict
    r226 :: str
    r227 :: object
    r228 :: object[2]
    r229 :: object_ptr
    r230 :: object
    r231 :: dict
    r232 :: str
    r233 :: i32
    r234 :: bit
    r235 :: str
    r236 :: object
    r237 :: dict
    r238 :: str
    r239 :: object
    r240 :: object[2]
    r241 :: object_ptr
    r242 :: object
    r243 :: dict
    r244 :: str
    r245 :: i32
    r246 :: bit
    r247 :: str
    r248 :: object
    r249 :: dict
    r250 :: str
    r251 :: object
    r252 :: object[2]
    r253 :: object_ptr
    r254 :: object
    r255 :: dict
    r256 :: str
    r257 :: i32
    r258 :: bit
    r259 :: str
    r260 :: object
    r261 :: dict
    r262 :: str
    r263 :: object
    r264 :: object[2]
    r265 :: object_ptr
    r266 :: object
    r267 :: dict
    r268 :: str
    r269 :: i32
    r270 :: bit
    r271 :: str
    r272 :: object
    r273 :: dict
    r274 :: str
    r275 :: object
    r276 :: object[2]
    r277 :: object_ptr
    r278 :: object
    r279 :: dict
    r280 :: str
    r281 :: i32
    r282 :: bit
    r283 :: str
    r284 :: object
    r285 :: dict
    r286 :: str
    r287 :: object
    r288 :: object[2]
    r289 :: object_ptr
    r290 :: object
    r291 :: dict
    r292 :: str
    r293 :: i32
    r294 :: bit
    r295 :: dict
    r296 :: str
    r297 :: object
    r298 :: dict
    r299 :: str
    r300 :: object
    r301 :: dict
    r302 :: str
    r303, r304 :: object
    r305 :: dict
    r306 :: str
    r307 :: object
    r308 :: tuple[object, object]
    r309, r310 :: object
    r311 :: tuple[object, object]
    r312, r313 :: object
    r314 :: dict
    r315 :: str
    r316 :: i32
    r317 :: bit
    r318, r319 :: object
    r320 :: bit
    r321 :: str
    r322 :: object
    r323 :: dict
    r324 :: str
    r325 :: object
    r326 :: str
    r327 :: object
    r328 :: tuple
    r329, r330 :: object
    r331 :: bit
    r332 :: str
    r333 :: object
    r334 :: dict
    r335 :: str
    r336 :: object
    r337 :: str
    r338 :: object
    r339 :: str
    r340 :: bool
    r341, r342 :: str
    r343 :: object
    r344 :: object[2]
    r345 :: object_ptr
    r346 :: object
    r347, r348, r349, r350, r351 :: dict
    r352 :: str
    r353 :: object
    r354 :: str
    r355 :: i32
    r356 :: bit
    r357 :: dict
    r358 :: str
    r359 :: object
    r360 :: str
    r361 :: i32
    r362 :: bit
    r363, r364 :: str
    r365 :: i32
    r366 :: bit
    r367, r368 :: str
    r369 :: i32
    r370 :: bit
    r371, r372 :: str
    r373 :: i32
    r374 :: bit
    r375 :: object[3]
    r376 :: object_ptr
    r377 :: object
    r378 :: dict
    r379 :: str
    r380 :: i32
    r381 :: bit
    r382 :: object
    r383 :: str
    r384 :: dict
    r385 :: str
    r386 :: object
    r387 :: dict
    r388 :: str
    r389, r390 :: object
    r391 :: dict
    r392 :: str
    r393 :: object
    r394 :: object[2]
    r395 :: object_ptr
    r396 :: object
    r397 :: dict
    r398 :: str
    r399 :: i32
    r400 :: bit
    r401, r402 :: object
    r403 :: bit
    r404 :: str
    r405 :: object
    r406 :: dict
    r407 :: str
    r408 :: object
    r409 :: str
    r410 :: object
    r411 :: tuple
    r412, r413 :: object
    r414 :: bit
    r415 :: str
    r416 :: object
    r417 :: dict
    r418 :: str
    r419 :: object
    r420 :: str
    r421 :: object
    r422 :: str
    r423 :: bool
    r424, r425 :: str
    r426 :: object
    r427 :: object[2]
    r428 :: object_ptr
    r429 :: object
    r430, r431, r432, r433, r434 :: dict
    r435 :: str
    r436 :: object
    r437 :: str
    r438 :: i32
    r439 :: bit
    r440 :: object
    r441 :: str
    r442 :: i32
    r443 :: bit
    r444 :: object
    r445 :: str
    r446 :: i32
    r447 :: bit
    r448 :: object
    r449 :: str
    r450 :: i32
    r451 :: bit
    r452 :: object
    r453 :: str
    r454 :: i32
    r455 :: bit
    r456 :: object
    r457 :: str
    r458 :: i32
    r459 :: bit
    r460 :: object
    r461 :: str
    r462 :: i32
    r463 :: bit
    r464 :: object
    r465 :: str
    r466 :: i32
    r467 :: bit
    r468, r469 :: str
    r470 :: i32
    r471 :: bit
    r472, r473 :: str
    r474 :: i32
    r475 :: bit
    r476, r477 :: str
    r478 :: i32
    r479 :: bit
    r480 :: object[3]
    r481 :: object_ptr
    r482 :: object
    r483 :: dict
    r484 :: str
    r485 :: i32
    r486 :: bit
    r487, r488, r489 :: object
    r490 :: bit
    r491 :: str
    r492 :: object
    r493 :: dict
    r494 :: str
    r495 :: object
    r496 :: str
    r497 :: object
    r498 :: tuple
    r499, r500 :: object
    r501 :: bit
    r502 :: str
    r503 :: object
    r504 :: dict
    r505 :: str
    r506 :: object
    r507 :: str
    r508 :: object
    r509 :: str
    r510 :: bool
    r511, r512 :: str
    r513 :: object
    r514 :: object[2]
    r515 :: object_ptr
    r516 :: object
    r517, r518, r519, r520 :: dict
    r521 :: object
    r522 :: str
    r523 :: i32
    r524 :: bit
    r525 :: object
    r526 :: str
    r527 :: i32
    r528 :: bit
    r529 :: object
    r530 :: str
    r531 :: i32
    r532 :: bit
    r533, r534 :: str
    r535 :: i32
    r536 :: bit
    r537, r538 :: str
    r539 :: i32
    r540 :: bit
    r541, r542 :: str
    r543 :: i32
    r544 :: bit
    r545 :: object[3]
    r546 :: object_ptr
    r547 :: object
    r548 :: dict
    r549 :: str
    r550 :: i32
    r551 :: bit
    r552, r553, r554 :: object
    r555 :: bit
    r556 :: str
    r557 :: object
    r558 :: dict
    r559 :: str
    r560 :: object
    r561 :: str
    r562 :: object
    r563 :: tuple
    r564, r565 :: object
    r566 :: bit
    r567 :: str
    r568 :: object
    r569 :: dict
    r570 :: str
    r571 :: object
    r572 :: str
    r573 :: object
    r574 :: str
    r575 :: bool
    r576, r577 :: str
    r578 :: object
    r579 :: object[2]
    r580 :: object_ptr
    r581 :: object
    r582, r583, r584, r585 :: dict
    r586 :: object
    r587 :: str
    r588 :: i32
    r589 :: bit
    r590 :: dict
    r591 :: str
    r592 :: object
    r593 :: str
    r594 :: i32
    r595 :: bit
    r596 :: dict
    r597 :: str
    r598 :: object
    r599 :: str
    r600 :: i32
    r601 :: bit
    r602 :: object
    r603 :: str
    r604 :: i32
    r605 :: bit
    r606 :: object
    r607 :: str
    r608 :: i32
    r609 :: bit
    r610 :: object
    r611 :: str
    r612 :: i32
    r613 :: bit
    r614, r615 :: str
    r616 :: i32
    r617 :: bit
    r618, r619 :: str
    r620 :: i32
    r621 :: bit
    r622, r623 :: str
    r624 :: i32
    r625 :: bit
    r626 :: object[3]
    r627 :: object_ptr
    r628 :: object
    r629 :: dict
    r630 :: str
    r631 :: i32
    r632 :: bit
    r633 :: object
    r634, r635 :: str
    r636 :: dict
    r637 :: str
    r638 :: object
    r639 :: str
    r640 :: dict
    r641 :: str
    r642 :: object
    r643 :: dict
    r644 :: str
    r645, r646 :: object
    r647 :: str
    r648 :: dict
    r649 :: str
    r650 :: object
    r651 :: dict
    r652 :: str
    r653, r654 :: object
    r655 :: str
    r656 :: dict
    r657 :: str
    r658 :: object
    r659 :: str
    r660 :: dict
    r661 :: str
    r662 :: object
    r663 :: str
    r664 :: object
    r665 :: str
    r666 :: dict
    r667 :: str
    r668, r669 :: object
    r670 :: dict
    r671 :: str
    r672 :: object
    r673 :: tuple[object, object]
    r674, r675 :: object
    r676 :: str
    r677 :: dict
    r678 :: str
    r679 :: object
    r680 :: str
    r681 :: object
    r682 :: str
    r683 :: dict
    r684 :: str
    r685 :: object
    r686 :: str
    r687 :: dict
    r688 :: str
    r689 :: object
    r690 :: str
    r691 :: dict
    r692 :: str
    r693 :: object
    r694 :: str
    r695 :: dict
    r696 :: str
    r697 :: object
    r698 :: str
    r699 :: dict
    r700 :: str
    r701 :: object
    r702 :: str
    r703 :: dict
    r704 :: str
    r705 :: object
    r706 :: str
    r707 :: dict
    r708 :: str
    r709 :: object
    r710 :: str
    r711 :: dict
    r712 :: str
    r713 :: object
    r714 :: str
    r715 :: dict
    r716 :: str
    r717 :: object
    r718 :: str
    r719 :: dict
    r720 :: str
    r721 :: object
    r722 :: str
    r723 :: object
    r724 :: str
    r725 :: dict
    r726 :: str
    r727, r728 :: object
    r729 :: dict
    r730 :: str
    r731 :: object
    r732 :: tuple[object, object]
    r733, r734 :: object
    r735 :: str
    r736 :: object
    r737 :: str
    r738 :: dict
    r739 :: str
    r740 :: object
    r741 :: str
    r742 :: object
    r743 :: dict
    r744 :: object
    r745 :: dict
    r746 :: str
    r747 :: object
    r748 :: object[3]
    r749 :: object_ptr
    r750, r751 :: object
    r752 :: dict
    r753 :: str
    r754 :: i32
    r755 :: bit
    r756, r757 :: object
    r758 :: bit
    r759 :: str
    r760 :: object
    r761 :: dict
    r762 :: str
    r763 :: object
    r764 :: str
    r765 :: object
    r766 :: tuple
    r767, r768 :: object
    r769 :: bit
    r770 :: str
    r771 :: object
    r772 :: dict
    r773 :: str
    r774 :: object
    r775 :: str
    r776 :: object
    r777 :: str
    r778 :: bool
    r779, r780 :: str
    r781 :: object
    r782 :: object[2]
    r783 :: object_ptr
    r784 :: object
    r785, r786, r787, r788 :: dict
    r789 :: object
    r790 :: str
    r791 :: i32
    r792 :: bit
    r793 :: object
    r794 :: str
    r795 :: i32
    r796 :: bit
    r797 :: dict
    r798 :: str
    r799 :: object
    r800 :: str
    r801 :: i32
    r802 :: bit
    r803 :: object
    r804 :: str
    r805 :: i32
    r806 :: bit
    r807 :: object
    r808 :: str
    r809 :: i32
    r810 :: bit
    r811 :: object
    r812 :: str
    r813 :: i32
    r814 :: bit
    r815, r816 :: str
    r817 :: i32
    r818 :: bit
    r819, r820 :: str
    r821 :: i32
    r822 :: bit
    r823, r824 :: str
    r825 :: i32
    r826 :: bit
    r827 :: object[3]
    r828 :: object_ptr
    r829 :: object
    r830 :: dict
    r831 :: str
    r832 :: i32
    r833 :: bit
    r834 :: object
    r835, r836 :: str
    r837 :: dict
    r838 :: str
    r839 :: object
    r840 :: str
    r841 :: dict
    r842 :: str
    r843 :: object
    r844 :: dict
    r845 :: str
    r846 :: object
    r847 :: dict
    r848 :: str
    r849 :: object
    r850 :: dict
    r851 :: str
    r852 :: object
    r853 :: tuple[object, object]
    r854, r855, r856 :: object
    r857 :: str
    r858 :: dict
    r859 :: str
    r860 :: object
    r861 :: dict
    r862 :: str
    r863, r864 :: object
    r865 :: dict
    r866 :: str
    r867, r868 :: object
    r869 :: dict
    r870 :: str
    r871 :: object
    r872 :: tuple[object, object, object, object]
    r873, r874, r875 :: object
    r876 :: str
    r877 :: object
    r878 :: str
    r879 :: dict
    r880 :: str
    r881, r882 :: object
    r883 :: dict
    r884 :: str
    r885 :: object
    r886 :: tuple[object, object]
    r887, r888 :: object
    r889 :: str
    r890 :: dict
    r891 :: str
    r892 :: object
    r893 :: dict
    r894 :: str
    r895 :: object
    r896 :: dict
    r897 :: str
    r898, r899 :: object
    r900 :: tuple[object, object, object]
    r901, r902 :: object
    r903 :: str
    r904 :: object
    r905 :: str
    r906 :: dict
    r907 :: str
    r908 :: object
    r909 :: str
    r910 :: dict
    r911 :: str
    r912, r913 :: object
    r914 :: dict
    r915 :: str
    r916 :: object
    r917 :: tuple[object, object]
    r918, r919 :: object
    r920 :: str
    r921 :: dict
    r922 :: str
    r923, r924 :: object
    r925 :: dict
    r926 :: str
    r927 :: object
    r928 :: tuple[object, object]
    r929, r930 :: object
    r931 :: str
    r932 :: dict
    r933 :: str
    r934, r935 :: object
    r936 :: dict
    r937 :: str
    r938 :: object
    r939 :: tuple[object, object]
    r940, r941 :: object
    r942 :: str
    r943 :: dict
    r944 :: str
    r945 :: object
    r946 :: str
    r947 :: dict
    r948 :: str
    r949 :: object
    r950 :: dict
    r951 :: str
    r952 :: object
    r953 :: dict
    r954 :: str
    r955, r956 :: object
    r957 :: tuple[object, object, object]
    r958, r959 :: object
    r960 :: str
    r961 :: dict
    r962 :: str
    r963, r964 :: object
    r965 :: dict
    r966 :: str
    r967 :: object
    r968 :: tuple[object, object]
    r969, r970 :: object
    r971 :: str
    r972 :: dict
    r973 :: str
    r974 :: object
    r975 :: dict
    r976 :: object
    r977 :: dict
    r978 :: str
    r979 :: object
    r980 :: object[3]
    r981 :: object_ptr
    r982, r983 :: object
    r984 :: dict
    r985 :: str
    r986 :: i32
    r987 :: bit
    r988, r989 :: object
    r990 :: bit
    r991 :: str
    r992 :: object
    r993 :: dict
    r994 :: str
    r995 :: object
    r996 :: str
    r997 :: object
    r998 :: tuple
    r999, r1000 :: object
    r1001 :: bit
    r1002 :: str
    r1003 :: object
    r1004 :: dict
    r1005 :: str
    r1006 :: object
    r1007 :: str
    r1008 :: object
    r1009 :: str
    r1010 :: bool
    r1011, r1012 :: str
    r1013 :: object
    r1014 :: object[2]
    r1015 :: object_ptr
    r1016 :: object
    r1017, r1018, r1019, r1020 :: dict
    r1021 :: object
    r1022 :: str
    r1023 :: i32
    r1024 :: bit
    r1025 :: object
    r1026 :: str
    r1027 :: i32
    r1028 :: bit
    r1029 :: dict
    r1030 :: str
    r1031 :: object
    r1032 :: str
    r1033 :: i32
    r1034 :: bit
    r1035 :: dict
    r1036 :: str
    r1037 :: object
    r1038 :: str
    r1039 :: i32
    r1040 :: bit
    r1041, r1042 :: str
    r1043 :: i32
    r1044 :: bit
    r1045, r1046 :: str
    r1047 :: i32
    r1048 :: bit
    r1049, r1050 :: str
    r1051 :: i32
    r1052 :: bit
    r1053 :: object[3]
    r1054 :: object_ptr
    r1055 :: object
    r1056 :: dict
    r1057 :: str
    r1058 :: i32
    r1059 :: bit
    r1060, r1061, r1062 :: object
    r1063 :: bit
    r1064 :: str
    r1065 :: object
    r1066 :: dict
    r1067 :: str
    r1068 :: object
    r1069 :: str
    r1070 :: object
    r1071 :: tuple
    r1072, r1073 :: object
    r1074 :: bit
    r1075 :: str
    r1076 :: object
    r1077 :: dict
    r1078 :: str
    r1079 :: object
    r1080 :: str
    r1081 :: object
    r1082 :: str
    r1083 :: bool
    r1084, r1085 :: str
    r1086 :: object
    r1087 :: object[2]
    r1088 :: object_ptr
    r1089 :: object
    r1090, r1091, r1092, r1093, r1094 :: dict
    r1095 :: str
    r1096 :: object
    r1097 :: str
    r1098 :: i32
    r1099 :: bit
    r1100 :: object
    r1101 :: str
    r1102 :: i32
    r1103 :: bit
    r1104 :: object
    r1105 :: str
    r1106 :: i32
    r1107 :: bit
    r1108 :: object
    r1109 :: str
    r1110 :: i32
    r1111 :: bit
    r1112 :: object
    r1113 :: str
    r1114 :: i32
    r1115 :: bit
    r1116 :: object
    r1117 :: str
    r1118 :: i32
    r1119 :: bit
    r1120 :: object
    r1121 :: str
    r1122 :: i32
    r1123 :: bit
    r1124 :: dict
    r1125 :: str
    r1126 :: object
    r1127 :: str
    r1128 :: i32
    r1129 :: bit
    r1130 :: object
    r1131 :: str
    r1132 :: i32
    r1133 :: bit
    r1134 :: object
    r1135 :: str
    r1136 :: i32
    r1137 :: bit
    r1138 :: dict
    r1139 :: str
    r1140 :: object
    r1141 :: str
    r1142 :: i32
    r1143 :: bit
    r1144 :: object
    r1145 :: str
    r1146 :: i32
    r1147 :: bit
    r1148 :: object
    r1149 :: str
    r1150 :: i32
    r1151 :: bit
    r1152 :: object
    r1153 :: str
    r1154 :: i32
    r1155 :: bit
    r1156 :: object
    r1157 :: str
    r1158 :: i32
    r1159 :: bit
    r1160 :: object
    r1161 :: str
    r1162 :: i32
    r1163 :: bit
    r1164 :: dict
    r1165 :: str
    r1166 :: object
    r1167 :: str
    r1168 :: i32
    r1169 :: bit
    r1170 :: object
    r1171 :: str
    r1172 :: i32
    r1173 :: bit
    r1174 :: object
    r1175 :: str
    r1176 :: i32
    r1177 :: bit
    r1178 :: object
    r1179 :: str
    r1180 :: i32
    r1181 :: bit
    r1182 :: dict
    r1183 :: str
    r1184 :: object
    r1185 :: str
    r1186 :: i32
    r1187 :: bit
    r1188 :: dict
    r1189 :: str
    r1190 :: object
    r1191 :: str
    r1192 :: i32
    r1193 :: bit
    r1194 :: object
    r1195 :: str
    r1196 :: i32
    r1197 :: bit
    r1198 :: object
    r1199 :: str
    r1200 :: i32
    r1201 :: bit
    r1202 :: object
    r1203 :: str
    r1204 :: i32
    r1205 :: bit
    r1206 :: object
    r1207 :: str
    r1208 :: i32
    r1209 :: bit
    r1210 :: object
    r1211 :: str
    r1212 :: i32
    r1213 :: bit
    r1214 :: object
    r1215 :: str
    r1216 :: i32
    r1217 :: bit
    r1218, r1219 :: str
    r1220 :: i32
    r1221 :: bit
    r1222, r1223 :: str
    r1224 :: i32
    r1225 :: bit
    r1226, r1227 :: str
    r1228 :: i32
    r1229 :: bit
    r1230 :: object[3]
    r1231 :: object_ptr
    r1232 :: object
    r1233 :: dict
    r1234 :: str
    r1235 :: i32
    r1236 :: bit
    r1237, r1238, r1239 :: object
    r1240 :: bit
    r1241 :: str
    r1242 :: object
    r1243 :: dict
    r1244 :: str
    r1245 :: object
    r1246 :: str
    r1247 :: object
    r1248 :: tuple
    r1249, r1250 :: object
    r1251 :: bit
    r1252 :: str
    r1253 :: object
    r1254 :: dict
    r1255 :: str
    r1256 :: object
    r1257 :: str
    r1258 :: object
    r1259 :: str
    r1260 :: bool
    r1261, r1262 :: str
    r1263 :: object
    r1264 :: object[2]
    r1265 :: object_ptr
    r1266 :: object
    r1267, r1268, r1269, r1270, r1271 :: dict
    r1272 :: str
    r1273 :: object
    r1274 :: str
    r1275 :: i32
    r1276 :: bit
    r1277 :: object
    r1278 :: str
    r1279 :: i32
    r1280 :: bit
    r1281 :: dict
    r1282 :: str
    r1283 :: object
    r1284 :: str
    r1285 :: i32
    r1286 :: bit
    r1287 :: object
    r1288 :: str
    r1289 :: i32
    r1290 :: bit
    r1291 :: object
    r1292 :: str
    r1293 :: i32
    r1294 :: bit
    r1295 :: object
    r1296 :: str
    r1297 :: i32
    r1298 :: bit
    r1299 :: dict
    r1300 :: str
    r1301 :: object
    r1302 :: str
    r1303 :: i32
    r1304 :: bit
    r1305 :: object
    r1306 :: str
    r1307 :: i32
    r1308 :: bit
    r1309 :: object
    r1310 :: str
    r1311 :: i32
    r1312 :: bit
    r1313, r1314 :: str
    r1315 :: i32
    r1316 :: bit
    r1317, r1318 :: str
    r1319 :: i32
    r1320 :: bit
    r1321, r1322 :: str
    r1323 :: i32
    r1324 :: bit
    r1325 :: object[3]
    r1326 :: object_ptr
    r1327 :: object
    r1328 :: dict
    r1329 :: str
    r1330 :: i32
    r1331 :: bit
    r1332, r1333, r1334 :: object
    r1335 :: bit
    r1336 :: str
    r1337 :: object
    r1338 :: dict
    r1339 :: str
    r1340 :: object
    r1341 :: str
    r1342 :: object
    r1343 :: tuple
    r1344, r1345 :: object
    r1346 :: bit
    r1347 :: str
    r1348 :: object
    r1349 :: dict
    r1350 :: str
    r1351 :: object
    r1352 :: str
    r1353 :: object
    r1354 :: str
    r1355 :: bool
    r1356, r1357 :: str
    r1358 :: object
    r1359 :: object[2]
    r1360 :: object_ptr
    r1361 :: object
    r1362, r1363, r1364, r1365 :: dict
    r1366 :: object
    r1367 :: str
    r1368 :: i32
    r1369 :: bit
    r1370, r1371 :: str
    r1372 :: i32
    r1373 :: bit
    r1374, r1375 :: str
    r1376 :: i32
    r1377 :: bit
    r1378, r1379 :: str
    r1380 :: i32
    r1381 :: bit
    r1382 :: object[3]
    r1383 :: object_ptr
    r1384 :: object
    r1385 :: dict
    r1386 :: str
    r1387 :: i32
    r1388 :: bit
    r1389, r1390, r1391 :: object
    r1392 :: bit
    r1393 :: str
    r1394 :: object
    r1395 :: dict
    r1396 :: str
    r1397 :: object
    r1398 :: str
    r1399 :: object
    r1400 :: tuple
    r1401, r1402 :: object
    r1403 :: bit
    r1404 :: str
    r1405 :: object
    r1406 :: dict
    r1407 :: str
    r1408 :: object
    r1409 :: str
    r1410 :: object
    r1411 :: str
    r1412 :: bool
    r1413, r1414 :: str
    r1415 :: object
    r1416 :: object[2]
    r1417 :: object_ptr
    r1418 :: object
    r1419, r1420, r1421, r1422 :: dict
    r1423 :: object
    r1424 :: str
    r1425 :: i32
    r1426 :: bit
    r1427, r1428 :: str
    r1429 :: i32
    r1430 :: bit
    r1431, r1432 :: str
    r1433 :: i32
    r1434 :: bit
    r1435, r1436 :: str
    r1437 :: i32
    r1438 :: bit
    r1439 :: object[3]
    r1440 :: object_ptr
    r1441 :: object
    r1442 :: dict
    r1443 :: str
    r1444 :: i32
    r1445 :: bit
    r1446, r1447, r1448 :: object
    r1449 :: bit
    r1450 :: str
    r1451 :: object
    r1452 :: dict
    r1453 :: str
    r1454 :: object
    r1455 :: str
    r1456 :: object
    r1457 :: tuple
    r1458, r1459 :: object
    r1460 :: bit
    r1461 :: str
    r1462 :: object
    r1463 :: dict
    r1464 :: str
    r1465 :: object
    r1466 :: str
    r1467 :: object
    r1468 :: str
    r1469 :: bool
    r1470, r1471 :: str
    r1472 :: object
    r1473 :: object[2]
    r1474 :: object_ptr
    r1475 :: object
    r1476, r1477, r1478, r1479 :: dict
    r1480 :: object
    r1481 :: str
    r1482 :: i32
    r1483 :: bit
    r1484, r1485 :: str
    r1486 :: i32
    r1487 :: bit
    r1488, r1489 :: str
    r1490 :: i32
    r1491 :: bit
    r1492, r1493 :: str
    r1494 :: i32
    r1495 :: bit
    r1496 :: object[3]
    r1497 :: object_ptr
    r1498 :: object
    r1499 :: dict
    r1500 :: str
    r1501 :: i32
    r1502 :: bit
    r1503, r1504, r1505 :: object
    r1506 :: bit
    r1507 :: str
    r1508 :: object
    r1509 :: dict
    r1510 :: str
    r1511 :: object
    r1512 :: str
    r1513 :: object
    r1514 :: tuple
    r1515, r1516 :: object
    r1517 :: bit
    r1518 :: str
    r1519 :: object
    r1520 :: dict
    r1521 :: str
    r1522 :: object
    r1523 :: str
    r1524 :: object
    r1525 :: str
    r1526 :: bool
    r1527, r1528 :: str
    r1529 :: object
    r1530 :: object[2]
    r1531 :: object_ptr
    r1532 :: object
    r1533, r1534, r1535, r1536 :: dict
    r1537 :: object
    r1538 :: str
    r1539 :: i32
    r1540 :: bit
    r1541, r1542 :: str
    r1543 :: i32
    r1544 :: bit
    r1545, r1546 :: str
    r1547 :: i32
    r1548 :: bit
    r1549, r1550 :: str
    r1551 :: i32
    r1552 :: bit
    r1553 :: object[3]
    r1554 :: object_ptr
    r1555 :: object
    r1556 :: dict
    r1557 :: str
    r1558 :: i32
    r1559 :: bit
    r1560, r1561, r1562 :: object
    r1563 :: bit
    r1564 :: str
    r1565 :: object
    r1566 :: dict
    r1567 :: str
    r1568 :: object
    r1569 :: str
    r1570 :: object
    r1571 :: tuple
    r1572, r1573 :: object
    r1574 :: bit
    r1575 :: str
    r1576 :: object
    r1577 :: dict
    r1578 :: str
    r1579 :: object
    r1580 :: str
    r1581 :: object
    r1582 :: str
    r1583 :: bool
    r1584, r1585 :: str
    r1586 :: object
    r1587 :: object[2]
    r1588 :: object_ptr
    r1589 :: object
    r1590, r1591, r1592, r1593 :: dict
    r1594 :: object
    r1595 :: str
    r1596 :: i32
    r1597 :: bit
    r1598 :: object
    r1599 :: str
    r1600 :: i32
    r1601 :: bit
    r1602 :: object
    r1603 :: str
    r1604 :: i32
    r1605 :: bit
    r1606 :: object
    r1607 :: str
    r1608 :: i32
    r1609 :: bit
    r1610, r1611 :: str
    r1612 :: i32
    r1613 :: bit
    r1614, r1615 :: str
    r1616 :: i32
    r1617 :: bit
    r1618, r1619 :: str
    r1620 :: i32
    r1621 :: bit
    r1622 :: object[3]
    r1623 :: object_ptr
    r1624 :: object
    r1625 :: dict
    r1626 :: str
    r1627 :: i32
    r1628 :: bit
    r1629, r1630, r1631 :: object
    r1632 :: bit
    r1633 :: str
    r1634 :: object
    r1635 :: dict
    r1636 :: str
    r1637 :: object
    r1638 :: str
    r1639 :: object
    r1640 :: tuple
    r1641, r1642 :: object
    r1643 :: bit
    r1644 :: str
    r1645 :: object
    r1646 :: dict
    r1647 :: str
    r1648 :: object
    r1649 :: str
    r1650 :: object
    r1651 :: str
    r1652 :: bool
    r1653, r1654 :: str
    r1655 :: object
    r1656 :: object[2]
    r1657 :: object_ptr
    r1658 :: object
    r1659, r1660, r1661, r1662 :: dict
    r1663 :: object
    r1664 :: str
    r1665 :: i32
    r1666 :: bit
    r1667, r1668 :: str
    r1669 :: i32
    r1670 :: bit
    r1671, r1672 :: str
    r1673 :: i32
    r1674 :: bit
    r1675, r1676 :: str
    r1677 :: i32
    r1678 :: bit
    r1679 :: object[3]
    r1680 :: object_ptr
    r1681 :: object
    r1682 :: dict
    r1683 :: str
    r1684 :: i32
    r1685 :: bit
    r1686, r1687, r1688 :: object
    r1689 :: bit
    r1690 :: str
    r1691 :: object
    r1692 :: dict
    r1693 :: str
    r1694 :: object
    r1695 :: str
    r1696 :: object
    r1697 :: tuple
    r1698, r1699 :: object
    r1700 :: bit
    r1701 :: str
    r1702 :: object
    r1703 :: dict
    r1704 :: str
    r1705 :: object
    r1706 :: str
    r1707 :: object
    r1708 :: str
    r1709 :: bool
    r1710, r1711 :: str
    r1712 :: object
    r1713 :: object[2]
    r1714 :: object_ptr
    r1715 :: object
    r1716, r1717, r1718, r1719 :: dict
    r1720 :: object
    r1721 :: str
    r1722 :: i32
    r1723 :: bit
    r1724 :: object
    r1725 :: str
    r1726 :: i32
    r1727 :: bit
    r1728 :: object
    r1729 :: str
    r1730 :: i32
    r1731 :: bit
    r1732 :: object
    r1733 :: str
    r1734 :: i32
    r1735 :: bit
    r1736 :: object
    r1737 :: str
    r1738 :: i32
    r1739 :: bit
    r1740, r1741 :: str
    r1742 :: i32
    r1743 :: bit
    r1744, r1745 :: str
    r1746 :: i32
    r1747 :: bit
    r1748, r1749 :: str
    r1750 :: i32
    r1751 :: bit
    r1752 :: object[3]
    r1753 :: object_ptr
    r1754 :: object
    r1755 :: dict
    r1756 :: str
    r1757 :: i32
    r1758 :: bit
    r1759, r1760, r1761 :: object
    r1762 :: bit
    r1763 :: str
    r1764 :: object
    r1765 :: dict
    r1766 :: str
    r1767 :: object
    r1768 :: str
    r1769 :: object
    r1770 :: tuple
    r1771, r1772 :: object
    r1773 :: bit
    r1774 :: str
    r1775 :: object
    r1776 :: dict
    r1777 :: str
    r1778 :: object
    r1779 :: str
    r1780 :: object
    r1781 :: str
    r1782 :: bool
    r1783, r1784 :: str
    r1785 :: object
    r1786 :: object[2]
    r1787 :: object_ptr
    r1788 :: object
    r1789, r1790, r1791, r1792 :: dict
    r1793 :: object
    r1794 :: str
    r1795 :: i32
    r1796 :: bit
    r1797 :: object
    r1798 :: str
    r1799 :: i32
    r1800 :: bit
    r1801, r1802 :: str
    r1803 :: i32
    r1804 :: bit
    r1805, r1806 :: str
    r1807 :: i32
    r1808 :: bit
    r1809, r1810 :: str
    r1811 :: i32
    r1812 :: bit
    r1813 :: object[3]
    r1814 :: object_ptr
    r1815 :: object
    r1816 :: dict
    r1817 :: str
    r1818 :: i32
    r1819 :: bit
    r1820, r1821, r1822 :: object
    r1823 :: bit
    r1824 :: str
    r1825 :: object
    r1826 :: dict
    r1827 :: str
    r1828 :: object
    r1829 :: str
    r1830 :: object
    r1831 :: tuple
    r1832, r1833 :: object
    r1834 :: bit
    r1835 :: str
    r1836 :: object
    r1837 :: dict
    r1838 :: str
    r1839 :: object
    r1840 :: str
    r1841 :: object
    r1842 :: str
    r1843 :: bool
    r1844, r1845 :: str
    r1846 :: object
    r1847 :: object[2]
    r1848 :: object_ptr
    r1849 :: object
    r1850, r1851, r1852, r1853 :: dict
    r1854 :: object
    r1855 :: str
    r1856 :: i32
    r1857 :: bit
    r1858, r1859 :: str
    r1860 :: i32
    r1861 :: bit
    r1862, r1863 :: str
    r1864 :: i32
    r1865 :: bit
    r1866, r1867 :: str
    r1868 :: i32
    r1869 :: bit
    r1870 :: object[3]
    r1871 :: object_ptr
    r1872 :: object
    r1873 :: dict
    r1874 :: str
    r1875 :: i32
    r1876 :: bit
    r1877 :: object
    r1878 :: dict
    r1879 :: str
    r1880 :: object
    r1881 :: dict
    r1882 :: str
    r1883 :: object
    r1884 :: dict
    r1885 :: str
    r1886 :: object
    r1887 :: dict
    r1888 :: str
    r1889 :: object
    r1890 :: dict
    r1891 :: str
    r1892 :: object
    r1893 :: dict
    r1894 :: str
    r1895 :: object
    r1896 :: tuple[object, object, object, object, object]
    r1897, r1898 :: object
    r1899 :: dict
    r1900 :: str
    r1901 :: i32
    r1902 :: bit
    r1903 :: dict
    r1904 :: str
    r1905 :: object
    r1906 :: dict
    r1907 :: str
    r1908, r1909, r1910 :: object
    r1911 :: tuple[object, object]
    r1912, r1913, r1914 :: object
    r1915 :: dict
    r1916 :: str
    r1917 :: i32
    r1918 :: bit
    r1919, r1920 :: object
    r1921 :: bit
    r1922 :: str
    r1923 :: object
    r1924 :: dict
    r1925 :: str
    r1926 :: object
    r1927 :: str
    r1928 :: object
    r1929 :: tuple
    r1930, r1931 :: object
    r1932 :: bit
    r1933 :: str
    r1934 :: object
    r1935 :: dict
    r1936 :: str
    r1937 :: object
    r1938 :: str
    r1939 :: object
    r1940 :: str
    r1941 :: bool
    r1942, r1943 :: str
    r1944 :: object
    r1945 :: object[2]
    r1946 :: object_ptr
    r1947 :: object
    r1948, r1949, r1950, r1951 :: dict
    r1952 :: object
    r1953 :: str
    r1954 :: i32
    r1955 :: bit
    r1956 :: object
    r1957 :: str
    r1958 :: i32
    r1959 :: bit
    r1960 :: dict
    r1961 :: str
    r1962 :: object
    r1963 :: str
    r1964 :: i32
    r1965 :: bit
    r1966 :: object
    r1967 :: str
    r1968 :: i32
    r1969 :: bit
    r1970, r1971 :: str
    r1972 :: i32
    r1973 :: bit
    r1974, r1975 :: str
    r1976 :: i32
    r1977 :: bit
    r1978, r1979 :: str
    r1980 :: i32
    r1981 :: bit
    r1982 :: object[3]
    r1983 :: object_ptr
    r1984 :: object
    r1985 :: dict
    r1986 :: str
    r1987 :: i32
    r1988 :: bit
    r1989, r1990, r1991 :: object
    r1992 :: bit
    r1993 :: str
    r1994 :: object
    r1995 :: dict
    r1996 :: str
    r1997 :: object
    r1998 :: str
    r1999 :: object
    r2000 :: tuple
    r2001, r2002 :: object
    r2003 :: bit
    r2004 :: str
    r2005 :: object
    r2006 :: dict
    r2007 :: str
    r2008 :: object
    r2009 :: str
    r2010 :: object
    r2011 :: str
    r2012 :: bool
    r2013, r2014 :: str
    r2015 :: object
    r2016 :: object[2]
    r2017 :: object_ptr
    r2018 :: object
    r2019, r2020, r2021, r2022 :: dict
    r2023 :: object
    r2024 :: str
    r2025 :: i32
    r2026 :: bit
    r2027 :: object
    r2028 :: str
    r2029 :: i32
    r2030 :: bit
    r2031 :: object
    r2032 :: str
    r2033 :: i32
    r2034 :: bit
    r2035 :: object
    r2036 :: str
    r2037 :: i32
    r2038 :: bit
    r2039 :: object
    r2040 :: str
    r2041 :: i32
    r2042 :: bit
    r2043 :: object
    r2044 :: str
    r2045 :: i32
    r2046 :: bit
    r2047, r2048 :: str
    r2049 :: i32
    r2050 :: bit
    r2051, r2052 :: str
    r2053 :: i32
    r2054 :: bit
    r2055, r2056 :: str
    r2057 :: i32
    r2058 :: bit
    r2059 :: object[3]
    r2060 :: object_ptr
    r2061 :: object
    r2062 :: dict
    r2063 :: str
    r2064 :: i32
    r2065 :: bit
    r2066 :: object
    r2067 :: dict
    r2068 :: str
    r2069 :: object
    r2070 :: dict
    r2071 :: str
    r2072 :: object
    r2073 :: dict
    r2074 :: str
    r2075 :: object
    r2076 :: dict
    r2077 :: str
    r2078 :: object
    r2079 :: dict
    r2080 :: str
    r2081 :: object
    r2082 :: dict
    r2083 :: str
    r2084 :: object
    r2085 :: dict
    r2086 :: str
    r2087 :: object
    r2088 :: tuple[object, object, object, object, object, object]
    r2089, r2090 :: object
    r2091 :: dict
    r2092 :: str
    r2093 :: i32
    r2094 :: bit
    r2095, r2096 :: object
    r2097 :: bit
    r2098 :: str
    r2099 :: object
    r2100 :: dict
    r2101 :: str
    r2102 :: object
    r2103 :: str
    r2104 :: object
    r2105 :: tuple
    r2106, r2107 :: object
    r2108 :: bit
    r2109 :: str
    r2110 :: object
    r2111 :: dict
    r2112 :: str
    r2113 :: object
    r2114 :: str
    r2115 :: object
    r2116 :: str
    r2117 :: bool
    r2118, r2119 :: str
    r2120 :: object
    r2121 :: object[2]
    r2122 :: object_ptr
    r2123 :: object
    r2124, r2125, r2126, r2127, r2128 :: dict
    r2129 :: str
    r2130 :: object
    r2131 :: str
    r2132 :: i32
    r2133 :: bit
    r2134 :: object
    r2135 :: str
    r2136 :: i32
    r2137 :: bit
    r2138, r2139 :: str
    r2140 :: i32
    r2141 :: bit
    r2142, r2143 :: str
    r2144 :: i32
    r2145 :: bit
    r2146, r2147 :: str
    r2148 :: i32
    r2149 :: bit
    r2150 :: object[3]
    r2151 :: object_ptr
    r2152 :: object
    r2153 :: dict
    r2154 :: str
    r2155 :: i32
    r2156 :: bit
    r2157, r2158, r2159 :: object
    r2160 :: bit
    r2161 :: str
    r2162 :: object
    r2163 :: dict
    r2164 :: str
    r2165 :: object
    r2166 :: str
    r2167 :: object
    r2168 :: tuple
    r2169, r2170 :: object
    r2171 :: bit
    r2172 :: str
    r2173 :: object
    r2174 :: dict
    r2175 :: str
    r2176 :: object
    r2177 :: str
    r2178 :: object
    r2179 :: str
    r2180 :: bool
    r2181, r2182 :: str
    r2183 :: object
    r2184 :: object[2]
    r2185 :: object_ptr
    r2186 :: object
    r2187, r2188, r2189, r2190, r2191 :: dict
    r2192 :: str
    r2193 :: object
    r2194 :: str
    r2195 :: i32
    r2196 :: bit
    r2197 :: object
    r2198 :: str
    r2199 :: i32
    r2200 :: bit
    r2201, r2202 :: str
    r2203 :: i32
    r2204 :: bit
    r2205, r2206 :: str
    r2207 :: i32
    r2208 :: bit
    r2209, r2210 :: str
    r2211 :: i32
    r2212 :: bit
    r2213 :: object[3]
    r2214 :: object_ptr
    r2215 :: object
    r2216 :: dict
    r2217 :: str
    r2218 :: i32
    r2219 :: bit
    r2220 :: object
    r2221 :: dict
    r2222 :: str
    r2223 :: object
    r2224 :: dict
    r2225 :: str
    r2226 :: object
    r2227 :: dict
    r2228 :: str
    r2229 :: object
    r2230 :: list
    r2231, r2232, r2233 :: ptr
    r2234 :: dict
    r2235 :: str
    r2236 :: object
    r2237 :: tuple[list, object]
    r2238, r2239 :: object
    r2240 :: dict
    r2241 :: str
    r2242 :: i32
    r2243 :: bit
    r2244 :: dict
    r2245 :: str
    r2246 :: object
    r2247 :: dict
    r2248 :: str
    r2249 :: object
    r2250 :: dict
    r2251 :: str
    r2252 :: object
    r2253 :: dict
    r2254 :: str
    r2255 :: object
    r2256 :: dict
    r2257 :: str
    r2258 :: object
    r2259 :: tuple[object, object]
    r2260, r2261, r2262 :: object
    r2263 :: list
    r2264, r2265 :: ptr
    r2266 :: dict
    r2267 :: str
    r2268 :: object
    r2269 :: dict
    r2270 :: str
    r2271 :: object
    r2272 :: dict
    r2273 :: str
    r2274, r2275 :: object
    r2276 :: dict
    r2277 :: str
    r2278 :: object
    r2279 :: tuple[object, object]
    r2280, r2281 :: object
    r2282 :: tuple[list, object]
    r2283, r2284 :: object
    r2285 :: dict
    r2286 :: str
    r2287 :: i32
    r2288 :: bit
    r2289 :: dict
    r2290 :: str
    r2291 :: object
    r2292 :: dict
    r2293 :: str
    r2294 :: object
    r2295 :: dict
    r2296 :: str
    r2297 :: object
    r2298 :: list
    r2299, r2300, r2301 :: ptr
    r2302 :: dict
    r2303 :: str
    r2304 :: object
    r2305 :: dict
    r2306 :: str
    r2307 :: object
    r2308 :: dict
    r2309 :: str
    r2310 :: object
    r2311 :: dict
    r2312 :: str
    r2313 :: object
    r2314 :: tuple[object, object, object]
    r2315, r2316 :: object
    r2317 :: tuple[list, object]
    r2318, r2319 :: object
    r2320 :: dict
    r2321 :: str
    r2322 :: i32
    r2323 :: bit
    r2324 :: dict
    r2325 :: str
    r2326 :: object
    r2327 :: dict
    r2328 :: str
    r2329 :: object
    r2330 :: dict
    r2331 :: str
    r2332 :: object
    r2333 :: dict
    r2334 :: str
    r2335 :: object
    r2336 :: dict
    r2337 :: str
    r2338 :: object
    r2339 :: tuple[object, object]
    r2340, r2341, r2342 :: object
    r2343 :: list
    r2344, r2345 :: ptr
    r2346 :: dict
    r2347 :: str
    r2348 :: object
    r2349 :: dict
    r2350 :: str
    r2351 :: object
    r2352 :: dict
    r2353 :: str
    r2354 :: object
    r2355 :: dict
    r2356 :: str
    r2357 :: object
    r2358 :: dict
    r2359 :: str
    r2360 :: object
    r2361 :: dict
    r2362 :: str
    r2363, r2364 :: object
    r2365 :: dict
    r2366 :: str
    r2367 :: object
    r2368 :: tuple[object, object]
    r2369, r2370 :: object
    r2371 :: tuple[object, object, object]
    r2372, r2373 :: object
    r2374 :: tuple[list, object]
    r2375, r2376 :: object
    r2377 :: dict
    r2378 :: str
    r2379 :: i32
    r2380 :: bit
    r2381, r2382 :: object
    r2383 :: bit
    r2384 :: str
    r2385 :: object
    r2386 :: dict
    r2387 :: str
    r2388 :: object
    r2389 :: str
    r2390 :: object
    r2391 :: tuple
    r2392, r2393 :: object
    r2394 :: bit
    r2395 :: str
    r2396 :: object
    r2397 :: dict
    r2398 :: str
    r2399 :: object
    r2400 :: str
    r2401 :: object
    r2402 :: str
    r2403 :: bool
    r2404, r2405 :: str
    r2406 :: object
    r2407 :: object[2]
    r2408 :: object_ptr
    r2409 :: object
    r2410, r2411, r2412, r2413 :: dict
    r2414 :: object
    r2415 :: str
    r2416 :: i32
    r2417 :: bit
    r2418 :: object
    r2419 :: str
    r2420 :: i32
    r2421 :: bit
    r2422 :: object
    r2423 :: str
    r2424 :: i32
    r2425 :: bit
    r2426, r2427 :: str
    r2428 :: i32
    r2429 :: bit
    r2430, r2431 :: str
    r2432 :: i32
    r2433 :: bit
    r2434, r2435 :: str
    r2436 :: i32
    r2437 :: bit
    r2438 :: object[3]
    r2439 :: object_ptr
    r2440 :: object
    r2441 :: dict
    r2442 :: str
    r2443 :: i32
    r2444 :: bit
    r2445, r2446, r2447 :: object
    r2448 :: bit
    r2449 :: str
    r2450 :: object
    r2451 :: dict
    r2452 :: str
    r2453 :: object
    r2454 :: str
    r2455 :: object
    r2456 :: tuple
    r2457, r2458 :: object
    r2459 :: bit
    r2460 :: str
    r2461 :: object
    r2462 :: dict
    r2463 :: str
    r2464 :: object
    r2465 :: str
    r2466 :: object
    r2467 :: str
    r2468 :: bool
    r2469, r2470 :: str
    r2471 :: object
    r2472 :: object[2]
    r2473 :: object_ptr
    r2474 :: object
    r2475, r2476, r2477, r2478 :: dict
    r2479 :: object
    r2480 :: str
    r2481 :: i32
    r2482 :: bit
    r2483 :: object
    r2484 :: str
    r2485 :: i32
    r2486 :: bit
    r2487 :: object
    r2488 :: str
    r2489 :: i32
    r2490 :: bit
    r2491 :: object
    r2492 :: str
    r2493 :: i32
    r2494 :: bit
    r2495 :: object
    r2496 :: str
    r2497 :: i32
    r2498 :: bit
    r2499, r2500 :: str
    r2501 :: i32
    r2502 :: bit
    r2503, r2504 :: str
    r2505 :: i32
    r2506 :: bit
    r2507, r2508 :: str
    r2509 :: i32
    r2510 :: bit
    r2511 :: object[3]
    r2512 :: object_ptr
    r2513 :: object
    r2514 :: dict
    r2515 :: str
    r2516 :: i32
    r2517 :: bit
    r2518, r2519, r2520 :: object
    r2521 :: bit
    r2522 :: str
    r2523 :: object
    r2524 :: dict
    r2525 :: str
    r2526 :: object
    r2527 :: str
    r2528 :: object
    r2529 :: tuple
    r2530, r2531 :: object
    r2532 :: bit
    r2533 :: str
    r2534 :: object
    r2535 :: dict
    r2536 :: str
    r2537 :: object
    r2538 :: str
    r2539 :: object
    r2540 :: str
    r2541 :: bool
    r2542, r2543 :: str
    r2544 :: object
    r2545 :: object[2]
    r2546 :: object_ptr
    r2547 :: object
    r2548, r2549, r2550, r2551 :: dict
    r2552 :: object
    r2553 :: str
    r2554 :: i32
    r2555 :: bit
    r2556 :: object
    r2557 :: str
    r2558 :: i32
    r2559 :: bit
    r2560 :: dict
    r2561 :: str
    r2562 :: object
    r2563 :: str
    r2564 :: i32
    r2565 :: bit
    r2566 :: object
    r2567 :: str
    r2568 :: i32
    r2569 :: bit
    r2570, r2571 :: str
    r2572 :: i32
    r2573 :: bit
    r2574, r2575 :: str
    r2576 :: i32
    r2577 :: bit
    r2578, r2579 :: str
    r2580 :: i32
    r2581 :: bit
    r2582 :: object[3]
    r2583 :: object_ptr
    r2584 :: object
    r2585 :: dict
    r2586 :: str
    r2587 :: i32
    r2588 :: bit
    r2589, r2590, r2591 :: object
    r2592 :: bit
    r2593 :: str
    r2594 :: object
    r2595 :: dict
    r2596 :: str
    r2597 :: object
    r2598 :: str
    r2599 :: object
    r2600 :: tuple
    r2601, r2602 :: object
    r2603 :: bit
    r2604 :: str
    r2605 :: object
    r2606 :: dict
    r2607 :: str
    r2608 :: object
    r2609 :: str
    r2610 :: object
    r2611 :: str
    r2612 :: bool
    r2613, r2614 :: str
    r2615 :: object
    r2616 :: object[2]
    r2617 :: object_ptr
    r2618 :: object
    r2619, r2620, r2621, r2622 :: dict
    r2623 :: object
    r2624 :: str
    r2625 :: i32
    r2626 :: bit
    r2627 :: object
    r2628 :: str
    r2629 :: i32
    r2630 :: bit
    r2631 :: object
    r2632 :: str
    r2633 :: i32
    r2634 :: bit
    r2635 :: object
    r2636 :: str
    r2637 :: i32
    r2638 :: bit
    r2639 :: object
    r2640 :: str
    r2641 :: i32
    r2642 :: bit
    r2643, r2644 :: str
    r2645 :: i32
    r2646 :: bit
    r2647, r2648 :: str
    r2649 :: i32
    r2650 :: bit
    r2651, r2652 :: str
    r2653 :: i32
    r2654 :: bit
    r2655 :: object[3]
    r2656 :: object_ptr
    r2657 :: object
    r2658 :: dict
    r2659 :: str
    r2660 :: i32
    r2661 :: bit
    r2662 :: object
    r2663 :: dict
    r2664 :: str
    r2665 :: object
    r2666 :: dict
    r2667 :: str
    r2668, r2669 :: object
    r2670 :: dict
    r2671 :: str
    r2672 :: object
    r2673 :: dict
    r2674 :: str
    r2675 :: object
    r2676 :: tuple[object, object, object]
    r2677, r2678 :: object
    r2679 :: dict
    r2680 :: str
    r2681 :: object
    r2682 :: tuple[object, object]
    r2683, r2684 :: object
    r2685 :: dict
    r2686 :: str
    r2687 :: i32
    r2688 :: bit
    r2689 :: dict
    r2690 :: str
    r2691 :: object
    r2692 :: dict
    r2693 :: str
    r2694 :: object
    r2695 :: str
    r2696 :: dict
    r2697 :: str
    r2698 :: object
    r2699 :: list
    r2700, r2701, r2702 :: ptr
    r2703 :: dict
    r2704 :: str
    r2705 :: object
    r2706 :: tuple[list, object]
    r2707, r2708 :: object
    r2709 :: dict
    r2710 :: str
    r2711 :: object
    r2712 :: str
    r2713 :: dict
    r2714 :: str
    r2715 :: object
    r2716 :: list
    r2717, r2718, r2719 :: ptr
    r2720 :: dict
    r2721 :: str
    r2722 :: object
    r2723 :: tuple[list, object]
    r2724, r2725 :: object
    r2726 :: tuple[object, object]
    r2727, r2728 :: object
    r2729 :: dict
    r2730 :: str
    r2731 :: i32
    r2732 :: bit
    r2733, r2734 :: str
    r2735 :: dict
    r2736 :: str
    r2737 :: object
    r2738 :: str
    r2739 :: dict
    r2740 :: str
    r2741 :: object
    r2742 :: str
    r2743 :: dict
    r2744 :: str
    r2745 :: object
    r2746 :: dict
    r2747 :: str
    r2748, r2749 :: object
    r2750 :: str
    r2751 :: object
    r2752 :: str
    r2753 :: dict
    r2754 :: str
    r2755 :: object
    r2756 :: str
    r2757 :: object
    r2758 :: str
    r2759 :: dict
    r2760 :: str
    r2761 :: object
    r2762 :: str
    r2763 :: dict
    r2764 :: str
    r2765 :: object
    r2766 :: dict
    r2767 :: str
    r2768, r2769 :: object
    r2770 :: str
    r2771 :: dict
    r2772 :: str
    r2773 :: object
    r2774 :: str
    r2775 :: dict
    r2776 :: str
    r2777 :: object
    r2778 :: str
    r2779 :: object
    r2780 :: str
    r2781 :: dict
    r2782 :: str
    r2783 :: object
    r2784 :: str
    r2785 :: dict
    r2786 :: str
    r2787 :: object
    r2788 :: str
    r2789 :: object
    r2790 :: str
    r2791 :: object
    r2792, r2793 :: dict
    r2794 :: str
    r2795 :: object
    r2796 :: object[2]
    r2797 :: object_ptr
    r2798 :: object
    r2799 :: dict
    r2800 :: str
    r2801 :: i32
    r2802 :: bit
    r2803 :: dict
    r2804 :: str
    r2805 :: object
    r2806 :: dict
    r2807 :: str
    r2808, r2809 :: object
    r2810 :: dict
    r2811 :: str
    r2812 :: i32
    r2813 :: bit
    r2814, r2815 :: object
    r2816 :: bit
    r2817 :: str
    r2818 :: object
    r2819 :: dict
    r2820 :: str
    r2821 :: object
    r2822 :: str
    r2823 :: object
    r2824 :: tuple
    r2825, r2826 :: object
    r2827 :: bit
    r2828 :: str
    r2829 :: object
    r2830 :: dict
    r2831 :: str
    r2832 :: object
    r2833 :: str
    r2834 :: object
    r2835 :: str
    r2836 :: bool
    r2837, r2838 :: str
    r2839 :: object
    r2840 :: object[2]
    r2841 :: object_ptr
    r2842 :: object
    r2843, r2844, r2845, r2846 :: dict
    r2847 :: object
    r2848 :: str
    r2849 :: i32
    r2850 :: bit
    r2851 :: object
    r2852 :: str
    r2853 :: i32
    r2854 :: bit
    r2855, r2856 :: str
    r2857 :: i32
    r2858 :: bit
    r2859, r2860 :: str
    r2861 :: i32
    r2862 :: bit
    r2863, r2864 :: str
    r2865 :: i32
    r2866 :: bit
    r2867 :: object[3]
    r2868 :: object_ptr
    r2869 :: object
    r2870 :: dict
    r2871 :: str
    r2872 :: i32
    r2873 :: bit
    r2874, r2875, r2876 :: object
    r2877 :: bit
    r2878 :: str
    r2879 :: object
    r2880 :: dict
    r2881 :: str
    r2882 :: object
    r2883 :: str
    r2884 :: object
    r2885 :: tuple
    r2886, r2887 :: object
    r2888 :: bit
    r2889 :: str
    r2890 :: object
    r2891 :: dict
    r2892 :: str
    r2893 :: object
    r2894 :: str
    r2895 :: object
    r2896 :: str
    r2897 :: bool
    r2898, r2899 :: str
    r2900 :: object
    r2901 :: object[2]
    r2902 :: object_ptr
    r2903 :: object
    r2904, r2905, r2906, r2907, r2908 :: dict
    r2909 :: str
    r2910 :: object
    r2911 :: str
    r2912 :: i32
    r2913 :: bit
    r2914 :: dict
    r2915 :: str
    r2916 :: object
    r2917 :: str
    r2918 :: i32
    r2919 :: bit
    r2920 :: object
    r2921 :: str
    r2922 :: i32
    r2923 :: bit
    r2924, r2925 :: str
    r2926 :: i32
    r2927 :: bit
    r2928, r2929 :: str
    r2930 :: i32
    r2931 :: bit
    r2932, r2933 :: str
    r2934 :: i32
    r2935 :: bit
    r2936 :: object[3]
    r2937 :: object_ptr
    r2938 :: object
    r2939 :: dict
    r2940 :: str
    r2941 :: i32
    r2942 :: bit
    r2943, r2944, r2945 :: object
    r2946 :: bit
    r2947 :: str
    r2948 :: object
    r2949 :: dict
    r2950 :: str
    r2951 :: object
    r2952 :: str
    r2953 :: object
    r2954 :: tuple
    r2955, r2956 :: object
    r2957 :: bit
    r2958 :: str
    r2959 :: object
    r2960 :: dict
    r2961 :: str
    r2962 :: object
    r2963 :: str
    r2964 :: object
    r2965 :: str
    r2966 :: bool
    r2967, r2968 :: str
    r2969 :: object
    r2970 :: object[2]
    r2971 :: object_ptr
    r2972 :: object
    r2973, r2974, r2975, r2976, r2977 :: dict
    r2978 :: str
    r2979 :: object
    r2980 :: str
    r2981 :: i32
    r2982 :: bit
    r2983 :: dict
    r2984 :: str
    r2985 :: object
    r2986 :: str
    r2987 :: i32
    r2988 :: bit
    r2989 :: object
    r2990 :: str
    r2991 :: i32
    r2992 :: bit
    r2993 :: object
    r2994 :: str
    r2995 :: i32
    r2996 :: bit
    r2997 :: dict
    r2998 :: str
    r2999 :: object
    r3000 :: str
    r3001 :: i32
    r3002 :: bit
    r3003 :: object
    r3004 :: str
    r3005 :: i32
    r3006 :: bit
    r3007 :: dict
    r3008 :: str
    r3009 :: object
    r3010 :: str
    r3011 :: i32
    r3012 :: bit
    r3013, r3014 :: str
    r3015 :: i32
    r3016 :: bit
    r3017, r3018 :: str
    r3019 :: i32
    r3020 :: bit
    r3021, r3022 :: str
    r3023 :: i32
    r3024 :: bit
    r3025 :: object[3]
    r3026 :: object_ptr
    r3027 :: object
    r3028 :: dict
    r3029 :: str
    r3030 :: i32
    r3031 :: bit
    r3032, r3033, r3034 :: object
    r3035 :: bit
    r3036 :: str
    r3037 :: object
    r3038 :: dict
    r3039 :: str
    r3040 :: object
    r3041 :: str
    r3042 :: object
    r3043 :: tuple
    r3044, r3045 :: object
    r3046 :: bit
    r3047 :: str
    r3048 :: object
    r3049 :: dict
    r3050 :: str
    r3051 :: object
    r3052 :: str
    r3053 :: object
    r3054 :: str
    r3055 :: bool
    r3056, r3057 :: str
    r3058 :: object
    r3059 :: object[2]
    r3060 :: object_ptr
    r3061 :: object
    r3062, r3063, r3064, r3065 :: dict
    r3066 :: object
    r3067 :: str
    r3068 :: i32
    r3069 :: bit
    r3070 :: dict
    r3071 :: str
    r3072 :: object
    r3073 :: str
    r3074 :: i32
    r3075 :: bit
    r3076 :: object
    r3077 :: str
    r3078 :: i32
    r3079 :: bit
    r3080 :: object
    r3081 :: str
    r3082 :: i32
    r3083 :: bit
    r3084, r3085 :: str
    r3086 :: i32
    r3087 :: bit
    r3088, r3089 :: str
    r3090 :: i32
    r3091 :: bit
    r3092, r3093 :: str
    r3094 :: i32
    r3095 :: bit
    r3096 :: object[3]
    r3097 :: object_ptr
    r3098 :: object
    r3099 :: dict
    r3100 :: str
    r3101 :: i32
    r3102 :: bit
    r3103, r3104, r3105 :: object
    r3106 :: bit
    r3107 :: str
    r3108 :: object
    r3109 :: dict
    r3110 :: str
    r3111 :: object
    r3112 :: str
    r3113 :: object
    r3114 :: tuple
    r3115, r3116 :: object
    r3117 :: bit
    r3118 :: str
    r3119 :: object
    r3120 :: dict
    r3121 :: str
    r3122 :: object
    r3123 :: str
    r3124 :: object
    r3125 :: str
    r3126 :: bool
    r3127, r3128 :: str
    r3129 :: object
    r3130 :: object[2]
    r3131 :: object_ptr
    r3132 :: object
    r3133, r3134, r3135, r3136, r3137 :: dict
    r3138 :: str
    r3139 :: object
    r3140 :: str
    r3141 :: i32
    r3142 :: bit
    r3143 :: dict
    r3144 :: str
    r3145 :: object
    r3146 :: str
    r3147 :: i32
    r3148 :: bit
    r3149 :: object
    r3150 :: str
    r3151 :: i32
    r3152 :: bit
    r3153 :: object
    r3154 :: str
    r3155 :: i32
    r3156 :: bit
    r3157 :: object
    r3158 :: str
    r3159 :: i32
    r3160 :: bit
    r3161 :: object
    r3162 :: str
    r3163 :: i32
    r3164 :: bit
    r3165 :: object
    r3166 :: str
    r3167 :: i32
    r3168 :: bit
    r3169, r3170 :: str
    r3171 :: i32
    r3172 :: bit
    r3173, r3174 :: str
    r3175 :: i32
    r3176 :: bit
    r3177, r3178 :: str
    r3179 :: i32
    r3180 :: bit
    r3181 :: object[3]
    r3182 :: object_ptr
    r3183 :: object
    r3184 :: dict
    r3185 :: str
    r3186 :: i32
    r3187 :: bit
    r3188, r3189, r3190 :: object
    r3191 :: bit
    r3192 :: str
    r3193 :: object
    r3194 :: dict
    r3195 :: str
    r3196 :: object
    r3197 :: str
    r3198 :: object
    r3199 :: tuple
    r3200, r3201 :: object
    r3202 :: bit
    r3203 :: str
    r3204 :: object
    r3205 :: dict
    r3206 :: str
    r3207 :: object
    r3208 :: str
    r3209 :: object
    r3210 :: str
    r3211 :: bool
    r3212, r3213 :: str
    r3214 :: object
    r3215 :: object[2]
    r3216 :: object_ptr
    r3217 :: object
    r3218, r3219, r3220, r3221, r3222 :: dict
    r3223 :: str
    r3224 :: object
    r3225 :: str
    r3226 :: i32
    r3227 :: bit
    r3228 :: dict
    r3229 :: str
    r3230 :: object
    r3231 :: str
    r3232 :: i32
    r3233 :: bit
    r3234 :: object
    r3235 :: str
    r3236 :: i32
    r3237 :: bit
    r3238 :: object
    r3239 :: str
    r3240 :: i32
    r3241 :: bit
    r3242 :: object
    r3243 :: str
    r3244 :: i32
    r3245 :: bit
    r3246, r3247 :: str
    r3248 :: i32
    r3249 :: bit
    r3250, r3251 :: str
    r3252 :: i32
    r3253 :: bit
    r3254, r3255 :: str
    r3256 :: i32
    r3257 :: bit
    r3258 :: object[3]
    r3259 :: object_ptr
    r3260 :: object
    r3261 :: dict
    r3262 :: str
    r3263 :: i32
    r3264 :: bit
    r3265, r3266, r3267 :: object
    r3268 :: bit
    r3269 :: str
    r3270 :: object
    r3271 :: dict
    r3272 :: str
    r3273 :: object
    r3274 :: str
    r3275 :: object
    r3276 :: tuple
    r3277, r3278 :: object
    r3279 :: bit
    r3280 :: str
    r3281 :: object
    r3282 :: dict
    r3283 :: str
    r3284 :: object
    r3285 :: str
    r3286 :: object
    r3287 :: str
    r3288 :: bool
    r3289, r3290 :: str
    r3291 :: object
    r3292 :: object[2]
    r3293 :: object_ptr
    r3294 :: object
    r3295, r3296, r3297, r3298 :: dict
    r3299 :: object
    r3300 :: str
    r3301 :: i32
    r3302 :: bit
    r3303 :: object
    r3304 :: str
    r3305 :: i32
    r3306 :: bit
    r3307 :: object
    r3308 :: str
    r3309 :: i32
    r3310 :: bit
    r3311 :: object
    r3312 :: str
    r3313 :: i32
    r3314 :: bit
    r3315 :: object
    r3316 :: str
    r3317 :: i32
    r3318 :: bit
    r3319, r3320 :: str
    r3321 :: i32
    r3322 :: bit
    r3323, r3324 :: str
    r3325 :: i32
    r3326 :: bit
    r3327, r3328 :: str
    r3329 :: i32
    r3330 :: bit
    r3331 :: object[3]
    r3332 :: object_ptr
    r3333 :: object
    r3334 :: dict
    r3335 :: str
    r3336 :: i32
    r3337 :: bit
    r3338, r3339, r3340 :: object
    r3341 :: bit
    r3342 :: str
    r3343 :: object
    r3344 :: dict
    r3345 :: str
    r3346 :: object
    r3347 :: str
    r3348 :: object
    r3349 :: tuple
    r3350, r3351 :: object
    r3352 :: bit
    r3353 :: str
    r3354 :: object
    r3355 :: dict
    r3356 :: str
    r3357 :: object
    r3358 :: str
    r3359 :: object
    r3360 :: str
    r3361 :: bool
    r3362, r3363 :: str
    r3364 :: object
    r3365 :: object[2]
    r3366 :: object_ptr
    r3367 :: object
    r3368, r3369, r3370, r3371, r3372 :: dict
    r3373 :: str
    r3374 :: object
    r3375 :: str
    r3376 :: i32
    r3377 :: bit
    r3378 :: dict
    r3379 :: str
    r3380 :: object
    r3381 :: str
    r3382 :: i32
    r3383 :: bit
    r3384 :: dict
    r3385 :: str
    r3386 :: object
    r3387 :: str
    r3388 :: i32
    r3389 :: bit
    r3390 :: dict
    r3391 :: str
    r3392 :: object
    r3393 :: str
    r3394 :: i32
    r3395 :: bit
    r3396 :: dict
    r3397 :: str
    r3398 :: object
    r3399 :: str
    r3400 :: i32
    r3401 :: bit
    r3402 :: object
    r3403 :: str
    r3404 :: i32
    r3405 :: bit
    r3406 :: dict
    r3407 :: str
    r3408 :: object
    r3409 :: str
    r3410 :: i32
    r3411 :: bit
    r3412 :: object
    r3413 :: str
    r3414 :: i32
    r3415 :: bit
    r3416 :: object
    r3417 :: str
    r3418 :: i32
    r3419 :: bit
    r3420 :: dict
    r3421 :: str
    r3422 :: object
    r3423 :: str
    r3424 :: i32
    r3425 :: bit
    r3426 :: dict
    r3427 :: str
    r3428 :: object
    r3429 :: str
    r3430 :: i32
    r3431 :: bit
    r3432 :: object
    r3433 :: str
    r3434 :: i32
    r3435 :: bit
    r3436 :: object
    r3437 :: str
    r3438 :: i32
    r3439 :: bit
    r3440 :: dict
    r3441 :: str
    r3442 :: object
    r3443 :: str
    r3444 :: i32
    r3445 :: bit
    r3446 :: object
    r3447 :: str
    r3448 :: i32
    r3449 :: bit
    r3450 :: object
    r3451 :: str
    r3452 :: i32
    r3453 :: bit
    r3454 :: object
    r3455 :: str
    r3456 :: i32
    r3457 :: bit
    r3458 :: dict
    r3459 :: str
    r3460 :: object
    r3461 :: str
    r3462 :: i32
    r3463 :: bit
    r3464 :: dict
    r3465 :: str
    r3466 :: object
    r3467 :: str
    r3468 :: i32
    r3469 :: bit
    r3470 :: dict
    r3471 :: str
    r3472 :: object
    r3473 :: str
    r3474 :: i32
    r3475 :: bit
    r3476 :: object
    r3477 :: str
    r3478 :: i32
    r3479 :: bit
    r3480 :: dict
    r3481 :: str
    r3482 :: object
    r3483 :: str
    r3484 :: i32
    r3485 :: bit
    r3486, r3487 :: str
    r3488 :: i32
    r3489 :: bit
    r3490, r3491 :: str
    r3492 :: i32
    r3493 :: bit
    r3494, r3495 :: str
    r3496 :: i32
    r3497 :: bit
    r3498 :: object[3]
    r3499 :: object_ptr
    r3500 :: object
    r3501 :: dict
    r3502 :: str
    r3503 :: i32
    r3504 :: bit
    r3505 :: object
    r3506, r3507 :: str
    r3508 :: dict
    r3509 :: str
    r3510 :: object
    r3511 :: str
    r3512 :: object
    r3513 :: str
    r3514 :: dict
    r3515 :: str
    r3516 :: object
    r3517 :: str
    r3518 :: dict
    r3519 :: str
    r3520 :: object
    r3521 :: str
    r3522 :: dict
    r3523 :: str
    r3524 :: object
    r3525 :: str
    r3526 :: dict
    r3527 :: str
    r3528 :: object
    r3529 :: str
    r3530 :: dict
    r3531 :: str
    r3532 :: object
    r3533 :: str
    r3534 :: dict
    r3535 :: str
    r3536 :: object
    r3537 :: str
    r3538 :: dict
    r3539 :: str
    r3540 :: object
    r3541 :: str
    r3542 :: dict
    r3543 :: str
    r3544 :: object
    r3545 :: str
    r3546 :: dict
    r3547 :: str
    r3548 :: object
    r3549 :: str
    r3550 :: object
    r3551 :: str
    r3552 :: dict
    r3553 :: str
    r3554 :: object
    r3555 :: dict
    r3556 :: object
    r3557 :: dict
    r3558 :: str
    r3559 :: object
    r3560 :: object[3]
    r3561 :: object_ptr
    r3562, r3563 :: object
    r3564 :: dict
    r3565 :: str
    r3566 :: i32
    r3567 :: bit
    r3568, r3569 :: object
    r3570 :: bit
    r3571 :: str
    r3572 :: object
    r3573 :: dict
    r3574 :: str
    r3575 :: object
    r3576 :: str
    r3577 :: object
    r3578 :: tuple
    r3579, r3580 :: object
    r3581 :: bit
    r3582 :: str
    r3583 :: object
    r3584 :: dict
    r3585 :: str
    r3586 :: object
    r3587 :: str
    r3588 :: object
    r3589 :: str
    r3590 :: bool
    r3591, r3592 :: str
    r3593 :: object
    r3594 :: object[2]
    r3595 :: object_ptr
    r3596 :: object
    r3597, r3598, r3599, r3600 :: dict
    r3601 :: object
    r3602 :: str
    r3603 :: i32
    r3604 :: bit
    r3605 :: object
    r3606 :: str
    r3607 :: i32
    r3608 :: bit
    r3609, r3610 :: str
    r3611 :: i32
    r3612 :: bit
    r3613, r3614 :: str
    r3615 :: i32
    r3616 :: bit
    r3617, r3618 :: str
    r3619 :: i32
    r3620 :: bit
    r3621 :: object[3]
    r3622 :: object_ptr
    r3623 :: object
    r3624 :: dict
    r3625 :: str
    r3626 :: i32
    r3627 :: bit
    r3628, r3629, r3630 :: object
    r3631 :: bit
    r3632 :: str
    r3633 :: object
    r3634 :: dict
    r3635 :: str
    r3636 :: object
    r3637 :: str
    r3638 :: object
    r3639 :: tuple
    r3640, r3641 :: object
    r3642 :: bit
    r3643 :: str
    r3644 :: object
    r3645 :: dict
    r3646 :: str
    r3647 :: object
    r3648 :: str
    r3649 :: object
    r3650 :: str
    r3651 :: bool
    r3652, r3653 :: str
    r3654 :: object
    r3655 :: object[2]
    r3656 :: object_ptr
    r3657 :: object
    r3658, r3659, r3660, r3661 :: dict
    r3662 :: object
    r3663 :: str
    r3664 :: i32
    r3665 :: bit
    r3666 :: object
    r3667 :: str
    r3668 :: i32
    r3669 :: bit
    r3670, r3671 :: str
    r3672 :: i32
    r3673 :: bit
    r3674, r3675 :: str
    r3676 :: i32
    r3677 :: bit
    r3678, r3679 :: str
    r3680 :: i32
    r3681 :: bit
    r3682 :: object[3]
    r3683 :: object_ptr
    r3684 :: object
    r3685 :: dict
    r3686 :: str
    r3687 :: i32
    r3688 :: bit
    r3689, r3690, r3691 :: object
    r3692 :: bit
    r3693 :: str
    r3694 :: object
    r3695 :: dict
    r3696 :: str
    r3697 :: object
    r3698 :: str
    r3699 :: object
    r3700 :: tuple
    r3701, r3702 :: object
    r3703 :: bit
    r3704 :: str
    r3705 :: object
    r3706 :: dict
    r3707 :: str
    r3708 :: object
    r3709 :: str
    r3710 :: object
    r3711 :: str
    r3712 :: bool
    r3713, r3714 :: str
    r3715 :: object
    r3716 :: object[2]
    r3717 :: object_ptr
    r3718 :: object
    r3719, r3720, r3721, r3722 :: dict
    r3723 :: object
    r3724 :: str
    r3725 :: i32
    r3726 :: bit
    r3727 :: object
    r3728 :: str
    r3729 :: i32
    r3730 :: bit
    r3731, r3732 :: str
    r3733 :: i32
    r3734 :: bit
    r3735, r3736 :: str
    r3737 :: i32
    r3738 :: bit
    r3739, r3740 :: str
    r3741 :: i32
    r3742 :: bit
    r3743 :: object[3]
    r3744 :: object_ptr
    r3745 :: object
    r3746 :: dict
    r3747 :: str
    r3748 :: i32
    r3749 :: bit
    r3750, r3751, r3752 :: object
    r3753 :: bit
    r3754 :: str
    r3755 :: object
    r3756 :: dict
    r3757 :: str
    r3758 :: object
    r3759 :: str
    r3760 :: object
    r3761 :: tuple
    r3762, r3763 :: object
    r3764 :: bit
    r3765 :: str
    r3766 :: object
    r3767 :: dict
    r3768 :: str
    r3769 :: object
    r3770 :: str
    r3771 :: object
    r3772 :: str
    r3773 :: bool
    r3774, r3775 :: str
    r3776 :: object
    r3777 :: object[2]
    r3778 :: object_ptr
    r3779 :: object
    r3780, r3781, r3782, r3783 :: dict
    r3784 :: object
    r3785 :: str
    r3786 :: i32
    r3787 :: bit
    r3788 :: object
    r3789 :: str
    r3790 :: i32
    r3791 :: bit
    r3792 :: object
    r3793 :: str
    r3794 :: i32
    r3795 :: bit
    r3796 :: object
    r3797 :: str
    r3798 :: i32
    r3799 :: bit
    r3800 :: object
    r3801 :: str
    r3802 :: i32
    r3803 :: bit
    r3804 :: object
    r3805 :: str
    r3806 :: i32
    r3807 :: bit
    r3808 :: object
    r3809 :: str
    r3810 :: i32
    r3811 :: bit
    r3812, r3813 :: str
    r3814 :: i32
    r3815 :: bit
    r3816, r3817 :: str
    r3818 :: i32
    r3819 :: bit
    r3820, r3821 :: str
    r3822 :: i32
    r3823 :: bit
    r3824 :: object[3]
    r3825 :: object_ptr
    r3826 :: object
    r3827 :: dict
    r3828 :: str
    r3829 :: i32
    r3830 :: bit
    r3831, r3832, r3833 :: object
    r3834 :: bit
    r3835 :: str
    r3836 :: object
    r3837 :: dict
    r3838 :: str
    r3839 :: object
    r3840 :: str
    r3841 :: object
    r3842 :: tuple
    r3843, r3844 :: object
    r3845 :: bit
    r3846 :: str
    r3847 :: object
    r3848 :: dict
    r3849 :: str
    r3850 :: object
    r3851 :: str
    r3852 :: object
    r3853 :: str
    r3854 :: bool
    r3855, r3856 :: str
    r3857 :: object
    r3858 :: object[2]
    r3859 :: object_ptr
    r3860 :: object
    r3861, r3862, r3863, r3864, r3865 :: dict
    r3866 :: str
    r3867 :: object
    r3868 :: str
    r3869 :: i32
    r3870 :: bit
    r3871 :: object
    r3872 :: str
    r3873 :: i32
    r3874 :: bit
    r3875 :: dict
    r3876 :: str
    r3877 :: object
    r3878 :: str
    r3879 :: i32
    r3880 :: bit
    r3881 :: object
    r3882 :: str
    r3883 :: i32
    r3884 :: bit
    r3885, r3886 :: str
    r3887 :: i32
    r3888 :: bit
    r3889, r3890 :: str
    r3891 :: i32
    r3892 :: bit
    r3893, r3894 :: str
    r3895 :: i32
    r3896 :: bit
    r3897 :: object[3]
    r3898 :: object_ptr
    r3899 :: object
    r3900 :: dict
    r3901 :: str
    r3902 :: i32
    r3903 :: bit
    r3904 :: object
    r3905, r3906 :: str
    r3907 :: object
    r3908 :: str
    r3909 :: dict
    r3910 :: str
    r3911 :: object
    r3912 :: str
    r3913 :: dict
    r3914 :: str
    r3915 :: object
    r3916 :: str
    r3917 :: dict
    r3918 :: str
    r3919 :: object
    r3920 :: str
    r3921 :: object
    r3922 :: str
    r3923 :: object
    r3924 :: str
    r3925 :: dict
    r3926 :: str
    r3927 :: object
    r3928 :: str
    r3929 :: dict
    r3930 :: str
    r3931 :: object
    r3932 :: str
    r3933 :: object
    r3934 :: str
    r3935 :: object
    r3936 :: str
    r3937 :: dict
    r3938 :: str
    r3939 :: object
    r3940 :: str
    r3941 :: object
    r3942 :: str
    r3943 :: dict
    r3944 :: str
    r3945 :: object
    r3946 :: dict
    r3947 :: str
    r3948, r3949 :: object
    r3950 :: dict
    r3951 :: object
    r3952 :: dict
    r3953 :: str
    r3954 :: object
    r3955 :: object[3]
    r3956 :: object_ptr
    r3957, r3958 :: object
    r3959 :: dict
    r3960 :: str
    r3961 :: i32
    r3962 :: bit
    r3963, r3964 :: object
    r3965 :: bit
    r3966 :: str
    r3967 :: object
    r3968 :: dict
    r3969 :: str
    r3970 :: object
    r3971 :: str
    r3972 :: object
    r3973 :: tuple
    r3974, r3975 :: object
    r3976 :: bit
    r3977 :: str
    r3978 :: object
    r3979 :: dict
    r3980 :: str
    r3981 :: object
    r3982 :: str
    r3983 :: object
    r3984 :: str
    r3985 :: bool
    r3986, r3987 :: str
    r3988 :: object
    r3989 :: object[2]
    r3990 :: object_ptr
    r3991 :: object
    r3992, r3993, r3994, r3995 :: dict
    r3996 :: object
    r3997 :: str
    r3998 :: i32
    r3999 :: bit
    r4000 :: object
    r4001 :: str
    r4002 :: i32
    r4003 :: bit
    r4004 :: object
    r4005 :: str
    r4006 :: i32
    r4007 :: bit
    r4008 :: object
    r4009 :: str
    r4010 :: i32
    r4011 :: bit
    r4012, r4013 :: str
    r4014 :: i32
    r4015 :: bit
    r4016, r4017 :: str
    r4018 :: i32
    r4019 :: bit
    r4020, r4021 :: str
    r4022 :: i32
    r4023 :: bit
    r4024 :: object[3]
    r4025 :: object_ptr
    r4026 :: object
    r4027 :: dict
    r4028 :: str
    r4029 :: i32
    r4030 :: bit
    r4031, r4032, r4033 :: object
    r4034 :: bit
    r4035 :: str
    r4036 :: object
    r4037 :: dict
    r4038 :: str
    r4039 :: object
    r4040 :: str
    r4041 :: object
    r4042 :: tuple
    r4043, r4044 :: object
    r4045 :: bit
    r4046 :: str
    r4047 :: object
    r4048 :: dict
    r4049 :: str
    r4050 :: object
    r4051 :: str
    r4052 :: object
    r4053 :: str
    r4054 :: bool
    r4055, r4056 :: str
    r4057 :: object
    r4058 :: object[2]
    r4059 :: object_ptr
    r4060 :: object
    r4061, r4062, r4063, r4064 :: dict
    r4065 :: object
    r4066 :: str
    r4067 :: i32
    r4068 :: bit
    r4069 :: object
    r4070 :: str
    r4071 :: i32
    r4072 :: bit
    r4073, r4074 :: str
    r4075 :: i32
    r4076 :: bit
    r4077, r4078 :: str
    r4079 :: i32
    r4080 :: bit
    r4081, r4082 :: str
    r4083 :: i32
    r4084 :: bit
    r4085 :: object[3]
    r4086 :: object_ptr
    r4087 :: object
    r4088 :: dict
    r4089 :: str
    r4090 :: i32
    r4091 :: bit
    r4092 :: object
    r4093 :: dict
    r4094 :: str
    r4095 :: object
    r4096 :: dict
    r4097 :: str
    r4098 :: object
    r4099 :: dict
    r4100 :: str
    r4101 :: object
    r4102 :: tuple[object, object]
    r4103, r4104 :: object
    r4105 :: dict
    r4106 :: str
    r4107 :: i32
    r4108 :: bit
    r4109 :: dict
    r4110 :: str
    r4111, r4112, r4113 :: object
    r4114 :: tuple[object, object]
    r4115, r4116 :: object
    r4117 :: dict
    r4118 :: str
    r4119 :: i32
    r4120 :: bit
    r4121, r4122 :: object
    r4123 :: bit
    r4124 :: str
    r4125 :: object
    r4126 :: dict
    r4127 :: str
    r4128 :: object
    r4129 :: str
    r4130 :: object
    r4131 :: tuple
    r4132, r4133 :: object
    r4134 :: bit
    r4135 :: str
    r4136 :: object
    r4137 :: dict
    r4138 :: str
    r4139 :: object
    r4140 :: str
    r4141 :: object
    r4142 :: str
    r4143 :: bool
    r4144, r4145 :: str
    r4146 :: object
    r4147 :: object[2]
    r4148 :: object_ptr
    r4149 :: object
    r4150, r4151, r4152, r4153 :: dict
    r4154 :: object
    r4155 :: str
    r4156 :: i32
    r4157 :: bit
    r4158 :: object
    r4159 :: str
    r4160 :: i32
    r4161 :: bit
    r4162 :: object
    r4163 :: str
    r4164 :: i32
    r4165 :: bit
    r4166 :: object
    r4167 :: str
    r4168 :: i32
    r4169 :: bit
    r4170 :: object
    r4171 :: str
    r4172 :: i32
    r4173 :: bit
    r4174 :: object
    r4175 :: str
    r4176 :: i32
    r4177 :: bit
    r4178, r4179 :: str
    r4180 :: i32
    r4181 :: bit
    r4182, r4183 :: str
    r4184 :: i32
    r4185 :: bit
    r4186, r4187 :: str
    r4188 :: i32
    r4189 :: bit
    r4190 :: object[3]
    r4191 :: object_ptr
    r4192 :: object
    r4193 :: dict
    r4194 :: str
    r4195 :: i32
    r4196 :: bit
    r4197, r4198, r4199 :: object
    r4200 :: bit
    r4201 :: str
    r4202 :: object
    r4203 :: dict
    r4204 :: str
    r4205 :: object
    r4206 :: str
    r4207 :: object
    r4208 :: tuple
    r4209, r4210 :: object
    r4211 :: bit
    r4212 :: str
    r4213 :: object
    r4214 :: dict
    r4215 :: str
    r4216 :: object
    r4217 :: str
    r4218 :: object
    r4219 :: str
    r4220 :: bool
    r4221, r4222 :: str
    r4223 :: object
    r4224 :: object[2]
    r4225 :: object_ptr
    r4226 :: object
    r4227, r4228, r4229, r4230 :: dict
    r4231 :: object
    r4232 :: str
    r4233 :: i32
    r4234 :: bit
    r4235 :: object
    r4236 :: str
    r4237 :: i32
    r4238 :: bit
    r4239 :: object
    r4240 :: str
    r4241 :: i32
    r4242 :: bit
    r4243 :: object
    r4244 :: str
    r4245 :: i32
    r4246 :: bit
    r4247, r4248 :: str
    r4249 :: i32
    r4250 :: bit
    r4251, r4252 :: str
    r4253 :: i32
    r4254 :: bit
    r4255, r4256 :: str
    r4257 :: i32
    r4258 :: bit
    r4259 :: object[3]
    r4260 :: object_ptr
    r4261 :: object
    r4262 :: dict
    r4263 :: str
    r4264 :: i32
    r4265 :: bit
    r4266, r4267, r4268 :: object
    r4269 :: bit
    r4270 :: str
    r4271 :: object
    r4272 :: dict
    r4273 :: str
    r4274 :: object
    r4275 :: str
    r4276 :: object
    r4277 :: tuple
    r4278, r4279 :: object
    r4280 :: bit
    r4281 :: str
    r4282 :: object
    r4283 :: dict
    r4284 :: str
    r4285 :: object
    r4286 :: str
    r4287 :: object
    r4288 :: str
    r4289 :: bool
    r4290, r4291 :: str
    r4292 :: object
    r4293 :: object[2]
    r4294 :: object_ptr
    r4295 :: object
    r4296, r4297, r4298, r4299 :: dict
    r4300 :: object
    r4301 :: str
    r4302 :: i32
    r4303 :: bit
    r4304 :: object
    r4305 :: str
    r4306 :: i32
    r4307 :: bit
    r4308 :: dict
    r4309 :: str
    r4310 :: object
    r4311 :: str
    r4312 :: i32
    r4313 :: bit
    r4314, r4315 :: str
    r4316 :: i32
    r4317 :: bit
    r4318, r4319 :: str
    r4320 :: i32
    r4321 :: bit
    r4322, r4323 :: str
    r4324 :: i32
    r4325 :: bit
    r4326 :: object[3]
    r4327 :: object_ptr
    r4328 :: object
    r4329 :: dict
    r4330 :: str
    r4331 :: i32
    r4332 :: bit
    r4333, r4334, r4335 :: object
    r4336 :: bit
    r4337 :: str
    r4338 :: object
    r4339 :: dict
    r4340 :: str
    r4341 :: object
    r4342 :: str
    r4343 :: object
    r4344 :: tuple
    r4345, r4346 :: object
    r4347 :: bit
    r4348 :: str
    r4349 :: object
    r4350 :: dict
    r4351 :: str
    r4352 :: object
    r4353 :: str
    r4354 :: object
    r4355 :: str
    r4356 :: bool
    r4357, r4358 :: str
    r4359 :: object
    r4360 :: object[2]
    r4361 :: object_ptr
    r4362 :: object
    r4363, r4364, r4365, r4366, r4367 :: dict
    r4368 :: str
    r4369 :: object
    r4370 :: str
    r4371 :: i32
    r4372 :: bit
    r4373 :: object
    r4374 :: str
    r4375 :: i32
    r4376 :: bit
    r4377 :: object
    r4378 :: str
    r4379 :: i32
    r4380 :: bit
    r4381, r4382 :: str
    r4383 :: i32
    r4384 :: bit
    r4385, r4386 :: str
    r4387 :: i32
    r4388 :: bit
    r4389, r4390 :: str
    r4391 :: i32
    r4392 :: bit
    r4393 :: object[3]
    r4394 :: object_ptr
    r4395 :: object
    r4396 :: dict
    r4397 :: str
    r4398 :: i32
    r4399 :: bit
    r4400, r4401, r4402 :: object
    r4403 :: bit
    r4404 :: str
    r4405 :: object
    r4406 :: dict
    r4407 :: str
    r4408 :: object
    r4409 :: str
    r4410 :: object
    r4411 :: tuple
    r4412, r4413 :: object
    r4414 :: bit
    r4415 :: str
    r4416 :: object
    r4417 :: dict
    r4418 :: str
    r4419 :: object
    r4420 :: str
    r4421 :: object
    r4422 :: str
    r4423 :: bool
    r4424, r4425 :: str
    r4426 :: object
    r4427 :: object[2]
    r4428 :: object_ptr
    r4429 :: object
    r4430, r4431, r4432, r4433 :: dict
    r4434 :: object
    r4435 :: str
    r4436 :: i32
    r4437 :: bit
    r4438 :: dict
    r4439 :: str
    r4440 :: object
    r4441 :: str
    r4442 :: i32
    r4443 :: bit
    r4444 :: object
    r4445 :: str
    r4446 :: i32
    r4447 :: bit
    r4448 :: object
    r4449 :: str
    r4450 :: i32
    r4451 :: bit
    r4452 :: object
    r4453 :: str
    r4454 :: i32
    r4455 :: bit
    r4456, r4457 :: str
    r4458 :: i32
    r4459 :: bit
    r4460, r4461 :: str
    r4462 :: i32
    r4463 :: bit
    r4464, r4465 :: str
    r4466 :: i32
    r4467 :: bit
    r4468 :: object[3]
    r4469 :: object_ptr
    r4470 :: object
    r4471 :: dict
    r4472 :: str
    r4473 :: i32
    r4474 :: bit
    r4475, r4476, r4477 :: object
    r4478 :: bit
    r4479 :: str
    r4480 :: object
    r4481 :: dict
    r4482 :: str
    r4483 :: object
    r4484 :: str
    r4485 :: object
    r4486 :: tuple
    r4487, r4488 :: object
    r4489 :: bit
    r4490 :: str
    r4491 :: object
    r4492 :: dict
    r4493 :: str
    r4494 :: object
    r4495 :: str
    r4496 :: object
    r4497 :: str
    r4498 :: bool
    r4499, r4500 :: str
    r4501 :: object
    r4502 :: object[2]
    r4503 :: object_ptr
    r4504 :: object
    r4505, r4506, r4507, r4508, r4509 :: dict
    r4510 :: str
    r4511 :: object
    r4512 :: str
    r4513 :: i32
    r4514 :: bit
    r4515, r4516 :: str
    r4517 :: i32
    r4518 :: bit
    r4519, r4520 :: str
    r4521 :: i32
    r4522 :: bit
    r4523, r4524 :: str
    r4525 :: i32
    r4526 :: bit
    r4527 :: object[3]
    r4528 :: object_ptr
    r4529 :: object
    r4530 :: dict
    r4531 :: str
    r4532 :: i32
    r4533 :: bit
    r4534, r4535, r4536 :: object
    r4537 :: bit
    r4538 :: str
    r4539 :: object
    r4540 :: dict
    r4541 :: str
    r4542 :: object
    r4543 :: str
    r4544 :: object
    r4545 :: tuple
    r4546, r4547 :: object
    r4548 :: bit
    r4549 :: str
    r4550 :: object
    r4551 :: dict
    r4552 :: str
    r4553 :: object
    r4554 :: str
    r4555 :: object
    r4556 :: str
    r4557 :: bool
    r4558, r4559 :: str
    r4560 :: object
    r4561 :: object[2]
    r4562 :: object_ptr
    r4563 :: object
    r4564, r4565, r4566, r4567, r4568 :: dict
    r4569 :: str
    r4570 :: object
    r4571 :: str
    r4572 :: i32
    r4573 :: bit
    r4574 :: object
    r4575 :: str
    r4576 :: i32
    r4577 :: bit
    r4578 :: object
    r4579 :: str
    r4580 :: i32
    r4581 :: bit
    r4582, r4583 :: str
    r4584 :: i32
    r4585 :: bit
    r4586, r4587 :: str
    r4588 :: i32
    r4589 :: bit
    r4590, r4591 :: str
    r4592 :: i32
    r4593 :: bit
    r4594 :: object[3]
    r4595 :: object_ptr
    r4596 :: object
    r4597 :: dict
    r4598 :: str
    r4599 :: i32
    r4600 :: bit
    r4601 :: object
    r4602, r4603 :: str
    r4604 :: dict
    r4605 :: str
    r4606 :: object
    r4607 :: object[2]
    r4608 :: object_ptr
    r4609, r4610 :: object
    r4611 :: dict
    r4612 :: str
    r4613 :: i32
    r4614 :: bit
    r4615, r4616 :: str
    r4617 :: dict
    r4618 :: str
    r4619 :: object
    r4620 :: object[2]
    r4621 :: object_ptr
    r4622, r4623 :: object
    r4624 :: dict
    r4625 :: str
    r4626 :: i32
    r4627 :: bit
    r4628 :: str
    r4629 :: dict
    r4630 :: str
    r4631, r4632 :: object
    r4633 :: dict
    r4634 :: str
    r4635 :: object
    r4636 :: tuple[object, object]
    r4637, r4638 :: object
    r4639 :: dict
    r4640 :: str
    r4641 :: object
    r4642 :: object[2]
    r4643 :: object_ptr
    r4644 :: object
    r4645 :: dict
    r4646 :: str
    r4647 :: i32
    r4648 :: bit
    r4649 :: str
    r4650 :: dict
    r4651 :: str
    r4652, r4653 :: object
    r4654 :: dict
    r4655 :: str
    r4656 :: object
    r4657 :: tuple[object, object]
    r4658, r4659 :: object
    r4660 :: dict
    r4661 :: str
    r4662 :: object
    r4663 :: object[2]
    r4664 :: object_ptr
    r4665 :: object
    r4666 :: dict
    r4667 :: str
    r4668 :: i32
    r4669 :: bit
    r4670 :: dict
    r4671 :: str
    r4672 :: object
    r4673 :: dict
    r4674 :: str
    r4675 :: object
    r4676, r4677, r4678 :: str
    r4679 :: tuple[str, str, str]
    r4680, r4681, r4682 :: object
    r4683 :: dict
    r4684 :: str
    r4685 :: i32
    r4686 :: bit
    r4687, r4688 :: object
    r4689 :: bit
    r4690 :: str
    r4691 :: object
    r4692 :: dict
    r4693 :: str
    r4694 :: object
    r4695 :: str
    r4696 :: object
    r4697 :: tuple
    r4698, r4699 :: object
    r4700 :: bit
    r4701 :: str
    r4702 :: object
    r4703 :: dict
    r4704 :: str
    r4705 :: object
    r4706 :: str
    r4707 :: object
    r4708 :: str
    r4709 :: bool
    r4710, r4711 :: str
    r4712 :: object
    r4713 :: object[2]
    r4714 :: object_ptr
    r4715 :: object
    r4716, r4717, r4718, r4719 :: dict
    r4720 :: object
    r4721 :: str
    r4722 :: i32
    r4723 :: bit
    r4724 :: object
    r4725 :: str
    r4726 :: i32
    r4727 :: bit
    r4728 :: dict
    r4729 :: str
    r4730 :: object
    r4731 :: str
    r4732 :: i32
    r4733 :: bit
    r4734 :: object
    r4735 :: str
    r4736 :: i32
    r4737 :: bit
    r4738 :: dict
    r4739 :: str
    r4740 :: object
    r4741 :: str
    r4742 :: i32
    r4743 :: bit
    r4744 :: object
    r4745 :: str
    r4746 :: i32
    r4747 :: bit
    r4748, r4749 :: str
    r4750 :: i32
    r4751 :: bit
    r4752, r4753 :: str
    r4754 :: i32
    r4755 :: bit
    r4756, r4757 :: str
    r4758 :: i32
    r4759 :: bit
    r4760 :: object[3]
    r4761 :: object_ptr
    r4762 :: object
    r4763 :: dict
    r4764 :: str
    r4765 :: i32
    r4766 :: bit
    r4767 :: object
    r4768 :: dict
    r4769 :: str
    r4770 :: object
    r4771, r4772, r4773, r4774 :: str
    r4775 :: tuple[str, str, str, str]
    r4776, r4777 :: object
    r4778 :: dict
    r4779 :: str
    r4780 :: i32
    r4781 :: bit
    r4782, r4783 :: object
    r4784 :: bit
    r4785 :: str
    r4786 :: object
    r4787 :: dict
    r4788 :: str
    r4789 :: object
    r4790 :: str
    r4791 :: object
    r4792 :: tuple
    r4793, r4794 :: object
    r4795 :: bit
    r4796 :: str
    r4797 :: object
    r4798 :: dict
    r4799 :: str
    r4800 :: object
    r4801 :: str
    r4802 :: object
    r4803 :: str
    r4804 :: bool
    r4805, r4806 :: str
    r4807 :: object
    r4808 :: object[2]
    r4809 :: object_ptr
    r4810 :: object
    r4811, r4812, r4813, r4814 :: dict
    r4815 :: object
    r4816 :: str
    r4817 :: i32
    r4818 :: bit
    r4819 :: object
    r4820 :: str
    r4821 :: i32
    r4822 :: bit
    r4823, r4824 :: str
    r4825 :: i32
    r4826 :: bit
    r4827, r4828 :: str
    r4829 :: i32
    r4830 :: bit
    r4831, r4832 :: str
    r4833 :: i32
    r4834 :: bit
    r4835 :: object[3]
    r4836 :: object_ptr
    r4837 :: object
    r4838 :: dict
    r4839 :: str
    r4840 :: i32
    r4841 :: bit
    r4842 :: object
    r4843 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L1811 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('TYPE_CHECKING', 'Any', 'Callable', 'Coroutine', 'Dict', 'List', 'Literal', 'NewType', 'Optional', 'Sequence', 'Tuple', 'Type', 'TypedDict', 'TypeVar', 'Union')
    r6 = 'typing'
    r7 = faster_web3.types.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L1811 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('SignedSetCodeAuthorization',)
    r10 = 'eth_account.datastructures'
    r11 = faster_web3.types.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L1811 (error at <module>:19) else goto L5
L5:
    eth_account.datastructures = r12 :: module
    dec_ref r12
    r13 = ('Address', 'BlockNumber', 'ChecksumAddress', 'Hash32', 'HexStr')
    r14 = 'eth_typing'
    r15 = faster_web3.types.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L1811 (error at <module>:22) else goto L6
L6:
    eth_typing = r16 :: module
    dec_ref r16
    r17 = ('HexBytes',)
    r18 = 'faster_hexbytes'
    r19 = faster_web3.types.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L1811 (error at <module>:29) else goto L7
L7:
    faster_hexbytes = r20 :: module
    dec_ref r20
    r21 = ('FallbackFn', 'ReceiveFn')
    r22 = 'faster_web3._utils.abi_element_identifiers'
    r23 = faster_web3.types.globals :: static
    r24 = CPyImport_ImportFromMany(r22, r21, r21, r23)
    if is_error(r24) goto L1811 (error at <module>:33) else goto L8
L8:
    faster_web3._utils.abi_element_identifiers = r24 :: module
    dec_ref r24
    r25 = ('NotRequired',)
    r26 = 'faster_web3._utils.compat'
    r27 = faster_web3.types.globals :: static
    r28 = CPyImport_ImportFromMany(r26, r25, r25, r27)
    if is_error(r28) goto L1811 (error at <module>:37) else goto L9
L9:
    faster_web3._utils.compat = r28 :: module
    dec_ref r28
    if 0 goto L10 else goto L10 :: bool
L10:
    r29 = 'TFunc'
    r30 = faster_web3.types.globals :: static
    r31 = 'Callable'
    r32 = CPyDict_GetItem(r30, r31)
    if is_error(r32) goto L1811 (error at <module>:52) else goto L11
L11:
    r33 = load_address _Py_EllipsisObject
    r34 = faster_web3.types.globals :: static
    r35 = 'Any'
    r36 = CPyDict_GetItem(r34, r35)
    if is_error(r36) goto L1812 (error at <module>:52) else goto L12
L12:
    inc_ref r33
    r37 = (r33, r36)
    r38 = box(tuple[object, object], r37)
    r39 = PyObject_GetItem(r32, r38)
    dec_ref r32
    dec_ref r38
    if is_error(r39) goto L1811 (error at <module>:52) else goto L13
L13:
    r40 = faster_web3.types.globals :: static
    r41 = 'TypeVar'
    r42 = CPyDict_GetItem(r40, r41)
    if is_error(r42) goto L1813 (error at <module>:52) else goto L14
L14:
    r43 = [r29, r39]
    r44 = load_address r43
    r45 = ('bound',)
    r46 = PyObject_Vectorcall(r42, r44, 1, r45)
    dec_ref r42
    if is_error(r46) goto L1813 (error at <module>:52) else goto L15
L15:
    dec_ref r39
    r47 = faster_web3.types.globals :: static
    r48 = 'TFunc'
    r49 = CPyDict_SetItem(r47, r48, r46)
    dec_ref r46
    r50 = r49 >= 0 :: signed
    if not r50 goto L1811 (error at <module>:52) else goto L16 :: bool
L16:
    r51 = 'TParams'
    r52 = faster_web3.types.globals :: static
    r53 = 'TypeVar'
    r54 = CPyDict_GetItem(r52, r53)
    if is_error(r54) goto L1811 (error at <module>:53) else goto L17
L17:
    r55 = [r51]
    r56 = load_address r55
    r57 = PyObject_Vectorcall(r54, r56, 1, 0)
    dec_ref r54
    if is_error(r57) goto L1811 (error at <module>:53) else goto L18
L18:
    r58 = faster_web3.types.globals :: static
    r59 = 'TParams'
    r60 = CPyDict_SetItem(r58, r59, r57)
    dec_ref r57
    r61 = r60 >= 0 :: signed
    if not r61 goto L1811 (error at <module>:53) else goto L19 :: bool
L19:
    r62 = 'TReturn'
    r63 = faster_web3.types.globals :: static
    r64 = 'TypeVar'
    r65 = CPyDict_GetItem(r63, r64)
    if is_error(r65) goto L1811 (error at <module>:54) else goto L20
L20:
    r66 = [r62]
    r67 = load_address r66
    r68 = PyObject_Vectorcall(r65, r67, 1, 0)
    dec_ref r65
    if is_error(r68) goto L1811 (error at <module>:54) else goto L21
L21:
    r69 = faster_web3.types.globals :: static
    r70 = 'TReturn'
    r71 = CPyDict_SetItem(r69, r70, r68)
    dec_ref r68
    r72 = r71 >= 0 :: signed
    if not r72 goto L1811 (error at <module>:54) else goto L22 :: bool
L22:
    r73 = 'TValue'
    r74 = faster_web3.types.globals :: static
    r75 = 'TypeVar'
    r76 = CPyDict_GetItem(r74, r75)
    if is_error(r76) goto L1811 (error at <module>:55) else goto L23
L23:
    r77 = [r73]
    r78 = load_address r77
    r79 = PyObject_Vectorcall(r76, r78, 1, 0)
    dec_ref r76
    if is_error(r79) goto L1811 (error at <module>:55) else goto L24
L24:
    r80 = faster_web3.types.globals :: static
    r81 = 'TValue'
    r82 = CPyDict_SetItem(r80, r81, r79)
    dec_ref r79
    r83 = r82 >= 0 :: signed
    if not r83 goto L1811 (error at <module>:55) else goto L25 :: bool
L25:
    r84 = faster_web3.types.globals :: static
    r85 = 'Literal'
    r86 = CPyDict_GetItem(r84, r85)
    if is_error(r86) goto L1811 (error at <module>:57) else goto L26
L26:
    r87 = 'latest'
    r88 = 'earliest'
    r89 = 'pending'
    r90 = 'safe'
    r91 = 'finalized'
    inc_ref r87
    inc_ref r88
    inc_ref r89
    inc_ref r90
    inc_ref r91
    r92 = (r87, r88, r89, r90, r91)
    r93 = box(tuple[str, str, str, str, str], r92)
    r94 = PyObject_GetItem(r86, r93)
    dec_ref r86
    dec_ref r93
    if is_error(r94) goto L1811 (error at <module>:57) else goto L27
L27:
    r95 = faster_web3.types.globals :: static
    r96 = 'BlockParams'
    r97 = CPyDict_SetItem(r95, r96, r94)
    dec_ref r94
    r98 = r97 >= 0 :: signed
    if not r98 goto L1811 (error at <module>:57) else goto L28 :: bool
L28:
    r99 = faster_web3.types.globals :: static
    r100 = 'Union'
    r101 = CPyDict_GetItem(r99, r100)
    if is_error(r101) goto L1811 (error at <module>:58) else goto L29
L29:
    r102 = faster_web3.types.globals :: static
    r103 = 'BlockParams'
    r104 = CPyDict_GetItem(r102, r103)
    if is_error(r104) goto L1814 (error at <module>:58) else goto L30
L30:
    r105 = faster_web3.types.globals :: static
    r106 = 'BlockNumber'
    r107 = CPyDict_GetItem(r105, r106)
    if is_error(r107) goto L1815 (error at <module>:58) else goto L31
L31:
    r108 = faster_web3.types.globals :: static
    r109 = 'Hash32'
    r110 = CPyDict_GetItem(r108, r109)
    if is_error(r110) goto L1816 (error at <module>:58) else goto L32
L32:
    r111 = faster_web3.types.globals :: static
    r112 = 'HexStr'
    r113 = CPyDict_GetItem(r111, r112)
    if is_error(r113) goto L1817 (error at <module>:58) else goto L33
L33:
    r114 = faster_web3.types.globals :: static
    r115 = 'HexBytes'
    r116 = CPyDict_GetItem(r114, r115)
    if is_error(r116) goto L1818 (error at <module>:58) else goto L34
L34:
    r117 = load_address PyLong_Type
    inc_ref r117
    r118 = (r104, r107, r110, r113, r116, r117)
    r119 = box(tuple[object, object, object, object, object, object], r118)
    r120 = PyObject_GetItem(r101, r119)
    dec_ref r101
    dec_ref r119
    if is_error(r120) goto L1811 (error at <module>:58) else goto L35
L35:
    r121 = faster_web3.types.globals :: static
    r122 = 'BlockIdentifier'
    r123 = CPyDict_SetItem(r121, r122, r120)
    dec_ref r120
    r124 = r123 >= 0 :: signed
    if not r124 goto L1811 (error at <module>:58) else goto L36 :: bool
L36:
    r125 = faster_web3.types.globals :: static
    r126 = 'Literal'
    r127 = CPyDict_GetItem(r125, r126)
    if is_error(r127) goto L1811 (error at <module>:59) else goto L37
L37:
    r128 = 'latest'
    r129 = PyObject_GetItem(r127, r128)
    dec_ref r127
    if is_error(r129) goto L1811 (error at <module>:59) else goto L38
L38:
    r130 = faster_web3.types.globals :: static
    r131 = 'LatestBlockParam'
    r132 = CPyDict_SetItem(r130, r131, r129)
    dec_ref r129
    r133 = r132 >= 0 :: signed
    if not r133 goto L1811 (error at <module>:59) else goto L39 :: bool
L39:
    r134 = faster_web3.types.globals :: static
    r135 = 'Union'
    r136 = CPyDict_GetItem(r134, r135)
    if is_error(r136) goto L1811 (error at <module>:61) else goto L40
L40:
    r137 = load_address PyUnicode_Type
    r138 = faster_web3.types.globals :: static
    r139 = 'Type'
    r140 = CPyDict_GetItem(r138, r139)
    if is_error(r140) goto L1819 (error at <module>:61) else goto L41
L41:
    r141 = faster_web3.types.globals :: static
    r142 = 'FallbackFn'
    r143 = CPyDict_GetItem(r141, r142)
    if is_error(r143) goto L1820 (error at <module>:61) else goto L42
L42:
    r144 = PyObject_GetItem(r140, r143)
    dec_ref r140
    dec_ref r143
    if is_error(r144) goto L1819 (error at <module>:61) else goto L43
L43:
    r145 = faster_web3.types.globals :: static
    r146 = 'Type'
    r147 = CPyDict_GetItem(r145, r146)
    if is_error(r147) goto L1821 (error at <module>:61) else goto L44
L44:
    r148 = faster_web3.types.globals :: static
    r149 = 'ReceiveFn'
    r150 = CPyDict_GetItem(r148, r149)
    if is_error(r150) goto L1822 (error at <module>:61) else goto L45
L45:
    r151 = PyObject_GetItem(r147, r150)
    dec_ref r147
    dec_ref r150
    if is_error(r151) goto L1821 (error at <module>:61) else goto L46
L46:
    inc_ref r137
    r152 = (r137, r144, r151)
    r153 = box(tuple[object, object, object], r152)
    r154 = PyObject_GetItem(r136, r153)
    dec_ref r136
    dec_ref r153
    if is_error(r154) goto L1811 (error at <module>:61) else goto L47
L47:
    r155 = faster_web3.types.globals :: static
    r156 = 'ABIElementIdentifier'
    r157 = CPyDict_SetItem(r155, r156, r154)
    dec_ref r154
    r158 = r157 >= 0 :: signed
    if not r158 goto L1811 (error at <module>:61) else goto L48 :: bool
L48:
    r159 = faster_web3.types.globals :: static
    r160 = 'Union'
    r161 = CPyDict_GetItem(r159, r160)
    if is_error(r161) goto L1811 (error at <module>:64) else goto L49
L49:
    r162 = faster_web3.types.globals :: static
    r163 = 'Hash32'
    r164 = CPyDict_GetItem(r162, r163)
    if is_error(r164) goto L1823 (error at <module>:64) else goto L50
L50:
    r165 = faster_web3.types.globals :: static
    r166 = 'HexBytes'
    r167 = CPyDict_GetItem(r165, r166)
    if is_error(r167) goto L1824 (error at <module>:64) else goto L51
L51:
    r168 = faster_web3.types.globals :: static
    r169 = 'HexStr'
    r170 = CPyDict_GetItem(r168, r169)
    if is_error(r170) goto L1825 (error at <module>:64) else goto L52
L52:
    r171 = (r164, r167, r170)
    r172 = box(tuple[object, object, object], r171)
    r173 = PyObject_GetItem(r161, r172)
    dec_ref r161
    dec_ref r172
    if is_error(r173) goto L1811 (error at <module>:64) else goto L53
L53:
    r174 = faster_web3.types.globals :: static
    r175 = '_Hash32'
    r176 = CPyDict_SetItem(r174, r175, r173)
    dec_ref r173
    r177 = r176 >= 0 :: signed
    if not r177 goto L1811 (error at <module>:64) else goto L54 :: bool
L54:
    r178 = faster_web3.types.globals :: static
    r179 = 'Union'
    r180 = CPyDict_GetItem(r178, r179)
    if is_error(r180) goto L1811 (error at <module>:71) else goto L55
L55:
    r181 = box(None, 1)
    r182 = faster_web3.types.globals :: static
    r183 = '_Hash32'
    r184 = CPyDict_GetItem(r182, r183)
    if is_error(r184) goto L1826 (error at <module>:73) else goto L56
L56:
    r185 = faster_web3.types.globals :: static
    r186 = 'Sequence'
    r187 = CPyDict_GetItem(r185, r186)
    if is_error(r187) goto L1827 (error at <module>:74) else goto L57
L57:
    r188 = faster_web3.types.globals :: static
    r189 = 'Union'
    r190 = CPyDict_GetItem(r188, r189)
    if is_error(r190) goto L1828 (error at <module>:74) else goto L58
L58:
    r191 = box(None, 1)
    r192 = faster_web3.types.globals :: static
    r193 = '_Hash32'
    r194 = CPyDict_GetItem(r192, r193)
    if is_error(r194) goto L1829 (error at <module>:74) else goto L59
L59:
    inc_ref r191
    r195 = (r191, r194)
    r196 = box(tuple[object, object], r195)
    r197 = PyObject_GetItem(r190, r196)
    dec_ref r190
    dec_ref r196
    if is_error(r197) goto L1828 (error at <module>:74) else goto L60
L60:
    r198 = PyObject_GetItem(r187, r197)
    dec_ref r187
    dec_ref r197
    if is_error(r198) goto L1827 (error at <module>:74) else goto L61
L61:
    r199 = faster_web3.types.globals :: static
    r200 = 'Sequence'
    r201 = CPyDict_GetItem(r199, r200)
    if is_error(r201) goto L1830 (error at <module>:75) else goto L62
L62:
    r202 = 'TopicFilter'
    r203 = PyObject_GetItem(r201, r202)
    dec_ref r201
    if is_error(r203) goto L1830 (error at <module>:75) else goto L63
L63:
    inc_ref r181
    r204 = (r181, r184, r198, r203)
    r205 = box(tuple[object, object, object, object], r204)
    r206 = PyObject_GetItem(r180, r205)
    dec_ref r180
    dec_ref r205
    if is_error(r206) goto L1811 (error at <module>:71) else goto L64
L64:
    r207 = faster_web3.types.globals :: static
    r208 = 'TopicFilter'
    r209 = CPyDict_SetItem(r207, r208, r206)
    dec_ref r206
    r210 = r209 >= 0 :: signed
    if not r210 goto L1811 (error at <module>:71) else goto L65 :: bool
L65:
    r211 = 'EnodeURI'
    r212 = load_address PyUnicode_Type
    r213 = faster_web3.types.globals :: static
    r214 = 'NewType'
    r215 = CPyDict_GetItem(r213, r214)
    if is_error(r215) goto L1811 (error at <module>:78) else goto L66
L66:
    r216 = [r211, r212]
    r217 = load_address r216
    r218 = PyObject_Vectorcall(r215, r217, 2, 0)
    dec_ref r215
    if is_error(r218) goto L1811 (error at <module>:78) else goto L67
L67:
    r219 = faster_web3.types.globals :: static
    r220 = 'EnodeURI'
    r221 = CPyDict_SetItem(r219, r220, r218)
    dec_ref r218
    r222 = r221 >= 0 :: signed
    if not r222 goto L1811 (error at <module>:78) else goto L68 :: bool
L68:
    r223 = 'ENS'
    r224 = load_address PyUnicode_Type
    r225 = faster_web3.types.globals :: static
    r226 = 'NewType'
    r227 = CPyDict_GetItem(r225, r226)
    if is_error(r227) goto L1811 (error at <module>:79) else goto L69
L69:
    r228 = [r223, r224]
    r229 = load_address r228
    r230 = PyObject_Vectorcall(r227, r229, 2, 0)
    dec_ref r227
    if is_error(r230) goto L1811 (error at <module>:79) else goto L70
L70:
    r231 = faster_web3.types.globals :: static
    r232 = 'ENS'
    r233 = CPyDict_SetItem(r231, r232, r230)
    dec_ref r230
    r234 = r233 >= 0 :: signed
    if not r234 goto L1811 (error at <module>:79) else goto L71 :: bool
L71:
    r235 = 'Nonce'
    r236 = load_address PyLong_Type
    r237 = faster_web3.types.globals :: static
    r238 = 'NewType'
    r239 = CPyDict_GetItem(r237, r238)
    if is_error(r239) goto L1811 (error at <module>:80) else goto L72
L72:
    r240 = [r235, r236]
    r241 = load_address r240
    r242 = PyObject_Vectorcall(r239, r241, 2, 0)
    dec_ref r239
    if is_error(r242) goto L1811 (error at <module>:80) else goto L73
L73:
    r243 = faster_web3.types.globals :: static
    r244 = 'Nonce'
    r245 = CPyDict_SetItem(r243, r244, r242)
    dec_ref r242
    r246 = r245 >= 0 :: signed
    if not r246 goto L1811 (error at <module>:80) else goto L74 :: bool
L74:
    r247 = 'RPCEndpoint'
    r248 = load_address PyUnicode_Type
    r249 = faster_web3.types.globals :: static
    r250 = 'NewType'
    r251 = CPyDict_GetItem(r249, r250)
    if is_error(r251) goto L1811 (error at <module>:81) else goto L75
L75:
    r252 = [r247, r248]
    r253 = load_address r252
    r254 = PyObject_Vectorcall(r251, r253, 2, 0)
    dec_ref r251
    if is_error(r254) goto L1811 (error at <module>:81) else goto L76
L76:
    r255 = faster_web3.types.globals :: static
    r256 = 'RPCEndpoint'
    r257 = CPyDict_SetItem(r255, r256, r254)
    dec_ref r254
    r258 = r257 >= 0 :: signed
    if not r258 goto L1811 (error at <module>:81) else goto L77 :: bool
L77:
    r259 = 'Timestamp'
    r260 = load_address PyLong_Type
    r261 = faster_web3.types.globals :: static
    r262 = 'NewType'
    r263 = CPyDict_GetItem(r261, r262)
    if is_error(r263) goto L1811 (error at <module>:82) else goto L78
L78:
    r264 = [r259, r260]
    r265 = load_address r264
    r266 = PyObject_Vectorcall(r263, r265, 2, 0)
    dec_ref r263
    if is_error(r266) goto L1811 (error at <module>:82) else goto L79
L79:
    r267 = faster_web3.types.globals :: static
    r268 = 'Timestamp'
    r269 = CPyDict_SetItem(r267, r268, r266)
    dec_ref r266
    r270 = r269 >= 0 :: signed
    if not r270 goto L1811 (error at <module>:82) else goto L80 :: bool
L80:
    r271 = 'Wei'
    r272 = load_address PyLong_Type
    r273 = faster_web3.types.globals :: static
    r274 = 'NewType'
    r275 = CPyDict_GetItem(r273, r274)
    if is_error(r275) goto L1811 (error at <module>:83) else goto L81
L81:
    r276 = [r271, r272]
    r277 = load_address r276
    r278 = PyObject_Vectorcall(r275, r277, 2, 0)
    dec_ref r275
    if is_error(r278) goto L1811 (error at <module>:83) else goto L82
L82:
    r279 = faster_web3.types.globals :: static
    r280 = 'Wei'
    r281 = CPyDict_SetItem(r279, r280, r278)
    dec_ref r278
    r282 = r281 >= 0 :: signed
    if not r282 goto L1811 (error at <module>:83) else goto L83 :: bool
L83:
    r283 = 'Gwei'
    r284 = load_address PyLong_Type
    r285 = faster_web3.types.globals :: static
    r286 = 'NewType'
    r287 = CPyDict_GetItem(r285, r286)
    if is_error(r287) goto L1811 (error at <module>:84) else goto L84
L84:
    r288 = [r283, r284]
    r289 = load_address r288
    r290 = PyObject_Vectorcall(r287, r289, 2, 0)
    dec_ref r287
    if is_error(r290) goto L1811 (error at <module>:84) else goto L85
L85:
    r291 = faster_web3.types.globals :: static
    r292 = 'Gwei'
    r293 = CPyDict_SetItem(r291, r292, r290)
    dec_ref r290
    r294 = r293 >= 0 :: signed
    if not r294 goto L1811 (error at <module>:84) else goto L86 :: bool
L86:
    r295 = faster_web3.types.globals :: static
    r296 = 'Dict'
    r297 = CPyDict_GetItem(r295, r296)
    if is_error(r297) goto L1811 (error at <module>:85) else goto L87
L87:
    r298 = faster_web3.types.globals :: static
    r299 = 'RPCEndpoint'
    r300 = CPyDict_GetItem(r298, r299)
    if is_error(r300) goto L1831 (error at <module>:85) else goto L88
L88:
    r301 = faster_web3.types.globals :: static
    r302 = 'Callable'
    r303 = CPyDict_GetItem(r301, r302)
    if is_error(r303) goto L1832 (error at <module>:85) else goto L89
L89:
    r304 = load_address _Py_EllipsisObject
    r305 = faster_web3.types.globals :: static
    r306 = 'Any'
    r307 = CPyDict_GetItem(r305, r306)
    if is_error(r307) goto L1833 (error at <module>:85) else goto L90
L90:
    inc_ref r304
    r308 = (r304, r307)
    r309 = box(tuple[object, object], r308)
    r310 = PyObject_GetItem(r303, r309)
    dec_ref r303
    dec_ref r309
    if is_error(r310) goto L1832 (error at <module>:85) else goto L91
L91:
    r311 = (r300, r310)
    r312 = box(tuple[object, object], r311)
    r313 = PyObject_GetItem(r297, r312)
    dec_ref r297
    dec_ref r312
    if is_error(r313) goto L1811 (error at <module>:85) else goto L92
L92:
    r314 = faster_web3.types.globals :: static
    r315 = 'Formatters'
    r316 = CPyDict_SetItem(r314, r315, r313)
    dec_ref r313
    r317 = r316 >= 0 :: signed
    if not r317 goto L1811 (error at <module>:85) else goto L93 :: bool
L93:
    r318 = typing :: module
    r319 = load_address _Py_NoneStruct
    r320 = r318 != r319
    if r320 goto L96 else goto L94 :: bool
L94:
    r321 = 'typing'
    r322 = PyImport_Import(r321)
    if is_error(r322) goto L1811 (error at <module>:88) else goto L95
L95:
    typing = r322 :: module
    dec_ref r322
L96:
    r323 = PyImport_GetModuleDict()
    r324 = 'typing'
    r325 = CPyDict_GetItem(r323, r324)
    if is_error(r325) goto L1811 (error at <module>:88) else goto L97
L97:
    r326 = '_TypedDict'
    r327 = CPyObject_GetAttr(r325, r326)
    dec_ref r325
    if is_error(r327) goto L1811 (error at <module>:88) else goto L98
L98:
    r328 = PyTuple_Pack(1, r327)
    dec_ref r327
    if is_error(r328) goto L1811 (error at <module>:88) else goto L99
L99:
    r329 = typing :: module
    r330 = load_address _Py_NoneStruct
    r331 = r329 != r330
    if r331 goto L102 else goto L100 :: bool
L100:
    r332 = 'typing'
    r333 = PyImport_Import(r332)
    if is_error(r333) goto L1834 (error at <module>:88) else goto L101
L101:
    typing = r333 :: module
    dec_ref r333
L102:
    r334 = PyImport_GetModuleDict()
    r335 = 'typing'
    r336 = CPyDict_GetItem(r334, r335)
    if is_error(r336) goto L1834 (error at <module>:88) else goto L103
L103:
    r337 = '_TypedDictMeta'
    r338 = CPyObject_GetAttr(r336, r337)
    dec_ref r336
    if is_error(r338) goto L1834 (error at <module>:88) else goto L104
L104:
    r339 = '__prepare__'
    r340 = PyObject_HasAttr(r338, r339)
    if r340 goto L105 else goto L109 :: bool
L105:
    r341 = 'AccessListEntry'
    r342 = '__prepare__'
    r343 = CPyObject_GetAttr(r338, r342)
    if is_error(r343) goto L1835 (error at <module>:88) else goto L106
L106:
    r344 = [r341, r328]
    r345 = load_address r344
    r346 = PyObject_Vectorcall(r343, r345, 2, 0)
    dec_ref r343
    if is_error(r346) goto L1835 (error at <module>:88) else goto L107
L107:
    r347 = cast(dict, r346)
    if is_error(r347) goto L1835 (error at <module>:88) else goto L108
L108:
    r348 = r347
    goto L111
L109:
    r349 = PyDict_New()
    if is_error(r349) goto L1835 (error at <module>:88) else goto L110
L110:
    r348 = r349
L111:
    r350 = PyDict_New()
    if is_error(r350) goto L1836 (error at <module>:88) else goto L112
L112:
    r351 = faster_web3.types.globals :: static
    r352 = 'HexStr'
    r353 = CPyDict_GetItem(r351, r352)
    if is_error(r353) goto L1837 (error at <module>:89) else goto L113
L113:
    r354 = 'address'
    r355 = PyDict_SetItem(r350, r354, r353)
    dec_ref r353
    r356 = r355 >= 0 :: signed
    if not r356 goto L1837 (error at <module>:89) else goto L114 :: bool
L114:
    r357 = faster_web3.types.globals :: static
    r358 = 'Sequence'
    r359 = CPyDict_GetItem(r357, r358)
    if is_error(r359) goto L1837 (error at <module>:90) else goto L115
L115:
    r360 = 'storageKeys'
    r361 = PyDict_SetItem(r350, r360, r359)
    dec_ref r359
    r362 = r361 >= 0 :: signed
    if not r362 goto L1837 (error at <module>:90) else goto L116 :: bool
L116:
    r363 = 'AccessListEntry'
    r364 = '__annotations__'
    r365 = CPyDict_SetItem(r348, r364, r350)
    dec_ref r350
    r366 = r365 >= 0 :: signed
    if not r366 goto L1836 (error at <module>:88) else goto L117 :: bool
L117:
    r367 = 'mypyc filler docstring'
    r368 = '__doc__'
    r369 = CPyDict_SetItem(r348, r368, r367)
    r370 = r369 >= 0 :: signed
    if not r370 goto L1836 (error at <module>:88) else goto L118 :: bool
L118:
    r371 = 'faster_web3.types'
    r372 = '__module__'
    r373 = CPyDict_SetItem(r348, r372, r371)
    r374 = r373 >= 0 :: signed
    if not r374 goto L1836 (error at <module>:88) else goto L119 :: bool
L119:
    r375 = [r363, r328, r348]
    r376 = load_address r375
    r377 = PyObject_Vectorcall(r338, r376, 3, 0)
    dec_ref r338
    if is_error(r377) goto L1838 (error at <module>:88) else goto L120
L120:
    dec_ref r328
    dec_ref r348
    faster_web3.types.AccessListEntry = r377 :: type
    r378 = faster_web3.types.globals :: static
    r379 = 'AccessListEntry'
    r380 = PyDict_SetItem(r378, r379, r377)
    dec_ref r377
    r381 = r380 >= 0 :: signed
    if not r381 goto L1811 (error at <module>:88) else goto L121 :: bool
L121:
    r382 = faster_web3.types.AccessListEntry :: type
    r383 = 'AccessList'
    r384 = faster_web3.types.globals :: static
    r385 = 'Sequence'
    r386 = CPyDict_GetItem(r384, r385)
    if is_error(r386) goto L1811 (error at <module>:93) else goto L122
L122:
    r387 = faster_web3.types.globals :: static
    r388 = 'AccessListEntry'
    r389 = CPyDict_GetItem(r387, r388)
    if is_error(r389) goto L1839 (error at <module>:93) else goto L123
L123:
    r390 = PyObject_GetItem(r386, r389)
    dec_ref r386
    dec_ref r389
    if is_error(r390) goto L1811 (error at <module>:93) else goto L124
L124:
    r391 = faster_web3.types.globals :: static
    r392 = 'NewType'
    r393 = CPyDict_GetItem(r391, r392)
    if is_error(r393) goto L1840 (error at <module>:93) else goto L125
L125:
    r394 = [r383, r390]
    r395 = load_address r394
    r396 = PyObject_Vectorcall(r393, r395, 2, 0)
    dec_ref r393
    if is_error(r396) goto L1840 (error at <module>:93) else goto L126
L126:
    dec_ref r390
    r397 = faster_web3.types.globals :: static
    r398 = 'AccessList'
    r399 = CPyDict_SetItem(r397, r398, r396)
    dec_ref r396
    r400 = r399 >= 0 :: signed
    if not r400 goto L1811 (error at <module>:93) else goto L127 :: bool
L127:
    r401 = typing :: module
    r402 = load_address _Py_NoneStruct
    r403 = r401 != r402
    if r403 goto L130 else goto L128 :: bool
L128:
    r404 = 'typing'
    r405 = PyImport_Import(r404)
    if is_error(r405) goto L1811 (error at <module>:96) else goto L129
L129:
    typing = r405 :: module
    dec_ref r405
L130:
    r406 = PyImport_GetModuleDict()
    r407 = 'typing'
    r408 = CPyDict_GetItem(r406, r407)
    if is_error(r408) goto L1811 (error at <module>:96) else goto L131
L131:
    r409 = '_TypedDict'
    r410 = CPyObject_GetAttr(r408, r409)
    dec_ref r408
    if is_error(r410) goto L1811 (error at <module>:96) else goto L132
L132:
    r411 = PyTuple_Pack(1, r410)
    dec_ref r410
    if is_error(r411) goto L1811 (error at <module>:96) else goto L133
L133:
    r412 = typing :: module
    r413 = load_address _Py_NoneStruct
    r414 = r412 != r413
    if r414 goto L136 else goto L134 :: bool
L134:
    r415 = 'typing'
    r416 = PyImport_Import(r415)
    if is_error(r416) goto L1841 (error at <module>:96) else goto L135
L135:
    typing = r416 :: module
    dec_ref r416
L136:
    r417 = PyImport_GetModuleDict()
    r418 = 'typing'
    r419 = CPyDict_GetItem(r417, r418)
    if is_error(r419) goto L1841 (error at <module>:96) else goto L137
L137:
    r420 = '_TypedDictMeta'
    r421 = CPyObject_GetAttr(r419, r420)
    dec_ref r419
    if is_error(r421) goto L1841 (error at <module>:96) else goto L138
L138:
    r422 = '__prepare__'
    r423 = PyObject_HasAttr(r421, r422)
    if r423 goto L139 else goto L143 :: bool
L139:
    r424 = 'EventData'
    r425 = '__prepare__'
    r426 = CPyObject_GetAttr(r421, r425)
    if is_error(r426) goto L1842 (error at <module>:96) else goto L140
L140:
    r427 = [r424, r411]
    r428 = load_address r427
    r429 = PyObject_Vectorcall(r426, r428, 2, 0)
    dec_ref r426
    if is_error(r429) goto L1842 (error at <module>:96) else goto L141
L141:
    r430 = cast(dict, r429)
    if is_error(r430) goto L1842 (error at <module>:96) else goto L142
L142:
    r431 = r430
    goto L145
L143:
    r432 = PyDict_New()
    if is_error(r432) goto L1842 (error at <module>:96) else goto L144
L144:
    r431 = r432
L145:
    r433 = PyDict_New()
    if is_error(r433) goto L1843 (error at <module>:96) else goto L146
L146:
    r434 = faster_web3.types.globals :: static
    r435 = 'ChecksumAddress'
    r436 = CPyDict_GetItem(r434, r435)
    if is_error(r436) goto L1844 (error at <module>:97) else goto L147
L147:
    r437 = 'address'
    r438 = PyDict_SetItem(r433, r437, r436)
    dec_ref r436
    r439 = r438 >= 0 :: signed
    if not r439 goto L1844 (error at <module>:97) else goto L148 :: bool
L148:
    r440 = load_address PyDict_Type
    r441 = 'args'
    r442 = PyDict_SetItem(r433, r441, r440)
    r443 = r442 >= 0 :: signed
    if not r443 goto L1844 (error at <module>:98) else goto L149 :: bool
L149:
    r444 = load_address PyType_Type
    r445 = 'blockHash'
    r446 = PyDict_SetItem(r433, r445, r444)
    r447 = r446 >= 0 :: signed
    if not r447 goto L1844 (error at <module>:99) else goto L150 :: bool
L150:
    r448 = load_address PyLong_Type
    r449 = 'blockNumber'
    r450 = PyDict_SetItem(r433, r449, r448)
    r451 = r450 >= 0 :: signed
    if not r451 goto L1844 (error at <module>:100) else goto L151 :: bool
L151:
    r452 = load_address PyUnicode_Type
    r453 = 'event'
    r454 = PyDict_SetItem(r433, r453, r452)
    r455 = r454 >= 0 :: signed
    if not r455 goto L1844 (error at <module>:101) else goto L152 :: bool
L152:
    r456 = load_address PyLong_Type
    r457 = 'logIndex'
    r458 = PyDict_SetItem(r433, r457, r456)
    r459 = r458 >= 0 :: signed
    if not r459 goto L1844 (error at <module>:102) else goto L153 :: bool
L153:
    r460 = load_address PyType_Type
    r461 = 'transactionHash'
    r462 = PyDict_SetItem(r433, r461, r460)
    r463 = r462 >= 0 :: signed
    if not r463 goto L1844 (error at <module>:103) else goto L154 :: bool
L154:
    r464 = load_address PyLong_Type
    r465 = 'transactionIndex'
    r466 = PyDict_SetItem(r433, r465, r464)
    r467 = r466 >= 0 :: signed
    if not r467 goto L1844 (error at <module>:104) else goto L155 :: bool
L155:
    r468 = 'EventData'
    r469 = '__annotations__'
    r470 = CPyDict_SetItem(r431, r469, r433)
    dec_ref r433
    r471 = r470 >= 0 :: signed
    if not r471 goto L1843 (error at <module>:96) else goto L156 :: bool
L156:
    r472 = 'mypyc filler docstring'
    r473 = '__doc__'
    r474 = CPyDict_SetItem(r431, r473, r472)
    r475 = r474 >= 0 :: signed
    if not r475 goto L1843 (error at <module>:96) else goto L157 :: bool
L157:
    r476 = 'faster_web3.types'
    r477 = '__module__'
    r478 = CPyDict_SetItem(r431, r477, r476)
    r479 = r478 >= 0 :: signed
    if not r479 goto L1843 (error at <module>:96) else goto L158 :: bool
L158:
    r480 = [r468, r411, r431]
    r481 = load_address r480
    r482 = PyObject_Vectorcall(r421, r481, 3, 0)
    dec_ref r421
    if is_error(r482) goto L1845 (error at <module>:96) else goto L159
L159:
    dec_ref r411
    dec_ref r431
    faster_web3.types.EventData = r482 :: type
    r483 = faster_web3.types.globals :: static
    r484 = 'EventData'
    r485 = PyDict_SetItem(r483, r484, r482)
    dec_ref r482
    r486 = r485 >= 0 :: signed
    if not r486 goto L1811 (error at <module>:96) else goto L160 :: bool
L160:
    r487 = faster_web3.types.EventData :: type
    r488 = typing :: module
    r489 = load_address _Py_NoneStruct
    r490 = r488 != r489
    if r490 goto L163 else goto L161 :: bool
L161:
    r491 = 'typing'
    r492 = PyImport_Import(r491)
    if is_error(r492) goto L1811 (error at <module>:107) else goto L162
L162:
    typing = r492 :: module
    dec_ref r492
L163:
    r493 = PyImport_GetModuleDict()
    r494 = 'typing'
    r495 = CPyDict_GetItem(r493, r494)
    if is_error(r495) goto L1811 (error at <module>:107) else goto L164
L164:
    r496 = '_TypedDict'
    r497 = CPyObject_GetAttr(r495, r496)
    dec_ref r495
    if is_error(r497) goto L1811 (error at <module>:107) else goto L165
L165:
    r498 = PyTuple_Pack(1, r497)
    dec_ref r497
    if is_error(r498) goto L1811 (error at <module>:107) else goto L166
L166:
    r499 = typing :: module
    r500 = load_address _Py_NoneStruct
    r501 = r499 != r500
    if r501 goto L169 else goto L167 :: bool
L167:
    r502 = 'typing'
    r503 = PyImport_Import(r502)
    if is_error(r503) goto L1846 (error at <module>:107) else goto L168
L168:
    typing = r503 :: module
    dec_ref r503
L169:
    r504 = PyImport_GetModuleDict()
    r505 = 'typing'
    r506 = CPyDict_GetItem(r504, r505)
    if is_error(r506) goto L1846 (error at <module>:107) else goto L170
L170:
    r507 = '_TypedDictMeta'
    r508 = CPyObject_GetAttr(r506, r507)
    dec_ref r506
    if is_error(r508) goto L1846 (error at <module>:107) else goto L171
L171:
    r509 = '__prepare__'
    r510 = PyObject_HasAttr(r508, r509)
    if r510 goto L172 else goto L176 :: bool
L172:
    r511 = 'RPCError'
    r512 = '__prepare__'
    r513 = CPyObject_GetAttr(r508, r512)
    if is_error(r513) goto L1847 (error at <module>:107) else goto L173
L173:
    r514 = [r511, r498]
    r515 = load_address r514
    r516 = PyObject_Vectorcall(r513, r515, 2, 0)
    dec_ref r513
    if is_error(r516) goto L1847 (error at <module>:107) else goto L174
L174:
    r517 = cast(dict, r516)
    if is_error(r517) goto L1847 (error at <module>:107) else goto L175
L175:
    r518 = r517
    goto L178
L176:
    r519 = PyDict_New()
    if is_error(r519) goto L1847 (error at <module>:107) else goto L177
L177:
    r518 = r519
L178:
    r520 = PyDict_New()
    if is_error(r520) goto L1848 (error at <module>:107) else goto L179
L179:
    r521 = load_address PyLong_Type
    r522 = 'code'
    r523 = PyDict_SetItem(r520, r522, r521)
    r524 = r523 >= 0 :: signed
    if not r524 goto L1849 (error at <module>:108) else goto L180 :: bool
L180:
    r525 = load_address PyUnicode_Type
    r526 = 'message'
    r527 = PyDict_SetItem(r520, r526, r525)
    r528 = r527 >= 0 :: signed
    if not r528 goto L1849 (error at <module>:109) else goto L181 :: bool
L181:
    r529 = load_address PyUnicode_Type
    r530 = 'data'
    r531 = PyDict_SetItem(r520, r530, r529)
    r532 = r531 >= 0 :: signed
    if not r532 goto L1849 (error at <module>:110) else goto L182 :: bool
L182:
    r533 = 'RPCError'
    r534 = '__annotations__'
    r535 = CPyDict_SetItem(r518, r534, r520)
    dec_ref r520
    r536 = r535 >= 0 :: signed
    if not r536 goto L1848 (error at <module>:107) else goto L183 :: bool
L183:
    r537 = 'mypyc filler docstring'
    r538 = '__doc__'
    r539 = CPyDict_SetItem(r518, r538, r537)
    r540 = r539 >= 0 :: signed
    if not r540 goto L1848 (error at <module>:107) else goto L184 :: bool
L184:
    r541 = 'faster_web3.types'
    r542 = '__module__'
    r543 = CPyDict_SetItem(r518, r542, r541)
    r544 = r543 >= 0 :: signed
    if not r544 goto L1848 (error at <module>:107) else goto L185 :: bool
L185:
    r545 = [r533, r498, r518]
    r546 = load_address r545
    r547 = PyObject_Vectorcall(r508, r546, 3, 0)
    dec_ref r508
    if is_error(r547) goto L1850 (error at <module>:107) else goto L186
L186:
    dec_ref r498
    dec_ref r518
    faster_web3.types.RPCError = r547 :: type
    r548 = faster_web3.types.globals :: static
    r549 = 'RPCError'
    r550 = PyDict_SetItem(r548, r549, r547)
    dec_ref r547
    r551 = r550 >= 0 :: signed
    if not r551 goto L1811 (error at <module>:107) else goto L187 :: bool
L187:
    r552 = faster_web3.types.RPCError :: type
    r553 = typing :: module
    r554 = load_address _Py_NoneStruct
    r555 = r553 != r554
    if r555 goto L190 else goto L188 :: bool
L188:
    r556 = 'typing'
    r557 = PyImport_Import(r556)
    if is_error(r557) goto L1811 (error at <module>:113) else goto L189
L189:
    typing = r557 :: module
    dec_ref r557
L190:
    r558 = PyImport_GetModuleDict()
    r559 = 'typing'
    r560 = CPyDict_GetItem(r558, r559)
    if is_error(r560) goto L1811 (error at <module>:113) else goto L191
L191:
    r561 = '_TypedDict'
    r562 = CPyObject_GetAttr(r560, r561)
    dec_ref r560
    if is_error(r562) goto L1811 (error at <module>:113) else goto L192
L192:
    r563 = PyTuple_Pack(1, r562)
    dec_ref r562
    if is_error(r563) goto L1811 (error at <module>:113) else goto L193
L193:
    r564 = typing :: module
    r565 = load_address _Py_NoneStruct
    r566 = r564 != r565
    if r566 goto L196 else goto L194 :: bool
L194:
    r567 = 'typing'
    r568 = PyImport_Import(r567)
    if is_error(r568) goto L1851 (error at <module>:113) else goto L195
L195:
    typing = r568 :: module
    dec_ref r568
L196:
    r569 = PyImport_GetModuleDict()
    r570 = 'typing'
    r571 = CPyDict_GetItem(r569, r570)
    if is_error(r571) goto L1851 (error at <module>:113) else goto L197
L197:
    r572 = '_TypedDictMeta'
    r573 = CPyObject_GetAttr(r571, r572)
    dec_ref r571
    if is_error(r573) goto L1851 (error at <module>:113) else goto L198
L198:
    r574 = '__prepare__'
    r575 = PyObject_HasAttr(r573, r574)
    if r575 goto L199 else goto L203 :: bool
L199:
    r576 = 'SetCodeAuthorizationData'
    r577 = '__prepare__'
    r578 = CPyObject_GetAttr(r573, r577)
    if is_error(r578) goto L1852 (error at <module>:113) else goto L200
L200:
    r579 = [r576, r563]
    r580 = load_address r579
    r581 = PyObject_Vectorcall(r578, r580, 2, 0)
    dec_ref r578
    if is_error(r581) goto L1852 (error at <module>:113) else goto L201
L201:
    r582 = cast(dict, r581)
    if is_error(r582) goto L1852 (error at <module>:113) else goto L202
L202:
    r583 = r582
    goto L205
L203:
    r584 = PyDict_New()
    if is_error(r584) goto L1852 (error at <module>:113) else goto L204
L204:
    r583 = r584
L205:
    r585 = PyDict_New()
    if is_error(r585) goto L1853 (error at <module>:113) else goto L206
L206:
    r586 = load_address PyLong_Type
    r587 = 'chainId'
    r588 = PyDict_SetItem(r585, r587, r586)
    r589 = r588 >= 0 :: signed
    if not r589 goto L1854 (error at <module>:114) else goto L207 :: bool
L207:
    r590 = faster_web3.types.globals :: static
    r591 = 'ChecksumAddress'
    r592 = CPyDict_GetItem(r590, r591)
    if is_error(r592) goto L1854 (error at <module>:115) else goto L208
L208:
    r593 = 'address'
    r594 = PyDict_SetItem(r585, r593, r592)
    dec_ref r592
    r595 = r594 >= 0 :: signed
    if not r595 goto L1854 (error at <module>:115) else goto L209 :: bool
L209:
    r596 = faster_web3.types.globals :: static
    r597 = 'Nonce'
    r598 = CPyDict_GetItem(r596, r597)
    if is_error(r598) goto L1854 (error at <module>:116) else goto L210
L210:
    r599 = 'nonce'
    r600 = PyDict_SetItem(r585, r599, r598)
    dec_ref r598
    r601 = r600 >= 0 :: signed
    if not r601 goto L1854 (error at <module>:116) else goto L211 :: bool
L211:
    r602 = load_address PyLong_Type
    r603 = 'yParity'
    r604 = PyDict_SetItem(r585, r603, r602)
    r605 = r604 >= 0 :: signed
    if not r605 goto L1854 (error at <module>:117) else goto L212 :: bool
L212:
    r606 = load_address PyType_Type
    r607 = 'r'
    r608 = PyDict_SetItem(r585, r607, r606)
    r609 = r608 >= 0 :: signed
    if not r609 goto L1854 (error at <module>:118) else goto L213 :: bool
L213:
    r610 = load_address PyType_Type
    r611 = 's'
    r612 = PyDict_SetItem(r585, r611, r610)
    r613 = r612 >= 0 :: signed
    if not r613 goto L1854 (error at <module>:119) else goto L214 :: bool
L214:
    r614 = 'SetCodeAuthorizationData'
    r615 = '__annotations__'
    r616 = CPyDict_SetItem(r583, r615, r585)
    dec_ref r585
    r617 = r616 >= 0 :: signed
    if not r617 goto L1853 (error at <module>:113) else goto L215 :: bool
L215:
    r618 = 'mypyc filler docstring'
    r619 = '__doc__'
    r620 = CPyDict_SetItem(r583, r619, r618)
    r621 = r620 >= 0 :: signed
    if not r621 goto L1853 (error at <module>:113) else goto L216 :: bool
L216:
    r622 = 'faster_web3.types'
    r623 = '__module__'
    r624 = CPyDict_SetItem(r583, r623, r622)
    r625 = r624 >= 0 :: signed
    if not r625 goto L1853 (error at <module>:113) else goto L217 :: bool
L217:
    r626 = [r614, r563, r583]
    r627 = load_address r626
    r628 = PyObject_Vectorcall(r573, r627, 3, 0)
    dec_ref r573
    if is_error(r628) goto L1855 (error at <module>:113) else goto L218
L218:
    dec_ref r563
    dec_ref r583
    faster_web3.types.SetCodeAuthorizationData = r628 :: type
    r629 = faster_web3.types.globals :: static
    r630 = 'SetCodeAuthorizationData'
    r631 = PyDict_SetItem(r629, r630, r628)
    dec_ref r628
    r632 = r631 >= 0 :: signed
    if not r632 goto L1811 (error at <module>:113) else goto L219 :: bool
L219:
    r633 = faster_web3.types.SetCodeAuthorizationData :: type
    r634 = 'TxData'
    r635 = 'accessList'
    r636 = faster_web3.types.globals :: static
    r637 = 'AccessList'
    r638 = CPyDict_GetItem(r636, r637)
    if is_error(r638) goto L1811 (error at <module>:126) else goto L220
L220:
    r639 = 'authorizationList'
    r640 = faster_web3.types.globals :: static
    r641 = 'Sequence'
    r642 = CPyDict_GetItem(r640, r641)
    if is_error(r642) goto L1856 (error at <module>:127) else goto L221
L221:
    r643 = faster_web3.types.globals :: static
    r644 = 'SetCodeAuthorizationData'
    r645 = CPyDict_GetItem(r643, r644)
    if is_error(r645) goto L1857 (error at <module>:127) else goto L222
L222:
    r646 = PyObject_GetItem(r642, r645)
    dec_ref r642
    dec_ref r645
    if is_error(r646) goto L1856 (error at <module>:127) else goto L223
L223:
    r647 = 'blobVersionedHashes'
    r648 = faster_web3.types.globals :: static
    r649 = 'Sequence'
    r650 = CPyDict_GetItem(r648, r649)
    if is_error(r650) goto L1858 (error at <module>:128) else goto L224
L224:
    r651 = faster_web3.types.globals :: static
    r652 = 'HexBytes'
    r653 = CPyDict_GetItem(r651, r652)
    if is_error(r653) goto L1859 (error at <module>:128) else goto L225
L225:
    r654 = PyObject_GetItem(r650, r653)
    dec_ref r650
    dec_ref r653
    if is_error(r654) goto L1858 (error at <module>:128) else goto L226
L226:
    r655 = 'blockHash'
    r656 = faster_web3.types.globals :: static
    r657 = 'HexBytes'
    r658 = CPyDict_GetItem(r656, r657)
    if is_error(r658) goto L1860 (error at <module>:129) else goto L227
L227:
    r659 = 'blockNumber'
    r660 = faster_web3.types.globals :: static
    r661 = 'BlockNumber'
    r662 = CPyDict_GetItem(r660, r661)
    if is_error(r662) goto L1861 (error at <module>:130) else goto L228
L228:
    r663 = 'chainId'
    r664 = load_address PyLong_Type
    r665 = 'data'
    r666 = faster_web3.types.globals :: static
    r667 = 'Union'
    r668 = CPyDict_GetItem(r666, r667)
    if is_error(r668) goto L1862 (error at <module>:132) else goto L229
L229:
    r669 = load_address PyBytes_Type
    r670 = faster_web3.types.globals :: static
    r671 = 'HexStr'
    r672 = CPyDict_GetItem(r670, r671)
    if is_error(r672) goto L1863 (error at <module>:132) else goto L230
L230:
    inc_ref r669
    r673 = (r669, r672)
    r674 = box(tuple[object, object], r673)
    r675 = PyObject_GetItem(r668, r674)
    dec_ref r668
    dec_ref r674
    if is_error(r675) goto L1862 (error at <module>:132) else goto L231
L231:
    r676 = 'from'
    r677 = faster_web3.types.globals :: static
    r678 = 'ChecksumAddress'
    r679 = CPyDict_GetItem(r677, r678)
    if is_error(r679) goto L1864 (error at <module>:133) else goto L232
L232:
    r680 = 'gas'
    r681 = load_address PyLong_Type
    r682 = 'gasPrice'
    r683 = faster_web3.types.globals :: static
    r684 = 'Wei'
    r685 = CPyDict_GetItem(r683, r684)
    if is_error(r685) goto L1865 (error at <module>:135) else goto L233
L233:
    r686 = 'maxFeePerBlobGas'
    r687 = faster_web3.types.globals :: static
    r688 = 'Wei'
    r689 = CPyDict_GetItem(r687, r688)
    if is_error(r689) goto L1866 (error at <module>:136) else goto L234
L234:
    r690 = 'maxFeePerGas'
    r691 = faster_web3.types.globals :: static
    r692 = 'Wei'
    r693 = CPyDict_GetItem(r691, r692)
    if is_error(r693) goto L1867 (error at <module>:137) else goto L235
L235:
    r694 = 'maxPriorityFeePerGas'
    r695 = faster_web3.types.globals :: static
    r696 = 'Wei'
    r697 = CPyDict_GetItem(r695, r696)
    if is_error(r697) goto L1868 (error at <module>:138) else goto L236
L236:
    r698 = 'hash'
    r699 = faster_web3.types.globals :: static
    r700 = 'HexBytes'
    r701 = CPyDict_GetItem(r699, r700)
    if is_error(r701) goto L1869 (error at <module>:139) else goto L237
L237:
    r702 = 'input'
    r703 = faster_web3.types.globals :: static
    r704 = 'HexBytes'
    r705 = CPyDict_GetItem(r703, r704)
    if is_error(r705) goto L1870 (error at <module>:140) else goto L238
L238:
    r706 = 'nonce'
    r707 = faster_web3.types.globals :: static
    r708 = 'Nonce'
    r709 = CPyDict_GetItem(r707, r708)
    if is_error(r709) goto L1871 (error at <module>:141) else goto L239
L239:
    r710 = 'r'
    r711 = faster_web3.types.globals :: static
    r712 = 'HexBytes'
    r713 = CPyDict_GetItem(r711, r712)
    if is_error(r713) goto L1872 (error at <module>:142) else goto L240
L240:
    r714 = 's'
    r715 = faster_web3.types.globals :: static
    r716 = 'HexBytes'
    r717 = CPyDict_GetItem(r715, r716)
    if is_error(r717) goto L1873 (error at <module>:143) else goto L241
L241:
    r718 = 'to'
    r719 = faster_web3.types.globals :: static
    r720 = 'ChecksumAddress'
    r721 = CPyDict_GetItem(r719, r720)
    if is_error(r721) goto L1874 (error at <module>:144) else goto L242
L242:
    r722 = 'transactionIndex'
    r723 = load_address PyLong_Type
    r724 = 'type'
    r725 = faster_web3.types.globals :: static
    r726 = 'Union'
    r727 = CPyDict_GetItem(r725, r726)
    if is_error(r727) goto L1875 (error at <module>:146) else goto L243
L243:
    r728 = load_address PyLong_Type
    r729 = faster_web3.types.globals :: static
    r730 = 'HexStr'
    r731 = CPyDict_GetItem(r729, r730)
    if is_error(r731) goto L1876 (error at <module>:146) else goto L244
L244:
    inc_ref r728
    r732 = (r728, r731)
    r733 = box(tuple[object, object], r732)
    r734 = PyObject_GetItem(r727, r733)
    dec_ref r727
    dec_ref r733
    if is_error(r734) goto L1875 (error at <module>:146) else goto L245
L245:
    r735 = 'v'
    r736 = load_address PyLong_Type
    r737 = 'value'
    r738 = faster_web3.types.globals :: static
    r739 = 'Wei'
    r740 = CPyDict_GetItem(r738, r739)
    if is_error(r740) goto L1877 (error at <module>:148) else goto L246
L246:
    r741 = 'yParity'
    r742 = load_address PyLong_Type
    r743 = CPyDict_Build(24, r635, r638, r639, r646, r647, r654, r655, r658, r659, r662, r663, r664, r665, r675, r676, r679, r680, r681, r682, r685, r686, r689, r690, r693, r694, r697, r698, r701, r702, r705, r706, r709, r710, r713, r714, r717, r718, r721, r722, r723, r724, r734, r735, r736, r737, r740, r741, r742)
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    dec_ref r701
    dec_ref r705
    dec_ref r709
    dec_ref r713
    dec_ref r717
    dec_ref r721
    dec_ref r734
    dec_ref r740
    if is_error(r743) goto L1811 (error at <module>:125) else goto L247
L247:
    r744 = box(bool, 0)
    r745 = faster_web3.types.globals :: static
    r746 = 'TypedDict'
    r747 = CPyDict_GetItem(r745, r746)
    if is_error(r747) goto L1878 (error at <module>:123) else goto L248
L248:
    r748 = [r634, r743, r744]
    r749 = load_address r748
    r750 = ('total',)
    r751 = PyObject_Vectorcall(r747, r749, 2, r750)
    dec_ref r747
    if is_error(r751) goto L1878 (error at <module>:123) else goto L249
L249:
    dec_ref r743
    r752 = faster_web3.types.globals :: static
    r753 = 'TxData'
    r754 = CPyDict_SetItem(r752, r753, r751)
    dec_ref r751
    r755 = r754 >= 0 :: signed
    if not r755 goto L1811 (error at <module>:123) else goto L250 :: bool
L250:
    r756 = typing :: module
    r757 = load_address _Py_NoneStruct
    r758 = r756 != r757
    if r758 goto L253 else goto L251 :: bool
L251:
    r759 = 'typing'
    r760 = PyImport_Import(r759)
    if is_error(r760) goto L1811 (error at <module>:155) else goto L252
L252:
    typing = r760 :: module
    dec_ref r760
L253:
    r761 = PyImport_GetModuleDict()
    r762 = 'typing'
    r763 = CPyDict_GetItem(r761, r762)
    if is_error(r763) goto L1811 (error at <module>:155) else goto L254
L254:
    r764 = '_TypedDict'
    r765 = CPyObject_GetAttr(r763, r764)
    dec_ref r763
    if is_error(r765) goto L1811 (error at <module>:155) else goto L255
L255:
    r766 = PyTuple_Pack(1, r765)
    dec_ref r765
    if is_error(r766) goto L1811 (error at <module>:155) else goto L256
L256:
    r767 = typing :: module
    r768 = load_address _Py_NoneStruct
    r769 = r767 != r768
    if r769 goto L259 else goto L257 :: bool
L257:
    r770 = 'typing'
    r771 = PyImport_Import(r770)
    if is_error(r771) goto L1879 (error at <module>:155) else goto L258
L258:
    typing = r771 :: module
    dec_ref r771
L259:
    r772 = PyImport_GetModuleDict()
    r773 = 'typing'
    r774 = CPyDict_GetItem(r772, r773)
    if is_error(r774) goto L1879 (error at <module>:155) else goto L260
L260:
    r775 = '_TypedDictMeta'
    r776 = CPyObject_GetAttr(r774, r775)
    dec_ref r774
    if is_error(r776) goto L1879 (error at <module>:155) else goto L261
L261:
    r777 = '__prepare__'
    r778 = PyObject_HasAttr(r776, r777)
    if r778 goto L262 else goto L266 :: bool
L262:
    r779 = 'SetCodeAuthorizationParams'
    r780 = '__prepare__'
    r781 = CPyObject_GetAttr(r776, r780)
    if is_error(r781) goto L1880 (error at <module>:155) else goto L263
L263:
    r782 = [r779, r766]
    r783 = load_address r782
    r784 = PyObject_Vectorcall(r781, r783, 2, 0)
    dec_ref r781
    if is_error(r784) goto L1880 (error at <module>:155) else goto L264
L264:
    r785 = cast(dict, r784)
    if is_error(r785) goto L1880 (error at <module>:155) else goto L265
L265:
    r786 = r785
    goto L268
L266:
    r787 = PyDict_New()
    if is_error(r787) goto L1880 (error at <module>:155) else goto L267
L267:
    r786 = r787
L268:
    r788 = PyDict_New()
    if is_error(r788) goto L1881 (error at <module>:155) else goto L269
L269:
    r789 = load_address PyLong_Type
    r790 = 'chainId'
    r791 = PyDict_SetItem(r788, r790, r789)
    r792 = r791 >= 0 :: signed
    if not r792 goto L1882 (error at <module>:156) else goto L270 :: bool
L270:
    r793 = load_address PyType_Type
    r794 = 'address'
    r795 = PyDict_SetItem(r788, r794, r793)
    r796 = r795 >= 0 :: signed
    if not r796 goto L1882 (error at <module>:157) else goto L271 :: bool
L271:
    r797 = faster_web3.types.globals :: static
    r798 = 'Nonce'
    r799 = CPyDict_GetItem(r797, r798)
    if is_error(r799) goto L1882 (error at <module>:158) else goto L272
L272:
    r800 = 'nonce'
    r801 = PyDict_SetItem(r788, r800, r799)
    dec_ref r799
    r802 = r801 >= 0 :: signed
    if not r802 goto L1882 (error at <module>:158) else goto L273 :: bool
L273:
    r803 = load_address PyLong_Type
    r804 = 'y_parity'
    r805 = PyDict_SetItem(r788, r804, r803)
    r806 = r805 >= 0 :: signed
    if not r806 goto L1882 (error at <module>:159) else goto L274 :: bool
L274:
    r807 = load_address PyLong_Type
    r808 = 'r'
    r809 = PyDict_SetItem(r788, r808, r807)
    r810 = r809 >= 0 :: signed
    if not r810 goto L1882 (error at <module>:160) else goto L275 :: bool
L275:
    r811 = load_address PyLong_Type
    r812 = 's'
    r813 = PyDict_SetItem(r788, r812, r811)
    r814 = r813 >= 0 :: signed
    if not r814 goto L1882 (error at <module>:161) else goto L276 :: bool
L276:
    r815 = 'SetCodeAuthorizationParams'
    r816 = '__annotations__'
    r817 = CPyDict_SetItem(r786, r816, r788)
    dec_ref r788
    r818 = r817 >= 0 :: signed
    if not r818 goto L1881 (error at <module>:155) else goto L277 :: bool
L277:
    r819 = 'mypyc filler docstring'
    r820 = '__doc__'
    r821 = CPyDict_SetItem(r786, r820, r819)
    r822 = r821 >= 0 :: signed
    if not r822 goto L1881 (error at <module>:155) else goto L278 :: bool
L278:
    r823 = 'faster_web3.types'
    r824 = '__module__'
    r825 = CPyDict_SetItem(r786, r824, r823)
    r826 = r825 >= 0 :: signed
    if not r826 goto L1881 (error at <module>:155) else goto L279 :: bool
L279:
    r827 = [r815, r766, r786]
    r828 = load_address r827
    r829 = PyObject_Vectorcall(r776, r828, 3, 0)
    dec_ref r776
    if is_error(r829) goto L1883 (error at <module>:155) else goto L280
L280:
    dec_ref r766
    dec_ref r786
    faster_web3.types.SetCodeAuthorizationParams = r829 :: type
    r830 = faster_web3.types.globals :: static
    r831 = 'SetCodeAuthorizationParams'
    r832 = PyDict_SetItem(r830, r831, r829)
    dec_ref r829
    r833 = r832 >= 0 :: signed
    if not r833 goto L1811 (error at <module>:155) else goto L281 :: bool
L281:
    r834 = faster_web3.types.SetCodeAuthorizationParams :: type
    r835 = 'TxParams'
    r836 = 'accessList'
    r837 = faster_web3.types.globals :: static
    r838 = 'AccessList'
    r839 = CPyDict_GetItem(r837, r838)
    if is_error(r839) goto L1811 (error at <module>:168) else goto L282
L282:
    r840 = 'authorizationList'
    r841 = faster_web3.types.globals :: static
    r842 = 'Sequence'
    r843 = CPyDict_GetItem(r841, r842)
    if is_error(r843) goto L1884 (error at <module>:169) else goto L283
L283:
    r844 = faster_web3.types.globals :: static
    r845 = 'Union'
    r846 = CPyDict_GetItem(r844, r845)
    if is_error(r846) goto L1885 (error at <module>:170) else goto L284
L284:
    r847 = faster_web3.types.globals :: static
    r848 = 'SetCodeAuthorizationParams'
    r849 = CPyDict_GetItem(r847, r848)
    if is_error(r849) goto L1886 (error at <module>:170) else goto L285
L285:
    r850 = faster_web3.types.globals :: static
    r851 = 'SignedSetCodeAuthorization'
    r852 = CPyDict_GetItem(r850, r851)
    if is_error(r852) goto L1887 (error at <module>:170) else goto L286
L286:
    r853 = (r849, r852)
    r854 = box(tuple[object, object], r853)
    r855 = PyObject_GetItem(r846, r854)
    dec_ref r846
    dec_ref r854
    if is_error(r855) goto L1885 (error at <module>:170) else goto L287
L287:
    r856 = PyObject_GetItem(r843, r855)
    dec_ref r843
    dec_ref r855
    if is_error(r856) goto L1884 (error at <module>:169) else goto L288
L288:
    r857 = 'blobVersionedHashes'
    r858 = faster_web3.types.globals :: static
    r859 = 'Sequence'
    r860 = CPyDict_GetItem(r858, r859)
    if is_error(r860) goto L1888 (error at <module>:172) else goto L289
L289:
    r861 = faster_web3.types.globals :: static
    r862 = 'Union'
    r863 = CPyDict_GetItem(r861, r862)
    if is_error(r863) goto L1889 (error at <module>:172) else goto L290
L290:
    r864 = load_address PyUnicode_Type
    r865 = faster_web3.types.globals :: static
    r866 = 'HexStr'
    r867 = CPyDict_GetItem(r865, r866)
    if is_error(r867) goto L1890 (error at <module>:172) else goto L291
L291:
    r868 = load_address PyBytes_Type
    r869 = faster_web3.types.globals :: static
    r870 = 'HexBytes'
    r871 = CPyDict_GetItem(r869, r870)
    if is_error(r871) goto L1891 (error at <module>:172) else goto L292
L292:
    inc_ref r864
    inc_ref r868
    r872 = (r864, r867, r868, r871)
    r873 = box(tuple[object, object, object, object], r872)
    r874 = PyObject_GetItem(r863, r873)
    dec_ref r863
    dec_ref r873
    if is_error(r874) goto L1889 (error at <module>:172) else goto L293
L293:
    r875 = PyObject_GetItem(r860, r874)
    dec_ref r860
    dec_ref r874
    if is_error(r875) goto L1888 (error at <module>:172) else goto L294
L294:
    r876 = 'chainId'
    r877 = load_address PyLong_Type
    r878 = 'data'
    r879 = faster_web3.types.globals :: static
    r880 = 'Union'
    r881 = CPyDict_GetItem(r879, r880)
    if is_error(r881) goto L1892 (error at <module>:174) else goto L295
L295:
    r882 = load_address PyBytes_Type
    r883 = faster_web3.types.globals :: static
    r884 = 'HexStr'
    r885 = CPyDict_GetItem(r883, r884)
    if is_error(r885) goto L1893 (error at <module>:174) else goto L296
L296:
    inc_ref r882
    r886 = (r882, r885)
    r887 = box(tuple[object, object], r886)
    r888 = PyObject_GetItem(r881, r887)
    dec_ref r881
    dec_ref r887
    if is_error(r888) goto L1892 (error at <module>:174) else goto L297
L297:
    r889 = 'from'
    r890 = faster_web3.types.globals :: static
    r891 = 'Union'
    r892 = CPyDict_GetItem(r890, r891)
    if is_error(r892) goto L1894 (error at <module>:176) else goto L298
L298:
    r893 = faster_web3.types.globals :: static
    r894 = 'Address'
    r895 = CPyDict_GetItem(r893, r894)
    if is_error(r895) goto L1895 (error at <module>:176) else goto L299
L299:
    r896 = faster_web3.types.globals :: static
    r897 = 'ChecksumAddress'
    r898 = CPyDict_GetItem(r896, r897)
    if is_error(r898) goto L1896 (error at <module>:176) else goto L300
L300:
    r899 = load_address PyUnicode_Type
    inc_ref r899
    r900 = (r895, r898, r899)
    r901 = box(tuple[object, object, object], r900)
    r902 = PyObject_GetItem(r892, r901)
    dec_ref r892
    dec_ref r901
    if is_error(r902) goto L1894 (error at <module>:176) else goto L301
L301:
    r903 = 'gas'
    r904 = load_address PyLong_Type
    r905 = 'gasPrice'
    r906 = faster_web3.types.globals :: static
    r907 = 'Wei'
    r908 = CPyDict_GetItem(r906, r907)
    if is_error(r908) goto L1897 (error at <module>:179) else goto L302
L302:
    r909 = 'maxFeePerBlobGas'
    r910 = faster_web3.types.globals :: static
    r911 = 'Union'
    r912 = CPyDict_GetItem(r910, r911)
    if is_error(r912) goto L1898 (error at <module>:180) else goto L303
L303:
    r913 = load_address PyUnicode_Type
    r914 = faster_web3.types.globals :: static
    r915 = 'Wei'
    r916 = CPyDict_GetItem(r914, r915)
    if is_error(r916) goto L1899 (error at <module>:180) else goto L304
L304:
    inc_ref r913
    r917 = (r913, r916)
    r918 = box(tuple[object, object], r917)
    r919 = PyObject_GetItem(r912, r918)
    dec_ref r912
    dec_ref r918
    if is_error(r919) goto L1898 (error at <module>:180) else goto L305
L305:
    r920 = 'maxFeePerGas'
    r921 = faster_web3.types.globals :: static
    r922 = 'Union'
    r923 = CPyDict_GetItem(r921, r922)
    if is_error(r923) goto L1900 (error at <module>:182) else goto L306
L306:
    r924 = load_address PyUnicode_Type
    r925 = faster_web3.types.globals :: static
    r926 = 'Wei'
    r927 = CPyDict_GetItem(r925, r926)
    if is_error(r927) goto L1901 (error at <module>:182) else goto L307
L307:
    inc_ref r924
    r928 = (r924, r927)
    r929 = box(tuple[object, object], r928)
    r930 = PyObject_GetItem(r923, r929)
    dec_ref r923
    dec_ref r929
    if is_error(r930) goto L1900 (error at <module>:182) else goto L308
L308:
    r931 = 'maxPriorityFeePerGas'
    r932 = faster_web3.types.globals :: static
    r933 = 'Union'
    r934 = CPyDict_GetItem(r932, r933)
    if is_error(r934) goto L1902 (error at <module>:183) else goto L309
L309:
    r935 = load_address PyUnicode_Type
    r936 = faster_web3.types.globals :: static
    r937 = 'Wei'
    r938 = CPyDict_GetItem(r936, r937)
    if is_error(r938) goto L1903 (error at <module>:183) else goto L310
L310:
    inc_ref r935
    r939 = (r935, r938)
    r940 = box(tuple[object, object], r939)
    r941 = PyObject_GetItem(r934, r940)
    dec_ref r934
    dec_ref r940
    if is_error(r941) goto L1902 (error at <module>:183) else goto L311
L311:
    r942 = 'nonce'
    r943 = faster_web3.types.globals :: static
    r944 = 'Nonce'
    r945 = CPyDict_GetItem(r943, r944)
    if is_error(r945) goto L1904 (error at <module>:184) else goto L312
L312:
    r946 = 'to'
    r947 = faster_web3.types.globals :: static
    r948 = 'Union'
    r949 = CPyDict_GetItem(r947, r948)
    if is_error(r949) goto L1905 (error at <module>:186) else goto L313
L313:
    r950 = faster_web3.types.globals :: static
    r951 = 'Address'
    r952 = CPyDict_GetItem(r950, r951)
    if is_error(r952) goto L1906 (error at <module>:186) else goto L314
L314:
    r953 = faster_web3.types.globals :: static
    r954 = 'ChecksumAddress'
    r955 = CPyDict_GetItem(r953, r954)
    if is_error(r955) goto L1907 (error at <module>:186) else goto L315
L315:
    r956 = load_address PyUnicode_Type
    inc_ref r956
    r957 = (r952, r955, r956)
    r958 = box(tuple[object, object, object], r957)
    r959 = PyObject_GetItem(r949, r958)
    dec_ref r949
    dec_ref r958
    if is_error(r959) goto L1905 (error at <module>:186) else goto L316
L316:
    r960 = 'type'
    r961 = faster_web3.types.globals :: static
    r962 = 'Union'
    r963 = CPyDict_GetItem(r961, r962)
    if is_error(r963) goto L1908 (error at <module>:187) else goto L317
L317:
    r964 = load_address PyLong_Type
    r965 = faster_web3.types.globals :: static
    r966 = 'HexStr'
    r967 = CPyDict_GetItem(r965, r966)
    if is_error(r967) goto L1909 (error at <module>:187) else goto L318
L318:
    inc_ref r964
    r968 = (r964, r967)
    r969 = box(tuple[object, object], r968)
    r970 = PyObject_GetItem(r963, r969)
    dec_ref r963
    dec_ref r969
    if is_error(r970) goto L1908 (error at <module>:187) else goto L319
L319:
    r971 = 'value'
    r972 = faster_web3.types.globals :: static
    r973 = 'Wei'
    r974 = CPyDict_GetItem(r972, r973)
    if is_error(r974) goto L1910 (error at <module>:188) else goto L320
L320:
    r975 = CPyDict_Build(15, r836, r839, r840, r856, r857, r875, r876, r877, r878, r888, r889, r902, r903, r904, r905, r908, r909, r919, r920, r930, r931, r941, r942, r945, r946, r959, r960, r970, r971, r974)
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    dec_ref r941
    dec_ref r945
    dec_ref r959
    dec_ref r970
    dec_ref r974
    if is_error(r975) goto L1811 (error at <module>:167) else goto L321
L321:
    r976 = box(bool, 0)
    r977 = faster_web3.types.globals :: static
    r978 = 'TypedDict'
    r979 = CPyDict_GetItem(r977, r978)
    if is_error(r979) goto L1911 (error at <module>:165) else goto L322
L322:
    r980 = [r835, r975, r976]
    r981 = load_address r980
    r982 = ('total',)
    r983 = PyObject_Vectorcall(r979, r981, 2, r982)
    dec_ref r979
    if is_error(r983) goto L1911 (error at <module>:165) else goto L323
L323:
    dec_ref r975
    r984 = faster_web3.types.globals :: static
    r985 = 'TxParams'
    r986 = CPyDict_SetItem(r984, r985, r983)
    dec_ref r983
    r987 = r986 >= 0 :: signed
    if not r987 goto L1811 (error at <module>:165) else goto L324 :: bool
L324:
    r988 = typing :: module
    r989 = load_address _Py_NoneStruct
    r990 = r988 != r989
    if r990 goto L327 else goto L325 :: bool
L325:
    r991 = 'typing'
    r992 = PyImport_Import(r991)
    if is_error(r992) goto L1811 (error at <module>:194) else goto L326
L326:
    typing = r992 :: module
    dec_ref r992
L327:
    r993 = PyImport_GetModuleDict()
    r994 = 'typing'
    r995 = CPyDict_GetItem(r993, r994)
    if is_error(r995) goto L1811 (error at <module>:194) else goto L328
L328:
    r996 = '_TypedDict'
    r997 = CPyObject_GetAttr(r995, r996)
    dec_ref r995
    if is_error(r997) goto L1811 (error at <module>:194) else goto L329
L329:
    r998 = PyTuple_Pack(1, r997)
    dec_ref r997
    if is_error(r998) goto L1811 (error at <module>:194) else goto L330
L330:
    r999 = typing :: module
    r1000 = load_address _Py_NoneStruct
    r1001 = r999 != r1000
    if r1001 goto L333 else goto L331 :: bool
L331:
    r1002 = 'typing'
    r1003 = PyImport_Import(r1002)
    if is_error(r1003) goto L1912 (error at <module>:194) else goto L332
L332:
    typing = r1003 :: module
    dec_ref r1003
L333:
    r1004 = PyImport_GetModuleDict()
    r1005 = 'typing'
    r1006 = CPyDict_GetItem(r1004, r1005)
    if is_error(r1006) goto L1912 (error at <module>:194) else goto L334
L334:
    r1007 = '_TypedDictMeta'
    r1008 = CPyObject_GetAttr(r1006, r1007)
    dec_ref r1006
    if is_error(r1008) goto L1912 (error at <module>:194) else goto L335
L335:
    r1009 = '__prepare__'
    r1010 = PyObject_HasAttr(r1008, r1009)
    if r1010 goto L336 else goto L340 :: bool
L336:
    r1011 = 'WithdrawalData'
    r1012 = '__prepare__'
    r1013 = CPyObject_GetAttr(r1008, r1012)
    if is_error(r1013) goto L1913 (error at <module>:194) else goto L337
L337:
    r1014 = [r1011, r998]
    r1015 = load_address r1014
    r1016 = PyObject_Vectorcall(r1013, r1015, 2, 0)
    dec_ref r1013
    if is_error(r1016) goto L1913 (error at <module>:194) else goto L338
L338:
    r1017 = cast(dict, r1016)
    if is_error(r1017) goto L1913 (error at <module>:194) else goto L339
L339:
    r1018 = r1017
    goto L342
L340:
    r1019 = PyDict_New()
    if is_error(r1019) goto L1913 (error at <module>:194) else goto L341
L341:
    r1018 = r1019
L342:
    r1020 = PyDict_New()
    if is_error(r1020) goto L1914 (error at <module>:194) else goto L343
L343:
    r1021 = load_address PyLong_Type
    r1022 = 'index'
    r1023 = PyDict_SetItem(r1020, r1022, r1021)
    r1024 = r1023 >= 0 :: signed
    if not r1024 goto L1915 (error at <module>:195) else goto L344 :: bool
L344:
    r1025 = load_address PyLong_Type
    r1026 = 'validator_index'
    r1027 = PyDict_SetItem(r1020, r1026, r1025)
    r1028 = r1027 >= 0 :: signed
    if not r1028 goto L1915 (error at <module>:196) else goto L345 :: bool
L345:
    r1029 = faster_web3.types.globals :: static
    r1030 = 'ChecksumAddress'
    r1031 = CPyDict_GetItem(r1029, r1030)
    if is_error(r1031) goto L1915 (error at <module>:197) else goto L346
L346:
    r1032 = 'address'
    r1033 = PyDict_SetItem(r1020, r1032, r1031)
    dec_ref r1031
    r1034 = r1033 >= 0 :: signed
    if not r1034 goto L1915 (error at <module>:197) else goto L347 :: bool
L347:
    r1035 = faster_web3.types.globals :: static
    r1036 = 'Gwei'
    r1037 = CPyDict_GetItem(r1035, r1036)
    if is_error(r1037) goto L1915 (error at <module>:198) else goto L348
L348:
    r1038 = 'amount'
    r1039 = PyDict_SetItem(r1020, r1038, r1037)
    dec_ref r1037
    r1040 = r1039 >= 0 :: signed
    if not r1040 goto L1915 (error at <module>:198) else goto L349 :: bool
L349:
    r1041 = 'WithdrawalData'
    r1042 = '__annotations__'
    r1043 = CPyDict_SetItem(r1018, r1042, r1020)
    dec_ref r1020
    r1044 = r1043 >= 0 :: signed
    if not r1044 goto L1914 (error at <module>:194) else goto L350 :: bool
L350:
    r1045 = 'mypyc filler docstring'
    r1046 = '__doc__'
    r1047 = CPyDict_SetItem(r1018, r1046, r1045)
    r1048 = r1047 >= 0 :: signed
    if not r1048 goto L1914 (error at <module>:194) else goto L351 :: bool
L351:
    r1049 = 'faster_web3.types'
    r1050 = '__module__'
    r1051 = CPyDict_SetItem(r1018, r1050, r1049)
    r1052 = r1051 >= 0 :: signed
    if not r1052 goto L1914 (error at <module>:194) else goto L352 :: bool
L352:
    r1053 = [r1041, r998, r1018]
    r1054 = load_address r1053
    r1055 = PyObject_Vectorcall(r1008, r1054, 3, 0)
    dec_ref r1008
    if is_error(r1055) goto L1916 (error at <module>:194) else goto L353
L353:
    dec_ref r998
    dec_ref r1018
    faster_web3.types.WithdrawalData = r1055 :: type
    r1056 = faster_web3.types.globals :: static
    r1057 = 'WithdrawalData'
    r1058 = PyDict_SetItem(r1056, r1057, r1055)
    dec_ref r1055
    r1059 = r1058 >= 0 :: signed
    if not r1059 goto L1811 (error at <module>:194) else goto L354 :: bool
L354:
    r1060 = faster_web3.types.WithdrawalData :: type
    r1061 = typing :: module
    r1062 = load_address _Py_NoneStruct
    r1063 = r1061 != r1062
    if r1063 goto L357 else goto L355 :: bool
L355:
    r1064 = 'typing'
    r1065 = PyImport_Import(r1064)
    if is_error(r1065) goto L1811 (error at <module>:201) else goto L356
L356:
    typing = r1065 :: module
    dec_ref r1065
L357:
    r1066 = PyImport_GetModuleDict()
    r1067 = 'typing'
    r1068 = CPyDict_GetItem(r1066, r1067)
    if is_error(r1068) goto L1811 (error at <module>:201) else goto L358
L358:
    r1069 = '_TypedDict'
    r1070 = CPyObject_GetAttr(r1068, r1069)
    dec_ref r1068
    if is_error(r1070) goto L1811 (error at <module>:201) else goto L359
L359:
    r1071 = PyTuple_Pack(1, r1070)
    dec_ref r1070
    if is_error(r1071) goto L1811 (error at <module>:201) else goto L360
L360:
    r1072 = typing :: module
    r1073 = load_address _Py_NoneStruct
    r1074 = r1072 != r1073
    if r1074 goto L363 else goto L361 :: bool
L361:
    r1075 = 'typing'
    r1076 = PyImport_Import(r1075)
    if is_error(r1076) goto L1917 (error at <module>:201) else goto L362
L362:
    typing = r1076 :: module
    dec_ref r1076
L363:
    r1077 = PyImport_GetModuleDict()
    r1078 = 'typing'
    r1079 = CPyDict_GetItem(r1077, r1078)
    if is_error(r1079) goto L1917 (error at <module>:201) else goto L364
L364:
    r1080 = '_TypedDictMeta'
    r1081 = CPyObject_GetAttr(r1079, r1080)
    dec_ref r1079
    if is_error(r1081) goto L1917 (error at <module>:201) else goto L365
L365:
    r1082 = '__prepare__'
    r1083 = PyObject_HasAttr(r1081, r1082)
    if r1083 goto L366 else goto L370 :: bool
L366:
    r1084 = 'BlockData'
    r1085 = '__prepare__'
    r1086 = CPyObject_GetAttr(r1081, r1085)
    if is_error(r1086) goto L1918 (error at <module>:201) else goto L367
L367:
    r1087 = [r1084, r1071]
    r1088 = load_address r1087
    r1089 = PyObject_Vectorcall(r1086, r1088, 2, 0)
    dec_ref r1086
    if is_error(r1089) goto L1918 (error at <module>:201) else goto L368
L368:
    r1090 = cast(dict, r1089)
    if is_error(r1090) goto L1918 (error at <module>:201) else goto L369
L369:
    r1091 = r1090
    goto L372
L370:
    r1092 = PyDict_New()
    if is_error(r1092) goto L1918 (error at <module>:201) else goto L371
L371:
    r1091 = r1092
L372:
    r1093 = PyDict_New()
    if is_error(r1093) goto L1919 (error at <module>:201) else goto L373
L373:
    r1094 = faster_web3.types.globals :: static
    r1095 = 'Wei'
    r1096 = CPyDict_GetItem(r1094, r1095)
    if is_error(r1096) goto L1920 (error at <module>:202) else goto L374
L374:
    r1097 = 'baseFeePerGas'
    r1098 = PyDict_SetItem(r1093, r1097, r1096)
    dec_ref r1096
    r1099 = r1098 >= 0 :: signed
    if not r1099 goto L1920 (error at <module>:202) else goto L375 :: bool
L375:
    r1100 = load_address PyLong_Type
    r1101 = 'difficulty'
    r1102 = PyDict_SetItem(r1093, r1101, r1100)
    r1103 = r1102 >= 0 :: signed
    if not r1103 goto L1920 (error at <module>:203) else goto L376 :: bool
L376:
    r1104 = load_address PyType_Type
    r1105 = 'extraData'
    r1106 = PyDict_SetItem(r1093, r1105, r1104)
    r1107 = r1106 >= 0 :: signed
    if not r1107 goto L1920 (error at <module>:204) else goto L377 :: bool
L377:
    r1108 = load_address PyLong_Type
    r1109 = 'gasLimit'
    r1110 = PyDict_SetItem(r1093, r1109, r1108)
    r1111 = r1110 >= 0 :: signed
    if not r1111 goto L1920 (error at <module>:205) else goto L378 :: bool
L378:
    r1112 = load_address PyLong_Type
    r1113 = 'gasUsed'
    r1114 = PyDict_SetItem(r1093, r1113, r1112)
    r1115 = r1114 >= 0 :: signed
    if not r1115 goto L1920 (error at <module>:206) else goto L379 :: bool
L379:
    r1116 = load_address PyType_Type
    r1117 = 'hash'
    r1118 = PyDict_SetItem(r1093, r1117, r1116)
    r1119 = r1118 >= 0 :: signed
    if not r1119 goto L1920 (error at <module>:207) else goto L380 :: bool
L380:
    r1120 = load_address PyType_Type
    r1121 = 'logsBloom'
    r1122 = PyDict_SetItem(r1093, r1121, r1120)
    r1123 = r1122 >= 0 :: signed
    if not r1123 goto L1920 (error at <module>:208) else goto L381 :: bool
L381:
    r1124 = faster_web3.types.globals :: static
    r1125 = 'ChecksumAddress'
    r1126 = CPyDict_GetItem(r1124, r1125)
    if is_error(r1126) goto L1920 (error at <module>:209) else goto L382
L382:
    r1127 = 'miner'
    r1128 = PyDict_SetItem(r1093, r1127, r1126)
    dec_ref r1126
    r1129 = r1128 >= 0 :: signed
    if not r1129 goto L1920 (error at <module>:209) else goto L383 :: bool
L383:
    r1130 = load_address PyType_Type
    r1131 = 'mixHash'
    r1132 = PyDict_SetItem(r1093, r1131, r1130)
    r1133 = r1132 >= 0 :: signed
    if not r1133 goto L1920 (error at <module>:210) else goto L384 :: bool
L384:
    r1134 = load_address PyType_Type
    r1135 = 'nonce'
    r1136 = PyDict_SetItem(r1093, r1135, r1134)
    r1137 = r1136 >= 0 :: signed
    if not r1137 goto L1920 (error at <module>:211) else goto L385 :: bool
L385:
    r1138 = faster_web3.types.globals :: static
    r1139 = 'BlockNumber'
    r1140 = CPyDict_GetItem(r1138, r1139)
    if is_error(r1140) goto L1920 (error at <module>:212) else goto L386
L386:
    r1141 = 'number'
    r1142 = PyDict_SetItem(r1093, r1141, r1140)
    dec_ref r1140
    r1143 = r1142 >= 0 :: signed
    if not r1143 goto L1920 (error at <module>:212) else goto L387 :: bool
L387:
    r1144 = load_address PyType_Type
    r1145 = 'parentHash'
    r1146 = PyDict_SetItem(r1093, r1145, r1144)
    r1147 = r1146 >= 0 :: signed
    if not r1147 goto L1920 (error at <module>:213) else goto L388 :: bool
L388:
    r1148 = load_address PyType_Type
    r1149 = 'receiptsRoot'
    r1150 = PyDict_SetItem(r1093, r1149, r1148)
    r1151 = r1150 >= 0 :: signed
    if not r1151 goto L1920 (error at <module>:214) else goto L389 :: bool
L389:
    r1152 = load_address PyType_Type
    r1153 = 'sha3Uncles'
    r1154 = PyDict_SetItem(r1093, r1153, r1152)
    r1155 = r1154 >= 0 :: signed
    if not r1155 goto L1920 (error at <module>:215) else goto L390 :: bool
L390:
    r1156 = load_address PyLong_Type
    r1157 = 'size'
    r1158 = PyDict_SetItem(r1093, r1157, r1156)
    r1159 = r1158 >= 0 :: signed
    if not r1159 goto L1920 (error at <module>:216) else goto L391 :: bool
L391:
    r1160 = load_address PyType_Type
    r1161 = 'stateRoot'
    r1162 = PyDict_SetItem(r1093, r1161, r1160)
    r1163 = r1162 >= 0 :: signed
    if not r1163 goto L1920 (error at <module>:217) else goto L392 :: bool
L392:
    r1164 = faster_web3.types.globals :: static
    r1165 = 'Timestamp'
    r1166 = CPyDict_GetItem(r1164, r1165)
    if is_error(r1166) goto L1920 (error at <module>:218) else goto L393
L393:
    r1167 = 'timestamp'
    r1168 = PyDict_SetItem(r1093, r1167, r1166)
    dec_ref r1166
    r1169 = r1168 >= 0 :: signed
    if not r1169 goto L1920 (error at <module>:218) else goto L394 :: bool
L394:
    r1170 = load_address PyLong_Type
    r1171 = 'totalDifficulty'
    r1172 = PyDict_SetItem(r1093, r1171, r1170)
    r1173 = r1172 >= 0 :: signed
    if not r1173 goto L1920 (error at <module>:219) else goto L395 :: bool
L395:
    r1174 = load_address PyType_Type
    r1175 = 'transactions'
    r1176 = PyDict_SetItem(r1093, r1175, r1174)
    r1177 = r1176 >= 0 :: signed
    if not r1177 goto L1920 (error at <module>:220) else goto L396 :: bool
L396:
    r1178 = load_address PyType_Type
    r1179 = 'transactionsRoot'
    r1180 = PyDict_SetItem(r1093, r1179, r1178)
    r1181 = r1180 >= 0 :: signed
    if not r1181 goto L1920 (error at <module>:221) else goto L397 :: bool
L397:
    r1182 = faster_web3.types.globals :: static
    r1183 = 'Sequence'
    r1184 = CPyDict_GetItem(r1182, r1183)
    if is_error(r1184) goto L1920 (error at <module>:222) else goto L398
L398:
    r1185 = 'uncles'
    r1186 = PyDict_SetItem(r1093, r1185, r1184)
    dec_ref r1184
    r1187 = r1186 >= 0 :: signed
    if not r1187 goto L1920 (error at <module>:222) else goto L399 :: bool
L399:
    r1188 = faster_web3.types.globals :: static
    r1189 = 'Sequence'
    r1190 = CPyDict_GetItem(r1188, r1189)
    if is_error(r1190) goto L1920 (error at <module>:223) else goto L400
L400:
    r1191 = 'withdrawals'
    r1192 = PyDict_SetItem(r1093, r1191, r1190)
    dec_ref r1190
    r1193 = r1192 >= 0 :: signed
    if not r1193 goto L1920 (error at <module>:223) else goto L401 :: bool
L401:
    r1194 = load_address PyType_Type
    r1195 = 'withdrawalsRoot'
    r1196 = PyDict_SetItem(r1093, r1195, r1194)
    r1197 = r1196 >= 0 :: signed
    if not r1197 goto L1920 (error at <module>:224) else goto L402 :: bool
L402:
    r1198 = load_address PyType_Type
    r1199 = 'parentBeaconBlockRoot'
    r1200 = PyDict_SetItem(r1093, r1199, r1198)
    r1201 = r1200 >= 0 :: signed
    if not r1201 goto L1920 (error at <module>:225) else goto L403 :: bool
L403:
    r1202 = load_address PyLong_Type
    r1203 = 'blobGasUsed'
    r1204 = PyDict_SetItem(r1093, r1203, r1202)
    r1205 = r1204 >= 0 :: signed
    if not r1205 goto L1920 (error at <module>:226) else goto L404 :: bool
L404:
    r1206 = load_address PyLong_Type
    r1207 = 'excessBlobGas'
    r1208 = PyDict_SetItem(r1093, r1207, r1206)
    r1209 = r1208 >= 0 :: signed
    if not r1209 goto L1920 (error at <module>:227) else goto L405 :: bool
L405:
    r1210 = load_address PyType_Type
    r1211 = 'requestsHash'
    r1212 = PyDict_SetItem(r1093, r1211, r1210)
    r1213 = r1212 >= 0 :: signed
    if not r1213 goto L1920 (error at <module>:228) else goto L406 :: bool
L406:
    r1214 = load_address PyType_Type
    r1215 = 'proofOfAuthorityData'
    r1216 = PyDict_SetItem(r1093, r1215, r1214)
    r1217 = r1216 >= 0 :: signed
    if not r1217 goto L1920 (error at <module>:231) else goto L407 :: bool
L407:
    r1218 = 'BlockData'
    r1219 = '__annotations__'
    r1220 = CPyDict_SetItem(r1091, r1219, r1093)
    dec_ref r1093
    r1221 = r1220 >= 0 :: signed
    if not r1221 goto L1919 (error at <module>:201) else goto L408 :: bool
L408:
    r1222 = 'mypyc filler docstring'
    r1223 = '__doc__'
    r1224 = CPyDict_SetItem(r1091, r1223, r1222)
    r1225 = r1224 >= 0 :: signed
    if not r1225 goto L1919 (error at <module>:201) else goto L409 :: bool
L409:
    r1226 = 'faster_web3.types'
    r1227 = '__module__'
    r1228 = CPyDict_SetItem(r1091, r1227, r1226)
    r1229 = r1228 >= 0 :: signed
    if not r1229 goto L1919 (error at <module>:201) else goto L410 :: bool
L410:
    r1230 = [r1218, r1071, r1091]
    r1231 = load_address r1230
    r1232 = PyObject_Vectorcall(r1081, r1231, 3, 0)
    dec_ref r1081
    if is_error(r1232) goto L1921 (error at <module>:201) else goto L411
L411:
    dec_ref r1071
    dec_ref r1091
    faster_web3.types.BlockData = r1232 :: type
    r1233 = faster_web3.types.globals :: static
    r1234 = 'BlockData'
    r1235 = PyDict_SetItem(r1233, r1234, r1232)
    dec_ref r1232
    r1236 = r1235 >= 0 :: signed
    if not r1236 goto L1811 (error at <module>:201) else goto L412 :: bool
L412:
    r1237 = faster_web3.types.BlockData :: type
    r1238 = typing :: module
    r1239 = load_address _Py_NoneStruct
    r1240 = r1238 != r1239
    if r1240 goto L415 else goto L413 :: bool
L413:
    r1241 = 'typing'
    r1242 = PyImport_Import(r1241)
    if is_error(r1242) goto L1811 (error at <module>:234) else goto L414
L414:
    typing = r1242 :: module
    dec_ref r1242
L415:
    r1243 = PyImport_GetModuleDict()
    r1244 = 'typing'
    r1245 = CPyDict_GetItem(r1243, r1244)
    if is_error(r1245) goto L1811 (error at <module>:234) else goto L416
L416:
    r1246 = '_TypedDict'
    r1247 = CPyObject_GetAttr(r1245, r1246)
    dec_ref r1245
    if is_error(r1247) goto L1811 (error at <module>:234) else goto L417
L417:
    r1248 = PyTuple_Pack(1, r1247)
    dec_ref r1247
    if is_error(r1248) goto L1811 (error at <module>:234) else goto L418
L418:
    r1249 = typing :: module
    r1250 = load_address _Py_NoneStruct
    r1251 = r1249 != r1250
    if r1251 goto L421 else goto L419 :: bool
L419:
    r1252 = 'typing'
    r1253 = PyImport_Import(r1252)
    if is_error(r1253) goto L1922 (error at <module>:234) else goto L420
L420:
    typing = r1253 :: module
    dec_ref r1253
L421:
    r1254 = PyImport_GetModuleDict()
    r1255 = 'typing'
    r1256 = CPyDict_GetItem(r1254, r1255)
    if is_error(r1256) goto L1922 (error at <module>:234) else goto L422
L422:
    r1257 = '_TypedDictMeta'
    r1258 = CPyObject_GetAttr(r1256, r1257)
    dec_ref r1256
    if is_error(r1258) goto L1922 (error at <module>:234) else goto L423
L423:
    r1259 = '__prepare__'
    r1260 = PyObject_HasAttr(r1258, r1259)
    if r1260 goto L424 else goto L428 :: bool
L424:
    r1261 = 'LogReceipt'
    r1262 = '__prepare__'
    r1263 = CPyObject_GetAttr(r1258, r1262)
    if is_error(r1263) goto L1923 (error at <module>:234) else goto L425
L425:
    r1264 = [r1261, r1248]
    r1265 = load_address r1264
    r1266 = PyObject_Vectorcall(r1263, r1265, 2, 0)
    dec_ref r1263
    if is_error(r1266) goto L1923 (error at <module>:234) else goto L426
L426:
    r1267 = cast(dict, r1266)
    if is_error(r1267) goto L1923 (error at <module>:234) else goto L427
L427:
    r1268 = r1267
    goto L430
L428:
    r1269 = PyDict_New()
    if is_error(r1269) goto L1923 (error at <module>:234) else goto L429
L429:
    r1268 = r1269
L430:
    r1270 = PyDict_New()
    if is_error(r1270) goto L1924 (error at <module>:234) else goto L431
L431:
    r1271 = faster_web3.types.globals :: static
    r1272 = 'ChecksumAddress'
    r1273 = CPyDict_GetItem(r1271, r1272)
    if is_error(r1273) goto L1925 (error at <module>:235) else goto L432
L432:
    r1274 = 'address'
    r1275 = PyDict_SetItem(r1270, r1274, r1273)
    dec_ref r1273
    r1276 = r1275 >= 0 :: signed
    if not r1276 goto L1925 (error at <module>:235) else goto L433 :: bool
L433:
    r1277 = load_address PyType_Type
    r1278 = 'blockHash'
    r1279 = PyDict_SetItem(r1270, r1278, r1277)
    r1280 = r1279 >= 0 :: signed
    if not r1280 goto L1925 (error at <module>:236) else goto L434 :: bool
L434:
    r1281 = faster_web3.types.globals :: static
    r1282 = 'BlockNumber'
    r1283 = CPyDict_GetItem(r1281, r1282)
    if is_error(r1283) goto L1925 (error at <module>:237) else goto L435
L435:
    r1284 = 'blockNumber'
    r1285 = PyDict_SetItem(r1270, r1284, r1283)
    dec_ref r1283
    r1286 = r1285 >= 0 :: signed
    if not r1286 goto L1925 (error at <module>:237) else goto L436 :: bool
L436:
    r1287 = load_address PyType_Type
    r1288 = 'data'
    r1289 = PyDict_SetItem(r1270, r1288, r1287)
    r1290 = r1289 >= 0 :: signed
    if not r1290 goto L1925 (error at <module>:238) else goto L437 :: bool
L437:
    r1291 = load_address PyLong_Type
    r1292 = 'logIndex'
    r1293 = PyDict_SetItem(r1270, r1292, r1291)
    r1294 = r1293 >= 0 :: signed
    if not r1294 goto L1925 (error at <module>:239) else goto L438 :: bool
L438:
    r1295 = load_address PyBool_Type
    r1296 = 'removed'
    r1297 = PyDict_SetItem(r1270, r1296, r1295)
    r1298 = r1297 >= 0 :: signed
    if not r1298 goto L1925 (error at <module>:240) else goto L439 :: bool
L439:
    r1299 = faster_web3.types.globals :: static
    r1300 = 'Sequence'
    r1301 = CPyDict_GetItem(r1299, r1300)
    if is_error(r1301) goto L1925 (error at <module>:241) else goto L440
L440:
    r1302 = 'topics'
    r1303 = PyDict_SetItem(r1270, r1302, r1301)
    dec_ref r1301
    r1304 = r1303 >= 0 :: signed
    if not r1304 goto L1925 (error at <module>:241) else goto L441 :: bool
L441:
    r1305 = load_address PyType_Type
    r1306 = 'transactionHash'
    r1307 = PyDict_SetItem(r1270, r1306, r1305)
    r1308 = r1307 >= 0 :: signed
    if not r1308 goto L1925 (error at <module>:242) else goto L442 :: bool
L442:
    r1309 = load_address PyLong_Type
    r1310 = 'transactionIndex'
    r1311 = PyDict_SetItem(r1270, r1310, r1309)
    r1312 = r1311 >= 0 :: signed
    if not r1312 goto L1925 (error at <module>:243) else goto L443 :: bool
L443:
    r1313 = 'LogReceipt'
    r1314 = '__annotations__'
    r1315 = CPyDict_SetItem(r1268, r1314, r1270)
    dec_ref r1270
    r1316 = r1315 >= 0 :: signed
    if not r1316 goto L1924 (error at <module>:234) else goto L444 :: bool
L444:
    r1317 = 'mypyc filler docstring'
    r1318 = '__doc__'
    r1319 = CPyDict_SetItem(r1268, r1318, r1317)
    r1320 = r1319 >= 0 :: signed
    if not r1320 goto L1924 (error at <module>:234) else goto L445 :: bool
L445:
    r1321 = 'faster_web3.types'
    r1322 = '__module__'
    r1323 = CPyDict_SetItem(r1268, r1322, r1321)
    r1324 = r1323 >= 0 :: signed
    if not r1324 goto L1924 (error at <module>:234) else goto L446 :: bool
L446:
    r1325 = [r1313, r1248, r1268]
    r1326 = load_address r1325
    r1327 = PyObject_Vectorcall(r1258, r1326, 3, 0)
    dec_ref r1258
    if is_error(r1327) goto L1926 (error at <module>:234) else goto L447
L447:
    dec_ref r1248
    dec_ref r1268
    faster_web3.types.LogReceipt = r1327 :: type
    r1328 = faster_web3.types.globals :: static
    r1329 = 'LogReceipt'
    r1330 = PyDict_SetItem(r1328, r1329, r1327)
    dec_ref r1327
    r1331 = r1330 >= 0 :: signed
    if not r1331 goto L1811 (error at <module>:234) else goto L448 :: bool
L448:
    r1332 = faster_web3.types.LogReceipt :: type
    r1333 = typing :: module
    r1334 = load_address _Py_NoneStruct
    r1335 = r1333 != r1334
    if r1335 goto L451 else goto L449 :: bool
L449:
    r1336 = 'typing'
    r1337 = PyImport_Import(r1336)
    if is_error(r1337) goto L1811 (error at <module>:246) else goto L450
L450:
    typing = r1337 :: module
    dec_ref r1337
L451:
    r1338 = PyImport_GetModuleDict()
    r1339 = 'typing'
    r1340 = CPyDict_GetItem(r1338, r1339)
    if is_error(r1340) goto L1811 (error at <module>:246) else goto L452
L452:
    r1341 = '_TypedDict'
    r1342 = CPyObject_GetAttr(r1340, r1341)
    dec_ref r1340
    if is_error(r1342) goto L1811 (error at <module>:246) else goto L453
L453:
    r1343 = PyTuple_Pack(1, r1342)
    dec_ref r1342
    if is_error(r1343) goto L1811 (error at <module>:246) else goto L454
L454:
    r1344 = typing :: module
    r1345 = load_address _Py_NoneStruct
    r1346 = r1344 != r1345
    if r1346 goto L457 else goto L455 :: bool
L455:
    r1347 = 'typing'
    r1348 = PyImport_Import(r1347)
    if is_error(r1348) goto L1927 (error at <module>:246) else goto L456
L456:
    typing = r1348 :: module
    dec_ref r1348
L457:
    r1349 = PyImport_GetModuleDict()
    r1350 = 'typing'
    r1351 = CPyDict_GetItem(r1349, r1350)
    if is_error(r1351) goto L1927 (error at <module>:246) else goto L458
L458:
    r1352 = '_TypedDictMeta'
    r1353 = CPyObject_GetAttr(r1351, r1352)
    dec_ref r1351
    if is_error(r1353) goto L1927 (error at <module>:246) else goto L459
L459:
    r1354 = '__prepare__'
    r1355 = PyObject_HasAttr(r1353, r1354)
    if r1355 goto L460 else goto L464 :: bool
L460:
    r1356 = 'SubscriptionResponse'
    r1357 = '__prepare__'
    r1358 = CPyObject_GetAttr(r1353, r1357)
    if is_error(r1358) goto L1928 (error at <module>:246) else goto L461
L461:
    r1359 = [r1356, r1343]
    r1360 = load_address r1359
    r1361 = PyObject_Vectorcall(r1358, r1360, 2, 0)
    dec_ref r1358
    if is_error(r1361) goto L1928 (error at <module>:246) else goto L462
L462:
    r1362 = cast(dict, r1361)
    if is_error(r1362) goto L1928 (error at <module>:246) else goto L463
L463:
    r1363 = r1362
    goto L466
L464:
    r1364 = PyDict_New()
    if is_error(r1364) goto L1928 (error at <module>:246) else goto L465
L465:
    r1363 = r1364
L466:
    r1365 = PyDict_New()
    if is_error(r1365) goto L1929 (error at <module>:246) else goto L467
L467:
    r1366 = load_address PyType_Type
    r1367 = 'subscription'
    r1368 = PyDict_SetItem(r1365, r1367, r1366)
    r1369 = r1368 >= 0 :: signed
    if not r1369 goto L1930 (error at <module>:247) else goto L468 :: bool
L468:
    r1370 = 'SubscriptionResponse'
    r1371 = '__annotations__'
    r1372 = CPyDict_SetItem(r1363, r1371, r1365)
    dec_ref r1365
    r1373 = r1372 >= 0 :: signed
    if not r1373 goto L1929 (error at <module>:246) else goto L469 :: bool
L469:
    r1374 = 'mypyc filler docstring'
    r1375 = '__doc__'
    r1376 = CPyDict_SetItem(r1363, r1375, r1374)
    r1377 = r1376 >= 0 :: signed
    if not r1377 goto L1929 (error at <module>:246) else goto L470 :: bool
L470:
    r1378 = 'faster_web3.types'
    r1379 = '__module__'
    r1380 = CPyDict_SetItem(r1363, r1379, r1378)
    r1381 = r1380 >= 0 :: signed
    if not r1381 goto L1929 (error at <module>:246) else goto L471 :: bool
L471:
    r1382 = [r1370, r1343, r1363]
    r1383 = load_address r1382
    r1384 = PyObject_Vectorcall(r1353, r1383, 3, 0)
    dec_ref r1353
    if is_error(r1384) goto L1931 (error at <module>:246) else goto L472
L472:
    dec_ref r1343
    dec_ref r1363
    faster_web3.types.SubscriptionResponse = r1384 :: type
    r1385 = faster_web3.types.globals :: static
    r1386 = 'SubscriptionResponse'
    r1387 = PyDict_SetItem(r1385, r1386, r1384)
    dec_ref r1384
    r1388 = r1387 >= 0 :: signed
    if not r1388 goto L1811 (error at <module>:246) else goto L473 :: bool
L473:
    r1389 = faster_web3.types.SubscriptionResponse :: type
    r1390 = typing :: module
    r1391 = load_address _Py_NoneStruct
    r1392 = r1390 != r1391
    if r1392 goto L476 else goto L474 :: bool
L474:
    r1393 = 'typing'
    r1394 = PyImport_Import(r1393)
    if is_error(r1394) goto L1811 (error at <module>:250) else goto L475
L475:
    typing = r1394 :: module
    dec_ref r1394
L476:
    r1395 = PyImport_GetModuleDict()
    r1396 = 'typing'
    r1397 = CPyDict_GetItem(r1395, r1396)
    if is_error(r1397) goto L1811 (error at <module>:250) else goto L477
L477:
    r1398 = '_TypedDict'
    r1399 = CPyObject_GetAttr(r1397, r1398)
    dec_ref r1397
    if is_error(r1399) goto L1811 (error at <module>:250) else goto L478
L478:
    r1400 = PyTuple_Pack(1, r1399)
    dec_ref r1399
    if is_error(r1400) goto L1811 (error at <module>:250) else goto L479
L479:
    r1401 = typing :: module
    r1402 = load_address _Py_NoneStruct
    r1403 = r1401 != r1402
    if r1403 goto L482 else goto L480 :: bool
L480:
    r1404 = 'typing'
    r1405 = PyImport_Import(r1404)
    if is_error(r1405) goto L1932 (error at <module>:250) else goto L481
L481:
    typing = r1405 :: module
    dec_ref r1405
L482:
    r1406 = PyImport_GetModuleDict()
    r1407 = 'typing'
    r1408 = CPyDict_GetItem(r1406, r1407)
    if is_error(r1408) goto L1932 (error at <module>:250) else goto L483
L483:
    r1409 = '_TypedDictMeta'
    r1410 = CPyObject_GetAttr(r1408, r1409)
    dec_ref r1408
    if is_error(r1410) goto L1932 (error at <module>:250) else goto L484
L484:
    r1411 = '__prepare__'
    r1412 = PyObject_HasAttr(r1410, r1411)
    if r1412 goto L485 else goto L489 :: bool
L485:
    r1413 = 'BlockTypeSubscriptionResponse'
    r1414 = '__prepare__'
    r1415 = CPyObject_GetAttr(r1410, r1414)
    if is_error(r1415) goto L1933 (error at <module>:250) else goto L486
L486:
    r1416 = [r1413, r1400]
    r1417 = load_address r1416
    r1418 = PyObject_Vectorcall(r1415, r1417, 2, 0)
    dec_ref r1415
    if is_error(r1418) goto L1933 (error at <module>:250) else goto L487
L487:
    r1419 = cast(dict, r1418)
    if is_error(r1419) goto L1933 (error at <module>:250) else goto L488
L488:
    r1420 = r1419
    goto L491
L489:
    r1421 = PyDict_New()
    if is_error(r1421) goto L1933 (error at <module>:250) else goto L490
L490:
    r1420 = r1421
L491:
    r1422 = PyDict_New()
    if is_error(r1422) goto L1934 (error at <module>:250) else goto L492
L492:
    r1423 = load_address PyType_Type
    r1424 = 'result'
    r1425 = PyDict_SetItem(r1422, r1424, r1423)
    r1426 = r1425 >= 0 :: signed
    if not r1426 goto L1935 (error at <module>:251) else goto L493 :: bool
L493:
    r1427 = 'BlockTypeSubscriptionResponse'
    r1428 = '__annotations__'
    r1429 = CPyDict_SetItem(r1420, r1428, r1422)
    dec_ref r1422
    r1430 = r1429 >= 0 :: signed
    if not r1430 goto L1934 (error at <module>:250) else goto L494 :: bool
L494:
    r1431 = 'mypyc filler docstring'
    r1432 = '__doc__'
    r1433 = CPyDict_SetItem(r1420, r1432, r1431)
    r1434 = r1433 >= 0 :: signed
    if not r1434 goto L1934 (error at <module>:250) else goto L495 :: bool
L495:
    r1435 = 'faster_web3.types'
    r1436 = '__module__'
    r1437 = CPyDict_SetItem(r1420, r1436, r1435)
    r1438 = r1437 >= 0 :: signed
    if not r1438 goto L1934 (error at <module>:250) else goto L496 :: bool
L496:
    r1439 = [r1427, r1400, r1420]
    r1440 = load_address r1439
    r1441 = PyObject_Vectorcall(r1410, r1440, 3, 0)
    dec_ref r1410
    if is_error(r1441) goto L1936 (error at <module>:250) else goto L497
L497:
    dec_ref r1400
    dec_ref r1420
    faster_web3.types.BlockTypeSubscriptionResponse = r1441 :: type
    r1442 = faster_web3.types.globals :: static
    r1443 = 'BlockTypeSubscriptionResponse'
    r1444 = PyDict_SetItem(r1442, r1443, r1441)
    dec_ref r1441
    r1445 = r1444 >= 0 :: signed
    if not r1445 goto L1811 (error at <module>:250) else goto L498 :: bool
L498:
    r1446 = faster_web3.types.BlockTypeSubscriptionResponse :: type
    r1447 = typing :: module
    r1448 = load_address _Py_NoneStruct
    r1449 = r1447 != r1448
    if r1449 goto L501 else goto L499 :: bool
L499:
    r1450 = 'typing'
    r1451 = PyImport_Import(r1450)
    if is_error(r1451) goto L1811 (error at <module>:254) else goto L500
L500:
    typing = r1451 :: module
    dec_ref r1451
L501:
    r1452 = PyImport_GetModuleDict()
    r1453 = 'typing'
    r1454 = CPyDict_GetItem(r1452, r1453)
    if is_error(r1454) goto L1811 (error at <module>:254) else goto L502
L502:
    r1455 = '_TypedDict'
    r1456 = CPyObject_GetAttr(r1454, r1455)
    dec_ref r1454
    if is_error(r1456) goto L1811 (error at <module>:254) else goto L503
L503:
    r1457 = PyTuple_Pack(1, r1456)
    dec_ref r1456
    if is_error(r1457) goto L1811 (error at <module>:254) else goto L504
L504:
    r1458 = typing :: module
    r1459 = load_address _Py_NoneStruct
    r1460 = r1458 != r1459
    if r1460 goto L507 else goto L505 :: bool
L505:
    r1461 = 'typing'
    r1462 = PyImport_Import(r1461)
    if is_error(r1462) goto L1937 (error at <module>:254) else goto L506
L506:
    typing = r1462 :: module
    dec_ref r1462
L507:
    r1463 = PyImport_GetModuleDict()
    r1464 = 'typing'
    r1465 = CPyDict_GetItem(r1463, r1464)
    if is_error(r1465) goto L1937 (error at <module>:254) else goto L508
L508:
    r1466 = '_TypedDictMeta'
    r1467 = CPyObject_GetAttr(r1465, r1466)
    dec_ref r1465
    if is_error(r1467) goto L1937 (error at <module>:254) else goto L509
L509:
    r1468 = '__prepare__'
    r1469 = PyObject_HasAttr(r1467, r1468)
    if r1469 goto L510 else goto L514 :: bool
L510:
    r1470 = 'TransactionTypeSubscriptionResponse'
    r1471 = '__prepare__'
    r1472 = CPyObject_GetAttr(r1467, r1471)
    if is_error(r1472) goto L1938 (error at <module>:254) else goto L511
L511:
    r1473 = [r1470, r1457]
    r1474 = load_address r1473
    r1475 = PyObject_Vectorcall(r1472, r1474, 2, 0)
    dec_ref r1472
    if is_error(r1475) goto L1938 (error at <module>:254) else goto L512
L512:
    r1476 = cast(dict, r1475)
    if is_error(r1476) goto L1938 (error at <module>:254) else goto L513
L513:
    r1477 = r1476
    goto L516
L514:
    r1478 = PyDict_New()
    if is_error(r1478) goto L1938 (error at <module>:254) else goto L515
L515:
    r1477 = r1478
L516:
    r1479 = PyDict_New()
    if is_error(r1479) goto L1939 (error at <module>:254) else goto L517
L517:
    r1480 = load_address PyType_Type
    r1481 = 'result'
    r1482 = PyDict_SetItem(r1479, r1481, r1480)
    r1483 = r1482 >= 0 :: signed
    if not r1483 goto L1940 (error at <module>:255) else goto L518 :: bool
L518:
    r1484 = 'TransactionTypeSubscriptionResponse'
    r1485 = '__annotations__'
    r1486 = CPyDict_SetItem(r1477, r1485, r1479)
    dec_ref r1479
    r1487 = r1486 >= 0 :: signed
    if not r1487 goto L1939 (error at <module>:254) else goto L519 :: bool
L519:
    r1488 = 'mypyc filler docstring'
    r1489 = '__doc__'
    r1490 = CPyDict_SetItem(r1477, r1489, r1488)
    r1491 = r1490 >= 0 :: signed
    if not r1491 goto L1939 (error at <module>:254) else goto L520 :: bool
L520:
    r1492 = 'faster_web3.types'
    r1493 = '__module__'
    r1494 = CPyDict_SetItem(r1477, r1493, r1492)
    r1495 = r1494 >= 0 :: signed
    if not r1495 goto L1939 (error at <module>:254) else goto L521 :: bool
L521:
    r1496 = [r1484, r1457, r1477]
    r1497 = load_address r1496
    r1498 = PyObject_Vectorcall(r1467, r1497, 3, 0)
    dec_ref r1467
    if is_error(r1498) goto L1941 (error at <module>:254) else goto L522
L522:
    dec_ref r1457
    dec_ref r1477
    faster_web3.types.TransactionTypeSubscriptionResponse = r1498 :: type
    r1499 = faster_web3.types.globals :: static
    r1500 = 'TransactionTypeSubscriptionResponse'
    r1501 = PyDict_SetItem(r1499, r1500, r1498)
    dec_ref r1498
    r1502 = r1501 >= 0 :: signed
    if not r1502 goto L1811 (error at <module>:254) else goto L523 :: bool
L523:
    r1503 = faster_web3.types.TransactionTypeSubscriptionResponse :: type
    r1504 = typing :: module
    r1505 = load_address _Py_NoneStruct
    r1506 = r1504 != r1505
    if r1506 goto L526 else goto L524 :: bool
L524:
    r1507 = 'typing'
    r1508 = PyImport_Import(r1507)
    if is_error(r1508) goto L1811 (error at <module>:258) else goto L525
L525:
    typing = r1508 :: module
    dec_ref r1508
L526:
    r1509 = PyImport_GetModuleDict()
    r1510 = 'typing'
    r1511 = CPyDict_GetItem(r1509, r1510)
    if is_error(r1511) goto L1811 (error at <module>:258) else goto L527
L527:
    r1512 = '_TypedDict'
    r1513 = CPyObject_GetAttr(r1511, r1512)
    dec_ref r1511
    if is_error(r1513) goto L1811 (error at <module>:258) else goto L528
L528:
    r1514 = PyTuple_Pack(1, r1513)
    dec_ref r1513
    if is_error(r1514) goto L1811 (error at <module>:258) else goto L529
L529:
    r1515 = typing :: module
    r1516 = load_address _Py_NoneStruct
    r1517 = r1515 != r1516
    if r1517 goto L532 else goto L530 :: bool
L530:
    r1518 = 'typing'
    r1519 = PyImport_Import(r1518)
    if is_error(r1519) goto L1942 (error at <module>:258) else goto L531
L531:
    typing = r1519 :: module
    dec_ref r1519
L532:
    r1520 = PyImport_GetModuleDict()
    r1521 = 'typing'
    r1522 = CPyDict_GetItem(r1520, r1521)
    if is_error(r1522) goto L1942 (error at <module>:258) else goto L533
L533:
    r1523 = '_TypedDictMeta'
    r1524 = CPyObject_GetAttr(r1522, r1523)
    dec_ref r1522
    if is_error(r1524) goto L1942 (error at <module>:258) else goto L534
L534:
    r1525 = '__prepare__'
    r1526 = PyObject_HasAttr(r1524, r1525)
    if r1526 goto L535 else goto L539 :: bool
L535:
    r1527 = 'LogsSubscriptionResponse'
    r1528 = '__prepare__'
    r1529 = CPyObject_GetAttr(r1524, r1528)
    if is_error(r1529) goto L1943 (error at <module>:258) else goto L536
L536:
    r1530 = [r1527, r1514]
    r1531 = load_address r1530
    r1532 = PyObject_Vectorcall(r1529, r1531, 2, 0)
    dec_ref r1529
    if is_error(r1532) goto L1943 (error at <module>:258) else goto L537
L537:
    r1533 = cast(dict, r1532)
    if is_error(r1533) goto L1943 (error at <module>:258) else goto L538
L538:
    r1534 = r1533
    goto L541
L539:
    r1535 = PyDict_New()
    if is_error(r1535) goto L1943 (error at <module>:258) else goto L540
L540:
    r1534 = r1535
L541:
    r1536 = PyDict_New()
    if is_error(r1536) goto L1944 (error at <module>:258) else goto L542
L542:
    r1537 = load_address PyType_Type
    r1538 = 'result'
    r1539 = PyDict_SetItem(r1536, r1538, r1537)
    r1540 = r1539 >= 0 :: signed
    if not r1540 goto L1945 (error at <module>:259) else goto L543 :: bool
L543:
    r1541 = 'LogsSubscriptionResponse'
    r1542 = '__annotations__'
    r1543 = CPyDict_SetItem(r1534, r1542, r1536)
    dec_ref r1536
    r1544 = r1543 >= 0 :: signed
    if not r1544 goto L1944 (error at <module>:258) else goto L544 :: bool
L544:
    r1545 = 'mypyc filler docstring'
    r1546 = '__doc__'
    r1547 = CPyDict_SetItem(r1534, r1546, r1545)
    r1548 = r1547 >= 0 :: signed
    if not r1548 goto L1944 (error at <module>:258) else goto L545 :: bool
L545:
    r1549 = 'faster_web3.types'
    r1550 = '__module__'
    r1551 = CPyDict_SetItem(r1534, r1550, r1549)
    r1552 = r1551 >= 0 :: signed
    if not r1552 goto L1944 (error at <module>:258) else goto L546 :: bool
L546:
    r1553 = [r1541, r1514, r1534]
    r1554 = load_address r1553
    r1555 = PyObject_Vectorcall(r1524, r1554, 3, 0)
    dec_ref r1524
    if is_error(r1555) goto L1946 (error at <module>:258) else goto L547
L547:
    dec_ref r1514
    dec_ref r1534
    faster_web3.types.LogsSubscriptionResponse = r1555 :: type
    r1556 = faster_web3.types.globals :: static
    r1557 = 'LogsSubscriptionResponse'
    r1558 = PyDict_SetItem(r1556, r1557, r1555)
    dec_ref r1555
    r1559 = r1558 >= 0 :: signed
    if not r1559 goto L1811 (error at <module>:258) else goto L548 :: bool
L548:
    r1560 = faster_web3.types.LogsSubscriptionResponse :: type
    r1561 = typing :: module
    r1562 = load_address _Py_NoneStruct
    r1563 = r1561 != r1562
    if r1563 goto L551 else goto L549 :: bool
L549:
    r1564 = 'typing'
    r1565 = PyImport_Import(r1564)
    if is_error(r1565) goto L1811 (error at <module>:262) else goto L550
L550:
    typing = r1565 :: module
    dec_ref r1565
L551:
    r1566 = PyImport_GetModuleDict()
    r1567 = 'typing'
    r1568 = CPyDict_GetItem(r1566, r1567)
    if is_error(r1568) goto L1811 (error at <module>:262) else goto L552
L552:
    r1569 = '_TypedDict'
    r1570 = CPyObject_GetAttr(r1568, r1569)
    dec_ref r1568
    if is_error(r1570) goto L1811 (error at <module>:262) else goto L553
L553:
    r1571 = PyTuple_Pack(1, r1570)
    dec_ref r1570
    if is_error(r1571) goto L1811 (error at <module>:262) else goto L554
L554:
    r1572 = typing :: module
    r1573 = load_address _Py_NoneStruct
    r1574 = r1572 != r1573
    if r1574 goto L557 else goto L555 :: bool
L555:
    r1575 = 'typing'
    r1576 = PyImport_Import(r1575)
    if is_error(r1576) goto L1947 (error at <module>:262) else goto L556
L556:
    typing = r1576 :: module
    dec_ref r1576
L557:
    r1577 = PyImport_GetModuleDict()
    r1578 = 'typing'
    r1579 = CPyDict_GetItem(r1577, r1578)
    if is_error(r1579) goto L1947 (error at <module>:262) else goto L558
L558:
    r1580 = '_TypedDictMeta'
    r1581 = CPyObject_GetAttr(r1579, r1580)
    dec_ref r1579
    if is_error(r1581) goto L1947 (error at <module>:262) else goto L559
L559:
    r1582 = '__prepare__'
    r1583 = PyObject_HasAttr(r1581, r1582)
    if r1583 goto L560 else goto L564 :: bool
L560:
    r1584 = 'SyncProgress'
    r1585 = '__prepare__'
    r1586 = CPyObject_GetAttr(r1581, r1585)
    if is_error(r1586) goto L1948 (error at <module>:262) else goto L561
L561:
    r1587 = [r1584, r1571]
    r1588 = load_address r1587
    r1589 = PyObject_Vectorcall(r1586, r1588, 2, 0)
    dec_ref r1586
    if is_error(r1589) goto L1948 (error at <module>:262) else goto L562
L562:
    r1590 = cast(dict, r1589)
    if is_error(r1590) goto L1948 (error at <module>:262) else goto L563
L563:
    r1591 = r1590
    goto L566
L564:
    r1592 = PyDict_New()
    if is_error(r1592) goto L1948 (error at <module>:262) else goto L565
L565:
    r1591 = r1592
L566:
    r1593 = PyDict_New()
    if is_error(r1593) goto L1949 (error at <module>:262) else goto L567
L567:
    r1594 = load_address PyBool_Type
    r1595 = 'isSyncing'
    r1596 = PyDict_SetItem(r1593, r1595, r1594)
    r1597 = r1596 >= 0 :: signed
    if not r1597 goto L1950 (error at <module>:263) else goto L568 :: bool
L568:
    r1598 = load_address PyLong_Type
    r1599 = 'startingBlock'
    r1600 = PyDict_SetItem(r1593, r1599, r1598)
    r1601 = r1600 >= 0 :: signed
    if not r1601 goto L1950 (error at <module>:264) else goto L569 :: bool
L569:
    r1602 = load_address PyLong_Type
    r1603 = 'currentBlock'
    r1604 = PyDict_SetItem(r1593, r1603, r1602)
    r1605 = r1604 >= 0 :: signed
    if not r1605 goto L1950 (error at <module>:265) else goto L570 :: bool
L570:
    r1606 = load_address PyLong_Type
    r1607 = 'highestBlock'
    r1608 = PyDict_SetItem(r1593, r1607, r1606)
    r1609 = r1608 >= 0 :: signed
    if not r1609 goto L1950 (error at <module>:266) else goto L571 :: bool
L571:
    r1610 = 'SyncProgress'
    r1611 = '__annotations__'
    r1612 = CPyDict_SetItem(r1591, r1611, r1593)
    dec_ref r1593
    r1613 = r1612 >= 0 :: signed
    if not r1613 goto L1949 (error at <module>:262) else goto L572 :: bool
L572:
    r1614 = 'mypyc filler docstring'
    r1615 = '__doc__'
    r1616 = CPyDict_SetItem(r1591, r1615, r1614)
    r1617 = r1616 >= 0 :: signed
    if not r1617 goto L1949 (error at <module>:262) else goto L573 :: bool
L573:
    r1618 = 'faster_web3.types'
    r1619 = '__module__'
    r1620 = CPyDict_SetItem(r1591, r1619, r1618)
    r1621 = r1620 >= 0 :: signed
    if not r1621 goto L1949 (error at <module>:262) else goto L574 :: bool
L574:
    r1622 = [r1610, r1571, r1591]
    r1623 = load_address r1622
    r1624 = PyObject_Vectorcall(r1581, r1623, 3, 0)
    dec_ref r1581
    if is_error(r1624) goto L1951 (error at <module>:262) else goto L575
L575:
    dec_ref r1571
    dec_ref r1591
    faster_web3.types.SyncProgress = r1624 :: type
    r1625 = faster_web3.types.globals :: static
    r1626 = 'SyncProgress'
    r1627 = PyDict_SetItem(r1625, r1626, r1624)
    dec_ref r1624
    r1628 = r1627 >= 0 :: signed
    if not r1628 goto L1811 (error at <module>:262) else goto L576 :: bool
L576:
    r1629 = faster_web3.types.SyncProgress :: type
    r1630 = typing :: module
    r1631 = load_address _Py_NoneStruct
    r1632 = r1630 != r1631
    if r1632 goto L579 else goto L577 :: bool
L577:
    r1633 = 'typing'
    r1634 = PyImport_Import(r1633)
    if is_error(r1634) goto L1811 (error at <module>:269) else goto L578
L578:
    typing = r1634 :: module
    dec_ref r1634
L579:
    r1635 = PyImport_GetModuleDict()
    r1636 = 'typing'
    r1637 = CPyDict_GetItem(r1635, r1636)
    if is_error(r1637) goto L1811 (error at <module>:269) else goto L580
L580:
    r1638 = '_TypedDict'
    r1639 = CPyObject_GetAttr(r1637, r1638)
    dec_ref r1637
    if is_error(r1639) goto L1811 (error at <module>:269) else goto L581
L581:
    r1640 = PyTuple_Pack(1, r1639)
    dec_ref r1639
    if is_error(r1640) goto L1811 (error at <module>:269) else goto L582
L582:
    r1641 = typing :: module
    r1642 = load_address _Py_NoneStruct
    r1643 = r1641 != r1642
    if r1643 goto L585 else goto L583 :: bool
L583:
    r1644 = 'typing'
    r1645 = PyImport_Import(r1644)
    if is_error(r1645) goto L1952 (error at <module>:269) else goto L584
L584:
    typing = r1645 :: module
    dec_ref r1645
L585:
    r1646 = PyImport_GetModuleDict()
    r1647 = 'typing'
    r1648 = CPyDict_GetItem(r1646, r1647)
    if is_error(r1648) goto L1952 (error at <module>:269) else goto L586
L586:
    r1649 = '_TypedDictMeta'
    r1650 = CPyObject_GetAttr(r1648, r1649)
    dec_ref r1648
    if is_error(r1650) goto L1952 (error at <module>:269) else goto L587
L587:
    r1651 = '__prepare__'
    r1652 = PyObject_HasAttr(r1650, r1651)
    if r1652 goto L588 else goto L592 :: bool
L588:
    r1653 = 'SyncingSubscriptionResponse'
    r1654 = '__prepare__'
    r1655 = CPyObject_GetAttr(r1650, r1654)
    if is_error(r1655) goto L1953 (error at <module>:269) else goto L589
L589:
    r1656 = [r1653, r1640]
    r1657 = load_address r1656
    r1658 = PyObject_Vectorcall(r1655, r1657, 2, 0)
    dec_ref r1655
    if is_error(r1658) goto L1953 (error at <module>:269) else goto L590
L590:
    r1659 = cast(dict, r1658)
    if is_error(r1659) goto L1953 (error at <module>:269) else goto L591
L591:
    r1660 = r1659
    goto L594
L592:
    r1661 = PyDict_New()
    if is_error(r1661) goto L1953 (error at <module>:269) else goto L593
L593:
    r1660 = r1661
L594:
    r1662 = PyDict_New()
    if is_error(r1662) goto L1954 (error at <module>:269) else goto L595
L595:
    r1663 = load_address PyType_Type
    r1664 = 'result'
    r1665 = PyDict_SetItem(r1662, r1664, r1663)
    r1666 = r1665 >= 0 :: signed
    if not r1666 goto L1955 (error at <module>:270) else goto L596 :: bool
L596:
    r1667 = 'SyncingSubscriptionResponse'
    r1668 = '__annotations__'
    r1669 = CPyDict_SetItem(r1660, r1668, r1662)
    dec_ref r1662
    r1670 = r1669 >= 0 :: signed
    if not r1670 goto L1954 (error at <module>:269) else goto L597 :: bool
L597:
    r1671 = 'mypyc filler docstring'
    r1672 = '__doc__'
    r1673 = CPyDict_SetItem(r1660, r1672, r1671)
    r1674 = r1673 >= 0 :: signed
    if not r1674 goto L1954 (error at <module>:269) else goto L598 :: bool
L598:
    r1675 = 'faster_web3.types'
    r1676 = '__module__'
    r1677 = CPyDict_SetItem(r1660, r1676, r1675)
    r1678 = r1677 >= 0 :: signed
    if not r1678 goto L1954 (error at <module>:269) else goto L599 :: bool
L599:
    r1679 = [r1667, r1640, r1660]
    r1680 = load_address r1679
    r1681 = PyObject_Vectorcall(r1650, r1680, 3, 0)
    dec_ref r1650
    if is_error(r1681) goto L1956 (error at <module>:269) else goto L600
L600:
    dec_ref r1640
    dec_ref r1660
    faster_web3.types.SyncingSubscriptionResponse = r1681 :: type
    r1682 = faster_web3.types.globals :: static
    r1683 = 'SyncingSubscriptionResponse'
    r1684 = PyDict_SetItem(r1682, r1683, r1681)
    dec_ref r1681
    r1685 = r1684 >= 0 :: signed
    if not r1685 goto L1811 (error at <module>:269) else goto L601 :: bool
L601:
    r1686 = faster_web3.types.SyncingSubscriptionResponse :: type
    r1687 = typing :: module
    r1688 = load_address _Py_NoneStruct
    r1689 = r1687 != r1688
    if r1689 goto L604 else goto L602 :: bool
L602:
    r1690 = 'typing'
    r1691 = PyImport_Import(r1690)
    if is_error(r1691) goto L1811 (error at <module>:273) else goto L603
L603:
    typing = r1691 :: module
    dec_ref r1691
L604:
    r1692 = PyImport_GetModuleDict()
    r1693 = 'typing'
    r1694 = CPyDict_GetItem(r1692, r1693)
    if is_error(r1694) goto L1811 (error at <module>:273) else goto L605
L605:
    r1695 = '_TypedDict'
    r1696 = CPyObject_GetAttr(r1694, r1695)
    dec_ref r1694
    if is_error(r1696) goto L1811 (error at <module>:273) else goto L606
L606:
    r1697 = PyTuple_Pack(1, r1696)
    dec_ref r1696
    if is_error(r1697) goto L1811 (error at <module>:273) else goto L607
L607:
    r1698 = typing :: module
    r1699 = load_address _Py_NoneStruct
    r1700 = r1698 != r1699
    if r1700 goto L610 else goto L608 :: bool
L608:
    r1701 = 'typing'
    r1702 = PyImport_Import(r1701)
    if is_error(r1702) goto L1957 (error at <module>:273) else goto L609
L609:
    typing = r1702 :: module
    dec_ref r1702
L610:
    r1703 = PyImport_GetModuleDict()
    r1704 = 'typing'
    r1705 = CPyDict_GetItem(r1703, r1704)
    if is_error(r1705) goto L1957 (error at <module>:273) else goto L611
L611:
    r1706 = '_TypedDictMeta'
    r1707 = CPyObject_GetAttr(r1705, r1706)
    dec_ref r1705
    if is_error(r1707) goto L1957 (error at <module>:273) else goto L612
L612:
    r1708 = '__prepare__'
    r1709 = PyObject_HasAttr(r1707, r1708)
    if r1709 goto L613 else goto L617 :: bool
L613:
    r1710 = 'GethSyncingStatus'
    r1711 = '__prepare__'
    r1712 = CPyObject_GetAttr(r1707, r1711)
    if is_error(r1712) goto L1958 (error at <module>:273) else goto L614
L614:
    r1713 = [r1710, r1697]
    r1714 = load_address r1713
    r1715 = PyObject_Vectorcall(r1712, r1714, 2, 0)
    dec_ref r1712
    if is_error(r1715) goto L1958 (error at <module>:273) else goto L615
L615:
    r1716 = cast(dict, r1715)
    if is_error(r1716) goto L1958 (error at <module>:273) else goto L616
L616:
    r1717 = r1716
    goto L619
L617:
    r1718 = PyDict_New()
    if is_error(r1718) goto L1958 (error at <module>:273) else goto L618
L618:
    r1717 = r1718
L619:
    r1719 = PyDict_New()
    if is_error(r1719) goto L1959 (error at <module>:273) else goto L620
L620:
    r1720 = load_address PyLong_Type
    r1721 = 'currentBlock'
    r1722 = PyDict_SetItem(r1719, r1721, r1720)
    r1723 = r1722 >= 0 :: signed
    if not r1723 goto L1960 (error at <module>:274) else goto L621 :: bool
L621:
    r1724 = load_address PyLong_Type
    r1725 = 'highestBlock'
    r1726 = PyDict_SetItem(r1719, r1725, r1724)
    r1727 = r1726 >= 0 :: signed
    if not r1727 goto L1960 (error at <module>:275) else goto L622 :: bool
L622:
    r1728 = load_address PyLong_Type
    r1729 = 'knownStates'
    r1730 = PyDict_SetItem(r1719, r1729, r1728)
    r1731 = r1730 >= 0 :: signed
    if not r1731 goto L1960 (error at <module>:276) else goto L623 :: bool
L623:
    r1732 = load_address PyLong_Type
    r1733 = 'pulledStates'
    r1734 = PyDict_SetItem(r1719, r1733, r1732)
    r1735 = r1734 >= 0 :: signed
    if not r1735 goto L1960 (error at <module>:277) else goto L624 :: bool
L624:
    r1736 = load_address PyLong_Type
    r1737 = 'startingBlock'
    r1738 = PyDict_SetItem(r1719, r1737, r1736)
    r1739 = r1738 >= 0 :: signed
    if not r1739 goto L1960 (error at <module>:278) else goto L625 :: bool
L625:
    r1740 = 'GethSyncingStatus'
    r1741 = '__annotations__'
    r1742 = CPyDict_SetItem(r1717, r1741, r1719)
    dec_ref r1719
    r1743 = r1742 >= 0 :: signed
    if not r1743 goto L1959 (error at <module>:273) else goto L626 :: bool
L626:
    r1744 = 'mypyc filler docstring'
    r1745 = '__doc__'
    r1746 = CPyDict_SetItem(r1717, r1745, r1744)
    r1747 = r1746 >= 0 :: signed
    if not r1747 goto L1959 (error at <module>:273) else goto L627 :: bool
L627:
    r1748 = 'faster_web3.types'
    r1749 = '__module__'
    r1750 = CPyDict_SetItem(r1717, r1749, r1748)
    r1751 = r1750 >= 0 :: signed
    if not r1751 goto L1959 (error at <module>:273) else goto L628 :: bool
L628:
    r1752 = [r1740, r1697, r1717]
    r1753 = load_address r1752
    r1754 = PyObject_Vectorcall(r1707, r1753, 3, 0)
    dec_ref r1707
    if is_error(r1754) goto L1961 (error at <module>:273) else goto L629
L629:
    dec_ref r1697
    dec_ref r1717
    faster_web3.types.GethSyncingStatus = r1754 :: type
    r1755 = faster_web3.types.globals :: static
    r1756 = 'GethSyncingStatus'
    r1757 = PyDict_SetItem(r1755, r1756, r1754)
    dec_ref r1754
    r1758 = r1757 >= 0 :: signed
    if not r1758 goto L1811 (error at <module>:273) else goto L630 :: bool
L630:
    r1759 = faster_web3.types.GethSyncingStatus :: type
    r1760 = typing :: module
    r1761 = load_address _Py_NoneStruct
    r1762 = r1760 != r1761
    if r1762 goto L633 else goto L631 :: bool
L631:
    r1763 = 'typing'
    r1764 = PyImport_Import(r1763)
    if is_error(r1764) goto L1811 (error at <module>:281) else goto L632
L632:
    typing = r1764 :: module
    dec_ref r1764
L633:
    r1765 = PyImport_GetModuleDict()
    r1766 = 'typing'
    r1767 = CPyDict_GetItem(r1765, r1766)
    if is_error(r1767) goto L1811 (error at <module>:281) else goto L634
L634:
    r1768 = '_TypedDict'
    r1769 = CPyObject_GetAttr(r1767, r1768)
    dec_ref r1767
    if is_error(r1769) goto L1811 (error at <module>:281) else goto L635
L635:
    r1770 = PyTuple_Pack(1, r1769)
    dec_ref r1769
    if is_error(r1770) goto L1811 (error at <module>:281) else goto L636
L636:
    r1771 = typing :: module
    r1772 = load_address _Py_NoneStruct
    r1773 = r1771 != r1772
    if r1773 goto L639 else goto L637 :: bool
L637:
    r1774 = 'typing'
    r1775 = PyImport_Import(r1774)
    if is_error(r1775) goto L1962 (error at <module>:281) else goto L638
L638:
    typing = r1775 :: module
    dec_ref r1775
L639:
    r1776 = PyImport_GetModuleDict()
    r1777 = 'typing'
    r1778 = CPyDict_GetItem(r1776, r1777)
    if is_error(r1778) goto L1962 (error at <module>:281) else goto L640
L640:
    r1779 = '_TypedDictMeta'
    r1780 = CPyObject_GetAttr(r1778, r1779)
    dec_ref r1778
    if is_error(r1780) goto L1962 (error at <module>:281) else goto L641
L641:
    r1781 = '__prepare__'
    r1782 = PyObject_HasAttr(r1780, r1781)
    if r1782 goto L642 else goto L646 :: bool
L642:
    r1783 = 'GethSyncingSubscriptionResult'
    r1784 = '__prepare__'
    r1785 = CPyObject_GetAttr(r1780, r1784)
    if is_error(r1785) goto L1963 (error at <module>:281) else goto L643
L643:
    r1786 = [r1783, r1770]
    r1787 = load_address r1786
    r1788 = PyObject_Vectorcall(r1785, r1787, 2, 0)
    dec_ref r1785
    if is_error(r1788) goto L1963 (error at <module>:281) else goto L644
L644:
    r1789 = cast(dict, r1788)
    if is_error(r1789) goto L1963 (error at <module>:281) else goto L645
L645:
    r1790 = r1789
    goto L648
L646:
    r1791 = PyDict_New()
    if is_error(r1791) goto L1963 (error at <module>:281) else goto L647
L647:
    r1790 = r1791
L648:
    r1792 = PyDict_New()
    if is_error(r1792) goto L1964 (error at <module>:281) else goto L649
L649:
    r1793 = load_address PyBool_Type
    r1794 = 'syncing'
    r1795 = PyDict_SetItem(r1792, r1794, r1793)
    r1796 = r1795 >= 0 :: signed
    if not r1796 goto L1965 (error at <module>:282) else goto L650 :: bool
L650:
    r1797 = load_address PyType_Type
    r1798 = 'status'
    r1799 = PyDict_SetItem(r1792, r1798, r1797)
    r1800 = r1799 >= 0 :: signed
    if not r1800 goto L1965 (error at <module>:283) else goto L651 :: bool
L651:
    r1801 = 'GethSyncingSubscriptionResult'
    r1802 = '__annotations__'
    r1803 = CPyDict_SetItem(r1790, r1802, r1792)
    dec_ref r1792
    r1804 = r1803 >= 0 :: signed
    if not r1804 goto L1964 (error at <module>:281) else goto L652 :: bool
L652:
    r1805 = 'mypyc filler docstring'
    r1806 = '__doc__'
    r1807 = CPyDict_SetItem(r1790, r1806, r1805)
    r1808 = r1807 >= 0 :: signed
    if not r1808 goto L1964 (error at <module>:281) else goto L653 :: bool
L653:
    r1809 = 'faster_web3.types'
    r1810 = '__module__'
    r1811 = CPyDict_SetItem(r1790, r1810, r1809)
    r1812 = r1811 >= 0 :: signed
    if not r1812 goto L1964 (error at <module>:281) else goto L654 :: bool
L654:
    r1813 = [r1801, r1770, r1790]
    r1814 = load_address r1813
    r1815 = PyObject_Vectorcall(r1780, r1814, 3, 0)
    dec_ref r1780
    if is_error(r1815) goto L1966 (error at <module>:281) else goto L655
L655:
    dec_ref r1770
    dec_ref r1790
    faster_web3.types.GethSyncingSubscriptionResult = r1815 :: type
    r1816 = faster_web3.types.globals :: static
    r1817 = 'GethSyncingSubscriptionResult'
    r1818 = PyDict_SetItem(r1816, r1817, r1815)
    dec_ref r1815
    r1819 = r1818 >= 0 :: signed
    if not r1819 goto L1811 (error at <module>:281) else goto L656 :: bool
L656:
    r1820 = faster_web3.types.GethSyncingSubscriptionResult :: type
    r1821 = typing :: module
    r1822 = load_address _Py_NoneStruct
    r1823 = r1821 != r1822
    if r1823 goto L659 else goto L657 :: bool
L657:
    r1824 = 'typing'
    r1825 = PyImport_Import(r1824)
    if is_error(r1825) goto L1811 (error at <module>:286) else goto L658
L658:
    typing = r1825 :: module
    dec_ref r1825
L659:
    r1826 = PyImport_GetModuleDict()
    r1827 = 'typing'
    r1828 = CPyDict_GetItem(r1826, r1827)
    if is_error(r1828) goto L1811 (error at <module>:286) else goto L660
L660:
    r1829 = '_TypedDict'
    r1830 = CPyObject_GetAttr(r1828, r1829)
    dec_ref r1828
    if is_error(r1830) goto L1811 (error at <module>:286) else goto L661
L661:
    r1831 = PyTuple_Pack(1, r1830)
    dec_ref r1830
    if is_error(r1831) goto L1811 (error at <module>:286) else goto L662
L662:
    r1832 = typing :: module
    r1833 = load_address _Py_NoneStruct
    r1834 = r1832 != r1833
    if r1834 goto L665 else goto L663 :: bool
L663:
    r1835 = 'typing'
    r1836 = PyImport_Import(r1835)
    if is_error(r1836) goto L1967 (error at <module>:286) else goto L664
L664:
    typing = r1836 :: module
    dec_ref r1836
L665:
    r1837 = PyImport_GetModuleDict()
    r1838 = 'typing'
    r1839 = CPyDict_GetItem(r1837, r1838)
    if is_error(r1839) goto L1967 (error at <module>:286) else goto L666
L666:
    r1840 = '_TypedDictMeta'
    r1841 = CPyObject_GetAttr(r1839, r1840)
    dec_ref r1839
    if is_error(r1841) goto L1967 (error at <module>:286) else goto L667
L667:
    r1842 = '__prepare__'
    r1843 = PyObject_HasAttr(r1841, r1842)
    if r1843 goto L668 else goto L672 :: bool
L668:
    r1844 = 'GethSyncingSubscriptionResponse'
    r1845 = '__prepare__'
    r1846 = CPyObject_GetAttr(r1841, r1845)
    if is_error(r1846) goto L1968 (error at <module>:286) else goto L669
L669:
    r1847 = [r1844, r1831]
    r1848 = load_address r1847
    r1849 = PyObject_Vectorcall(r1846, r1848, 2, 0)
    dec_ref r1846
    if is_error(r1849) goto L1968 (error at <module>:286) else goto L670
L670:
    r1850 = cast(dict, r1849)
    if is_error(r1850) goto L1968 (error at <module>:286) else goto L671
L671:
    r1851 = r1850
    goto L674
L672:
    r1852 = PyDict_New()
    if is_error(r1852) goto L1968 (error at <module>:286) else goto L673
L673:
    r1851 = r1852
L674:
    r1853 = PyDict_New()
    if is_error(r1853) goto L1969 (error at <module>:286) else goto L675
L675:
    r1854 = load_address PyType_Type
    r1855 = 'result'
    r1856 = PyDict_SetItem(r1853, r1855, r1854)
    r1857 = r1856 >= 0 :: signed
    if not r1857 goto L1970 (error at <module>:287) else goto L676 :: bool
L676:
    r1858 = 'GethSyncingSubscriptionResponse'
    r1859 = '__annotations__'
    r1860 = CPyDict_SetItem(r1851, r1859, r1853)
    dec_ref r1853
    r1861 = r1860 >= 0 :: signed
    if not r1861 goto L1969 (error at <module>:286) else goto L677 :: bool
L677:
    r1862 = 'mypyc filler docstring'
    r1863 = '__doc__'
    r1864 = CPyDict_SetItem(r1851, r1863, r1862)
    r1865 = r1864 >= 0 :: signed
    if not r1865 goto L1969 (error at <module>:286) else goto L678 :: bool
L678:
    r1866 = 'faster_web3.types'
    r1867 = '__module__'
    r1868 = CPyDict_SetItem(r1851, r1867, r1866)
    r1869 = r1868 >= 0 :: signed
    if not r1869 goto L1969 (error at <module>:286) else goto L679 :: bool
L679:
    r1870 = [r1858, r1831, r1851]
    r1871 = load_address r1870
    r1872 = PyObject_Vectorcall(r1841, r1871, 3, 0)
    dec_ref r1841
    if is_error(r1872) goto L1971 (error at <module>:286) else goto L680
L680:
    dec_ref r1831
    dec_ref r1851
    faster_web3.types.GethSyncingSubscriptionResponse = r1872 :: type
    r1873 = faster_web3.types.globals :: static
    r1874 = 'GethSyncingSubscriptionResponse'
    r1875 = PyDict_SetItem(r1873, r1874, r1872)
    dec_ref r1872
    r1876 = r1875 >= 0 :: signed
    if not r1876 goto L1811 (error at <module>:286) else goto L681 :: bool
L681:
    r1877 = faster_web3.types.GethSyncingSubscriptionResponse :: type
    r1878 = faster_web3.types.globals :: static
    r1879 = 'Union'
    r1880 = CPyDict_GetItem(r1878, r1879)
    if is_error(r1880) goto L1811 (error at <module>:290) else goto L682
L682:
    r1881 = faster_web3.types.globals :: static
    r1882 = 'BlockTypeSubscriptionResponse'
    r1883 = CPyDict_GetItem(r1881, r1882)
    if is_error(r1883) goto L1972 (error at <module>:291) else goto L683
L683:
    r1884 = faster_web3.types.globals :: static
    r1885 = 'TransactionTypeSubscriptionResponse'
    r1886 = CPyDict_GetItem(r1884, r1885)
    if is_error(r1886) goto L1973 (error at <module>:292) else goto L684
L684:
    r1887 = faster_web3.types.globals :: static
    r1888 = 'LogsSubscriptionResponse'
    r1889 = CPyDict_GetItem(r1887, r1888)
    if is_error(r1889) goto L1974 (error at <module>:293) else goto L685
L685:
    r1890 = faster_web3.types.globals :: static
    r1891 = 'SyncingSubscriptionResponse'
    r1892 = CPyDict_GetItem(r1890, r1891)
    if is_error(r1892) goto L1975 (error at <module>:294) else goto L686
L686:
    r1893 = faster_web3.types.globals :: static
    r1894 = 'GethSyncingSubscriptionResponse'
    r1895 = CPyDict_GetItem(r1893, r1894)
    if is_error(r1895) goto L1976 (error at <module>:295) else goto L687
L687:
    r1896 = (r1883, r1886, r1889, r1892, r1895)
    r1897 = box(tuple[object, object, object, object, object], r1896)
    r1898 = PyObject_GetItem(r1880, r1897)
    dec_ref r1880
    dec_ref r1897
    if is_error(r1898) goto L1811 (error at <module>:290) else goto L688
L688:
    r1899 = faster_web3.types.globals :: static
    r1900 = 'EthSubscriptionParams'
    r1901 = CPyDict_SetItem(r1899, r1900, r1898)
    dec_ref r1898
    r1902 = r1901 >= 0 :: signed
    if not r1902 goto L1811 (error at <module>:290) else goto L689 :: bool
L689:
    r1903 = faster_web3.types.globals :: static
    r1904 = 'Optional'
    r1905 = CPyDict_GetItem(r1903, r1904)
    if is_error(r1905) goto L1811 (error at <module>:298) else goto L690
L690:
    r1906 = faster_web3.types.globals :: static
    r1907 = 'Union'
    r1908 = CPyDict_GetItem(r1906, r1907)
    if is_error(r1908) goto L1977 (error at <module>:298) else goto L691
L691:
    r1909 = load_address PyLong_Type
    r1910 = load_address PyUnicode_Type
    inc_ref r1909
    inc_ref r1910
    r1911 = (r1909, r1910)
    r1912 = box(tuple[object, object], r1911)
    r1913 = PyObject_GetItem(r1908, r1912)
    dec_ref r1908
    dec_ref r1912
    if is_error(r1913) goto L1977 (error at <module>:298) else goto L692
L692:
    r1914 = PyObject_GetItem(r1905, r1913)
    dec_ref r1905
    dec_ref r1913
    if is_error(r1914) goto L1811 (error at <module>:298) else goto L693
L693:
    r1915 = faster_web3.types.globals :: static
    r1916 = 'RPCId'
    r1917 = CPyDict_SetItem(r1915, r1916, r1914)
    dec_ref r1914
    r1918 = r1917 >= 0 :: signed
    if not r1918 goto L1811 (error at <module>:298) else goto L694 :: bool
L694:
    r1919 = typing :: module
    r1920 = load_address _Py_NoneStruct
    r1921 = r1919 != r1920
    if r1921 goto L697 else goto L695 :: bool
L695:
    r1922 = 'typing'
    r1923 = PyImport_Import(r1922)
    if is_error(r1923) goto L1811 (error at <module>:301) else goto L696
L696:
    typing = r1923 :: module
    dec_ref r1923
L697:
    r1924 = PyImport_GetModuleDict()
    r1925 = 'typing'
    r1926 = CPyDict_GetItem(r1924, r1925)
    if is_error(r1926) goto L1811 (error at <module>:301) else goto L698
L698:
    r1927 = '_TypedDict'
    r1928 = CPyObject_GetAttr(r1926, r1927)
    dec_ref r1926
    if is_error(r1928) goto L1811 (error at <module>:301) else goto L699
L699:
    r1929 = PyTuple_Pack(1, r1928)
    dec_ref r1928
    if is_error(r1929) goto L1811 (error at <module>:301) else goto L700
L700:
    r1930 = typing :: module
    r1931 = load_address _Py_NoneStruct
    r1932 = r1930 != r1931
    if r1932 goto L703 else goto L701 :: bool
L701:
    r1933 = 'typing'
    r1934 = PyImport_Import(r1933)
    if is_error(r1934) goto L1978 (error at <module>:301) else goto L702
L702:
    typing = r1934 :: module
    dec_ref r1934
L703:
    r1935 = PyImport_GetModuleDict()
    r1936 = 'typing'
    r1937 = CPyDict_GetItem(r1935, r1936)
    if is_error(r1937) goto L1978 (error at <module>:301) else goto L704
L704:
    r1938 = '_TypedDictMeta'
    r1939 = CPyObject_GetAttr(r1937, r1938)
    dec_ref r1937
    if is_error(r1939) goto L1978 (error at <module>:301) else goto L705
L705:
    r1940 = '__prepare__'
    r1941 = PyObject_HasAttr(r1939, r1940)
    if r1941 goto L706 else goto L710 :: bool
L706:
    r1942 = 'RPCRequest'
    r1943 = '__prepare__'
    r1944 = CPyObject_GetAttr(r1939, r1943)
    if is_error(r1944) goto L1979 (error at <module>:301) else goto L707
L707:
    r1945 = [r1942, r1929]
    r1946 = load_address r1945
    r1947 = PyObject_Vectorcall(r1944, r1946, 2, 0)
    dec_ref r1944
    if is_error(r1947) goto L1979 (error at <module>:301) else goto L708
L708:
    r1948 = cast(dict, r1947)
    if is_error(r1948) goto L1979 (error at <module>:301) else goto L709
L709:
    r1949 = r1948
    goto L712
L710:
    r1950 = PyDict_New()
    if is_error(r1950) goto L1979 (error at <module>:301) else goto L711
L711:
    r1949 = r1950
L712:
    r1951 = PyDict_New()
    if is_error(r1951) goto L1980 (error at <module>:301) else goto L713
L713:
    r1952 = load_address PyType_Type
    r1953 = 'id'
    r1954 = PyDict_SetItem(r1951, r1953, r1952)
    r1955 = r1954 >= 0 :: signed
    if not r1955 goto L1981 (error at <module>:302) else goto L714 :: bool
L714:
    r1956 = load_address PyType_Type
    r1957 = 'jsonrpc'
    r1958 = PyDict_SetItem(r1951, r1957, r1956)
    r1959 = r1958 >= 0 :: signed
    if not r1959 goto L1981 (error at <module>:303) else goto L715 :: bool
L715:
    r1960 = faster_web3.types.globals :: static
    r1961 = 'RPCEndpoint'
    r1962 = CPyDict_GetItem(r1960, r1961)
    if is_error(r1962) goto L1981 (error at <module>:304) else goto L716
L716:
    r1963 = 'method'
    r1964 = PyDict_SetItem(r1951, r1963, r1962)
    dec_ref r1962
    r1965 = r1964 >= 0 :: signed
    if not r1965 goto L1981 (error at <module>:304) else goto L717 :: bool
L717:
    r1966 = load_address PyType_Type
    r1967 = 'params'
    r1968 = PyDict_SetItem(r1951, r1967, r1966)
    r1969 = r1968 >= 0 :: signed
    if not r1969 goto L1981 (error at <module>:305) else goto L718 :: bool
L718:
    r1970 = 'RPCRequest'
    r1971 = '__annotations__'
    r1972 = CPyDict_SetItem(r1949, r1971, r1951)
    dec_ref r1951
    r1973 = r1972 >= 0 :: signed
    if not r1973 goto L1980 (error at <module>:301) else goto L719 :: bool
L719:
    r1974 = 'mypyc filler docstring'
    r1975 = '__doc__'
    r1976 = CPyDict_SetItem(r1949, r1975, r1974)
    r1977 = r1976 >= 0 :: signed
    if not r1977 goto L1980 (error at <module>:301) else goto L720 :: bool
L720:
    r1978 = 'faster_web3.types'
    r1979 = '__module__'
    r1980 = CPyDict_SetItem(r1949, r1979, r1978)
    r1981 = r1980 >= 0 :: signed
    if not r1981 goto L1980 (error at <module>:301) else goto L721 :: bool
L721:
    r1982 = [r1970, r1929, r1949]
    r1983 = load_address r1982
    r1984 = PyObject_Vectorcall(r1939, r1983, 3, 0)
    dec_ref r1939
    if is_error(r1984) goto L1982 (error at <module>:301) else goto L722
L722:
    dec_ref r1929
    dec_ref r1949
    faster_web3.types.RPCRequest = r1984 :: type
    r1985 = faster_web3.types.globals :: static
    r1986 = 'RPCRequest'
    r1987 = PyDict_SetItem(r1985, r1986, r1984)
    dec_ref r1984
    r1988 = r1987 >= 0 :: signed
    if not r1988 goto L1811 (error at <module>:301) else goto L723 :: bool
L723:
    r1989 = faster_web3.types.RPCRequest :: type
    r1990 = typing :: module
    r1991 = load_address _Py_NoneStruct
    r1992 = r1990 != r1991
    if r1992 goto L726 else goto L724 :: bool
L724:
    r1993 = 'typing'
    r1994 = PyImport_Import(r1993)
    if is_error(r1994) goto L1811 (error at <module>:308) else goto L725
L725:
    typing = r1994 :: module
    dec_ref r1994
L726:
    r1995 = PyImport_GetModuleDict()
    r1996 = 'typing'
    r1997 = CPyDict_GetItem(r1995, r1996)
    if is_error(r1997) goto L1811 (error at <module>:308) else goto L727
L727:
    r1998 = '_TypedDict'
    r1999 = CPyObject_GetAttr(r1997, r1998)
    dec_ref r1997
    if is_error(r1999) goto L1811 (error at <module>:308) else goto L728
L728:
    r2000 = PyTuple_Pack(1, r1999)
    dec_ref r1999
    if is_error(r2000) goto L1811 (error at <module>:308) else goto L729
L729:
    r2001 = typing :: module
    r2002 = load_address _Py_NoneStruct
    r2003 = r2001 != r2002
    if r2003 goto L732 else goto L730 :: bool
L730:
    r2004 = 'typing'
    r2005 = PyImport_Import(r2004)
    if is_error(r2005) goto L1983 (error at <module>:308) else goto L731
L731:
    typing = r2005 :: module
    dec_ref r2005
L732:
    r2006 = PyImport_GetModuleDict()
    r2007 = 'typing'
    r2008 = CPyDict_GetItem(r2006, r2007)
    if is_error(r2008) goto L1983 (error at <module>:308) else goto L733
L733:
    r2009 = '_TypedDictMeta'
    r2010 = CPyObject_GetAttr(r2008, r2009)
    dec_ref r2008
    if is_error(r2010) goto L1983 (error at <module>:308) else goto L734
L734:
    r2011 = '__prepare__'
    r2012 = PyObject_HasAttr(r2010, r2011)
    if r2012 goto L735 else goto L739 :: bool
L735:
    r2013 = 'RPCResponse'
    r2014 = '__prepare__'
    r2015 = CPyObject_GetAttr(r2010, r2014)
    if is_error(r2015) goto L1984 (error at <module>:308) else goto L736
L736:
    r2016 = [r2013, r2000]
    r2017 = load_address r2016
    r2018 = PyObject_Vectorcall(r2015, r2017, 2, 0)
    dec_ref r2015
    if is_error(r2018) goto L1984 (error at <module>:308) else goto L737
L737:
    r2019 = cast(dict, r2018)
    if is_error(r2019) goto L1984 (error at <module>:308) else goto L738
L738:
    r2020 = r2019
    goto L741
L739:
    r2021 = PyDict_New()
    if is_error(r2021) goto L1984 (error at <module>:308) else goto L740
L740:
    r2020 = r2021
L741:
    r2022 = PyDict_New()
    if is_error(r2022) goto L1985 (error at <module>:308) else goto L742
L742:
    r2023 = load_address PyType_Type
    r2024 = 'error'
    r2025 = PyDict_SetItem(r2022, r2024, r2023)
    r2026 = r2025 >= 0 :: signed
    if not r2026 goto L1986 (error at <module>:309) else goto L743 :: bool
L743:
    r2027 = load_address PyType_Type
    r2028 = 'id'
    r2029 = PyDict_SetItem(r2022, r2028, r2027)
    r2030 = r2029 >= 0 :: signed
    if not r2030 goto L1986 (error at <module>:310) else goto L744 :: bool
L744:
    r2031 = load_address PyType_Type
    r2032 = 'jsonrpc'
    r2033 = PyDict_SetItem(r2022, r2032, r2031)
    r2034 = r2033 >= 0 :: signed
    if not r2034 goto L1986 (error at <module>:311) else goto L745 :: bool
L745:
    r2035 = load_address PyType_Type
    r2036 = 'result'
    r2037 = PyDict_SetItem(r2022, r2036, r2035)
    r2038 = r2037 >= 0 :: signed
    if not r2038 goto L1986 (error at <module>:312) else goto L746 :: bool
L746:
    r2039 = load_address PyType_Type
    r2040 = 'method'
    r2041 = PyDict_SetItem(r2022, r2040, r2039)
    r2042 = r2041 >= 0 :: signed
    if not r2042 goto L1986 (error at <module>:315) else goto L747 :: bool
L747:
    r2043 = load_address PyType_Type
    r2044 = 'params'
    r2045 = PyDict_SetItem(r2022, r2044, r2043)
    r2046 = r2045 >= 0 :: signed
    if not r2046 goto L1986 (error at <module>:316) else goto L748 :: bool
L748:
    r2047 = 'RPCResponse'
    r2048 = '__annotations__'
    r2049 = CPyDict_SetItem(r2020, r2048, r2022)
    dec_ref r2022
    r2050 = r2049 >= 0 :: signed
    if not r2050 goto L1985 (error at <module>:308) else goto L749 :: bool
L749:
    r2051 = 'mypyc filler docstring'
    r2052 = '__doc__'
    r2053 = CPyDict_SetItem(r2020, r2052, r2051)
    r2054 = r2053 >= 0 :: signed
    if not r2054 goto L1985 (error at <module>:308) else goto L750 :: bool
L750:
    r2055 = 'faster_web3.types'
    r2056 = '__module__'
    r2057 = CPyDict_SetItem(r2020, r2056, r2055)
    r2058 = r2057 >= 0 :: signed
    if not r2058 goto L1985 (error at <module>:308) else goto L751 :: bool
L751:
    r2059 = [r2047, r2000, r2020]
    r2060 = load_address r2059
    r2061 = PyObject_Vectorcall(r2010, r2060, 3, 0)
    dec_ref r2010
    if is_error(r2061) goto L1987 (error at <module>:308) else goto L752
L752:
    dec_ref r2000
    dec_ref r2020
    faster_web3.types.RPCResponse = r2061 :: type
    r2062 = faster_web3.types.globals :: static
    r2063 = 'RPCResponse'
    r2064 = PyDict_SetItem(r2062, r2063, r2061)
    dec_ref r2061
    r2065 = r2064 >= 0 :: signed
    if not r2065 goto L1811 (error at <module>:308) else goto L753 :: bool
L753:
    r2066 = faster_web3.types.RPCResponse :: type
    r2067 = faster_web3.types.globals :: static
    r2068 = 'Union'
    r2069 = CPyDict_GetItem(r2067, r2068)
    if is_error(r2069) goto L1811 (error at <module>:319) else goto L754
L754:
    r2070 = faster_web3.types.globals :: static
    r2071 = 'BlockData'
    r2072 = CPyDict_GetItem(r2070, r2071)
    if is_error(r2072) goto L1988 (error at <module>:320) else goto L755
L755:
    r2073 = faster_web3.types.globals :: static
    r2074 = 'TxData'
    r2075 = CPyDict_GetItem(r2073, r2074)
    if is_error(r2075) goto L1989 (error at <module>:321) else goto L756
L756:
    r2076 = faster_web3.types.globals :: static
    r2077 = 'HexBytes'
    r2078 = CPyDict_GetItem(r2076, r2077)
    if is_error(r2078) goto L1990 (error at <module>:322) else goto L757
L757:
    r2079 = faster_web3.types.globals :: static
    r2080 = 'LogReceipt'
    r2081 = CPyDict_GetItem(r2079, r2080)
    if is_error(r2081) goto L1991 (error at <module>:323) else goto L758
L758:
    r2082 = faster_web3.types.globals :: static
    r2083 = 'SyncProgress'
    r2084 = CPyDict_GetItem(r2082, r2083)
    if is_error(r2084) goto L1992 (error at <module>:324) else goto L759
L759:
    r2085 = faster_web3.types.globals :: static
    r2086 = 'GethSyncingSubscriptionResult'
    r2087 = CPyDict_GetItem(r2085, r2086)
    if is_error(r2087) goto L1993 (error at <module>:325) else goto L760
L760:
    r2088 = (r2072, r2075, r2078, r2081, r2084, r2087)
    r2089 = box(tuple[object, object, object, object, object, object], r2088)
    r2090 = PyObject_GetItem(r2069, r2089)
    dec_ref r2069
    dec_ref r2089
    if is_error(r2090) goto L1811 (error at <module>:319) else goto L761
L761:
    r2091 = faster_web3.types.globals :: static
    r2092 = 'EthSubscriptionResult'
    r2093 = CPyDict_SetItem(r2091, r2092, r2090)
    dec_ref r2090
    r2094 = r2093 >= 0 :: signed
    if not r2094 goto L1811 (error at <module>:319) else goto L762 :: bool
L762:
    r2095 = typing :: module
    r2096 = load_address _Py_NoneStruct
    r2097 = r2095 != r2096
    if r2097 goto L765 else goto L763 :: bool
L763:
    r2098 = 'typing'
    r2099 = PyImport_Import(r2098)
    if is_error(r2099) goto L1811 (error at <module>:329) else goto L764
L764:
    typing = r2099 :: module
    dec_ref r2099
L765:
    r2100 = PyImport_GetModuleDict()
    r2101 = 'typing'
    r2102 = CPyDict_GetItem(r2100, r2101)
    if is_error(r2102) goto L1811 (error at <module>:329) else goto L766
L766:
    r2103 = '_TypedDict'
    r2104 = CPyObject_GetAttr(r2102, r2103)
    dec_ref r2102
    if is_error(r2104) goto L1811 (error at <module>:329) else goto L767
L767:
    r2105 = PyTuple_Pack(1, r2104)
    dec_ref r2104
    if is_error(r2105) goto L1811 (error at <module>:329) else goto L768
L768:
    r2106 = typing :: module
    r2107 = load_address _Py_NoneStruct
    r2108 = r2106 != r2107
    if r2108 goto L771 else goto L769 :: bool
L769:
    r2109 = 'typing'
    r2110 = PyImport_Import(r2109)
    if is_error(r2110) goto L1994 (error at <module>:329) else goto L770
L770:
    typing = r2110 :: module
    dec_ref r2110
L771:
    r2111 = PyImport_GetModuleDict()
    r2112 = 'typing'
    r2113 = CPyDict_GetItem(r2111, r2112)
    if is_error(r2113) goto L1994 (error at <module>:329) else goto L772
L772:
    r2114 = '_TypedDictMeta'
    r2115 = CPyObject_GetAttr(r2113, r2114)
    dec_ref r2113
    if is_error(r2115) goto L1994 (error at <module>:329) else goto L773
L773:
    r2116 = '__prepare__'
    r2117 = PyObject_HasAttr(r2115, r2116)
    if r2117 goto L774 else goto L778 :: bool
L774:
    r2118 = 'FormattedEthSubscriptionResponse'
    r2119 = '__prepare__'
    r2120 = CPyObject_GetAttr(r2115, r2119)
    if is_error(r2120) goto L1995 (error at <module>:329) else goto L775
L775:
    r2121 = [r2118, r2105]
    r2122 = load_address r2121
    r2123 = PyObject_Vectorcall(r2120, r2122, 2, 0)
    dec_ref r2120
    if is_error(r2123) goto L1995 (error at <module>:329) else goto L776
L776:
    r2124 = cast(dict, r2123)
    if is_error(r2124) goto L1995 (error at <module>:329) else goto L777
L777:
    r2125 = r2124
    goto L780
L778:
    r2126 = PyDict_New()
    if is_error(r2126) goto L1995 (error at <module>:329) else goto L779
L779:
    r2125 = r2126
L780:
    r2127 = PyDict_New()
    if is_error(r2127) goto L1996 (error at <module>:329) else goto L781
L781:
    r2128 = faster_web3.types.globals :: static
    r2129 = 'HexStr'
    r2130 = CPyDict_GetItem(r2128, r2129)
    if is_error(r2130) goto L1997 (error at <module>:330) else goto L782
L782:
    r2131 = 'subscription'
    r2132 = PyDict_SetItem(r2127, r2131, r2130)
    dec_ref r2130
    r2133 = r2132 >= 0 :: signed
    if not r2133 goto L1997 (error at <module>:330) else goto L783 :: bool
L783:
    r2134 = load_address PyType_Type
    r2135 = 'result'
    r2136 = PyDict_SetItem(r2127, r2135, r2134)
    r2137 = r2136 >= 0 :: signed
    if not r2137 goto L1997 (error at <module>:331) else goto L784 :: bool
L784:
    r2138 = 'FormattedEthSubscriptionResponse'
    r2139 = '__annotations__'
    r2140 = CPyDict_SetItem(r2125, r2139, r2127)
    dec_ref r2127
    r2141 = r2140 >= 0 :: signed
    if not r2141 goto L1996 (error at <module>:329) else goto L785 :: bool
L785:
    r2142 = 'mypyc filler docstring'
    r2143 = '__doc__'
    r2144 = CPyDict_SetItem(r2125, r2143, r2142)
    r2145 = r2144 >= 0 :: signed
    if not r2145 goto L1996 (error at <module>:329) else goto L786 :: bool
L786:
    r2146 = 'faster_web3.types'
    r2147 = '__module__'
    r2148 = CPyDict_SetItem(r2125, r2147, r2146)
    r2149 = r2148 >= 0 :: signed
    if not r2149 goto L1996 (error at <module>:329) else goto L787 :: bool
L787:
    r2150 = [r2138, r2105, r2125]
    r2151 = load_address r2150
    r2152 = PyObject_Vectorcall(r2115, r2151, 3, 0)
    dec_ref r2115
    if is_error(r2152) goto L1998 (error at <module>:329) else goto L788
L788:
    dec_ref r2105
    dec_ref r2125
    faster_web3.types.FormattedEthSubscriptionResponse = r2152 :: type
    r2153 = faster_web3.types.globals :: static
    r2154 = 'FormattedEthSubscriptionResponse'
    r2155 = PyDict_SetItem(r2153, r2154, r2152)
    dec_ref r2152
    r2156 = r2155 >= 0 :: signed
    if not r2156 goto L1811 (error at <module>:329) else goto L789 :: bool
L789:
    r2157 = faster_web3.types.FormattedEthSubscriptionResponse :: type
    r2158 = typing :: module
    r2159 = load_address _Py_NoneStruct
    r2160 = r2158 != r2159
    if r2160 goto L792 else goto L790 :: bool
L790:
    r2161 = 'typing'
    r2162 = PyImport_Import(r2161)
    if is_error(r2162) goto L1811 (error at <module>:334) else goto L791
L791:
    typing = r2162 :: module
    dec_ref r2162
L792:
    r2163 = PyImport_GetModuleDict()
    r2164 = 'typing'
    r2165 = CPyDict_GetItem(r2163, r2164)
    if is_error(r2165) goto L1811 (error at <module>:334) else goto L793
L793:
    r2166 = '_TypedDict'
    r2167 = CPyObject_GetAttr(r2165, r2166)
    dec_ref r2165
    if is_error(r2167) goto L1811 (error at <module>:334) else goto L794
L794:
    r2168 = PyTuple_Pack(1, r2167)
    dec_ref r2167
    if is_error(r2168) goto L1811 (error at <module>:334) else goto L795
L795:
    r2169 = typing :: module
    r2170 = load_address _Py_NoneStruct
    r2171 = r2169 != r2170
    if r2171 goto L798 else goto L796 :: bool
L796:
    r2172 = 'typing'
    r2173 = PyImport_Import(r2172)
    if is_error(r2173) goto L1999 (error at <module>:334) else goto L797
L797:
    typing = r2173 :: module
    dec_ref r2173
L798:
    r2174 = PyImport_GetModuleDict()
    r2175 = 'typing'
    r2176 = CPyDict_GetItem(r2174, r2175)
    if is_error(r2176) goto L1999 (error at <module>:334) else goto L799
L799:
    r2177 = '_TypedDictMeta'
    r2178 = CPyObject_GetAttr(r2176, r2177)
    dec_ref r2176
    if is_error(r2178) goto L1999 (error at <module>:334) else goto L800
L800:
    r2179 = '__prepare__'
    r2180 = PyObject_HasAttr(r2178, r2179)
    if r2180 goto L801 else goto L805 :: bool
L801:
    r2181 = 'CreateAccessListResponse'
    r2182 = '__prepare__'
    r2183 = CPyObject_GetAttr(r2178, r2182)
    if is_error(r2183) goto L2000 (error at <module>:334) else goto L802
L802:
    r2184 = [r2181, r2168]
    r2185 = load_address r2184
    r2186 = PyObject_Vectorcall(r2183, r2185, 2, 0)
    dec_ref r2183
    if is_error(r2186) goto L2000 (error at <module>:334) else goto L803
L803:
    r2187 = cast(dict, r2186)
    if is_error(r2187) goto L2000 (error at <module>:334) else goto L804
L804:
    r2188 = r2187
    goto L807
L805:
    r2189 = PyDict_New()
    if is_error(r2189) goto L2000 (error at <module>:334) else goto L806
L806:
    r2188 = r2189
L807:
    r2190 = PyDict_New()
    if is_error(r2190) goto L2001 (error at <module>:334) else goto L808
L808:
    r2191 = faster_web3.types.globals :: static
    r2192 = 'AccessList'
    r2193 = CPyDict_GetItem(r2191, r2192)
    if is_error(r2193) goto L2002 (error at <module>:335) else goto L809
L809:
    r2194 = 'accessList'
    r2195 = PyDict_SetItem(r2190, r2194, r2193)
    dec_ref r2193
    r2196 = r2195 >= 0 :: signed
    if not r2196 goto L2002 (error at <module>:335) else goto L810 :: bool
L810:
    r2197 = load_address PyLong_Type
    r2198 = 'gasUsed'
    r2199 = PyDict_SetItem(r2190, r2198, r2197)
    r2200 = r2199 >= 0 :: signed
    if not r2200 goto L2002 (error at <module>:336) else goto L811 :: bool
L811:
    r2201 = 'CreateAccessListResponse'
    r2202 = '__annotations__'
    r2203 = CPyDict_SetItem(r2188, r2202, r2190)
    dec_ref r2190
    r2204 = r2203 >= 0 :: signed
    if not r2204 goto L2001 (error at <module>:334) else goto L812 :: bool
L812:
    r2205 = 'mypyc filler docstring'
    r2206 = '__doc__'
    r2207 = CPyDict_SetItem(r2188, r2206, r2205)
    r2208 = r2207 >= 0 :: signed
    if not r2208 goto L2001 (error at <module>:334) else goto L813 :: bool
L813:
    r2209 = 'faster_web3.types'
    r2210 = '__module__'
    r2211 = CPyDict_SetItem(r2188, r2210, r2209)
    r2212 = r2211 >= 0 :: signed
    if not r2212 goto L2001 (error at <module>:334) else goto L814 :: bool
L814:
    r2213 = [r2201, r2168, r2188]
    r2214 = load_address r2213
    r2215 = PyObject_Vectorcall(r2178, r2214, 3, 0)
    dec_ref r2178
    if is_error(r2215) goto L2003 (error at <module>:334) else goto L815
L815:
    dec_ref r2168
    dec_ref r2188
    faster_web3.types.CreateAccessListResponse = r2215 :: type
    r2216 = faster_web3.types.globals :: static
    r2217 = 'CreateAccessListResponse'
    r2218 = PyDict_SetItem(r2216, r2217, r2215)
    dec_ref r2215
    r2219 = r2218 >= 0 :: signed
    if not r2219 goto L1811 (error at <module>:334) else goto L816 :: bool
L816:
    r2220 = faster_web3.types.CreateAccessListResponse :: type
    r2221 = faster_web3.types.globals :: static
    r2222 = 'Callable'
    r2223 = CPyDict_GetItem(r2221, r2222)
    if is_error(r2223) goto L1811 (error at <module>:339) else goto L817
L817:
    r2224 = faster_web3.types.globals :: static
    r2225 = 'RPCEndpoint'
    r2226 = CPyDict_GetItem(r2224, r2225)
    if is_error(r2226) goto L2004 (error at <module>:339) else goto L818
L818:
    r2227 = faster_web3.types.globals :: static
    r2228 = 'Any'
    r2229 = CPyDict_GetItem(r2227, r2228)
    if is_error(r2229) goto L2005 (error at <module>:339) else goto L819
L819:
    r2230 = PyList_New(2)
    if is_error(r2230) goto L2006 (error at <module>:339) else goto L820
L820:
    r2231 = get_element_ptr r2230 ob_item :: PyListObject
    r2232 = load_mem r2231 :: ptr*
    set_mem r2232, r2226 :: builtins.object*
    r2233 = r2232 + 8
    set_mem r2233, r2229 :: builtins.object*
    r2234 = faster_web3.types.globals :: static
    r2235 = 'RPCResponse'
    r2236 = CPyDict_GetItem(r2234, r2235)
    if is_error(r2236) goto L2007 (error at <module>:339) else goto L821
L821:
    r2237 = (r2230, r2236)
    r2238 = box(tuple[list, object], r2237)
    r2239 = PyObject_GetItem(r2223, r2238)
    dec_ref r2223
    dec_ref r2238
    if is_error(r2239) goto L1811 (error at <module>:339) else goto L822
L822:
    r2240 = faster_web3.types.globals :: static
    r2241 = 'MakeRequestFn'
    r2242 = CPyDict_SetItem(r2240, r2241, r2239)
    dec_ref r2239
    r2243 = r2242 >= 0 :: signed
    if not r2243 goto L1811 (error at <module>:339) else goto L823 :: bool
L823:
    r2244 = faster_web3.types.globals :: static
    r2245 = 'Callable'
    r2246 = CPyDict_GetItem(r2244, r2245)
    if is_error(r2246) goto L1811 (error at <module>:340) else goto L824
L824:
    r2247 = faster_web3.types.globals :: static
    r2248 = 'List'
    r2249 = CPyDict_GetItem(r2247, r2248)
    if is_error(r2249) goto L2008 (error at <module>:341) else goto L825
L825:
    r2250 = faster_web3.types.globals :: static
    r2251 = 'Tuple'
    r2252 = CPyDict_GetItem(r2250, r2251)
    if is_error(r2252) goto L2009 (error at <module>:341) else goto L826
L826:
    r2253 = faster_web3.types.globals :: static
    r2254 = 'RPCEndpoint'
    r2255 = CPyDict_GetItem(r2253, r2254)
    if is_error(r2255) goto L2010 (error at <module>:341) else goto L827
L827:
    r2256 = faster_web3.types.globals :: static
    r2257 = 'Any'
    r2258 = CPyDict_GetItem(r2256, r2257)
    if is_error(r2258) goto L2011 (error at <module>:341) else goto L828
L828:
    r2259 = (r2255, r2258)
    r2260 = box(tuple[object, object], r2259)
    r2261 = PyObject_GetItem(r2252, r2260)
    dec_ref r2252
    dec_ref r2260
    if is_error(r2261) goto L2009 (error at <module>:341) else goto L829
L829:
    r2262 = PyObject_GetItem(r2249, r2261)
    dec_ref r2249
    dec_ref r2261
    if is_error(r2262) goto L2008 (error at <module>:341) else goto L830
L830:
    r2263 = PyList_New(1)
    if is_error(r2263) goto L2012 (error at <module>:341) else goto L831
L831:
    r2264 = get_element_ptr r2263 ob_item :: PyListObject
    r2265 = load_mem r2264 :: ptr*
    set_mem r2265, r2262 :: builtins.object*
    r2266 = faster_web3.types.globals :: static
    r2267 = 'Union'
    r2268 = CPyDict_GetItem(r2266, r2267)
    if is_error(r2268) goto L2013 (error at <module>:341) else goto L832
L832:
    r2269 = faster_web3.types.globals :: static
    r2270 = 'List'
    r2271 = CPyDict_GetItem(r2269, r2270)
    if is_error(r2271) goto L2014 (error at <module>:341) else goto L833
L833:
    r2272 = faster_web3.types.globals :: static
    r2273 = 'RPCResponse'
    r2274 = CPyDict_GetItem(r2272, r2273)
    if is_error(r2274) goto L2015 (error at <module>:341) else goto L834
L834:
    r2275 = PyObject_GetItem(r2271, r2274)
    dec_ref r2271
    dec_ref r2274
    if is_error(r2275) goto L2014 (error at <module>:341) else goto L835
L835:
    r2276 = faster_web3.types.globals :: static
    r2277 = 'RPCResponse'
    r2278 = CPyDict_GetItem(r2276, r2277)
    if is_error(r2278) goto L2016 (error at <module>:341) else goto L836
L836:
    r2279 = (r2275, r2278)
    r2280 = box(tuple[object, object], r2279)
    r2281 = PyObject_GetItem(r2268, r2280)
    dec_ref r2268
    dec_ref r2280
    if is_error(r2281) goto L2013 (error at <module>:341) else goto L837
L837:
    r2282 = (r2263, r2281)
    r2283 = box(tuple[list, object], r2282)
    r2284 = PyObject_GetItem(r2246, r2283)
    dec_ref r2246
    dec_ref r2283
    if is_error(r2284) goto L1811 (error at <module>:340) else goto L838
L838:
    r2285 = faster_web3.types.globals :: static
    r2286 = 'MakeBatchRequestFn'
    r2287 = CPyDict_SetItem(r2285, r2286, r2284)
    dec_ref r2284
    r2288 = r2287 >= 0 :: signed
    if not r2288 goto L1811 (error at <module>:340) else goto L839 :: bool
L839:
    r2289 = faster_web3.types.globals :: static
    r2290 = 'Callable'
    r2291 = CPyDict_GetItem(r2289, r2290)
    if is_error(r2291) goto L1811 (error at <module>:343) else goto L840
L840:
    r2292 = faster_web3.types.globals :: static
    r2293 = 'RPCEndpoint'
    r2294 = CPyDict_GetItem(r2292, r2293)
    if is_error(r2294) goto L2017 (error at <module>:343) else goto L841
L841:
    r2295 = faster_web3.types.globals :: static
    r2296 = 'Any'
    r2297 = CPyDict_GetItem(r2295, r2296)
    if is_error(r2297) goto L2018 (error at <module>:343) else goto L842
L842:
    r2298 = PyList_New(2)
    if is_error(r2298) goto L2019 (error at <module>:343) else goto L843
L843:
    r2299 = get_element_ptr r2298 ob_item :: PyListObject
    r2300 = load_mem r2299 :: ptr*
    set_mem r2300, r2294 :: builtins.object*
    r2301 = r2300 + 8
    set_mem r2301, r2297 :: builtins.object*
    r2302 = faster_web3.types.globals :: static
    r2303 = 'Coroutine'
    r2304 = CPyDict_GetItem(r2302, r2303)
    if is_error(r2304) goto L2020 (error at <module>:343) else goto L844
L844:
    r2305 = faster_web3.types.globals :: static
    r2306 = 'Any'
    r2307 = CPyDict_GetItem(r2305, r2306)
    if is_error(r2307) goto L2021 (error at <module>:343) else goto L845
L845:
    r2308 = faster_web3.types.globals :: static
    r2309 = 'Any'
    r2310 = CPyDict_GetItem(r2308, r2309)
    if is_error(r2310) goto L2022 (error at <module>:343) else goto L846
L846:
    r2311 = faster_web3.types.globals :: static
    r2312 = 'RPCResponse'
    r2313 = CPyDict_GetItem(r2311, r2312)
    if is_error(r2313) goto L2023 (error at <module>:343) else goto L847
L847:
    r2314 = (r2307, r2310, r2313)
    r2315 = box(tuple[object, object, object], r2314)
    r2316 = PyObject_GetItem(r2304, r2315)
    dec_ref r2304
    dec_ref r2315
    if is_error(r2316) goto L2020 (error at <module>:343) else goto L848
L848:
    r2317 = (r2298, r2316)
    r2318 = box(tuple[list, object], r2317)
    r2319 = PyObject_GetItem(r2291, r2318)
    dec_ref r2291
    dec_ref r2318
    if is_error(r2319) goto L1811 (error at <module>:343) else goto L849
L849:
    r2320 = faster_web3.types.globals :: static
    r2321 = 'AsyncMakeRequestFn'
    r2322 = CPyDict_SetItem(r2320, r2321, r2319)
    dec_ref r2319
    r2323 = r2322 >= 0 :: signed
    if not r2323 goto L1811 (error at <module>:343) else goto L850 :: bool
L850:
    r2324 = faster_web3.types.globals :: static
    r2325 = 'Callable'
    r2326 = CPyDict_GetItem(r2324, r2325)
    if is_error(r2326) goto L1811 (error at <module>:344) else goto L851
L851:
    r2327 = faster_web3.types.globals :: static
    r2328 = 'List'
    r2329 = CPyDict_GetItem(r2327, r2328)
    if is_error(r2329) goto L2024 (error at <module>:345) else goto L852
L852:
    r2330 = faster_web3.types.globals :: static
    r2331 = 'Tuple'
    r2332 = CPyDict_GetItem(r2330, r2331)
    if is_error(r2332) goto L2025 (error at <module>:345) else goto L853
L853:
    r2333 = faster_web3.types.globals :: static
    r2334 = 'RPCEndpoint'
    r2335 = CPyDict_GetItem(r2333, r2334)
    if is_error(r2335) goto L2026 (error at <module>:345) else goto L854
L854:
    r2336 = faster_web3.types.globals :: static
    r2337 = 'Any'
    r2338 = CPyDict_GetItem(r2336, r2337)
    if is_error(r2338) goto L2027 (error at <module>:345) else goto L855
L855:
    r2339 = (r2335, r2338)
    r2340 = box(tuple[object, object], r2339)
    r2341 = PyObject_GetItem(r2332, r2340)
    dec_ref r2332
    dec_ref r2340
    if is_error(r2341) goto L2025 (error at <module>:345) else goto L856
L856:
    r2342 = PyObject_GetItem(r2329, r2341)
    dec_ref r2329
    dec_ref r2341
    if is_error(r2342) goto L2024 (error at <module>:345) else goto L857
L857:
    r2343 = PyList_New(1)
    if is_error(r2343) goto L2028 (error at <module>:345) else goto L858
L858:
    r2344 = get_element_ptr r2343 ob_item :: PyListObject
    r2345 = load_mem r2344 :: ptr*
    set_mem r2345, r2342 :: builtins.object*
    r2346 = faster_web3.types.globals :: static
    r2347 = 'Coroutine'
    r2348 = CPyDict_GetItem(r2346, r2347)
    if is_error(r2348) goto L2029 (error at <module>:346) else goto L859
L859:
    r2349 = faster_web3.types.globals :: static
    r2350 = 'Any'
    r2351 = CPyDict_GetItem(r2349, r2350)
    if is_error(r2351) goto L2030 (error at <module>:346) else goto L860
L860:
    r2352 = faster_web3.types.globals :: static
    r2353 = 'Any'
    r2354 = CPyDict_GetItem(r2352, r2353)
    if is_error(r2354) goto L2031 (error at <module>:346) else goto L861
L861:
    r2355 = faster_web3.types.globals :: static
    r2356 = 'Union'
    r2357 = CPyDict_GetItem(r2355, r2356)
    if is_error(r2357) goto L2032 (error at <module>:346) else goto L862
L862:
    r2358 = faster_web3.types.globals :: static
    r2359 = 'List'
    r2360 = CPyDict_GetItem(r2358, r2359)
    if is_error(r2360) goto L2033 (error at <module>:346) else goto L863
L863:
    r2361 = faster_web3.types.globals :: static
    r2362 = 'RPCResponse'
    r2363 = CPyDict_GetItem(r2361, r2362)
    if is_error(r2363) goto L2034 (error at <module>:346) else goto L864
L864:
    r2364 = PyObject_GetItem(r2360, r2363)
    dec_ref r2360
    dec_ref r2363
    if is_error(r2364) goto L2033 (error at <module>:346) else goto L865
L865:
    r2365 = faster_web3.types.globals :: static
    r2366 = 'RPCResponse'
    r2367 = CPyDict_GetItem(r2365, r2366)
    if is_error(r2367) goto L2035 (error at <module>:346) else goto L866
L866:
    r2368 = (r2364, r2367)
    r2369 = box(tuple[object, object], r2368)
    r2370 = PyObject_GetItem(r2357, r2369)
    dec_ref r2357
    dec_ref r2369
    if is_error(r2370) goto L2032 (error at <module>:346) else goto L867
L867:
    r2371 = (r2351, r2354, r2370)
    r2372 = box(tuple[object, object, object], r2371)
    r2373 = PyObject_GetItem(r2348, r2372)
    dec_ref r2348
    dec_ref r2372
    if is_error(r2373) goto L2029 (error at <module>:346) else goto L868
L868:
    r2374 = (r2343, r2373)
    r2375 = box(tuple[list, object], r2374)
    r2376 = PyObject_GetItem(r2326, r2375)
    dec_ref r2326
    dec_ref r2375
    if is_error(r2376) goto L1811 (error at <module>:344) else goto L869
L869:
    r2377 = faster_web3.types.globals :: static
    r2378 = 'AsyncMakeBatchRequestFn'
    r2379 = CPyDict_SetItem(r2377, r2378, r2376)
    dec_ref r2376
    r2380 = r2379 >= 0 :: signed
    if not r2380 goto L1811 (error at <module>:344) else goto L870 :: bool
L870:
    r2381 = typing :: module
    r2382 = load_address _Py_NoneStruct
    r2383 = r2381 != r2382
    if r2383 goto L873 else goto L871 :: bool
L871:
    r2384 = 'typing'
    r2385 = PyImport_Import(r2384)
    if is_error(r2385) goto L1811 (error at <module>:350) else goto L872
L872:
    typing = r2385 :: module
    dec_ref r2385
L873:
    r2386 = PyImport_GetModuleDict()
    r2387 = 'typing'
    r2388 = CPyDict_GetItem(r2386, r2387)
    if is_error(r2388) goto L1811 (error at <module>:350) else goto L874
L874:
    r2389 = '_TypedDict'
    r2390 = CPyObject_GetAttr(r2388, r2389)
    dec_ref r2388
    if is_error(r2390) goto L1811 (error at <module>:350) else goto L875
L875:
    r2391 = PyTuple_Pack(1, r2390)
    dec_ref r2390
    if is_error(r2391) goto L1811 (error at <module>:350) else goto L876
L876:
    r2392 = typing :: module
    r2393 = load_address _Py_NoneStruct
    r2394 = r2392 != r2393
    if r2394 goto L879 else goto L877 :: bool
L877:
    r2395 = 'typing'
    r2396 = PyImport_Import(r2395)
    if is_error(r2396) goto L2036 (error at <module>:350) else goto L878
L878:
    typing = r2396 :: module
    dec_ref r2396
L879:
    r2397 = PyImport_GetModuleDict()
    r2398 = 'typing'
    r2399 = CPyDict_GetItem(r2397, r2398)
    if is_error(r2399) goto L2036 (error at <module>:350) else goto L880
L880:
    r2400 = '_TypedDictMeta'
    r2401 = CPyObject_GetAttr(r2399, r2400)
    dec_ref r2399
    if is_error(r2401) goto L2036 (error at <module>:350) else goto L881
L881:
    r2402 = '__prepare__'
    r2403 = PyObject_HasAttr(r2401, r2402)
    if r2403 goto L882 else goto L886 :: bool
L882:
    r2404 = 'FormattersDict'
    r2405 = '__prepare__'
    r2406 = CPyObject_GetAttr(r2401, r2405)
    if is_error(r2406) goto L2037 (error at <module>:350) else goto L883
L883:
    r2407 = [r2404, r2391]
    r2408 = load_address r2407
    r2409 = PyObject_Vectorcall(r2406, r2408, 2, 0)
    dec_ref r2406
    if is_error(r2409) goto L2037 (error at <module>:350) else goto L884
L884:
    r2410 = cast(dict, r2409)
    if is_error(r2410) goto L2037 (error at <module>:350) else goto L885
L885:
    r2411 = r2410
    goto L888
L886:
    r2412 = PyDict_New()
    if is_error(r2412) goto L2037 (error at <module>:350) else goto L887
L887:
    r2411 = r2412
L888:
    r2413 = PyDict_New()
    if is_error(r2413) goto L2038 (error at <module>:350) else goto L889
L889:
    r2414 = load_address PyType_Type
    r2415 = 'error_formatters'
    r2416 = PyDict_SetItem(r2413, r2415, r2414)
    r2417 = r2416 >= 0 :: signed
    if not r2417 goto L2039 (error at <module>:351) else goto L890 :: bool
L890:
    r2418 = load_address PyType_Type
    r2419 = 'request_formatters'
    r2420 = PyDict_SetItem(r2413, r2419, r2418)
    r2421 = r2420 >= 0 :: signed
    if not r2421 goto L2039 (error at <module>:352) else goto L891 :: bool
L891:
    r2422 = load_address PyType_Type
    r2423 = 'result_formatters'
    r2424 = PyDict_SetItem(r2413, r2423, r2422)
    r2425 = r2424 >= 0 :: signed
    if not r2425 goto L2039 (error at <module>:353) else goto L892 :: bool
L892:
    r2426 = 'FormattersDict'
    r2427 = '__annotations__'
    r2428 = CPyDict_SetItem(r2411, r2427, r2413)
    dec_ref r2413
    r2429 = r2428 >= 0 :: signed
    if not r2429 goto L2038 (error at <module>:350) else goto L893 :: bool
L893:
    r2430 = 'mypyc filler docstring'
    r2431 = '__doc__'
    r2432 = CPyDict_SetItem(r2411, r2431, r2430)
    r2433 = r2432 >= 0 :: signed
    if not r2433 goto L2038 (error at <module>:350) else goto L894 :: bool
L894:
    r2434 = 'faster_web3.types'
    r2435 = '__module__'
    r2436 = CPyDict_SetItem(r2411, r2435, r2434)
    r2437 = r2436 >= 0 :: signed
    if not r2437 goto L2038 (error at <module>:350) else goto L895 :: bool
L895:
    r2438 = [r2426, r2391, r2411]
    r2439 = load_address r2438
    r2440 = PyObject_Vectorcall(r2401, r2439, 3, 0)
    dec_ref r2401
    if is_error(r2440) goto L2040 (error at <module>:350) else goto L896
L896:
    dec_ref r2391
    dec_ref r2411
    faster_web3.types.FormattersDict = r2440 :: type
    r2441 = faster_web3.types.globals :: static
    r2442 = 'FormattersDict'
    r2443 = PyDict_SetItem(r2441, r2442, r2440)
    dec_ref r2440
    r2444 = r2443 >= 0 :: signed
    if not r2444 goto L1811 (error at <module>:350) else goto L897 :: bool
L897:
    r2445 = faster_web3.types.FormattersDict :: type
    r2446 = typing :: module
    r2447 = load_address _Py_NoneStruct
    r2448 = r2446 != r2447
    if r2448 goto L900 else goto L898 :: bool
L898:
    r2449 = 'typing'
    r2450 = PyImport_Import(r2449)
    if is_error(r2450) goto L1811 (error at <module>:356) else goto L899
L899:
    typing = r2450 :: module
    dec_ref r2450
L900:
    r2451 = PyImport_GetModuleDict()
    r2452 = 'typing'
    r2453 = CPyDict_GetItem(r2451, r2452)
    if is_error(r2453) goto L1811 (error at <module>:356) else goto L901
L901:
    r2454 = '_TypedDict'
    r2455 = CPyObject_GetAttr(r2453, r2454)
    dec_ref r2453
    if is_error(r2455) goto L1811 (error at <module>:356) else goto L902
L902:
    r2456 = PyTuple_Pack(1, r2455)
    dec_ref r2455
    if is_error(r2456) goto L1811 (error at <module>:356) else goto L903
L903:
    r2457 = typing :: module
    r2458 = load_address _Py_NoneStruct
    r2459 = r2457 != r2458
    if r2459 goto L906 else goto L904 :: bool
L904:
    r2460 = 'typing'
    r2461 = PyImport_Import(r2460)
    if is_error(r2461) goto L2041 (error at <module>:356) else goto L905
L905:
    typing = r2461 :: module
    dec_ref r2461
L906:
    r2462 = PyImport_GetModuleDict()
    r2463 = 'typing'
    r2464 = CPyDict_GetItem(r2462, r2463)
    if is_error(r2464) goto L2041 (error at <module>:356) else goto L907
L907:
    r2465 = '_TypedDictMeta'
    r2466 = CPyObject_GetAttr(r2464, r2465)
    dec_ref r2464
    if is_error(r2466) goto L2041 (error at <module>:356) else goto L908
L908:
    r2467 = '__prepare__'
    r2468 = PyObject_HasAttr(r2466, r2467)
    if r2468 goto L909 else goto L913 :: bool
L909:
    r2469 = 'FilterParams'
    r2470 = '__prepare__'
    r2471 = CPyObject_GetAttr(r2466, r2470)
    if is_error(r2471) goto L2042 (error at <module>:356) else goto L910
L910:
    r2472 = [r2469, r2456]
    r2473 = load_address r2472
    r2474 = PyObject_Vectorcall(r2471, r2473, 2, 0)
    dec_ref r2471
    if is_error(r2474) goto L2042 (error at <module>:356) else goto L911
L911:
    r2475 = cast(dict, r2474)
    if is_error(r2475) goto L2042 (error at <module>:356) else goto L912
L912:
    r2476 = r2475
    goto L915
L913:
    r2477 = PyDict_New()
    if is_error(r2477) goto L2042 (error at <module>:356) else goto L914
L914:
    r2476 = r2477
L915:
    r2478 = PyDict_New()
    if is_error(r2478) goto L2043 (error at <module>:356) else goto L916
L916:
    r2479 = load_address PyType_Type
    r2480 = 'address'
    r2481 = PyDict_SetItem(r2478, r2480, r2479)
    r2482 = r2481 >= 0 :: signed
    if not r2482 goto L2044 (error at <module>:357) else goto L917 :: bool
L917:
    r2483 = load_address PyType_Type
    r2484 = 'blockHash'
    r2485 = PyDict_SetItem(r2478, r2484, r2483)
    r2486 = r2485 >= 0 :: signed
    if not r2486 goto L2044 (error at <module>:358) else goto L918 :: bool
L918:
    r2487 = load_address PyType_Type
    r2488 = 'fromBlock'
    r2489 = PyDict_SetItem(r2478, r2488, r2487)
    r2490 = r2489 >= 0 :: signed
    if not r2490 goto L2044 (error at <module>:359) else goto L919 :: bool
L919:
    r2491 = load_address PyType_Type
    r2492 = 'toBlock'
    r2493 = PyDict_SetItem(r2478, r2492, r2491)
    r2494 = r2493 >= 0 :: signed
    if not r2494 goto L2044 (error at <module>:360) else goto L920 :: bool
L920:
    r2495 = load_address PyType_Type
    r2496 = 'topics'
    r2497 = PyDict_SetItem(r2478, r2496, r2495)
    r2498 = r2497 >= 0 :: signed
    if not r2498 goto L2044 (error at <module>:361) else goto L921 :: bool
L921:
    r2499 = 'FilterParams'
    r2500 = '__annotations__'
    r2501 = CPyDict_SetItem(r2476, r2500, r2478)
    dec_ref r2478
    r2502 = r2501 >= 0 :: signed
    if not r2502 goto L2043 (error at <module>:356) else goto L922 :: bool
L922:
    r2503 = 'mypyc filler docstring'
    r2504 = '__doc__'
    r2505 = CPyDict_SetItem(r2476, r2504, r2503)
    r2506 = r2505 >= 0 :: signed
    if not r2506 goto L2043 (error at <module>:356) else goto L923 :: bool
L923:
    r2507 = 'faster_web3.types'
    r2508 = '__module__'
    r2509 = CPyDict_SetItem(r2476, r2508, r2507)
    r2510 = r2509 >= 0 :: signed
    if not r2510 goto L2043 (error at <module>:356) else goto L924 :: bool
L924:
    r2511 = [r2499, r2456, r2476]
    r2512 = load_address r2511
    r2513 = PyObject_Vectorcall(r2466, r2512, 3, 0)
    dec_ref r2466
    if is_error(r2513) goto L2045 (error at <module>:356) else goto L925
L925:
    dec_ref r2456
    dec_ref r2476
    faster_web3.types.FilterParams = r2513 :: type
    r2514 = faster_web3.types.globals :: static
    r2515 = 'FilterParams'
    r2516 = PyDict_SetItem(r2514, r2515, r2513)
    dec_ref r2513
    r2517 = r2516 >= 0 :: signed
    if not r2517 goto L1811 (error at <module>:356) else goto L926 :: bool
L926:
    r2518 = faster_web3.types.FilterParams :: type
    r2519 = typing :: module
    r2520 = load_address _Py_NoneStruct
    r2521 = r2519 != r2520
    if r2521 goto L929 else goto L927 :: bool
L927:
    r2522 = 'typing'
    r2523 = PyImport_Import(r2522)
    if is_error(r2523) goto L1811 (error at <module>:364) else goto L928
L928:
    typing = r2523 :: module
    dec_ref r2523
L929:
    r2524 = PyImport_GetModuleDict()
    r2525 = 'typing'
    r2526 = CPyDict_GetItem(r2524, r2525)
    if is_error(r2526) goto L1811 (error at <module>:364) else goto L930
L930:
    r2527 = '_TypedDict'
    r2528 = CPyObject_GetAttr(r2526, r2527)
    dec_ref r2526
    if is_error(r2528) goto L1811 (error at <module>:364) else goto L931
L931:
    r2529 = PyTuple_Pack(1, r2528)
    dec_ref r2528
    if is_error(r2529) goto L1811 (error at <module>:364) else goto L932
L932:
    r2530 = typing :: module
    r2531 = load_address _Py_NoneStruct
    r2532 = r2530 != r2531
    if r2532 goto L935 else goto L933 :: bool
L933:
    r2533 = 'typing'
    r2534 = PyImport_Import(r2533)
    if is_error(r2534) goto L2046 (error at <module>:364) else goto L934
L934:
    typing = r2534 :: module
    dec_ref r2534
L935:
    r2535 = PyImport_GetModuleDict()
    r2536 = 'typing'
    r2537 = CPyDict_GetItem(r2535, r2536)
    if is_error(r2537) goto L2046 (error at <module>:364) else goto L936
L936:
    r2538 = '_TypedDictMeta'
    r2539 = CPyObject_GetAttr(r2537, r2538)
    dec_ref r2537
    if is_error(r2539) goto L2046 (error at <module>:364) else goto L937
L937:
    r2540 = '__prepare__'
    r2541 = PyObject_HasAttr(r2539, r2540)
    if r2541 goto L938 else goto L942 :: bool
L938:
    r2542 = 'FeeHistory'
    r2543 = '__prepare__'
    r2544 = CPyObject_GetAttr(r2539, r2543)
    if is_error(r2544) goto L2047 (error at <module>:364) else goto L939
L939:
    r2545 = [r2542, r2529]
    r2546 = load_address r2545
    r2547 = PyObject_Vectorcall(r2544, r2546, 2, 0)
    dec_ref r2544
    if is_error(r2547) goto L2047 (error at <module>:364) else goto L940
L940:
    r2548 = cast(dict, r2547)
    if is_error(r2548) goto L2047 (error at <module>:364) else goto L941
L941:
    r2549 = r2548
    goto L944
L942:
    r2550 = PyDict_New()
    if is_error(r2550) goto L2047 (error at <module>:364) else goto L943
L943:
    r2549 = r2550
L944:
    r2551 = PyDict_New()
    if is_error(r2551) goto L2048 (error at <module>:364) else goto L945
L945:
    r2552 = load_address PyList_Type
    r2553 = 'baseFeePerGas'
    r2554 = PyDict_SetItem(r2551, r2553, r2552)
    r2555 = r2554 >= 0 :: signed
    if not r2555 goto L2049 (error at <module>:365) else goto L946 :: bool
L946:
    r2556 = load_address PyList_Type
    r2557 = 'gasUsedRatio'
    r2558 = PyDict_SetItem(r2551, r2557, r2556)
    r2559 = r2558 >= 0 :: signed
    if not r2559 goto L2049 (error at <module>:366) else goto L947 :: bool
L947:
    r2560 = faster_web3.types.globals :: static
    r2561 = 'BlockNumber'
    r2562 = CPyDict_GetItem(r2560, r2561)
    if is_error(r2562) goto L2049 (error at <module>:367) else goto L948
L948:
    r2563 = 'oldestBlock'
    r2564 = PyDict_SetItem(r2551, r2563, r2562)
    dec_ref r2562
    r2565 = r2564 >= 0 :: signed
    if not r2565 goto L2049 (error at <module>:367) else goto L949 :: bool
L949:
    r2566 = load_address PyList_Type
    r2567 = 'reward'
    r2568 = PyDict_SetItem(r2551, r2567, r2566)
    r2569 = r2568 >= 0 :: signed
    if not r2569 goto L2049 (error at <module>:368) else goto L950 :: bool
L950:
    r2570 = 'FeeHistory'
    r2571 = '__annotations__'
    r2572 = CPyDict_SetItem(r2549, r2571, r2551)
    dec_ref r2551
    r2573 = r2572 >= 0 :: signed
    if not r2573 goto L2048 (error at <module>:364) else goto L951 :: bool
L951:
    r2574 = 'mypyc filler docstring'
    r2575 = '__doc__'
    r2576 = CPyDict_SetItem(r2549, r2575, r2574)
    r2577 = r2576 >= 0 :: signed
    if not r2577 goto L2048 (error at <module>:364) else goto L952 :: bool
L952:
    r2578 = 'faster_web3.types'
    r2579 = '__module__'
    r2580 = CPyDict_SetItem(r2549, r2579, r2578)
    r2581 = r2580 >= 0 :: signed
    if not r2581 goto L2048 (error at <module>:364) else goto L953 :: bool
L953:
    r2582 = [r2570, r2529, r2549]
    r2583 = load_address r2582
    r2584 = PyObject_Vectorcall(r2539, r2583, 3, 0)
    dec_ref r2539
    if is_error(r2584) goto L2050 (error at <module>:364) else goto L954
L954:
    dec_ref r2529
    dec_ref r2549
    faster_web3.types.FeeHistory = r2584 :: type
    r2585 = faster_web3.types.globals :: static
    r2586 = 'FeeHistory'
    r2587 = PyDict_SetItem(r2585, r2586, r2584)
    dec_ref r2584
    r2588 = r2587 >= 0 :: signed
    if not r2588 goto L1811 (error at <module>:364) else goto L955 :: bool
L955:
    r2589 = faster_web3.types.FeeHistory :: type
    r2590 = typing :: module
    r2591 = load_address _Py_NoneStruct
    r2592 = r2590 != r2591
    if r2592 goto L958 else goto L956 :: bool
L956:
    r2593 = 'typing'
    r2594 = PyImport_Import(r2593)
    if is_error(r2594) goto L1811 (error at <module>:371) else goto L957
L957:
    typing = r2594 :: module
    dec_ref r2594
L958:
    r2595 = PyImport_GetModuleDict()
    r2596 = 'typing'
    r2597 = CPyDict_GetItem(r2595, r2596)
    if is_error(r2597) goto L1811 (error at <module>:371) else goto L959
L959:
    r2598 = '_TypedDict'
    r2599 = CPyObject_GetAttr(r2597, r2598)
    dec_ref r2597
    if is_error(r2599) goto L1811 (error at <module>:371) else goto L960
L960:
    r2600 = PyTuple_Pack(1, r2599)
    dec_ref r2599
    if is_error(r2600) goto L1811 (error at <module>:371) else goto L961
L961:
    r2601 = typing :: module
    r2602 = load_address _Py_NoneStruct
    r2603 = r2601 != r2602
    if r2603 goto L964 else goto L962 :: bool
L962:
    r2604 = 'typing'
    r2605 = PyImport_Import(r2604)
    if is_error(r2605) goto L2051 (error at <module>:371) else goto L963
L963:
    typing = r2605 :: module
    dec_ref r2605
L964:
    r2606 = PyImport_GetModuleDict()
    r2607 = 'typing'
    r2608 = CPyDict_GetItem(r2606, r2607)
    if is_error(r2608) goto L2051 (error at <module>:371) else goto L965
L965:
    r2609 = '_TypedDictMeta'
    r2610 = CPyObject_GetAttr(r2608, r2609)
    dec_ref r2608
    if is_error(r2610) goto L2051 (error at <module>:371) else goto L966
L966:
    r2611 = '__prepare__'
    r2612 = PyObject_HasAttr(r2610, r2611)
    if r2612 goto L967 else goto L971 :: bool
L967:
    r2613 = 'StateOverrideParams'
    r2614 = '__prepare__'
    r2615 = CPyObject_GetAttr(r2610, r2614)
    if is_error(r2615) goto L2052 (error at <module>:371) else goto L968
L968:
    r2616 = [r2613, r2600]
    r2617 = load_address r2616
    r2618 = PyObject_Vectorcall(r2615, r2617, 2, 0)
    dec_ref r2615
    if is_error(r2618) goto L2052 (error at <module>:371) else goto L969
L969:
    r2619 = cast(dict, r2618)
    if is_error(r2619) goto L2052 (error at <module>:371) else goto L970
L970:
    r2620 = r2619
    goto L973
L971:
    r2621 = PyDict_New()
    if is_error(r2621) goto L2052 (error at <module>:371) else goto L972
L972:
    r2620 = r2621
L973:
    r2622 = PyDict_New()
    if is_error(r2622) goto L2053 (error at <module>:371) else goto L974
L974:
    r2623 = load_address PyType_Type
    r2624 = 'balance'
    r2625 = PyDict_SetItem(r2622, r2624, r2623)
    r2626 = r2625 >= 0 :: signed
    if not r2626 goto L2054 (error at <module>:372) else goto L975 :: bool
L975:
    r2627 = load_address PyType_Type
    r2628 = 'nonce'
    r2629 = PyDict_SetItem(r2622, r2628, r2627)
    r2630 = r2629 >= 0 :: signed
    if not r2630 goto L2054 (error at <module>:373) else goto L976 :: bool
L976:
    r2631 = load_address PyType_Type
    r2632 = 'code'
    r2633 = PyDict_SetItem(r2622, r2632, r2631)
    r2634 = r2633 >= 0 :: signed
    if not r2634 goto L2054 (error at <module>:374) else goto L977 :: bool
L977:
    r2635 = load_address PyType_Type
    r2636 = 'state'
    r2637 = PyDict_SetItem(r2622, r2636, r2635)
    r2638 = r2637 >= 0 :: signed
    if not r2638 goto L2054 (error at <module>:375) else goto L978 :: bool
L978:
    r2639 = load_address PyType_Type
    r2640 = 'stateDiff'
    r2641 = PyDict_SetItem(r2622, r2640, r2639)
    r2642 = r2641 >= 0 :: signed
    if not r2642 goto L2054 (error at <module>:376) else goto L979 :: bool
L979:
    r2643 = 'StateOverrideParams'
    r2644 = '__annotations__'
    r2645 = CPyDict_SetItem(r2620, r2644, r2622)
    dec_ref r2622
    r2646 = r2645 >= 0 :: signed
    if not r2646 goto L2053 (error at <module>:371) else goto L980 :: bool
L980:
    r2647 = 'mypyc filler docstring'
    r2648 = '__doc__'
    r2649 = CPyDict_SetItem(r2620, r2648, r2647)
    r2650 = r2649 >= 0 :: signed
    if not r2650 goto L2053 (error at <module>:371) else goto L981 :: bool
L981:
    r2651 = 'faster_web3.types'
    r2652 = '__module__'
    r2653 = CPyDict_SetItem(r2620, r2652, r2651)
    r2654 = r2653 >= 0 :: signed
    if not r2654 goto L2053 (error at <module>:371) else goto L982 :: bool
L982:
    r2655 = [r2643, r2600, r2620]
    r2656 = load_address r2655
    r2657 = PyObject_Vectorcall(r2610, r2656, 3, 0)
    dec_ref r2610
    if is_error(r2657) goto L2055 (error at <module>:371) else goto L983
L983:
    dec_ref r2600
    dec_ref r2620
    faster_web3.types.StateOverrideParams = r2657 :: type
    r2658 = faster_web3.types.globals :: static
    r2659 = 'StateOverrideParams'
    r2660 = PyDict_SetItem(r2658, r2659, r2657)
    dec_ref r2657
    r2661 = r2660 >= 0 :: signed
    if not r2661 goto L1811 (error at <module>:371) else goto L984 :: bool
L984:
    r2662 = faster_web3.types.StateOverrideParams :: type
    r2663 = faster_web3.types.globals :: static
    r2664 = 'Dict'
    r2665 = CPyDict_GetItem(r2663, r2664)
    if is_error(r2665) goto L1811 (error at <module>:379) else goto L985
L985:
    r2666 = faster_web3.types.globals :: static
    r2667 = 'Union'
    r2668 = CPyDict_GetItem(r2666, r2667)
    if is_error(r2668) goto L2056 (error at <module>:379) else goto L986
L986:
    r2669 = load_address PyUnicode_Type
    r2670 = faster_web3.types.globals :: static
    r2671 = 'Address'
    r2672 = CPyDict_GetItem(r2670, r2671)
    if is_error(r2672) goto L2057 (error at <module>:379) else goto L987
L987:
    r2673 = faster_web3.types.globals :: static
    r2674 = 'ChecksumAddress'
    r2675 = CPyDict_GetItem(r2673, r2674)
    if is_error(r2675) goto L2058 (error at <module>:379) else goto L988
L988:
    inc_ref r2669
    r2676 = (r2669, r2672, r2675)
    r2677 = box(tuple[object, object, object], r2676)
    r2678 = PyObject_GetItem(r2668, r2677)
    dec_ref r2668
    dec_ref r2677
    if is_error(r2678) goto L2056 (error at <module>:379) else goto L989
L989:
    r2679 = faster_web3.types.globals :: static
    r2680 = 'StateOverrideParams'
    r2681 = CPyDict_GetItem(r2679, r2680)
    if is_error(r2681) goto L2059 (error at <module>:379) else goto L990
L990:
    r2682 = (r2678, r2681)
    r2683 = box(tuple[object, object], r2682)
    r2684 = PyObject_GetItem(r2665, r2683)
    dec_ref r2665
    dec_ref r2683
    if is_error(r2684) goto L1811 (error at <module>:379) else goto L991
L991:
    r2685 = faster_web3.types.globals :: static
    r2686 = 'StateOverride'
    r2687 = CPyDict_SetItem(r2685, r2686, r2684)
    dec_ref r2684
    r2688 = r2687 >= 0 :: signed
    if not r2688 goto L1811 (error at <module>:379) else goto L992 :: bool
L992:
    r2689 = faster_web3.types.globals :: static
    r2690 = 'Union'
    r2691 = CPyDict_GetItem(r2689, r2690)
    if is_error(r2691) goto L1811 (error at <module>:382) else goto L993
L993:
    r2692 = faster_web3.types.globals :: static
    r2693 = 'Callable'
    r2694 = CPyDict_GetItem(r2692, r2693)
    if is_error(r2694) goto L2060 (error at <module>:383) else goto L994
L994:
    r2695 = 'Web3'
    r2696 = faster_web3.types.globals :: static
    r2697 = 'TxParams'
    r2698 = CPyDict_GetItem(r2696, r2697)
    if is_error(r2698) goto L2061 (error at <module>:383) else goto L995
L995:
    r2699 = PyList_New(2)
    if is_error(r2699) goto L2062 (error at <module>:383) else goto L996
L996:
    r2700 = get_element_ptr r2699 ob_item :: PyListObject
    r2701 = load_mem r2700 :: ptr*
    inc_ref r2695
    set_mem r2701, r2695 :: builtins.object*
    r2702 = r2701 + 8
    set_mem r2702, r2698 :: builtins.object*
    r2703 = faster_web3.types.globals :: static
    r2704 = 'Wei'
    r2705 = CPyDict_GetItem(r2703, r2704)
    if is_error(r2705) goto L2063 (error at <module>:383) else goto L997
L997:
    r2706 = (r2699, r2705)
    r2707 = box(tuple[list, object], r2706)
    r2708 = PyObject_GetItem(r2694, r2707)
    dec_ref r2694
    dec_ref r2707
    if is_error(r2708) goto L2060 (error at <module>:383) else goto L998
L998:
    r2709 = faster_web3.types.globals :: static
    r2710 = 'Callable'
    r2711 = CPyDict_GetItem(r2709, r2710)
    if is_error(r2711) goto L2064 (error at <module>:383) else goto L999
L999:
    r2712 = 'AsyncWeb3'
    r2713 = faster_web3.types.globals :: static
    r2714 = 'TxParams'
    r2715 = CPyDict_GetItem(r2713, r2714)
    if is_error(r2715) goto L2065 (error at <module>:383) else goto L1000
L1000:
    r2716 = PyList_New(2)
    if is_error(r2716) goto L2066 (error at <module>:383) else goto L1001
L1001:
    r2717 = get_element_ptr r2716 ob_item :: PyListObject
    r2718 = load_mem r2717 :: ptr*
    inc_ref r2712
    set_mem r2718, r2712 :: builtins.object*
    r2719 = r2718 + 8
    set_mem r2719, r2715 :: builtins.object*
    r2720 = faster_web3.types.globals :: static
    r2721 = 'Wei'
    r2722 = CPyDict_GetItem(r2720, r2721)
    if is_error(r2722) goto L2067 (error at <module>:383) else goto L1002
L1002:
    r2723 = (r2716, r2722)
    r2724 = box(tuple[list, object], r2723)
    r2725 = PyObject_GetItem(r2711, r2724)
    dec_ref r2711
    dec_ref r2724
    if is_error(r2725) goto L2064 (error at <module>:383) else goto L1003
L1003:
    r2726 = (r2708, r2725)
    r2727 = box(tuple[object, object], r2726)
    r2728 = PyObject_GetItem(r2691, r2727)
    dec_ref r2691
    dec_ref r2727
    if is_error(r2728) goto L1811 (error at <module>:382) else goto L1004
L1004:
    r2729 = faster_web3.types.globals :: static
    r2730 = 'GasPriceStrategy'
    r2731 = CPyDict_SetItem(r2729, r2730, r2728)
    dec_ref r2728
    r2732 = r2731 >= 0 :: signed
    if not r2732 goto L1811 (error at <module>:382) else goto L1005 :: bool
L1005:
    r2733 = 'TxReceipt'
    r2734 = 'blockHash'
    r2735 = faster_web3.types.globals :: static
    r2736 = 'HexBytes'
    r2737 = CPyDict_GetItem(r2735, r2736)
    if is_error(r2737) goto L1811 (error at <module>:391) else goto L1006
L1006:
    r2738 = 'blockNumber'
    r2739 = faster_web3.types.globals :: static
    r2740 = 'BlockNumber'
    r2741 = CPyDict_GetItem(r2739, r2740)
    if is_error(r2741) goto L2068 (error at <module>:392) else goto L1007
L1007:
    r2742 = 'contractAddress'
    r2743 = faster_web3.types.globals :: static
    r2744 = 'Optional'
    r2745 = CPyDict_GetItem(r2743, r2744)
    if is_error(r2745) goto L2069 (error at <module>:393) else goto L1008
L1008:
    r2746 = faster_web3.types.globals :: static
    r2747 = 'ChecksumAddress'
    r2748 = CPyDict_GetItem(r2746, r2747)
    if is_error(r2748) goto L2070 (error at <module>:393) else goto L1009
L1009:
    r2749 = PyObject_GetItem(r2745, r2748)
    dec_ref r2745
    dec_ref r2748
    if is_error(r2749) goto L2069 (error at <module>:393) else goto L1010
L1010:
    r2750 = 'cumulativeGasUsed'
    r2751 = load_address PyLong_Type
    r2752 = 'effectiveGasPrice'
    r2753 = faster_web3.types.globals :: static
    r2754 = 'Wei'
    r2755 = CPyDict_GetItem(r2753, r2754)
    if is_error(r2755) goto L2071 (error at <module>:395) else goto L1011
L1011:
    r2756 = 'gasUsed'
    r2757 = load_address PyLong_Type
    r2758 = 'from'
    r2759 = faster_web3.types.globals :: static
    r2760 = 'ChecksumAddress'
    r2761 = CPyDict_GetItem(r2759, r2760)
    if is_error(r2761) goto L2072 (error at <module>:397) else goto L1012
L1012:
    r2762 = 'logs'
    r2763 = faster_web3.types.globals :: static
    r2764 = 'List'
    r2765 = CPyDict_GetItem(r2763, r2764)
    if is_error(r2765) goto L2073 (error at <module>:398) else goto L1013
L1013:
    r2766 = faster_web3.types.globals :: static
    r2767 = 'LogReceipt'
    r2768 = CPyDict_GetItem(r2766, r2767)
    if is_error(r2768) goto L2074 (error at <module>:398) else goto L1014
L1014:
    r2769 = PyObject_GetItem(r2765, r2768)
    dec_ref r2765
    dec_ref r2768
    if is_error(r2769) goto L2073 (error at <module>:398) else goto L1015
L1015:
    r2770 = 'logsBloom'
    r2771 = faster_web3.types.globals :: static
    r2772 = 'HexBytes'
    r2773 = CPyDict_GetItem(r2771, r2772)
    if is_error(r2773) goto L2075 (error at <module>:399) else goto L1016
L1016:
    r2774 = 'root'
    r2775 = faster_web3.types.globals :: static
    r2776 = 'HexStr'
    r2777 = CPyDict_GetItem(r2775, r2776)
    if is_error(r2777) goto L2076 (error at <module>:400) else goto L1017
L1017:
    r2778 = 'status'
    r2779 = load_address PyLong_Type
    r2780 = 'to'
    r2781 = faster_web3.types.globals :: static
    r2782 = 'ChecksumAddress'
    r2783 = CPyDict_GetItem(r2781, r2782)
    if is_error(r2783) goto L2077 (error at <module>:402) else goto L1018
L1018:
    r2784 = 'transactionHash'
    r2785 = faster_web3.types.globals :: static
    r2786 = 'HexBytes'
    r2787 = CPyDict_GetItem(r2785, r2786)
    if is_error(r2787) goto L2078 (error at <module>:403) else goto L1019
L1019:
    r2788 = 'transactionIndex'
    r2789 = load_address PyLong_Type
    r2790 = 'type'
    r2791 = load_address PyLong_Type
    r2792 = CPyDict_Build(15, r2734, r2737, r2738, r2741, r2742, r2749, r2750, r2751, r2752, r2755, r2756, r2757, r2758, r2761, r2762, r2769, r2770, r2773, r2774, r2777, r2778, r2779, r2780, r2783, r2784, r2787, r2788, r2789, r2790, r2791)
    dec_ref r2737
    dec_ref r2741
    dec_ref r2749
    dec_ref r2755
    dec_ref r2761
    dec_ref r2769
    dec_ref r2773
    dec_ref r2777
    dec_ref r2783
    dec_ref r2787
    if is_error(r2792) goto L1811 (error at <module>:390) else goto L1020
L1020:
    r2793 = faster_web3.types.globals :: static
    r2794 = 'TypedDict'
    r2795 = CPyDict_GetItem(r2793, r2794)
    if is_error(r2795) goto L2079 (error at <module>:388) else goto L1021
L1021:
    r2796 = [r2733, r2792]
    r2797 = load_address r2796
    r2798 = PyObject_Vectorcall(r2795, r2797, 2, 0)
    dec_ref r2795
    if is_error(r2798) goto L2079 (error at <module>:388) else goto L1022
L1022:
    dec_ref r2792
    r2799 = faster_web3.types.globals :: static
    r2800 = 'TxReceipt'
    r2801 = CPyDict_SetItem(r2799, r2800, r2798)
    dec_ref r2798
    r2802 = r2801 >= 0 :: signed
    if not r2802 goto L1811 (error at <module>:388) else goto L1023 :: bool
L1023:
    r2803 = faster_web3.types.globals :: static
    r2804 = 'List'
    r2805 = CPyDict_GetItem(r2803, r2804)
    if is_error(r2805) goto L1811 (error at <module>:409) else goto L1024
L1024:
    r2806 = faster_web3.types.globals :: static
    r2807 = 'TxReceipt'
    r2808 = CPyDict_GetItem(r2806, r2807)
    if is_error(r2808) goto L2080 (error at <module>:409) else goto L1025
L1025:
    r2809 = PyObject_GetItem(r2805, r2808)
    dec_ref r2805
    dec_ref r2808
    if is_error(r2809) goto L1811 (error at <module>:409) else goto L1026
L1026:
    r2810 = faster_web3.types.globals :: static
    r2811 = 'BlockReceipts'
    r2812 = CPyDict_SetItem(r2810, r2811, r2809)
    dec_ref r2809
    r2813 = r2812 >= 0 :: signed
    if not r2813 goto L1811 (error at <module>:409) else goto L1027 :: bool
L1027:
    r2814 = typing :: module
    r2815 = load_address _Py_NoneStruct
    r2816 = r2814 != r2815
    if r2816 goto L1030 else goto L1028 :: bool
L1028:
    r2817 = 'typing'
    r2818 = PyImport_Import(r2817)
    if is_error(r2818) goto L1811 (error at <module>:412) else goto L1029
L1029:
    typing = r2818 :: module
    dec_ref r2818
L1030:
    r2819 = PyImport_GetModuleDict()
    r2820 = 'typing'
    r2821 = CPyDict_GetItem(r2819, r2820)
    if is_error(r2821) goto L1811 (error at <module>:412) else goto L1031
L1031:
    r2822 = '_TypedDict'
    r2823 = CPyObject_GetAttr(r2821, r2822)
    dec_ref r2821
    if is_error(r2823) goto L1811 (error at <module>:412) else goto L1032
L1032:
    r2824 = PyTuple_Pack(1, r2823)
    dec_ref r2823
    if is_error(r2824) goto L1811 (error at <module>:412) else goto L1033
L1033:
    r2825 = typing :: module
    r2826 = load_address _Py_NoneStruct
    r2827 = r2825 != r2826
    if r2827 goto L1036 else goto L1034 :: bool
L1034:
    r2828 = 'typing'
    r2829 = PyImport_Import(r2828)
    if is_error(r2829) goto L2081 (error at <module>:412) else goto L1035
L1035:
    typing = r2829 :: module
    dec_ref r2829
L1036:
    r2830 = PyImport_GetModuleDict()
    r2831 = 'typing'
    r2832 = CPyDict_GetItem(r2830, r2831)
    if is_error(r2832) goto L2081 (error at <module>:412) else goto L1037
L1037:
    r2833 = '_TypedDictMeta'
    r2834 = CPyObject_GetAttr(r2832, r2833)
    dec_ref r2832
    if is_error(r2834) goto L2081 (error at <module>:412) else goto L1038
L1038:
    r2835 = '__prepare__'
    r2836 = PyObject_HasAttr(r2834, r2835)
    if r2836 goto L1039 else goto L1043 :: bool
L1039:
    r2837 = 'SignedTx'
    r2838 = '__prepare__'
    r2839 = CPyObject_GetAttr(r2834, r2838)
    if is_error(r2839) goto L2082 (error at <module>:412) else goto L1040
L1040:
    r2840 = [r2837, r2824]
    r2841 = load_address r2840
    r2842 = PyObject_Vectorcall(r2839, r2841, 2, 0)
    dec_ref r2839
    if is_error(r2842) goto L2082 (error at <module>:412) else goto L1041
L1041:
    r2843 = cast(dict, r2842)
    if is_error(r2843) goto L2082 (error at <module>:412) else goto L1042
L1042:
    r2844 = r2843
    goto L1045
L1043:
    r2845 = PyDict_New()
    if is_error(r2845) goto L2082 (error at <module>:412) else goto L1044
L1044:
    r2844 = r2845
L1045:
    r2846 = PyDict_New()
    if is_error(r2846) goto L2083 (error at <module>:412) else goto L1046
L1046:
    r2847 = load_address PyBytes_Type
    r2848 = 'raw'
    r2849 = PyDict_SetItem(r2846, r2848, r2847)
    r2850 = r2849 >= 0 :: signed
    if not r2850 goto L2084 (error at <module>:413) else goto L1047 :: bool
L1047:
    r2851 = load_address PyType_Type
    r2852 = 'tx'
    r2853 = PyDict_SetItem(r2846, r2852, r2851)
    r2854 = r2853 >= 0 :: signed
    if not r2854 goto L2084 (error at <module>:414) else goto L1048 :: bool
L1048:
    r2855 = 'SignedTx'
    r2856 = '__annotations__'
    r2857 = CPyDict_SetItem(r2844, r2856, r2846)
    dec_ref r2846
    r2858 = r2857 >= 0 :: signed
    if not r2858 goto L2083 (error at <module>:412) else goto L1049 :: bool
L1049:
    r2859 = 'mypyc filler docstring'
    r2860 = '__doc__'
    r2861 = CPyDict_SetItem(r2844, r2860, r2859)
    r2862 = r2861 >= 0 :: signed
    if not r2862 goto L2083 (error at <module>:412) else goto L1050 :: bool
L1050:
    r2863 = 'faster_web3.types'
    r2864 = '__module__'
    r2865 = CPyDict_SetItem(r2844, r2864, r2863)
    r2866 = r2865 >= 0 :: signed
    if not r2866 goto L2083 (error at <module>:412) else goto L1051 :: bool
L1051:
    r2867 = [r2855, r2824, r2844]
    r2868 = load_address r2867
    r2869 = PyObject_Vectorcall(r2834, r2868, 3, 0)
    dec_ref r2834
    if is_error(r2869) goto L2085 (error at <module>:412) else goto L1052
L1052:
    dec_ref r2824
    dec_ref r2844
    faster_web3.types.SignedTx = r2869 :: type
    r2870 = faster_web3.types.globals :: static
    r2871 = 'SignedTx'
    r2872 = PyDict_SetItem(r2870, r2871, r2869)
    dec_ref r2869
    r2873 = r2872 >= 0 :: signed
    if not r2873 goto L1811 (error at <module>:412) else goto L1053 :: bool
L1053:
    r2874 = faster_web3.types.SignedTx :: type
    r2875 = typing :: module
    r2876 = load_address _Py_NoneStruct
    r2877 = r2875 != r2876
    if r2877 goto L1056 else goto L1054 :: bool
L1054:
    r2878 = 'typing'
    r2879 = PyImport_Import(r2878)
    if is_error(r2879) goto L1811 (error at <module>:417) else goto L1055
L1055:
    typing = r2879 :: module
    dec_ref r2879
L1056:
    r2880 = PyImport_GetModuleDict()
    r2881 = 'typing'
    r2882 = CPyDict_GetItem(r2880, r2881)
    if is_error(r2882) goto L1811 (error at <module>:417) else goto L1057
L1057:
    r2883 = '_TypedDict'
    r2884 = CPyObject_GetAttr(r2882, r2883)
    dec_ref r2882
    if is_error(r2884) goto L1811 (error at <module>:417) else goto L1058
L1058:
    r2885 = PyTuple_Pack(1, r2884)
    dec_ref r2884
    if is_error(r2885) goto L1811 (error at <module>:417) else goto L1059
L1059:
    r2886 = typing :: module
    r2887 = load_address _Py_NoneStruct
    r2888 = r2886 != r2887
    if r2888 goto L1062 else goto L1060 :: bool
L1060:
    r2889 = 'typing'
    r2890 = PyImport_Import(r2889)
    if is_error(r2890) goto L2086 (error at <module>:417) else goto L1061
L1061:
    typing = r2890 :: module
    dec_ref r2890
L1062:
    r2891 = PyImport_GetModuleDict()
    r2892 = 'typing'
    r2893 = CPyDict_GetItem(r2891, r2892)
    if is_error(r2893) goto L2086 (error at <module>:417) else goto L1063
L1063:
    r2894 = '_TypedDictMeta'
    r2895 = CPyObject_GetAttr(r2893, r2894)
    dec_ref r2893
    if is_error(r2895) goto L2086 (error at <module>:417) else goto L1064
L1064:
    r2896 = '__prepare__'
    r2897 = PyObject_HasAttr(r2895, r2896)
    if r2897 goto L1065 else goto L1069 :: bool
L1065:
    r2898 = 'StorageProof'
    r2899 = '__prepare__'
    r2900 = CPyObject_GetAttr(r2895, r2899)
    if is_error(r2900) goto L2087 (error at <module>:417) else goto L1066
L1066:
    r2901 = [r2898, r2885]
    r2902 = load_address r2901
    r2903 = PyObject_Vectorcall(r2900, r2902, 2, 0)
    dec_ref r2900
    if is_error(r2903) goto L2087 (error at <module>:417) else goto L1067
L1067:
    r2904 = cast(dict, r2903)
    if is_error(r2904) goto L2087 (error at <module>:417) else goto L1068
L1068:
    r2905 = r2904
    goto L1071
L1069:
    r2906 = PyDict_New()
    if is_error(r2906) goto L2087 (error at <module>:417) else goto L1070
L1070:
    r2905 = r2906
L1071:
    r2907 = PyDict_New()
    if is_error(r2907) goto L2088 (error at <module>:417) else goto L1072
L1072:
    r2908 = faster_web3.types.globals :: static
    r2909 = 'HexStr'
    r2910 = CPyDict_GetItem(r2908, r2909)
    if is_error(r2910) goto L2089 (error at <module>:418) else goto L1073
L1073:
    r2911 = 'key'
    r2912 = PyDict_SetItem(r2907, r2911, r2910)
    dec_ref r2910
    r2913 = r2912 >= 0 :: signed
    if not r2913 goto L2089 (error at <module>:418) else goto L1074 :: bool
L1074:
    r2914 = faster_web3.types.globals :: static
    r2915 = 'Sequence'
    r2916 = CPyDict_GetItem(r2914, r2915)
    if is_error(r2916) goto L2089 (error at <module>:419) else goto L1075
L1075:
    r2917 = 'proof'
    r2918 = PyDict_SetItem(r2907, r2917, r2916)
    dec_ref r2916
    r2919 = r2918 >= 0 :: signed
    if not r2919 goto L2089 (error at <module>:419) else goto L1076 :: bool
L1076:
    r2920 = load_address PyType_Type
    r2921 = 'value'
    r2922 = PyDict_SetItem(r2907, r2921, r2920)
    r2923 = r2922 >= 0 :: signed
    if not r2923 goto L2089 (error at <module>:420) else goto L1077 :: bool
L1077:
    r2924 = 'StorageProof'
    r2925 = '__annotations__'
    r2926 = CPyDict_SetItem(r2905, r2925, r2907)
    dec_ref r2907
    r2927 = r2926 >= 0 :: signed
    if not r2927 goto L2088 (error at <module>:417) else goto L1078 :: bool
L1078:
    r2928 = 'mypyc filler docstring'
    r2929 = '__doc__'
    r2930 = CPyDict_SetItem(r2905, r2929, r2928)
    r2931 = r2930 >= 0 :: signed
    if not r2931 goto L2088 (error at <module>:417) else goto L1079 :: bool
L1079:
    r2932 = 'faster_web3.types'
    r2933 = '__module__'
    r2934 = CPyDict_SetItem(r2905, r2933, r2932)
    r2935 = r2934 >= 0 :: signed
    if not r2935 goto L2088 (error at <module>:417) else goto L1080 :: bool
L1080:
    r2936 = [r2924, r2885, r2905]
    r2937 = load_address r2936
    r2938 = PyObject_Vectorcall(r2895, r2937, 3, 0)
    dec_ref r2895
    if is_error(r2938) goto L2090 (error at <module>:417) else goto L1081
L1081:
    dec_ref r2885
    dec_ref r2905
    faster_web3.types.StorageProof = r2938 :: type
    r2939 = faster_web3.types.globals :: static
    r2940 = 'StorageProof'
    r2941 = PyDict_SetItem(r2939, r2940, r2938)
    dec_ref r2938
    r2942 = r2941 >= 0 :: signed
    if not r2942 goto L1811 (error at <module>:417) else goto L1082 :: bool
L1082:
    r2943 = faster_web3.types.StorageProof :: type
    r2944 = typing :: module
    r2945 = load_address _Py_NoneStruct
    r2946 = r2944 != r2945
    if r2946 goto L1085 else goto L1083 :: bool
L1083:
    r2947 = 'typing'
    r2948 = PyImport_Import(r2947)
    if is_error(r2948) goto L1811 (error at <module>:423) else goto L1084
L1084:
    typing = r2948 :: module
    dec_ref r2948
L1085:
    r2949 = PyImport_GetModuleDict()
    r2950 = 'typing'
    r2951 = CPyDict_GetItem(r2949, r2950)
    if is_error(r2951) goto L1811 (error at <module>:423) else goto L1086
L1086:
    r2952 = '_TypedDict'
    r2953 = CPyObject_GetAttr(r2951, r2952)
    dec_ref r2951
    if is_error(r2953) goto L1811 (error at <module>:423) else goto L1087
L1087:
    r2954 = PyTuple_Pack(1, r2953)
    dec_ref r2953
    if is_error(r2954) goto L1811 (error at <module>:423) else goto L1088
L1088:
    r2955 = typing :: module
    r2956 = load_address _Py_NoneStruct
    r2957 = r2955 != r2956
    if r2957 goto L1091 else goto L1089 :: bool
L1089:
    r2958 = 'typing'
    r2959 = PyImport_Import(r2958)
    if is_error(r2959) goto L2091 (error at <module>:423) else goto L1090
L1090:
    typing = r2959 :: module
    dec_ref r2959
L1091:
    r2960 = PyImport_GetModuleDict()
    r2961 = 'typing'
    r2962 = CPyDict_GetItem(r2960, r2961)
    if is_error(r2962) goto L2091 (error at <module>:423) else goto L1092
L1092:
    r2963 = '_TypedDictMeta'
    r2964 = CPyObject_GetAttr(r2962, r2963)
    dec_ref r2962
    if is_error(r2964) goto L2091 (error at <module>:423) else goto L1093
L1093:
    r2965 = '__prepare__'
    r2966 = PyObject_HasAttr(r2964, r2965)
    if r2966 goto L1094 else goto L1098 :: bool
L1094:
    r2967 = 'MerkleProof'
    r2968 = '__prepare__'
    r2969 = CPyObject_GetAttr(r2964, r2968)
    if is_error(r2969) goto L2092 (error at <module>:423) else goto L1095
L1095:
    r2970 = [r2967, r2954]
    r2971 = load_address r2970
    r2972 = PyObject_Vectorcall(r2969, r2971, 2, 0)
    dec_ref r2969
    if is_error(r2972) goto L2092 (error at <module>:423) else goto L1096
L1096:
    r2973 = cast(dict, r2972)
    if is_error(r2973) goto L2092 (error at <module>:423) else goto L1097
L1097:
    r2974 = r2973
    goto L1100
L1098:
    r2975 = PyDict_New()
    if is_error(r2975) goto L2092 (error at <module>:423) else goto L1099
L1099:
    r2974 = r2975
L1100:
    r2976 = PyDict_New()
    if is_error(r2976) goto L2093 (error at <module>:423) else goto L1101
L1101:
    r2977 = faster_web3.types.globals :: static
    r2978 = 'ChecksumAddress'
    r2979 = CPyDict_GetItem(r2977, r2978)
    if is_error(r2979) goto L2094 (error at <module>:424) else goto L1102
L1102:
    r2980 = 'address'
    r2981 = PyDict_SetItem(r2976, r2980, r2979)
    dec_ref r2979
    r2982 = r2981 >= 0 :: signed
    if not r2982 goto L2094 (error at <module>:424) else goto L1103 :: bool
L1103:
    r2983 = faster_web3.types.globals :: static
    r2984 = 'Sequence'
    r2985 = CPyDict_GetItem(r2983, r2984)
    if is_error(r2985) goto L2094 (error at <module>:425) else goto L1104
L1104:
    r2986 = 'accountProof'
    r2987 = PyDict_SetItem(r2976, r2986, r2985)
    dec_ref r2985
    r2988 = r2987 >= 0 :: signed
    if not r2988 goto L2094 (error at <module>:425) else goto L1105 :: bool
L1105:
    r2989 = load_address PyLong_Type
    r2990 = 'balance'
    r2991 = PyDict_SetItem(r2976, r2990, r2989)
    r2992 = r2991 >= 0 :: signed
    if not r2992 goto L2094 (error at <module>:426) else goto L1106 :: bool
L1106:
    r2993 = load_address PyType_Type
    r2994 = 'codeHash'
    r2995 = PyDict_SetItem(r2976, r2994, r2993)
    r2996 = r2995 >= 0 :: signed
    if not r2996 goto L2094 (error at <module>:427) else goto L1107 :: bool
L1107:
    r2997 = faster_web3.types.globals :: static
    r2998 = 'Nonce'
    r2999 = CPyDict_GetItem(r2997, r2998)
    if is_error(r2999) goto L2094 (error at <module>:428) else goto L1108
L1108:
    r3000 = 'nonce'
    r3001 = PyDict_SetItem(r2976, r3000, r2999)
    dec_ref r2999
    r3002 = r3001 >= 0 :: signed
    if not r3002 goto L2094 (error at <module>:428) else goto L1109 :: bool
L1109:
    r3003 = load_address PyType_Type
    r3004 = 'storageHash'
    r3005 = PyDict_SetItem(r2976, r3004, r3003)
    r3006 = r3005 >= 0 :: signed
    if not r3006 goto L2094 (error at <module>:429) else goto L1110 :: bool
L1110:
    r3007 = faster_web3.types.globals :: static
    r3008 = 'Sequence'
    r3009 = CPyDict_GetItem(r3007, r3008)
    if is_error(r3009) goto L2094 (error at <module>:430) else goto L1111
L1111:
    r3010 = 'storageProof'
    r3011 = PyDict_SetItem(r2976, r3010, r3009)
    dec_ref r3009
    r3012 = r3011 >= 0 :: signed
    if not r3012 goto L2094 (error at <module>:430) else goto L1112 :: bool
L1112:
    r3013 = 'MerkleProof'
    r3014 = '__annotations__'
    r3015 = CPyDict_SetItem(r2974, r3014, r2976)
    dec_ref r2976
    r3016 = r3015 >= 0 :: signed
    if not r3016 goto L2093 (error at <module>:423) else goto L1113 :: bool
L1113:
    r3017 = 'mypyc filler docstring'
    r3018 = '__doc__'
    r3019 = CPyDict_SetItem(r2974, r3018, r3017)
    r3020 = r3019 >= 0 :: signed
    if not r3020 goto L2093 (error at <module>:423) else goto L1114 :: bool
L1114:
    r3021 = 'faster_web3.types'
    r3022 = '__module__'
    r3023 = CPyDict_SetItem(r2974, r3022, r3021)
    r3024 = r3023 >= 0 :: signed
    if not r3024 goto L2093 (error at <module>:423) else goto L1115 :: bool
L1115:
    r3025 = [r3013, r2954, r2974]
    r3026 = load_address r3025
    r3027 = PyObject_Vectorcall(r2964, r3026, 3, 0)
    dec_ref r2964
    if is_error(r3027) goto L2095 (error at <module>:423) else goto L1116
L1116:
    dec_ref r2954
    dec_ref r2974
    faster_web3.types.MerkleProof = r3027 :: type
    r3028 = faster_web3.types.globals :: static
    r3029 = 'MerkleProof'
    r3030 = PyDict_SetItem(r3028, r3029, r3027)
    dec_ref r3027
    r3031 = r3030 >= 0 :: signed
    if not r3031 goto L1811 (error at <module>:423) else goto L1117 :: bool
L1117:
    r3032 = faster_web3.types.MerkleProof :: type
    r3033 = typing :: module
    r3034 = load_address _Py_NoneStruct
    r3035 = r3033 != r3034
    if r3035 goto L1120 else goto L1118 :: bool
L1118:
    r3036 = 'typing'
    r3037 = PyImport_Import(r3036)
    if is_error(r3037) goto L1811 (error at <module>:433) else goto L1119
L1119:
    typing = r3037 :: module
    dec_ref r3037
L1120:
    r3038 = PyImport_GetModuleDict()
    r3039 = 'typing'
    r3040 = CPyDict_GetItem(r3038, r3039)
    if is_error(r3040) goto L1811 (error at <module>:433) else goto L1121
L1121:
    r3041 = '_TypedDict'
    r3042 = CPyObject_GetAttr(r3040, r3041)
    dec_ref r3040
    if is_error(r3042) goto L1811 (error at <module>:433) else goto L1122
L1122:
    r3043 = PyTuple_Pack(1, r3042)
    dec_ref r3042
    if is_error(r3043) goto L1811 (error at <module>:433) else goto L1123
L1123:
    r3044 = typing :: module
    r3045 = load_address _Py_NoneStruct
    r3046 = r3044 != r3045
    if r3046 goto L1126 else goto L1124 :: bool
L1124:
    r3047 = 'typing'
    r3048 = PyImport_Import(r3047)
    if is_error(r3048) goto L2096 (error at <module>:433) else goto L1125
L1125:
    typing = r3048 :: module
    dec_ref r3048
L1126:
    r3049 = PyImport_GetModuleDict()
    r3050 = 'typing'
    r3051 = CPyDict_GetItem(r3049, r3050)
    if is_error(r3051) goto L2096 (error at <module>:433) else goto L1127
L1127:
    r3052 = '_TypedDictMeta'
    r3053 = CPyObject_GetAttr(r3051, r3052)
    dec_ref r3051
    if is_error(r3053) goto L2096 (error at <module>:433) else goto L1128
L1128:
    r3054 = '__prepare__'
    r3055 = PyObject_HasAttr(r3053, r3054)
    if r3055 goto L1129 else goto L1133 :: bool
L1129:
    r3056 = 'Protocol'
    r3057 = '__prepare__'
    r3058 = CPyObject_GetAttr(r3053, r3057)
    if is_error(r3058) goto L2097 (error at <module>:433) else goto L1130
L1130:
    r3059 = [r3056, r3043]
    r3060 = load_address r3059
    r3061 = PyObject_Vectorcall(r3058, r3060, 2, 0)
    dec_ref r3058
    if is_error(r3061) goto L2097 (error at <module>:433) else goto L1131
L1131:
    r3062 = cast(dict, r3061)
    if is_error(r3062) goto L2097 (error at <module>:433) else goto L1132
L1132:
    r3063 = r3062
    goto L1135
L1133:
    r3064 = PyDict_New()
    if is_error(r3064) goto L2097 (error at <module>:433) else goto L1134
L1134:
    r3063 = r3064
L1135:
    r3065 = PyDict_New()
    if is_error(r3065) goto L2098 (error at <module>:433) else goto L1136
L1136:
    r3066 = load_address PyLong_Type
    r3067 = 'difficulty'
    r3068 = PyDict_SetItem(r3065, r3067, r3066)
    r3069 = r3068 >= 0 :: signed
    if not r3069 goto L2099 (error at <module>:434) else goto L1137 :: bool
L1137:
    r3070 = faster_web3.types.globals :: static
    r3071 = 'HexStr'
    r3072 = CPyDict_GetItem(r3070, r3071)
    if is_error(r3072) goto L2099 (error at <module>:435) else goto L1138
L1138:
    r3073 = 'head'
    r3074 = PyDict_SetItem(r3065, r3073, r3072)
    dec_ref r3072
    r3075 = r3074 >= 0 :: signed
    if not r3075 goto L2099 (error at <module>:435) else goto L1139 :: bool
L1139:
    r3076 = load_address PyLong_Type
    r3077 = 'network'
    r3078 = PyDict_SetItem(r3065, r3077, r3076)
    r3079 = r3078 >= 0 :: signed
    if not r3079 goto L2099 (error at <module>:436) else goto L1140 :: bool
L1140:
    r3080 = load_address PyLong_Type
    r3081 = 'version'
    r3082 = PyDict_SetItem(r3065, r3081, r3080)
    r3083 = r3082 >= 0 :: signed
    if not r3083 goto L2099 (error at <module>:437) else goto L1141 :: bool
L1141:
    r3084 = 'Protocol'
    r3085 = '__annotations__'
    r3086 = CPyDict_SetItem(r3063, r3085, r3065)
    dec_ref r3065
    r3087 = r3086 >= 0 :: signed
    if not r3087 goto L2098 (error at <module>:433) else goto L1142 :: bool
L1142:
    r3088 = 'mypyc filler docstring'
    r3089 = '__doc__'
    r3090 = CPyDict_SetItem(r3063, r3089, r3088)
    r3091 = r3090 >= 0 :: signed
    if not r3091 goto L2098 (error at <module>:433) else goto L1143 :: bool
L1143:
    r3092 = 'faster_web3.types'
    r3093 = '__module__'
    r3094 = CPyDict_SetItem(r3063, r3093, r3092)
    r3095 = r3094 >= 0 :: signed
    if not r3095 goto L2098 (error at <module>:433) else goto L1144 :: bool
L1144:
    r3096 = [r3084, r3043, r3063]
    r3097 = load_address r3096
    r3098 = PyObject_Vectorcall(r3053, r3097, 3, 0)
    dec_ref r3053
    if is_error(r3098) goto L2100 (error at <module>:433) else goto L1145
L1145:
    dec_ref r3043
    dec_ref r3063
    faster_web3.types.Protocol = r3098 :: type
    r3099 = faster_web3.types.globals :: static
    r3100 = 'Protocol'
    r3101 = PyDict_SetItem(r3099, r3100, r3098)
    dec_ref r3098
    r3102 = r3101 >= 0 :: signed
    if not r3102 goto L1811 (error at <module>:433) else goto L1146 :: bool
L1146:
    r3103 = faster_web3.types.Protocol :: type
    r3104 = typing :: module
    r3105 = load_address _Py_NoneStruct
    r3106 = r3104 != r3105
    if r3106 goto L1149 else goto L1147 :: bool
L1147:
    r3107 = 'typing'
    r3108 = PyImport_Import(r3107)
    if is_error(r3108) goto L1811 (error at <module>:440) else goto L1148
L1148:
    typing = r3108 :: module
    dec_ref r3108
L1149:
    r3109 = PyImport_GetModuleDict()
    r3110 = 'typing'
    r3111 = CPyDict_GetItem(r3109, r3110)
    if is_error(r3111) goto L1811 (error at <module>:440) else goto L1150
L1150:
    r3112 = '_TypedDict'
    r3113 = CPyObject_GetAttr(r3111, r3112)
    dec_ref r3111
    if is_error(r3113) goto L1811 (error at <module>:440) else goto L1151
L1151:
    r3114 = PyTuple_Pack(1, r3113)
    dec_ref r3113
    if is_error(r3114) goto L1811 (error at <module>:440) else goto L1152
L1152:
    r3115 = typing :: module
    r3116 = load_address _Py_NoneStruct
    r3117 = r3115 != r3116
    if r3117 goto L1155 else goto L1153 :: bool
L1153:
    r3118 = 'typing'
    r3119 = PyImport_Import(r3118)
    if is_error(r3119) goto L2101 (error at <module>:440) else goto L1154
L1154:
    typing = r3119 :: module
    dec_ref r3119
L1155:
    r3120 = PyImport_GetModuleDict()
    r3121 = 'typing'
    r3122 = CPyDict_GetItem(r3120, r3121)
    if is_error(r3122) goto L2101 (error at <module>:440) else goto L1156
L1156:
    r3123 = '_TypedDictMeta'
    r3124 = CPyObject_GetAttr(r3122, r3123)
    dec_ref r3122
    if is_error(r3124) goto L2101 (error at <module>:440) else goto L1157
L1157:
    r3125 = '__prepare__'
    r3126 = PyObject_HasAttr(r3124, r3125)
    if r3126 goto L1158 else goto L1162 :: bool
L1158:
    r3127 = 'NodeInfo'
    r3128 = '__prepare__'
    r3129 = CPyObject_GetAttr(r3124, r3128)
    if is_error(r3129) goto L2102 (error at <module>:440) else goto L1159
L1159:
    r3130 = [r3127, r3114]
    r3131 = load_address r3130
    r3132 = PyObject_Vectorcall(r3129, r3131, 2, 0)
    dec_ref r3129
    if is_error(r3132) goto L2102 (error at <module>:440) else goto L1160
L1160:
    r3133 = cast(dict, r3132)
    if is_error(r3133) goto L2102 (error at <module>:440) else goto L1161
L1161:
    r3134 = r3133
    goto L1164
L1162:
    r3135 = PyDict_New()
    if is_error(r3135) goto L2102 (error at <module>:440) else goto L1163
L1163:
    r3134 = r3135
L1164:
    r3136 = PyDict_New()
    if is_error(r3136) goto L2103 (error at <module>:440) else goto L1165
L1165:
    r3137 = faster_web3.types.globals :: static
    r3138 = 'EnodeURI'
    r3139 = CPyDict_GetItem(r3137, r3138)
    if is_error(r3139) goto L2104 (error at <module>:441) else goto L1166
L1166:
    r3140 = 'enode'
    r3141 = PyDict_SetItem(r3136, r3140, r3139)
    dec_ref r3139
    r3142 = r3141 >= 0 :: signed
    if not r3142 goto L2104 (error at <module>:441) else goto L1167 :: bool
L1167:
    r3143 = faster_web3.types.globals :: static
    r3144 = 'HexStr'
    r3145 = CPyDict_GetItem(r3143, r3144)
    if is_error(r3145) goto L2104 (error at <module>:442) else goto L1168
L1168:
    r3146 = 'id'
    r3147 = PyDict_SetItem(r3136, r3146, r3145)
    dec_ref r3145
    r3148 = r3147 >= 0 :: signed
    if not r3148 goto L2104 (error at <module>:442) else goto L1169 :: bool
L1169:
    r3149 = load_address PyUnicode_Type
    r3150 = 'ip'
    r3151 = PyDict_SetItem(r3136, r3150, r3149)
    r3152 = r3151 >= 0 :: signed
    if not r3152 goto L2104 (error at <module>:443) else goto L1170 :: bool
L1170:
    r3153 = load_address PyUnicode_Type
    r3154 = 'listenAddr'
    r3155 = PyDict_SetItem(r3136, r3154, r3153)
    r3156 = r3155 >= 0 :: signed
    if not r3156 goto L2104 (error at <module>:444) else goto L1171 :: bool
L1171:
    r3157 = load_address PyUnicode_Type
    r3158 = 'name'
    r3159 = PyDict_SetItem(r3136, r3158, r3157)
    r3160 = r3159 >= 0 :: signed
    if not r3160 goto L2104 (error at <module>:445) else goto L1172 :: bool
L1172:
    r3161 = load_address PyDict_Type
    r3162 = 'ports'
    r3163 = PyDict_SetItem(r3136, r3162, r3161)
    r3164 = r3163 >= 0 :: signed
    if not r3164 goto L2104 (error at <module>:446) else goto L1173 :: bool
L1173:
    r3165 = load_address PyDict_Type
    r3166 = 'protocols'
    r3167 = PyDict_SetItem(r3136, r3166, r3165)
    r3168 = r3167 >= 0 :: signed
    if not r3168 goto L2104 (error at <module>:447) else goto L1174 :: bool
L1174:
    r3169 = 'NodeInfo'
    r3170 = '__annotations__'
    r3171 = CPyDict_SetItem(r3134, r3170, r3136)
    dec_ref r3136
    r3172 = r3171 >= 0 :: signed
    if not r3172 goto L2103 (error at <module>:440) else goto L1175 :: bool
L1175:
    r3173 = 'mypyc filler docstring'
    r3174 = '__doc__'
    r3175 = CPyDict_SetItem(r3134, r3174, r3173)
    r3176 = r3175 >= 0 :: signed
    if not r3176 goto L2103 (error at <module>:440) else goto L1176 :: bool
L1176:
    r3177 = 'faster_web3.types'
    r3178 = '__module__'
    r3179 = CPyDict_SetItem(r3134, r3178, r3177)
    r3180 = r3179 >= 0 :: signed
    if not r3180 goto L2103 (error at <module>:440) else goto L1177 :: bool
L1177:
    r3181 = [r3169, r3114, r3134]
    r3182 = load_address r3181
    r3183 = PyObject_Vectorcall(r3124, r3182, 3, 0)
    dec_ref r3124
    if is_error(r3183) goto L2105 (error at <module>:440) else goto L1178
L1178:
    dec_ref r3114
    dec_ref r3134
    faster_web3.types.NodeInfo = r3183 :: type
    r3184 = faster_web3.types.globals :: static
    r3185 = 'NodeInfo'
    r3186 = PyDict_SetItem(r3184, r3185, r3183)
    dec_ref r3183
    r3187 = r3186 >= 0 :: signed
    if not r3187 goto L1811 (error at <module>:440) else goto L1179 :: bool
L1179:
    r3188 = faster_web3.types.NodeInfo :: type
    r3189 = typing :: module
    r3190 = load_address _Py_NoneStruct
    r3191 = r3189 != r3190
    if r3191 goto L1182 else goto L1180 :: bool
L1180:
    r3192 = 'typing'
    r3193 = PyImport_Import(r3192)
    if is_error(r3193) goto L1811 (error at <module>:450) else goto L1181
L1181:
    typing = r3193 :: module
    dec_ref r3193
L1182:
    r3194 = PyImport_GetModuleDict()
    r3195 = 'typing'
    r3196 = CPyDict_GetItem(r3194, r3195)
    if is_error(r3196) goto L1811 (error at <module>:450) else goto L1183
L1183:
    r3197 = '_TypedDict'
    r3198 = CPyObject_GetAttr(r3196, r3197)
    dec_ref r3196
    if is_error(r3198) goto L1811 (error at <module>:450) else goto L1184
L1184:
    r3199 = PyTuple_Pack(1, r3198)
    dec_ref r3198
    if is_error(r3199) goto L1811 (error at <module>:450) else goto L1185
L1185:
    r3200 = typing :: module
    r3201 = load_address _Py_NoneStruct
    r3202 = r3200 != r3201
    if r3202 goto L1188 else goto L1186 :: bool
L1186:
    r3203 = 'typing'
    r3204 = PyImport_Import(r3203)
    if is_error(r3204) goto L2106 (error at <module>:450) else goto L1187
L1187:
    typing = r3204 :: module
    dec_ref r3204
L1188:
    r3205 = PyImport_GetModuleDict()
    r3206 = 'typing'
    r3207 = CPyDict_GetItem(r3205, r3206)
    if is_error(r3207) goto L2106 (error at <module>:450) else goto L1189
L1189:
    r3208 = '_TypedDictMeta'
    r3209 = CPyObject_GetAttr(r3207, r3208)
    dec_ref r3207
    if is_error(r3209) goto L2106 (error at <module>:450) else goto L1190
L1190:
    r3210 = '__prepare__'
    r3211 = PyObject_HasAttr(r3209, r3210)
    if r3211 goto L1191 else goto L1195 :: bool
L1191:
    r3212 = 'Peer'
    r3213 = '__prepare__'
    r3214 = CPyObject_GetAttr(r3209, r3213)
    if is_error(r3214) goto L2107 (error at <module>:450) else goto L1192
L1192:
    r3215 = [r3212, r3199]
    r3216 = load_address r3215
    r3217 = PyObject_Vectorcall(r3214, r3216, 2, 0)
    dec_ref r3214
    if is_error(r3217) goto L2107 (error at <module>:450) else goto L1193
L1193:
    r3218 = cast(dict, r3217)
    if is_error(r3218) goto L2107 (error at <module>:450) else goto L1194
L1194:
    r3219 = r3218
    goto L1197
L1195:
    r3220 = PyDict_New()
    if is_error(r3220) goto L2107 (error at <module>:450) else goto L1196
L1196:
    r3219 = r3220
L1197:
    r3221 = PyDict_New()
    if is_error(r3221) goto L2108 (error at <module>:450) else goto L1198
L1198:
    r3222 = faster_web3.types.globals :: static
    r3223 = 'Sequence'
    r3224 = CPyDict_GetItem(r3222, r3223)
    if is_error(r3224) goto L2109 (error at <module>:451) else goto L1199
L1199:
    r3225 = 'caps'
    r3226 = PyDict_SetItem(r3221, r3225, r3224)
    dec_ref r3224
    r3227 = r3226 >= 0 :: signed
    if not r3227 goto L2109 (error at <module>:451) else goto L1200 :: bool
L1200:
    r3228 = faster_web3.types.globals :: static
    r3229 = 'HexStr'
    r3230 = CPyDict_GetItem(r3228, r3229)
    if is_error(r3230) goto L2109 (error at <module>:452) else goto L1201
L1201:
    r3231 = 'id'
    r3232 = PyDict_SetItem(r3221, r3231, r3230)
    dec_ref r3230
    r3233 = r3232 >= 0 :: signed
    if not r3233 goto L2109 (error at <module>:452) else goto L1202 :: bool
L1202:
    r3234 = load_address PyUnicode_Type
    r3235 = 'name'
    r3236 = PyDict_SetItem(r3221, r3235, r3234)
    r3237 = r3236 >= 0 :: signed
    if not r3237 goto L2109 (error at <module>:453) else goto L1203 :: bool
L1203:
    r3238 = load_address PyDict_Type
    r3239 = 'network'
    r3240 = PyDict_SetItem(r3221, r3239, r3238)
    r3241 = r3240 >= 0 :: signed
    if not r3241 goto L2109 (error at <module>:454) else goto L1204 :: bool
L1204:
    r3242 = load_address PyDict_Type
    r3243 = 'protocols'
    r3244 = PyDict_SetItem(r3221, r3243, r3242)
    r3245 = r3244 >= 0 :: signed
    if not r3245 goto L2109 (error at <module>:455) else goto L1205 :: bool
L1205:
    r3246 = 'Peer'
    r3247 = '__annotations__'
    r3248 = CPyDict_SetItem(r3219, r3247, r3221)
    dec_ref r3221
    r3249 = r3248 >= 0 :: signed
    if not r3249 goto L2108 (error at <module>:450) else goto L1206 :: bool
L1206:
    r3250 = 'mypyc filler docstring'
    r3251 = '__doc__'
    r3252 = CPyDict_SetItem(r3219, r3251, r3250)
    r3253 = r3252 >= 0 :: signed
    if not r3253 goto L2108 (error at <module>:450) else goto L1207 :: bool
L1207:
    r3254 = 'faster_web3.types'
    r3255 = '__module__'
    r3256 = CPyDict_SetItem(r3219, r3255, r3254)
    r3257 = r3256 >= 0 :: signed
    if not r3257 goto L2108 (error at <module>:450) else goto L1208 :: bool
L1208:
    r3258 = [r3246, r3199, r3219]
    r3259 = load_address r3258
    r3260 = PyObject_Vectorcall(r3209, r3259, 3, 0)
    dec_ref r3209
    if is_error(r3260) goto L2110 (error at <module>:450) else goto L1209
L1209:
    dec_ref r3199
    dec_ref r3219
    faster_web3.types.Peer = r3260 :: type
    r3261 = faster_web3.types.globals :: static
    r3262 = 'Peer'
    r3263 = PyDict_SetItem(r3261, r3262, r3260)
    dec_ref r3260
    r3264 = r3263 >= 0 :: signed
    if not r3264 goto L1811 (error at <module>:450) else goto L1210 :: bool
L1210:
    r3265 = faster_web3.types.Peer :: type
    r3266 = typing :: module
    r3267 = load_address _Py_NoneStruct
    r3268 = r3266 != r3267
    if r3268 goto L1213 else goto L1211 :: bool
L1211:
    r3269 = 'typing'
    r3270 = PyImport_Import(r3269)
    if is_error(r3270) goto L1811 (error at <module>:458) else goto L1212
L1212:
    typing = r3270 :: module
    dec_ref r3270
L1213:
    r3271 = PyImport_GetModuleDict()
    r3272 = 'typing'
    r3273 = CPyDict_GetItem(r3271, r3272)
    if is_error(r3273) goto L1811 (error at <module>:458) else goto L1214
L1214:
    r3274 = '_TypedDict'
    r3275 = CPyObject_GetAttr(r3273, r3274)
    dec_ref r3273
    if is_error(r3275) goto L1811 (error at <module>:458) else goto L1215
L1215:
    r3276 = PyTuple_Pack(1, r3275)
    dec_ref r3275
    if is_error(r3276) goto L1811 (error at <module>:458) else goto L1216
L1216:
    r3277 = typing :: module
    r3278 = load_address _Py_NoneStruct
    r3279 = r3277 != r3278
    if r3279 goto L1219 else goto L1217 :: bool
L1217:
    r3280 = 'typing'
    r3281 = PyImport_Import(r3280)
    if is_error(r3281) goto L2111 (error at <module>:458) else goto L1218
L1218:
    typing = r3281 :: module
    dec_ref r3281
L1219:
    r3282 = PyImport_GetModuleDict()
    r3283 = 'typing'
    r3284 = CPyDict_GetItem(r3282, r3283)
    if is_error(r3284) goto L2111 (error at <module>:458) else goto L1220
L1220:
    r3285 = '_TypedDictMeta'
    r3286 = CPyObject_GetAttr(r3284, r3285)
    dec_ref r3284
    if is_error(r3286) goto L2111 (error at <module>:458) else goto L1221
L1221:
    r3287 = '__prepare__'
    r3288 = PyObject_HasAttr(r3286, r3287)
    if r3288 goto L1222 else goto L1226 :: bool
L1222:
    r3289 = 'SyncStatus'
    r3290 = '__prepare__'
    r3291 = CPyObject_GetAttr(r3286, r3290)
    if is_error(r3291) goto L2112 (error at <module>:458) else goto L1223
L1223:
    r3292 = [r3289, r3276]
    r3293 = load_address r3292
    r3294 = PyObject_Vectorcall(r3291, r3293, 2, 0)
    dec_ref r3291
    if is_error(r3294) goto L2112 (error at <module>:458) else goto L1224
L1224:
    r3295 = cast(dict, r3294)
    if is_error(r3295) goto L2112 (error at <module>:458) else goto L1225
L1225:
    r3296 = r3295
    goto L1228
L1226:
    r3297 = PyDict_New()
    if is_error(r3297) goto L2112 (error at <module>:458) else goto L1227
L1227:
    r3296 = r3297
L1228:
    r3298 = PyDict_New()
    if is_error(r3298) goto L2113 (error at <module>:458) else goto L1229
L1229:
    r3299 = load_address PyLong_Type
    r3300 = 'currentBlock'
    r3301 = PyDict_SetItem(r3298, r3300, r3299)
    r3302 = r3301 >= 0 :: signed
    if not r3302 goto L2114 (error at <module>:459) else goto L1230 :: bool
L1230:
    r3303 = load_address PyLong_Type
    r3304 = 'highestBlock'
    r3305 = PyDict_SetItem(r3298, r3304, r3303)
    r3306 = r3305 >= 0 :: signed
    if not r3306 goto L2114 (error at <module>:460) else goto L1231 :: bool
L1231:
    r3307 = load_address PyLong_Type
    r3308 = 'knownStates'
    r3309 = PyDict_SetItem(r3298, r3308, r3307)
    r3310 = r3309 >= 0 :: signed
    if not r3310 goto L2114 (error at <module>:461) else goto L1232 :: bool
L1232:
    r3311 = load_address PyLong_Type
    r3312 = 'pulledStates'
    r3313 = PyDict_SetItem(r3298, r3312, r3311)
    r3314 = r3313 >= 0 :: signed
    if not r3314 goto L2114 (error at <module>:462) else goto L1233 :: bool
L1233:
    r3315 = load_address PyLong_Type
    r3316 = 'startingBlock'
    r3317 = PyDict_SetItem(r3298, r3316, r3315)
    r3318 = r3317 >= 0 :: signed
    if not r3318 goto L2114 (error at <module>:463) else goto L1234 :: bool
L1234:
    r3319 = 'SyncStatus'
    r3320 = '__annotations__'
    r3321 = CPyDict_SetItem(r3296, r3320, r3298)
    dec_ref r3298
    r3322 = r3321 >= 0 :: signed
    if not r3322 goto L2113 (error at <module>:458) else goto L1235 :: bool
L1235:
    r3323 = 'mypyc filler docstring'
    r3324 = '__doc__'
    r3325 = CPyDict_SetItem(r3296, r3324, r3323)
    r3326 = r3325 >= 0 :: signed
    if not r3326 goto L2113 (error at <module>:458) else goto L1236 :: bool
L1236:
    r3327 = 'faster_web3.types'
    r3328 = '__module__'
    r3329 = CPyDict_SetItem(r3296, r3328, r3327)
    r3330 = r3329 >= 0 :: signed
    if not r3330 goto L2113 (error at <module>:458) else goto L1237 :: bool
L1237:
    r3331 = [r3319, r3276, r3296]
    r3332 = load_address r3331
    r3333 = PyObject_Vectorcall(r3286, r3332, 3, 0)
    dec_ref r3286
    if is_error(r3333) goto L2115 (error at <module>:458) else goto L1238
L1238:
    dec_ref r3276
    dec_ref r3296
    faster_web3.types.SyncStatus = r3333 :: type
    r3334 = faster_web3.types.globals :: static
    r3335 = 'SyncStatus'
    r3336 = PyDict_SetItem(r3334, r3335, r3333)
    dec_ref r3333
    r3337 = r3336 >= 0 :: signed
    if not r3337 goto L1811 (error at <module>:458) else goto L1239 :: bool
L1239:
    r3338 = faster_web3.types.SyncStatus :: type
    r3339 = typing :: module
    r3340 = load_address _Py_NoneStruct
    r3341 = r3339 != r3340
    if r3341 goto L1242 else goto L1240 :: bool
L1240:
    r3342 = 'typing'
    r3343 = PyImport_Import(r3342)
    if is_error(r3343) goto L1811 (error at <module>:466) else goto L1241
L1241:
    typing = r3343 :: module
    dec_ref r3343
L1242:
    r3344 = PyImport_GetModuleDict()
    r3345 = 'typing'
    r3346 = CPyDict_GetItem(r3344, r3345)
    if is_error(r3346) goto L1811 (error at <module>:466) else goto L1243
L1243:
    r3347 = '_TypedDict'
    r3348 = CPyObject_GetAttr(r3346, r3347)
    dec_ref r3346
    if is_error(r3348) goto L1811 (error at <module>:466) else goto L1244
L1244:
    r3349 = PyTuple_Pack(1, r3348)
    dec_ref r3348
    if is_error(r3349) goto L1811 (error at <module>:466) else goto L1245
L1245:
    r3350 = typing :: module
    r3351 = load_address _Py_NoneStruct
    r3352 = r3350 != r3351
    if r3352 goto L1248 else goto L1246 :: bool
L1246:
    r3353 = 'typing'
    r3354 = PyImport_Import(r3353)
    if is_error(r3354) goto L2116 (error at <module>:466) else goto L1247
L1247:
    typing = r3354 :: module
    dec_ref r3354
L1248:
    r3355 = PyImport_GetModuleDict()
    r3356 = 'typing'
    r3357 = CPyDict_GetItem(r3355, r3356)
    if is_error(r3357) goto L2116 (error at <module>:466) else goto L1249
L1249:
    r3358 = '_TypedDictMeta'
    r3359 = CPyObject_GetAttr(r3357, r3358)
    dec_ref r3357
    if is_error(r3359) goto L2116 (error at <module>:466) else goto L1250
L1250:
    r3360 = '__prepare__'
    r3361 = PyObject_HasAttr(r3359, r3360)
    if r3361 goto L1251 else goto L1255 :: bool
L1251:
    r3362 = 'Uncle'
    r3363 = '__prepare__'
    r3364 = CPyObject_GetAttr(r3359, r3363)
    if is_error(r3364) goto L2117 (error at <module>:466) else goto L1252
L1252:
    r3365 = [r3362, r3349]
    r3366 = load_address r3365
    r3367 = PyObject_Vectorcall(r3364, r3366, 2, 0)
    dec_ref r3364
    if is_error(r3367) goto L2117 (error at <module>:466) else goto L1253
L1253:
    r3368 = cast(dict, r3367)
    if is_error(r3368) goto L2117 (error at <module>:466) else goto L1254
L1254:
    r3369 = r3368
    goto L1257
L1255:
    r3370 = PyDict_New()
    if is_error(r3370) goto L2117 (error at <module>:466) else goto L1256
L1256:
    r3369 = r3370
L1257:
    r3371 = PyDict_New()
    if is_error(r3371) goto L2118 (error at <module>:466) else goto L1258
L1258:
    r3372 = faster_web3.types.globals :: static
    r3373 = 'ChecksumAddress'
    r3374 = CPyDict_GetItem(r3372, r3373)
    if is_error(r3374) goto L2119 (error at <module>:467) else goto L1259
L1259:
    r3375 = 'author'
    r3376 = PyDict_SetItem(r3371, r3375, r3374)
    dec_ref r3374
    r3377 = r3376 >= 0 :: signed
    if not r3377 goto L2119 (error at <module>:467) else goto L1260 :: bool
L1260:
    r3378 = faster_web3.types.globals :: static
    r3379 = 'HexStr'
    r3380 = CPyDict_GetItem(r3378, r3379)
    if is_error(r3380) goto L2119 (error at <module>:468) else goto L1261
L1261:
    r3381 = 'difficulty'
    r3382 = PyDict_SetItem(r3371, r3381, r3380)
    dec_ref r3380
    r3383 = r3382 >= 0 :: signed
    if not r3383 goto L2119 (error at <module>:468) else goto L1262 :: bool
L1262:
    r3384 = faster_web3.types.globals :: static
    r3385 = 'HexStr'
    r3386 = CPyDict_GetItem(r3384, r3385)
    if is_error(r3386) goto L2119 (error at <module>:469) else goto L1263
L1263:
    r3387 = 'extraData'
    r3388 = PyDict_SetItem(r3371, r3387, r3386)
    dec_ref r3386
    r3389 = r3388 >= 0 :: signed
    if not r3389 goto L2119 (error at <module>:469) else goto L1264 :: bool
L1264:
    r3390 = faster_web3.types.globals :: static
    r3391 = 'HexStr'
    r3392 = CPyDict_GetItem(r3390, r3391)
    if is_error(r3392) goto L2119 (error at <module>:470) else goto L1265
L1265:
    r3393 = 'gasLimit'
    r3394 = PyDict_SetItem(r3371, r3393, r3392)
    dec_ref r3392
    r3395 = r3394 >= 0 :: signed
    if not r3395 goto L2119 (error at <module>:470) else goto L1266 :: bool
L1266:
    r3396 = faster_web3.types.globals :: static
    r3397 = 'HexStr'
    r3398 = CPyDict_GetItem(r3396, r3397)
    if is_error(r3398) goto L2119 (error at <module>:471) else goto L1267
L1267:
    r3399 = 'gasUsed'
    r3400 = PyDict_SetItem(r3371, r3399, r3398)
    dec_ref r3398
    r3401 = r3400 >= 0 :: signed
    if not r3401 goto L2119 (error at <module>:471) else goto L1268 :: bool
L1268:
    r3402 = load_address PyType_Type
    r3403 = 'hash'
    r3404 = PyDict_SetItem(r3371, r3403, r3402)
    r3405 = r3404 >= 0 :: signed
    if not r3405 goto L2119 (error at <module>:472) else goto L1269 :: bool
L1269:
    r3406 = faster_web3.types.globals :: static
    r3407 = 'HexStr'
    r3408 = CPyDict_GetItem(r3406, r3407)
    if is_error(r3408) goto L2119 (error at <module>:473) else goto L1270
L1270:
    r3409 = 'logsBloom'
    r3410 = PyDict_SetItem(r3371, r3409, r3408)
    dec_ref r3408
    r3411 = r3410 >= 0 :: signed
    if not r3411 goto L2119 (error at <module>:473) else goto L1271 :: bool
L1271:
    r3412 = load_address PyType_Type
    r3413 = 'miner'
    r3414 = PyDict_SetItem(r3371, r3413, r3412)
    r3415 = r3414 >= 0 :: signed
    if not r3415 goto L2119 (error at <module>:474) else goto L1272 :: bool
L1272:
    r3416 = load_address PyType_Type
    r3417 = 'mixHash'
    r3418 = PyDict_SetItem(r3371, r3417, r3416)
    r3419 = r3418 >= 0 :: signed
    if not r3419 goto L2119 (error at <module>:475) else goto L1273 :: bool
L1273:
    r3420 = faster_web3.types.globals :: static
    r3421 = 'HexStr'
    r3422 = CPyDict_GetItem(r3420, r3421)
    if is_error(r3422) goto L2119 (error at <module>:476) else goto L1274
L1274:
    r3423 = 'nonce'
    r3424 = PyDict_SetItem(r3371, r3423, r3422)
    dec_ref r3422
    r3425 = r3424 >= 0 :: signed
    if not r3425 goto L2119 (error at <module>:476) else goto L1275 :: bool
L1275:
    r3426 = faster_web3.types.globals :: static
    r3427 = 'HexStr'
    r3428 = CPyDict_GetItem(r3426, r3427)
    if is_error(r3428) goto L2119 (error at <module>:477) else goto L1276
L1276:
    r3429 = 'number'
    r3430 = PyDict_SetItem(r3371, r3429, r3428)
    dec_ref r3428
    r3431 = r3430 >= 0 :: signed
    if not r3431 goto L2119 (error at <module>:477) else goto L1277 :: bool
L1277:
    r3432 = load_address PyType_Type
    r3433 = 'parentHash'
    r3434 = PyDict_SetItem(r3371, r3433, r3432)
    r3435 = r3434 >= 0 :: signed
    if not r3435 goto L2119 (error at <module>:478) else goto L1278 :: bool
L1278:
    r3436 = load_address PyType_Type
    r3437 = 'receiptsRoot'
    r3438 = PyDict_SetItem(r3371, r3437, r3436)
    r3439 = r3438 >= 0 :: signed
    if not r3439 goto L2119 (error at <module>:479) else goto L1279 :: bool
L1279:
    r3440 = faster_web3.types.globals :: static
    r3441 = 'Sequence'
    r3442 = CPyDict_GetItem(r3440, r3441)
    if is_error(r3442) goto L2119 (error at <module>:480) else goto L1280
L1280:
    r3443 = 'sealFields'
    r3444 = PyDict_SetItem(r3371, r3443, r3442)
    dec_ref r3442
    r3445 = r3444 >= 0 :: signed
    if not r3445 goto L2119 (error at <module>:480) else goto L1281 :: bool
L1281:
    r3446 = load_address PyType_Type
    r3447 = 'sha3Uncles'
    r3448 = PyDict_SetItem(r3371, r3447, r3446)
    r3449 = r3448 >= 0 :: signed
    if not r3449 goto L2119 (error at <module>:481) else goto L1282 :: bool
L1282:
    r3450 = load_address PyLong_Type
    r3451 = 'size'
    r3452 = PyDict_SetItem(r3371, r3451, r3450)
    r3453 = r3452 >= 0 :: signed
    if not r3453 goto L2119 (error at <module>:482) else goto L1283 :: bool
L1283:
    r3454 = load_address PyType_Type
    r3455 = 'stateRoot'
    r3456 = PyDict_SetItem(r3371, r3455, r3454)
    r3457 = r3456 >= 0 :: signed
    if not r3457 goto L2119 (error at <module>:483) else goto L1284 :: bool
L1284:
    r3458 = faster_web3.types.globals :: static
    r3459 = 'Timestamp'
    r3460 = CPyDict_GetItem(r3458, r3459)
    if is_error(r3460) goto L2119 (error at <module>:484) else goto L1285
L1285:
    r3461 = 'timestamp'
    r3462 = PyDict_SetItem(r3371, r3461, r3460)
    dec_ref r3460
    r3463 = r3462 >= 0 :: signed
    if not r3463 goto L2119 (error at <module>:484) else goto L1286 :: bool
L1286:
    r3464 = faster_web3.types.globals :: static
    r3465 = 'HexStr'
    r3466 = CPyDict_GetItem(r3464, r3465)
    if is_error(r3466) goto L2119 (error at <module>:485) else goto L1287
L1287:
    r3467 = 'totalDifficulty'
    r3468 = PyDict_SetItem(r3371, r3467, r3466)
    dec_ref r3466
    r3469 = r3468 >= 0 :: signed
    if not r3469 goto L2119 (error at <module>:485) else goto L1288 :: bool
L1288:
    r3470 = faster_web3.types.globals :: static
    r3471 = 'Sequence'
    r3472 = CPyDict_GetItem(r3470, r3471)
    if is_error(r3472) goto L2119 (error at <module>:486) else goto L1289
L1289:
    r3473 = 'transactions'
    r3474 = PyDict_SetItem(r3371, r3473, r3472)
    dec_ref r3472
    r3475 = r3474 >= 0 :: signed
    if not r3475 goto L2119 (error at <module>:486) else goto L1290 :: bool
L1290:
    r3476 = load_address PyType_Type
    r3477 = 'transactionsRoot'
    r3478 = PyDict_SetItem(r3371, r3477, r3476)
    r3479 = r3478 >= 0 :: signed
    if not r3479 goto L2119 (error at <module>:487) else goto L1291 :: bool
L1291:
    r3480 = faster_web3.types.globals :: static
    r3481 = 'Sequence'
    r3482 = CPyDict_GetItem(r3480, r3481)
    if is_error(r3482) goto L2119 (error at <module>:488) else goto L1292
L1292:
    r3483 = 'uncles'
    r3484 = PyDict_SetItem(r3371, r3483, r3482)
    dec_ref r3482
    r3485 = r3484 >= 0 :: signed
    if not r3485 goto L2119 (error at <module>:488) else goto L1293 :: bool
L1293:
    r3486 = 'Uncle'
    r3487 = '__annotations__'
    r3488 = CPyDict_SetItem(r3369, r3487, r3371)
    dec_ref r3371
    r3489 = r3488 >= 0 :: signed
    if not r3489 goto L2118 (error at <module>:466) else goto L1294 :: bool
L1294:
    r3490 = 'mypyc filler docstring'
    r3491 = '__doc__'
    r3492 = CPyDict_SetItem(r3369, r3491, r3490)
    r3493 = r3492 >= 0 :: signed
    if not r3493 goto L2118 (error at <module>:466) else goto L1295 :: bool
L1295:
    r3494 = 'faster_web3.types'
    r3495 = '__module__'
    r3496 = CPyDict_SetItem(r3369, r3495, r3494)
    r3497 = r3496 >= 0 :: signed
    if not r3497 goto L2118 (error at <module>:466) else goto L1296 :: bool
L1296:
    r3498 = [r3486, r3349, r3369]
    r3499 = load_address r3498
    r3500 = PyObject_Vectorcall(r3359, r3499, 3, 0)
    dec_ref r3359
    if is_error(r3500) goto L2120 (error at <module>:466) else goto L1297
L1297:
    dec_ref r3349
    dec_ref r3369
    faster_web3.types.Uncle = r3500 :: type
    r3501 = faster_web3.types.globals :: static
    r3502 = 'Uncle'
    r3503 = PyDict_SetItem(r3501, r3502, r3500)
    dec_ref r3500
    r3504 = r3503 >= 0 :: signed
    if not r3504 goto L1811 (error at <module>:466) else goto L1298 :: bool
L1298:
    r3505 = faster_web3.types.Uncle :: type
    r3506 = 'PendingTx'
    r3507 = 'blockHash'
    r3508 = faster_web3.types.globals :: static
    r3509 = 'HexBytes'
    r3510 = CPyDict_GetItem(r3508, r3509)
    if is_error(r3510) goto L1811 (error at <module>:499) else goto L1299
L1299:
    r3511 = 'blockNumber'
    r3512 = box(None, 1)
    r3513 = 'from'
    r3514 = faster_web3.types.globals :: static
    r3515 = 'ChecksumAddress'
    r3516 = CPyDict_GetItem(r3514, r3515)
    if is_error(r3516) goto L2121 (error at <module>:501) else goto L1300
L1300:
    r3517 = 'gas'
    r3518 = faster_web3.types.globals :: static
    r3519 = 'HexBytes'
    r3520 = CPyDict_GetItem(r3518, r3519)
    if is_error(r3520) goto L2122 (error at <module>:502) else goto L1301
L1301:
    r3521 = 'maxFeePerGas'
    r3522 = faster_web3.types.globals :: static
    r3523 = 'HexBytes'
    r3524 = CPyDict_GetItem(r3522, r3523)
    if is_error(r3524) goto L2123 (error at <module>:503) else goto L1302
L1302:
    r3525 = 'maxPriorityFeePerGas'
    r3526 = faster_web3.types.globals :: static
    r3527 = 'HexBytes'
    r3528 = CPyDict_GetItem(r3526, r3527)
    if is_error(r3528) goto L2124 (error at <module>:504) else goto L1303
L1303:
    r3529 = 'gasPrice'
    r3530 = faster_web3.types.globals :: static
    r3531 = 'HexBytes'
    r3532 = CPyDict_GetItem(r3530, r3531)
    if is_error(r3532) goto L2125 (error at <module>:505) else goto L1304
L1304:
    r3533 = 'hash'
    r3534 = faster_web3.types.globals :: static
    r3535 = 'HexBytes'
    r3536 = CPyDict_GetItem(r3534, r3535)
    if is_error(r3536) goto L2126 (error at <module>:506) else goto L1305
L1305:
    r3537 = 'input'
    r3538 = faster_web3.types.globals :: static
    r3539 = 'HexBytes'
    r3540 = CPyDict_GetItem(r3538, r3539)
    if is_error(r3540) goto L2127 (error at <module>:507) else goto L1306
L1306:
    r3541 = 'nonce'
    r3542 = faster_web3.types.globals :: static
    r3543 = 'HexBytes'
    r3544 = CPyDict_GetItem(r3542, r3543)
    if is_error(r3544) goto L2128 (error at <module>:508) else goto L1307
L1307:
    r3545 = 'to'
    r3546 = faster_web3.types.globals :: static
    r3547 = 'ChecksumAddress'
    r3548 = CPyDict_GetItem(r3546, r3547)
    if is_error(r3548) goto L2129 (error at <module>:509) else goto L1308
L1308:
    r3549 = 'transactionIndex'
    r3550 = box(None, 1)
    r3551 = 'value'
    r3552 = faster_web3.types.globals :: static
    r3553 = 'HexBytes'
    r3554 = CPyDict_GetItem(r3552, r3553)
    if is_error(r3554) goto L2130 (error at <module>:511) else goto L1309
L1309:
    r3555 = CPyDict_Build(13, r3507, r3510, r3511, r3512, r3513, r3516, r3517, r3520, r3521, r3524, r3525, r3528, r3529, r3532, r3533, r3536, r3537, r3540, r3541, r3544, r3545, r3548, r3549, r3550, r3551, r3554)
    dec_ref r3510
    dec_ref r3516
    dec_ref r3520
    dec_ref r3524
    dec_ref r3528
    dec_ref r3532
    dec_ref r3536
    dec_ref r3540
    dec_ref r3544
    dec_ref r3548
    dec_ref r3554
    if is_error(r3555) goto L1811 (error at <module>:498) else goto L1310
L1310:
    r3556 = box(bool, 0)
    r3557 = faster_web3.types.globals :: static
    r3558 = 'TypedDict'
    r3559 = CPyDict_GetItem(r3557, r3558)
    if is_error(r3559) goto L2131 (error at <module>:496) else goto L1311
L1311:
    r3560 = [r3506, r3555, r3556]
    r3561 = load_address r3560
    r3562 = ('total',)
    r3563 = PyObject_Vectorcall(r3559, r3561, 2, r3562)
    dec_ref r3559
    if is_error(r3563) goto L2131 (error at <module>:496) else goto L1312
L1312:
    dec_ref r3555
    r3564 = faster_web3.types.globals :: static
    r3565 = 'PendingTx'
    r3566 = CPyDict_SetItem(r3564, r3565, r3563)
    dec_ref r3563
    r3567 = r3566 >= 0 :: signed
    if not r3567 goto L1811 (error at <module>:496) else goto L1313 :: bool
L1313:
    r3568 = typing :: module
    r3569 = load_address _Py_NoneStruct
    r3570 = r3568 != r3569
    if r3570 goto L1316 else goto L1314 :: bool
L1314:
    r3571 = 'typing'
    r3572 = PyImport_Import(r3571)
    if is_error(r3572) goto L1811 (error at <module>:517) else goto L1315
L1315:
    typing = r3572 :: module
    dec_ref r3572
L1316:
    r3573 = PyImport_GetModuleDict()
    r3574 = 'typing'
    r3575 = CPyDict_GetItem(r3573, r3574)
    if is_error(r3575) goto L1811 (error at <module>:517) else goto L1317
L1317:
    r3576 = '_TypedDict'
    r3577 = CPyObject_GetAttr(r3575, r3576)
    dec_ref r3575
    if is_error(r3577) goto L1811 (error at <module>:517) else goto L1318
L1318:
    r3578 = PyTuple_Pack(1, r3577)
    dec_ref r3577
    if is_error(r3578) goto L1811 (error at <module>:517) else goto L1319
L1319:
    r3579 = typing :: module
    r3580 = load_address _Py_NoneStruct
    r3581 = r3579 != r3580
    if r3581 goto L1322 else goto L1320 :: bool
L1320:
    r3582 = 'typing'
    r3583 = PyImport_Import(r3582)
    if is_error(r3583) goto L2132 (error at <module>:517) else goto L1321
L1321:
    typing = r3583 :: module
    dec_ref r3583
L1322:
    r3584 = PyImport_GetModuleDict()
    r3585 = 'typing'
    r3586 = CPyDict_GetItem(r3584, r3585)
    if is_error(r3586) goto L2132 (error at <module>:517) else goto L1323
L1323:
    r3587 = '_TypedDictMeta'
    r3588 = CPyObject_GetAttr(r3586, r3587)
    dec_ref r3586
    if is_error(r3588) goto L2132 (error at <module>:517) else goto L1324
L1324:
    r3589 = '__prepare__'
    r3590 = PyObject_HasAttr(r3588, r3589)
    if r3590 goto L1325 else goto L1329 :: bool
L1325:
    r3591 = 'TxPoolContent'
    r3592 = '__prepare__'
    r3593 = CPyObject_GetAttr(r3588, r3592)
    if is_error(r3593) goto L2133 (error at <module>:517) else goto L1326
L1326:
    r3594 = [r3591, r3578]
    r3595 = load_address r3594
    r3596 = PyObject_Vectorcall(r3593, r3595, 2, 0)
    dec_ref r3593
    if is_error(r3596) goto L2133 (error at <module>:517) else goto L1327
L1327:
    r3597 = cast(dict, r3596)
    if is_error(r3597) goto L2133 (error at <module>:517) else goto L1328
L1328:
    r3598 = r3597
    goto L1331
L1329:
    r3599 = PyDict_New()
    if is_error(r3599) goto L2133 (error at <module>:517) else goto L1330
L1330:
    r3598 = r3599
L1331:
    r3600 = PyDict_New()
    if is_error(r3600) goto L2134 (error at <module>:517) else goto L1332
L1332:
    r3601 = load_address PyDict_Type
    r3602 = 'pending'
    r3603 = PyDict_SetItem(r3600, r3602, r3601)
    r3604 = r3603 >= 0 :: signed
    if not r3604 goto L2135 (error at <module>:518) else goto L1333 :: bool
L1333:
    r3605 = load_address PyDict_Type
    r3606 = 'queued'
    r3607 = PyDict_SetItem(r3600, r3606, r3605)
    r3608 = r3607 >= 0 :: signed
    if not r3608 goto L2135 (error at <module>:519) else goto L1334 :: bool
L1334:
    r3609 = 'TxPoolContent'
    r3610 = '__annotations__'
    r3611 = CPyDict_SetItem(r3598, r3610, r3600)
    dec_ref r3600
    r3612 = r3611 >= 0 :: signed
    if not r3612 goto L2134 (error at <module>:517) else goto L1335 :: bool
L1335:
    r3613 = 'mypyc filler docstring'
    r3614 = '__doc__'
    r3615 = CPyDict_SetItem(r3598, r3614, r3613)
    r3616 = r3615 >= 0 :: signed
    if not r3616 goto L2134 (error at <module>:517) else goto L1336 :: bool
L1336:
    r3617 = 'faster_web3.types'
    r3618 = '__module__'
    r3619 = CPyDict_SetItem(r3598, r3618, r3617)
    r3620 = r3619 >= 0 :: signed
    if not r3620 goto L2134 (error at <module>:517) else goto L1337 :: bool
L1337:
    r3621 = [r3609, r3578, r3598]
    r3622 = load_address r3621
    r3623 = PyObject_Vectorcall(r3588, r3622, 3, 0)
    dec_ref r3588
    if is_error(r3623) goto L2136 (error at <module>:517) else goto L1338
L1338:
    dec_ref r3578
    dec_ref r3598
    faster_web3.types.TxPoolContent = r3623 :: type
    r3624 = faster_web3.types.globals :: static
    r3625 = 'TxPoolContent'
    r3626 = PyDict_SetItem(r3624, r3625, r3623)
    dec_ref r3623
    r3627 = r3626 >= 0 :: signed
    if not r3627 goto L1811 (error at <module>:517) else goto L1339 :: bool
L1339:
    r3628 = faster_web3.types.TxPoolContent :: type
    r3629 = typing :: module
    r3630 = load_address _Py_NoneStruct
    r3631 = r3629 != r3630
    if r3631 goto L1342 else goto L1340 :: bool
L1340:
    r3632 = 'typing'
    r3633 = PyImport_Import(r3632)
    if is_error(r3633) goto L1811 (error at <module>:522) else goto L1341
L1341:
    typing = r3633 :: module
    dec_ref r3633
L1342:
    r3634 = PyImport_GetModuleDict()
    r3635 = 'typing'
    r3636 = CPyDict_GetItem(r3634, r3635)
    if is_error(r3636) goto L1811 (error at <module>:522) else goto L1343
L1343:
    r3637 = '_TypedDict'
    r3638 = CPyObject_GetAttr(r3636, r3637)
    dec_ref r3636
    if is_error(r3638) goto L1811 (error at <module>:522) else goto L1344
L1344:
    r3639 = PyTuple_Pack(1, r3638)
    dec_ref r3638
    if is_error(r3639) goto L1811 (error at <module>:522) else goto L1345
L1345:
    r3640 = typing :: module
    r3641 = load_address _Py_NoneStruct
    r3642 = r3640 != r3641
    if r3642 goto L1348 else goto L1346 :: bool
L1346:
    r3643 = 'typing'
    r3644 = PyImport_Import(r3643)
    if is_error(r3644) goto L2137 (error at <module>:522) else goto L1347
L1347:
    typing = r3644 :: module
    dec_ref r3644
L1348:
    r3645 = PyImport_GetModuleDict()
    r3646 = 'typing'
    r3647 = CPyDict_GetItem(r3645, r3646)
    if is_error(r3647) goto L2137 (error at <module>:522) else goto L1349
L1349:
    r3648 = '_TypedDictMeta'
    r3649 = CPyObject_GetAttr(r3647, r3648)
    dec_ref r3647
    if is_error(r3649) goto L2137 (error at <module>:522) else goto L1350
L1350:
    r3650 = '__prepare__'
    r3651 = PyObject_HasAttr(r3649, r3650)
    if r3651 goto L1351 else goto L1355 :: bool
L1351:
    r3652 = 'TxPoolInspect'
    r3653 = '__prepare__'
    r3654 = CPyObject_GetAttr(r3649, r3653)
    if is_error(r3654) goto L2138 (error at <module>:522) else goto L1352
L1352:
    r3655 = [r3652, r3639]
    r3656 = load_address r3655
    r3657 = PyObject_Vectorcall(r3654, r3656, 2, 0)
    dec_ref r3654
    if is_error(r3657) goto L2138 (error at <module>:522) else goto L1353
L1353:
    r3658 = cast(dict, r3657)
    if is_error(r3658) goto L2138 (error at <module>:522) else goto L1354
L1354:
    r3659 = r3658
    goto L1357
L1355:
    r3660 = PyDict_New()
    if is_error(r3660) goto L2138 (error at <module>:522) else goto L1356
L1356:
    r3659 = r3660
L1357:
    r3661 = PyDict_New()
    if is_error(r3661) goto L2139 (error at <module>:522) else goto L1358
L1358:
    r3662 = load_address PyDict_Type
    r3663 = 'pending'
    r3664 = PyDict_SetItem(r3661, r3663, r3662)
    r3665 = r3664 >= 0 :: signed
    if not r3665 goto L2140 (error at <module>:523) else goto L1359 :: bool
L1359:
    r3666 = load_address PyDict_Type
    r3667 = 'queued'
    r3668 = PyDict_SetItem(r3661, r3667, r3666)
    r3669 = r3668 >= 0 :: signed
    if not r3669 goto L2140 (error at <module>:524) else goto L1360 :: bool
L1360:
    r3670 = 'TxPoolInspect'
    r3671 = '__annotations__'
    r3672 = CPyDict_SetItem(r3659, r3671, r3661)
    dec_ref r3661
    r3673 = r3672 >= 0 :: signed
    if not r3673 goto L2139 (error at <module>:522) else goto L1361 :: bool
L1361:
    r3674 = 'mypyc filler docstring'
    r3675 = '__doc__'
    r3676 = CPyDict_SetItem(r3659, r3675, r3674)
    r3677 = r3676 >= 0 :: signed
    if not r3677 goto L2139 (error at <module>:522) else goto L1362 :: bool
L1362:
    r3678 = 'faster_web3.types'
    r3679 = '__module__'
    r3680 = CPyDict_SetItem(r3659, r3679, r3678)
    r3681 = r3680 >= 0 :: signed
    if not r3681 goto L2139 (error at <module>:522) else goto L1363 :: bool
L1363:
    r3682 = [r3670, r3639, r3659]
    r3683 = load_address r3682
    r3684 = PyObject_Vectorcall(r3649, r3683, 3, 0)
    dec_ref r3649
    if is_error(r3684) goto L2141 (error at <module>:522) else goto L1364
L1364:
    dec_ref r3639
    dec_ref r3659
    faster_web3.types.TxPoolInspect = r3684 :: type
    r3685 = faster_web3.types.globals :: static
    r3686 = 'TxPoolInspect'
    r3687 = PyDict_SetItem(r3685, r3686, r3684)
    dec_ref r3684
    r3688 = r3687 >= 0 :: signed
    if not r3688 goto L1811 (error at <module>:522) else goto L1365 :: bool
L1365:
    r3689 = faster_web3.types.TxPoolInspect :: type
    r3690 = typing :: module
    r3691 = load_address _Py_NoneStruct
    r3692 = r3690 != r3691
    if r3692 goto L1368 else goto L1366 :: bool
L1366:
    r3693 = 'typing'
    r3694 = PyImport_Import(r3693)
    if is_error(r3694) goto L1811 (error at <module>:527) else goto L1367
L1367:
    typing = r3694 :: module
    dec_ref r3694
L1368:
    r3695 = PyImport_GetModuleDict()
    r3696 = 'typing'
    r3697 = CPyDict_GetItem(r3695, r3696)
    if is_error(r3697) goto L1811 (error at <module>:527) else goto L1369
L1369:
    r3698 = '_TypedDict'
    r3699 = CPyObject_GetAttr(r3697, r3698)
    dec_ref r3697
    if is_error(r3699) goto L1811 (error at <module>:527) else goto L1370
L1370:
    r3700 = PyTuple_Pack(1, r3699)
    dec_ref r3699
    if is_error(r3700) goto L1811 (error at <module>:527) else goto L1371
L1371:
    r3701 = typing :: module
    r3702 = load_address _Py_NoneStruct
    r3703 = r3701 != r3702
    if r3703 goto L1374 else goto L1372 :: bool
L1372:
    r3704 = 'typing'
    r3705 = PyImport_Import(r3704)
    if is_error(r3705) goto L2142 (error at <module>:527) else goto L1373
L1373:
    typing = r3705 :: module
    dec_ref r3705
L1374:
    r3706 = PyImport_GetModuleDict()
    r3707 = 'typing'
    r3708 = CPyDict_GetItem(r3706, r3707)
    if is_error(r3708) goto L2142 (error at <module>:527) else goto L1375
L1375:
    r3709 = '_TypedDictMeta'
    r3710 = CPyObject_GetAttr(r3708, r3709)
    dec_ref r3708
    if is_error(r3710) goto L2142 (error at <module>:527) else goto L1376
L1376:
    r3711 = '__prepare__'
    r3712 = PyObject_HasAttr(r3710, r3711)
    if r3712 goto L1377 else goto L1381 :: bool
L1377:
    r3713 = 'TxPoolStatus'
    r3714 = '__prepare__'
    r3715 = CPyObject_GetAttr(r3710, r3714)
    if is_error(r3715) goto L2143 (error at <module>:527) else goto L1378
L1378:
    r3716 = [r3713, r3700]
    r3717 = load_address r3716
    r3718 = PyObject_Vectorcall(r3715, r3717, 2, 0)
    dec_ref r3715
    if is_error(r3718) goto L2143 (error at <module>:527) else goto L1379
L1379:
    r3719 = cast(dict, r3718)
    if is_error(r3719) goto L2143 (error at <module>:527) else goto L1380
L1380:
    r3720 = r3719
    goto L1383
L1381:
    r3721 = PyDict_New()
    if is_error(r3721) goto L2143 (error at <module>:527) else goto L1382
L1382:
    r3720 = r3721
L1383:
    r3722 = PyDict_New()
    if is_error(r3722) goto L2144 (error at <module>:527) else goto L1384
L1384:
    r3723 = load_address PyLong_Type
    r3724 = 'pending'
    r3725 = PyDict_SetItem(r3722, r3724, r3723)
    r3726 = r3725 >= 0 :: signed
    if not r3726 goto L2145 (error at <module>:528) else goto L1385 :: bool
L1385:
    r3727 = load_address PyLong_Type
    r3728 = 'queued'
    r3729 = PyDict_SetItem(r3722, r3728, r3727)
    r3730 = r3729 >= 0 :: signed
    if not r3730 goto L2145 (error at <module>:529) else goto L1386 :: bool
L1386:
    r3731 = 'TxPoolStatus'
    r3732 = '__annotations__'
    r3733 = CPyDict_SetItem(r3720, r3732, r3722)
    dec_ref r3722
    r3734 = r3733 >= 0 :: signed
    if not r3734 goto L2144 (error at <module>:527) else goto L1387 :: bool
L1387:
    r3735 = 'mypyc filler docstring'
    r3736 = '__doc__'
    r3737 = CPyDict_SetItem(r3720, r3736, r3735)
    r3738 = r3737 >= 0 :: signed
    if not r3738 goto L2144 (error at <module>:527) else goto L1388 :: bool
L1388:
    r3739 = 'faster_web3.types'
    r3740 = '__module__'
    r3741 = CPyDict_SetItem(r3720, r3740, r3739)
    r3742 = r3741 >= 0 :: signed
    if not r3742 goto L2144 (error at <module>:527) else goto L1389 :: bool
L1389:
    r3743 = [r3731, r3700, r3720]
    r3744 = load_address r3743
    r3745 = PyObject_Vectorcall(r3710, r3744, 3, 0)
    dec_ref r3710
    if is_error(r3745) goto L2146 (error at <module>:527) else goto L1390
L1390:
    dec_ref r3700
    dec_ref r3720
    faster_web3.types.TxPoolStatus = r3745 :: type
    r3746 = faster_web3.types.globals :: static
    r3747 = 'TxPoolStatus'
    r3748 = PyDict_SetItem(r3746, r3747, r3745)
    dec_ref r3745
    r3749 = r3748 >= 0 :: signed
    if not r3749 goto L1811 (error at <module>:527) else goto L1391 :: bool
L1391:
    r3750 = faster_web3.types.TxPoolStatus :: type
    r3751 = typing :: module
    r3752 = load_address _Py_NoneStruct
    r3753 = r3751 != r3752
    if r3753 goto L1394 else goto L1392 :: bool
L1392:
    r3754 = 'typing'
    r3755 = PyImport_Import(r3754)
    if is_error(r3755) goto L1811 (error at <module>:535) else goto L1393
L1393:
    typing = r3755 :: module
    dec_ref r3755
L1394:
    r3756 = PyImport_GetModuleDict()
    r3757 = 'typing'
    r3758 = CPyDict_GetItem(r3756, r3757)
    if is_error(r3758) goto L1811 (error at <module>:535) else goto L1395
L1395:
    r3759 = '_TypedDict'
    r3760 = CPyObject_GetAttr(r3758, r3759)
    dec_ref r3758
    if is_error(r3760) goto L1811 (error at <module>:535) else goto L1396
L1396:
    r3761 = PyTuple_Pack(1, r3760)
    dec_ref r3760
    if is_error(r3761) goto L1811 (error at <module>:535) else goto L1397
L1397:
    r3762 = typing :: module
    r3763 = load_address _Py_NoneStruct
    r3764 = r3762 != r3763
    if r3764 goto L1400 else goto L1398 :: bool
L1398:
    r3765 = 'typing'
    r3766 = PyImport_Import(r3765)
    if is_error(r3766) goto L2147 (error at <module>:535) else goto L1399
L1399:
    typing = r3766 :: module
    dec_ref r3766
L1400:
    r3767 = PyImport_GetModuleDict()
    r3768 = 'typing'
    r3769 = CPyDict_GetItem(r3767, r3768)
    if is_error(r3769) goto L2147 (error at <module>:535) else goto L1401
L1401:
    r3770 = '_TypedDictMeta'
    r3771 = CPyObject_GetAttr(r3769, r3770)
    dec_ref r3769
    if is_error(r3771) goto L2147 (error at <module>:535) else goto L1402
L1402:
    r3772 = '__prepare__'
    r3773 = PyObject_HasAttr(r3771, r3772)
    if r3773 goto L1403 else goto L1407 :: bool
L1403:
    r3774 = 'TraceConfig'
    r3775 = '__prepare__'
    r3776 = CPyObject_GetAttr(r3771, r3775)
    if is_error(r3776) goto L2148 (error at <module>:535) else goto L1404
L1404:
    r3777 = [r3774, r3761]
    r3778 = load_address r3777
    r3779 = PyObject_Vectorcall(r3776, r3778, 2, 0)
    dec_ref r3776
    if is_error(r3779) goto L2148 (error at <module>:535) else goto L1405
L1405:
    r3780 = cast(dict, r3779)
    if is_error(r3780) goto L2148 (error at <module>:535) else goto L1406
L1406:
    r3781 = r3780
    goto L1409
L1407:
    r3782 = PyDict_New()
    if is_error(r3782) goto L2148 (error at <module>:535) else goto L1408
L1408:
    r3781 = r3782
L1409:
    r3783 = PyDict_New()
    if is_error(r3783) goto L2149 (error at <module>:535) else goto L1410
L1410:
    r3784 = load_address PyBool_Type
    r3785 = 'disableStorage'
    r3786 = PyDict_SetItem(r3783, r3785, r3784)
    r3787 = r3786 >= 0 :: signed
    if not r3787 goto L2150 (error at <module>:536) else goto L1411 :: bool
L1411:
    r3788 = load_address PyBool_Type
    r3789 = 'disableStack'
    r3790 = PyDict_SetItem(r3783, r3789, r3788)
    r3791 = r3790 >= 0 :: signed
    if not r3791 goto L2150 (error at <module>:537) else goto L1412 :: bool
L1412:
    r3792 = load_address PyBool_Type
    r3793 = 'enableMemory'
    r3794 = PyDict_SetItem(r3783, r3793, r3792)
    r3795 = r3794 >= 0 :: signed
    if not r3795 goto L2150 (error at <module>:538) else goto L1413 :: bool
L1413:
    r3796 = load_address PyBool_Type
    r3797 = 'enableReturnData'
    r3798 = PyDict_SetItem(r3783, r3797, r3796)
    r3799 = r3798 >= 0 :: signed
    if not r3799 goto L2150 (error at <module>:539) else goto L1414 :: bool
L1414:
    r3800 = load_address PyUnicode_Type
    r3801 = 'tracer'
    r3802 = PyDict_SetItem(r3783, r3801, r3800)
    r3803 = r3802 >= 0 :: signed
    if not r3803 goto L2150 (error at <module>:540) else goto L1415 :: bool
L1415:
    r3804 = load_address PyDict_Type
    r3805 = 'tracerConfig'
    r3806 = PyDict_SetItem(r3783, r3805, r3804)
    r3807 = r3806 >= 0 :: signed
    if not r3807 goto L2150 (error at <module>:541) else goto L1416 :: bool
L1416:
    r3808 = load_address PyLong_Type
    r3809 = 'timeout'
    r3810 = PyDict_SetItem(r3783, r3809, r3808)
    r3811 = r3810 >= 0 :: signed
    if not r3811 goto L2150 (error at <module>:542) else goto L1417 :: bool
L1417:
    r3812 = 'TraceConfig'
    r3813 = '__annotations__'
    r3814 = CPyDict_SetItem(r3781, r3813, r3783)
    dec_ref r3783
    r3815 = r3814 >= 0 :: signed
    if not r3815 goto L2149 (error at <module>:535) else goto L1418 :: bool
L1418:
    r3816 = 'mypyc filler docstring'
    r3817 = '__doc__'
    r3818 = CPyDict_SetItem(r3781, r3817, r3816)
    r3819 = r3818 >= 0 :: signed
    if not r3819 goto L2149 (error at <module>:535) else goto L1419 :: bool
L1419:
    r3820 = 'faster_web3.types'
    r3821 = '__module__'
    r3822 = CPyDict_SetItem(r3781, r3821, r3820)
    r3823 = r3822 >= 0 :: signed
    if not r3823 goto L2149 (error at <module>:535) else goto L1420 :: bool
L1420:
    r3824 = [r3812, r3761, r3781]
    r3825 = load_address r3824
    r3826 = PyObject_Vectorcall(r3771, r3825, 3, 0)
    dec_ref r3771
    if is_error(r3826) goto L2151 (error at <module>:535) else goto L1421
L1421:
    dec_ref r3761
    dec_ref r3781
    faster_web3.types.TraceConfig = r3826 :: type
    r3827 = faster_web3.types.globals :: static
    r3828 = 'TraceConfig'
    r3829 = PyDict_SetItem(r3827, r3828, r3826)
    dec_ref r3826
    r3830 = r3829 >= 0 :: signed
    if not r3830 goto L1811 (error at <module>:535) else goto L1422 :: bool
L1422:
    r3831 = faster_web3.types.TraceConfig :: type
    r3832 = typing :: module
    r3833 = load_address _Py_NoneStruct
    r3834 = r3832 != r3833
    if r3834 goto L1425 else goto L1423 :: bool
L1423:
    r3835 = 'typing'
    r3836 = PyImport_Import(r3835)
    if is_error(r3836) goto L1811 (error at <module>:545) else goto L1424
L1424:
    typing = r3836 :: module
    dec_ref r3836
L1425:
    r3837 = PyImport_GetModuleDict()
    r3838 = 'typing'
    r3839 = CPyDict_GetItem(r3837, r3838)
    if is_error(r3839) goto L1811 (error at <module>:545) else goto L1426
L1426:
    r3840 = '_TypedDict'
    r3841 = CPyObject_GetAttr(r3839, r3840)
    dec_ref r3839
    if is_error(r3841) goto L1811 (error at <module>:545) else goto L1427
L1427:
    r3842 = PyTuple_Pack(1, r3841)
    dec_ref r3841
    if is_error(r3842) goto L1811 (error at <module>:545) else goto L1428
L1428:
    r3843 = typing :: module
    r3844 = load_address _Py_NoneStruct
    r3845 = r3843 != r3844
    if r3845 goto L1431 else goto L1429 :: bool
L1429:
    r3846 = 'typing'
    r3847 = PyImport_Import(r3846)
    if is_error(r3847) goto L2152 (error at <module>:545) else goto L1430
L1430:
    typing = r3847 :: module
    dec_ref r3847
L1431:
    r3848 = PyImport_GetModuleDict()
    r3849 = 'typing'
    r3850 = CPyDict_GetItem(r3848, r3849)
    if is_error(r3850) goto L2152 (error at <module>:545) else goto L1432
L1432:
    r3851 = '_TypedDictMeta'
    r3852 = CPyObject_GetAttr(r3850, r3851)
    dec_ref r3850
    if is_error(r3852) goto L2152 (error at <module>:545) else goto L1433
L1433:
    r3853 = '__prepare__'
    r3854 = PyObject_HasAttr(r3852, r3853)
    if r3854 goto L1434 else goto L1438 :: bool
L1434:
    r3855 = 'CallTraceLog'
    r3856 = '__prepare__'
    r3857 = CPyObject_GetAttr(r3852, r3856)
    if is_error(r3857) goto L2153 (error at <module>:545) else goto L1435
L1435:
    r3858 = [r3855, r3842]
    r3859 = load_address r3858
    r3860 = PyObject_Vectorcall(r3857, r3859, 2, 0)
    dec_ref r3857
    if is_error(r3860) goto L2153 (error at <module>:545) else goto L1436
L1436:
    r3861 = cast(dict, r3860)
    if is_error(r3861) goto L2153 (error at <module>:545) else goto L1437
L1437:
    r3862 = r3861
    goto L1440
L1438:
    r3863 = PyDict_New()
    if is_error(r3863) goto L2153 (error at <module>:545) else goto L1439
L1439:
    r3862 = r3863
L1440:
    r3864 = PyDict_New()
    if is_error(r3864) goto L2154 (error at <module>:545) else goto L1441
L1441:
    r3865 = faster_web3.types.globals :: static
    r3866 = 'ChecksumAddress'
    r3867 = CPyDict_GetItem(r3865, r3866)
    if is_error(r3867) goto L2155 (error at <module>:546) else goto L1442
L1442:
    r3868 = 'address'
    r3869 = PyDict_SetItem(r3864, r3868, r3867)
    dec_ref r3867
    r3870 = r3869 >= 0 :: signed
    if not r3870 goto L2155 (error at <module>:546) else goto L1443 :: bool
L1443:
    r3871 = load_address PyType_Type
    r3872 = 'data'
    r3873 = PyDict_SetItem(r3864, r3872, r3871)
    r3874 = r3873 >= 0 :: signed
    if not r3874 goto L2155 (error at <module>:547) else goto L1444 :: bool
L1444:
    r3875 = faster_web3.types.globals :: static
    r3876 = 'Sequence'
    r3877 = CPyDict_GetItem(r3875, r3876)
    if is_error(r3877) goto L2155 (error at <module>:548) else goto L1445
L1445:
    r3878 = 'topics'
    r3879 = PyDict_SetItem(r3864, r3878, r3877)
    dec_ref r3877
    r3880 = r3879 >= 0 :: signed
    if not r3880 goto L2155 (error at <module>:548) else goto L1446 :: bool
L1446:
    r3881 = load_address PyLong_Type
    r3882 = 'position'
    r3883 = PyDict_SetItem(r3864, r3882, r3881)
    r3884 = r3883 >= 0 :: signed
    if not r3884 goto L2155 (error at <module>:549) else goto L1447 :: bool
L1447:
    r3885 = 'CallTraceLog'
    r3886 = '__annotations__'
    r3887 = CPyDict_SetItem(r3862, r3886, r3864)
    dec_ref r3864
    r3888 = r3887 >= 0 :: signed
    if not r3888 goto L2154 (error at <module>:545) else goto L1448 :: bool
L1448:
    r3889 = 'mypyc filler docstring'
    r3890 = '__doc__'
    r3891 = CPyDict_SetItem(r3862, r3890, r3889)
    r3892 = r3891 >= 0 :: signed
    if not r3892 goto L2154 (error at <module>:545) else goto L1449 :: bool
L1449:
    r3893 = 'faster_web3.types'
    r3894 = '__module__'
    r3895 = CPyDict_SetItem(r3862, r3894, r3893)
    r3896 = r3895 >= 0 :: signed
    if not r3896 goto L2154 (error at <module>:545) else goto L1450 :: bool
L1450:
    r3897 = [r3885, r3842, r3862]
    r3898 = load_address r3897
    r3899 = PyObject_Vectorcall(r3852, r3898, 3, 0)
    dec_ref r3852
    if is_error(r3899) goto L2156 (error at <module>:545) else goto L1451
L1451:
    dec_ref r3842
    dec_ref r3862
    faster_web3.types.CallTraceLog = r3899 :: type
    r3900 = faster_web3.types.globals :: static
    r3901 = 'CallTraceLog'
    r3902 = PyDict_SetItem(r3900, r3901, r3899)
    dec_ref r3899
    r3903 = r3902 >= 0 :: signed
    if not r3903 goto L1811 (error at <module>:545) else goto L1452 :: bool
L1452:
    r3904 = faster_web3.types.CallTraceLog :: type
    r3905 = 'CallTrace'
    r3906 = 'type'
    r3907 = load_address PyUnicode_Type
    r3908 = 'from'
    r3909 = faster_web3.types.globals :: static
    r3910 = 'ChecksumAddress'
    r3911 = CPyDict_GetItem(r3909, r3910)
    if is_error(r3911) goto L1811 (error at <module>:557) else goto L1453
L1453:
    r3912 = 'to'
    r3913 = faster_web3.types.globals :: static
    r3914 = 'ChecksumAddress'
    r3915 = CPyDict_GetItem(r3913, r3914)
    if is_error(r3915) goto L2157 (error at <module>:558) else goto L1454
L1454:
    r3916 = 'value'
    r3917 = faster_web3.types.globals :: static
    r3918 = 'Wei'
    r3919 = CPyDict_GetItem(r3917, r3918)
    if is_error(r3919) goto L2158 (error at <module>:559) else goto L1455
L1455:
    r3920 = 'gas'
    r3921 = load_address PyLong_Type
    r3922 = 'gasUsed'
    r3923 = load_address PyLong_Type
    r3924 = 'input'
    r3925 = faster_web3.types.globals :: static
    r3926 = 'HexBytes'
    r3927 = CPyDict_GetItem(r3925, r3926)
    if is_error(r3927) goto L2159 (error at <module>:562) else goto L1456
L1456:
    r3928 = 'output'
    r3929 = faster_web3.types.globals :: static
    r3930 = 'HexBytes'
    r3931 = CPyDict_GetItem(r3929, r3930)
    if is_error(r3931) goto L2160 (error at <module>:563) else goto L1457
L1457:
    r3932 = 'error'
    r3933 = load_address PyUnicode_Type
    r3934 = 'revertReason'
    r3935 = load_address PyUnicode_Type
    r3936 = 'calls'
    r3937 = faster_web3.types.globals :: static
    r3938 = 'Sequence'
    r3939 = CPyDict_GetItem(r3937, r3938)
    if is_error(r3939) goto L2161 (error at <module>:566) else goto L1458
L1458:
    r3940 = 'CallTrace'
    r3941 = PyObject_GetItem(r3939, r3940)
    dec_ref r3939
    if is_error(r3941) goto L2161 (error at <module>:566) else goto L1459
L1459:
    r3942 = 'logs'
    r3943 = faster_web3.types.globals :: static
    r3944 = 'Sequence'
    r3945 = CPyDict_GetItem(r3943, r3944)
    if is_error(r3945) goto L2162 (error at <module>:567) else goto L1460
L1460:
    r3946 = faster_web3.types.globals :: static
    r3947 = 'CallTraceLog'
    r3948 = CPyDict_GetItem(r3946, r3947)
    if is_error(r3948) goto L2163 (error at <module>:567) else goto L1461
L1461:
    r3949 = PyObject_GetItem(r3945, r3948)
    dec_ref r3945
    dec_ref r3948
    if is_error(r3949) goto L2162 (error at <module>:567) else goto L1462
L1462:
    r3950 = CPyDict_Build(12, r3906, r3907, r3908, r3911, r3912, r3915, r3916, r3919, r3920, r3921, r3922, r3923, r3924, r3927, r3928, r3931, r3932, r3933, r3934, r3935, r3936, r3941, r3942, r3949)
    dec_ref r3911
    dec_ref r3915
    dec_ref r3919
    dec_ref r3927
    dec_ref r3931
    dec_ref r3941
    dec_ref r3949
    if is_error(r3950) goto L1811 (error at <module>:555) else goto L1463
L1463:
    r3951 = box(bool, 0)
    r3952 = faster_web3.types.globals :: static
    r3953 = 'TypedDict'
    r3954 = CPyDict_GetItem(r3952, r3953)
    if is_error(r3954) goto L2164 (error at <module>:553) else goto L1464
L1464:
    r3955 = [r3905, r3950, r3951]
    r3956 = load_address r3955
    r3957 = ('total',)
    r3958 = PyObject_Vectorcall(r3954, r3956, 2, r3957)
    dec_ref r3954
    if is_error(r3958) goto L2164 (error at <module>:553) else goto L1465
L1465:
    dec_ref r3950
    r3959 = faster_web3.types.globals :: static
    r3960 = 'CallTrace'
    r3961 = CPyDict_SetItem(r3959, r3960, r3958)
    dec_ref r3958
    r3962 = r3961 >= 0 :: signed
    if not r3962 goto L1811 (error at <module>:553) else goto L1466 :: bool
L1466:
    r3963 = typing :: module
    r3964 = load_address _Py_NoneStruct
    r3965 = r3963 != r3964
    if r3965 goto L1469 else goto L1467 :: bool
L1467:
    r3966 = 'typing'
    r3967 = PyImport_Import(r3966)
    if is_error(r3967) goto L1811 (error at <module>:573) else goto L1468
L1468:
    typing = r3967 :: module
    dec_ref r3967
L1469:
    r3968 = PyImport_GetModuleDict()
    r3969 = 'typing'
    r3970 = CPyDict_GetItem(r3968, r3969)
    if is_error(r3970) goto L1811 (error at <module>:573) else goto L1470
L1470:
    r3971 = '_TypedDict'
    r3972 = CPyObject_GetAttr(r3970, r3971)
    dec_ref r3970
    if is_error(r3972) goto L1811 (error at <module>:573) else goto L1471
L1471:
    r3973 = PyTuple_Pack(1, r3972)
    dec_ref r3972
    if is_error(r3973) goto L1811 (error at <module>:573) else goto L1472
L1472:
    r3974 = typing :: module
    r3975 = load_address _Py_NoneStruct
    r3976 = r3974 != r3975
    if r3976 goto L1475 else goto L1473 :: bool
L1473:
    r3977 = 'typing'
    r3978 = PyImport_Import(r3977)
    if is_error(r3978) goto L2165 (error at <module>:573) else goto L1474
L1474:
    typing = r3978 :: module
    dec_ref r3978
L1475:
    r3979 = PyImport_GetModuleDict()
    r3980 = 'typing'
    r3981 = CPyDict_GetItem(r3979, r3980)
    if is_error(r3981) goto L2165 (error at <module>:573) else goto L1476
L1476:
    r3982 = '_TypedDictMeta'
    r3983 = CPyObject_GetAttr(r3981, r3982)
    dec_ref r3981
    if is_error(r3983) goto L2165 (error at <module>:573) else goto L1477
L1477:
    r3984 = '__prepare__'
    r3985 = PyObject_HasAttr(r3983, r3984)
    if r3985 goto L1478 else goto L1482 :: bool
L1478:
    r3986 = 'TraceData'
    r3987 = '__prepare__'
    r3988 = CPyObject_GetAttr(r3983, r3987)
    if is_error(r3988) goto L2166 (error at <module>:573) else goto L1479
L1479:
    r3989 = [r3986, r3973]
    r3990 = load_address r3989
    r3991 = PyObject_Vectorcall(r3988, r3990, 2, 0)
    dec_ref r3988
    if is_error(r3991) goto L2166 (error at <module>:573) else goto L1480
L1480:
    r3992 = cast(dict, r3991)
    if is_error(r3992) goto L2166 (error at <module>:573) else goto L1481
L1481:
    r3993 = r3992
    goto L1484
L1482:
    r3994 = PyDict_New()
    if is_error(r3994) goto L2166 (error at <module>:573) else goto L1483
L1483:
    r3993 = r3994
L1484:
    r3995 = PyDict_New()
    if is_error(r3995) goto L2167 (error at <module>:573) else goto L1485
L1485:
    r3996 = load_address PyLong_Type
    r3997 = 'balance'
    r3998 = PyDict_SetItem(r3995, r3997, r3996)
    r3999 = r3998 >= 0 :: signed
    if not r3999 goto L2168 (error at <module>:574) else goto L1486 :: bool
L1486:
    r4000 = load_address PyLong_Type
    r4001 = 'nonce'
    r4002 = PyDict_SetItem(r3995, r4001, r4000)
    r4003 = r4002 >= 0 :: signed
    if not r4003 goto L2168 (error at <module>:575) else goto L1487 :: bool
L1487:
    r4004 = load_address PyUnicode_Type
    r4005 = 'code'
    r4006 = PyDict_SetItem(r3995, r4005, r4004)
    r4007 = r4006 >= 0 :: signed
    if not r4007 goto L2168 (error at <module>:576) else goto L1488 :: bool
L1488:
    r4008 = load_address PyDict_Type
    r4009 = 'storage'
    r4010 = PyDict_SetItem(r3995, r4009, r4008)
    r4011 = r4010 >= 0 :: signed
    if not r4011 goto L2168 (error at <module>:577) else goto L1489 :: bool
L1489:
    r4012 = 'TraceData'
    r4013 = '__annotations__'
    r4014 = CPyDict_SetItem(r3993, r4013, r3995)
    dec_ref r3995
    r4015 = r4014 >= 0 :: signed
    if not r4015 goto L2167 (error at <module>:573) else goto L1490 :: bool
L1490:
    r4016 = 'mypyc filler docstring'
    r4017 = '__doc__'
    r4018 = CPyDict_SetItem(r3993, r4017, r4016)
    r4019 = r4018 >= 0 :: signed
    if not r4019 goto L2167 (error at <module>:573) else goto L1491 :: bool
L1491:
    r4020 = 'faster_web3.types'
    r4021 = '__module__'
    r4022 = CPyDict_SetItem(r3993, r4021, r4020)
    r4023 = r4022 >= 0 :: signed
    if not r4023 goto L2167 (error at <module>:573) else goto L1492 :: bool
L1492:
    r4024 = [r4012, r3973, r3993]
    r4025 = load_address r4024
    r4026 = PyObject_Vectorcall(r3983, r4025, 3, 0)
    dec_ref r3983
    if is_error(r4026) goto L2169 (error at <module>:573) else goto L1493
L1493:
    dec_ref r3973
    dec_ref r3993
    faster_web3.types.TraceData = r4026 :: type
    r4027 = faster_web3.types.globals :: static
    r4028 = 'TraceData'
    r4029 = PyDict_SetItem(r4027, r4028, r4026)
    dec_ref r4026
    r4030 = r4029 >= 0 :: signed
    if not r4030 goto L1811 (error at <module>:573) else goto L1494 :: bool
L1494:
    r4031 = faster_web3.types.TraceData :: type
    r4032 = typing :: module
    r4033 = load_address _Py_NoneStruct
    r4034 = r4032 != r4033
    if r4034 goto L1497 else goto L1495 :: bool
L1495:
    r4035 = 'typing'
    r4036 = PyImport_Import(r4035)
    if is_error(r4036) goto L1811 (error at <module>:580) else goto L1496
L1496:
    typing = r4036 :: module
    dec_ref r4036
L1497:
    r4037 = PyImport_GetModuleDict()
    r4038 = 'typing'
    r4039 = CPyDict_GetItem(r4037, r4038)
    if is_error(r4039) goto L1811 (error at <module>:580) else goto L1498
L1498:
    r4040 = '_TypedDict'
    r4041 = CPyObject_GetAttr(r4039, r4040)
    dec_ref r4039
    if is_error(r4041) goto L1811 (error at <module>:580) else goto L1499
L1499:
    r4042 = PyTuple_Pack(1, r4041)
    dec_ref r4041
    if is_error(r4042) goto L1811 (error at <module>:580) else goto L1500
L1500:
    r4043 = typing :: module
    r4044 = load_address _Py_NoneStruct
    r4045 = r4043 != r4044
    if r4045 goto L1503 else goto L1501 :: bool
L1501:
    r4046 = 'typing'
    r4047 = PyImport_Import(r4046)
    if is_error(r4047) goto L2170 (error at <module>:580) else goto L1502
L1502:
    typing = r4047 :: module
    dec_ref r4047
L1503:
    r4048 = PyImport_GetModuleDict()
    r4049 = 'typing'
    r4050 = CPyDict_GetItem(r4048, r4049)
    if is_error(r4050) goto L2170 (error at <module>:580) else goto L1504
L1504:
    r4051 = '_TypedDictMeta'
    r4052 = CPyObject_GetAttr(r4050, r4051)
    dec_ref r4050
    if is_error(r4052) goto L2170 (error at <module>:580) else goto L1505
L1505:
    r4053 = '__prepare__'
    r4054 = PyObject_HasAttr(r4052, r4053)
    if r4054 goto L1506 else goto L1510 :: bool
L1506:
    r4055 = 'DiffModeTrace'
    r4056 = '__prepare__'
    r4057 = CPyObject_GetAttr(r4052, r4056)
    if is_error(r4057) goto L2171 (error at <module>:580) else goto L1507
L1507:
    r4058 = [r4055, r4042]
    r4059 = load_address r4058
    r4060 = PyObject_Vectorcall(r4057, r4059, 2, 0)
    dec_ref r4057
    if is_error(r4060) goto L2171 (error at <module>:580) else goto L1508
L1508:
    r4061 = cast(dict, r4060)
    if is_error(r4061) goto L2171 (error at <module>:580) else goto L1509
L1509:
    r4062 = r4061
    goto L1512
L1510:
    r4063 = PyDict_New()
    if is_error(r4063) goto L2171 (error at <module>:580) else goto L1511
L1511:
    r4062 = r4063
L1512:
    r4064 = PyDict_New()
    if is_error(r4064) goto L2172 (error at <module>:580) else goto L1513
L1513:
    r4065 = load_address PyDict_Type
    r4066 = 'post'
    r4067 = PyDict_SetItem(r4064, r4066, r4065)
    r4068 = r4067 >= 0 :: signed
    if not r4068 goto L2173 (error at <module>:581) else goto L1514 :: bool
L1514:
    r4069 = load_address PyDict_Type
    r4070 = 'pre'
    r4071 = PyDict_SetItem(r4064, r4070, r4069)
    r4072 = r4071 >= 0 :: signed
    if not r4072 goto L2173 (error at <module>:582) else goto L1515 :: bool
L1515:
    r4073 = 'DiffModeTrace'
    r4074 = '__annotations__'
    r4075 = CPyDict_SetItem(r4062, r4074, r4064)
    dec_ref r4064
    r4076 = r4075 >= 0 :: signed
    if not r4076 goto L2172 (error at <module>:580) else goto L1516 :: bool
L1516:
    r4077 = 'mypyc filler docstring'
    r4078 = '__doc__'
    r4079 = CPyDict_SetItem(r4062, r4078, r4077)
    r4080 = r4079 >= 0 :: signed
    if not r4080 goto L2172 (error at <module>:580) else goto L1517 :: bool
L1517:
    r4081 = 'faster_web3.types'
    r4082 = '__module__'
    r4083 = CPyDict_SetItem(r4062, r4082, r4081)
    r4084 = r4083 >= 0 :: signed
    if not r4084 goto L2172 (error at <module>:580) else goto L1518 :: bool
L1518:
    r4085 = [r4073, r4042, r4062]
    r4086 = load_address r4085
    r4087 = PyObject_Vectorcall(r4052, r4086, 3, 0)
    dec_ref r4052
    if is_error(r4087) goto L2174 (error at <module>:580) else goto L1519
L1519:
    dec_ref r4042
    dec_ref r4062
    faster_web3.types.DiffModeTrace = r4087 :: type
    r4088 = faster_web3.types.globals :: static
    r4089 = 'DiffModeTrace'
    r4090 = PyDict_SetItem(r4088, r4089, r4087)
    dec_ref r4087
    r4091 = r4090 >= 0 :: signed
    if not r4091 goto L1811 (error at <module>:580) else goto L1520 :: bool
L1520:
    r4092 = faster_web3.types.DiffModeTrace :: type
    r4093 = faster_web3.types.globals :: static
    r4094 = 'Dict'
    r4095 = CPyDict_GetItem(r4093, r4094)
    if is_error(r4095) goto L1811 (error at <module>:585) else goto L1521
L1521:
    r4096 = faster_web3.types.globals :: static
    r4097 = 'ChecksumAddress'
    r4098 = CPyDict_GetItem(r4096, r4097)
    if is_error(r4098) goto L2175 (error at <module>:585) else goto L1522
L1522:
    r4099 = faster_web3.types.globals :: static
    r4100 = 'TraceData'
    r4101 = CPyDict_GetItem(r4099, r4100)
    if is_error(r4101) goto L2176 (error at <module>:585) else goto L1523
L1523:
    r4102 = (r4098, r4101)
    r4103 = box(tuple[object, object], r4102)
    r4104 = PyObject_GetItem(r4095, r4103)
    dec_ref r4095
    dec_ref r4103
    if is_error(r4104) goto L1811 (error at <module>:585) else goto L1524
L1524:
    r4105 = faster_web3.types.globals :: static
    r4106 = 'PrestateTrace'
    r4107 = CPyDict_SetItem(r4105, r4106, r4104)
    dec_ref r4104
    r4108 = r4107 >= 0 :: signed
    if not r4108 goto L1811 (error at <module>:585) else goto L1525 :: bool
L1525:
    r4109 = faster_web3.types.globals :: static
    r4110 = 'Dict'
    r4111 = CPyDict_GetItem(r4109, r4110)
    if is_error(r4111) goto L1811 (error at <module>:591) else goto L1526
L1526:
    r4112 = load_address PyUnicode_Type
    r4113 = load_address PyLong_Type
    inc_ref r4112
    inc_ref r4113
    r4114 = (r4112, r4113)
    r4115 = box(tuple[object, object], r4114)
    r4116 = PyObject_GetItem(r4111, r4115)
    dec_ref r4111
    dec_ref r4115
    if is_error(r4116) goto L1811 (error at <module>:591) else goto L1527
L1527:
    r4117 = faster_web3.types.globals :: static
    r4118 = 'FourByteTrace'
    r4119 = CPyDict_SetItem(r4117, r4118, r4116)
    dec_ref r4116
    r4120 = r4119 >= 0 :: signed
    if not r4120 goto L1811 (error at <module>:591) else goto L1528 :: bool
L1528:
    r4121 = typing :: module
    r4122 = load_address _Py_NoneStruct
    r4123 = r4121 != r4122
    if r4123 goto L1531 else goto L1529 :: bool
L1529:
    r4124 = 'typing'
    r4125 = PyImport_Import(r4124)
    if is_error(r4125) goto L1811 (error at <module>:594) else goto L1530
L1530:
    typing = r4125 :: module
    dec_ref r4125
L1531:
    r4126 = PyImport_GetModuleDict()
    r4127 = 'typing'
    r4128 = CPyDict_GetItem(r4126, r4127)
    if is_error(r4128) goto L1811 (error at <module>:594) else goto L1532
L1532:
    r4129 = '_TypedDict'
    r4130 = CPyObject_GetAttr(r4128, r4129)
    dec_ref r4128
    if is_error(r4130) goto L1811 (error at <module>:594) else goto L1533
L1533:
    r4131 = PyTuple_Pack(1, r4130)
    dec_ref r4130
    if is_error(r4131) goto L1811 (error at <module>:594) else goto L1534
L1534:
    r4132 = typing :: module
    r4133 = load_address _Py_NoneStruct
    r4134 = r4132 != r4133
    if r4134 goto L1537 else goto L1535 :: bool
L1535:
    r4135 = 'typing'
    r4136 = PyImport_Import(r4135)
    if is_error(r4136) goto L2177 (error at <module>:594) else goto L1536
L1536:
    typing = r4136 :: module
    dec_ref r4136
L1537:
    r4137 = PyImport_GetModuleDict()
    r4138 = 'typing'
    r4139 = CPyDict_GetItem(r4137, r4138)
    if is_error(r4139) goto L2177 (error at <module>:594) else goto L1538
L1538:
    r4140 = '_TypedDictMeta'
    r4141 = CPyObject_GetAttr(r4139, r4140)
    dec_ref r4139
    if is_error(r4141) goto L2177 (error at <module>:594) else goto L1539
L1539:
    r4142 = '__prepare__'
    r4143 = PyObject_HasAttr(r4141, r4142)
    if r4143 goto L1540 else goto L1544 :: bool
L1540:
    r4144 = 'StructLog'
    r4145 = '__prepare__'
    r4146 = CPyObject_GetAttr(r4141, r4145)
    if is_error(r4146) goto L2178 (error at <module>:594) else goto L1541
L1541:
    r4147 = [r4144, r4131]
    r4148 = load_address r4147
    r4149 = PyObject_Vectorcall(r4146, r4148, 2, 0)
    dec_ref r4146
    if is_error(r4149) goto L2178 (error at <module>:594) else goto L1542
L1542:
    r4150 = cast(dict, r4149)
    if is_error(r4150) goto L2178 (error at <module>:594) else goto L1543
L1543:
    r4151 = r4150
    goto L1546
L1544:
    r4152 = PyDict_New()
    if is_error(r4152) goto L2178 (error at <module>:594) else goto L1545
L1545:
    r4151 = r4152
L1546:
    r4153 = PyDict_New()
    if is_error(r4153) goto L2179 (error at <module>:594) else goto L1547
L1547:
    r4154 = load_address PyLong_Type
    r4155 = 'pc'
    r4156 = PyDict_SetItem(r4153, r4155, r4154)
    r4157 = r4156 >= 0 :: signed
    if not r4157 goto L2180 (error at <module>:595) else goto L1548 :: bool
L1548:
    r4158 = load_address PyUnicode_Type
    r4159 = 'op'
    r4160 = PyDict_SetItem(r4153, r4159, r4158)
    r4161 = r4160 >= 0 :: signed
    if not r4161 goto L2180 (error at <module>:596) else goto L1549 :: bool
L1549:
    r4162 = load_address PyLong_Type
    r4163 = 'gas'
    r4164 = PyDict_SetItem(r4153, r4163, r4162)
    r4165 = r4164 >= 0 :: signed
    if not r4165 goto L2180 (error at <module>:597) else goto L1550 :: bool
L1550:
    r4166 = load_address PyLong_Type
    r4167 = 'gasCost'
    r4168 = PyDict_SetItem(r4153, r4167, r4166)
    r4169 = r4168 >= 0 :: signed
    if not r4169 goto L2180 (error at <module>:598) else goto L1551 :: bool
L1551:
    r4170 = load_address PyLong_Type
    r4171 = 'depth'
    r4172 = PyDict_SetItem(r4153, r4171, r4170)
    r4173 = r4172 >= 0 :: signed
    if not r4173 goto L2180 (error at <module>:599) else goto L1552 :: bool
L1552:
    r4174 = load_address PyList_Type
    r4175 = 'stack'
    r4176 = PyDict_SetItem(r4153, r4175, r4174)
    r4177 = r4176 >= 0 :: signed
    if not r4177 goto L2180 (error at <module>:600) else goto L1553 :: bool
L1553:
    r4178 = 'StructLog'
    r4179 = '__annotations__'
    r4180 = CPyDict_SetItem(r4151, r4179, r4153)
    dec_ref r4153
    r4181 = r4180 >= 0 :: signed
    if not r4181 goto L2179 (error at <module>:594) else goto L1554 :: bool
L1554:
    r4182 = 'mypyc filler docstring'
    r4183 = '__doc__'
    r4184 = CPyDict_SetItem(r4151, r4183, r4182)
    r4185 = r4184 >= 0 :: signed
    if not r4185 goto L2179 (error at <module>:594) else goto L1555 :: bool
L1555:
    r4186 = 'faster_web3.types'
    r4187 = '__module__'
    r4188 = CPyDict_SetItem(r4151, r4187, r4186)
    r4189 = r4188 >= 0 :: signed
    if not r4189 goto L2179 (error at <module>:594) else goto L1556 :: bool
L1556:
    r4190 = [r4178, r4131, r4151]
    r4191 = load_address r4190
    r4192 = PyObject_Vectorcall(r4141, r4191, 3, 0)
    dec_ref r4141
    if is_error(r4192) goto L2181 (error at <module>:594) else goto L1557
L1557:
    dec_ref r4131
    dec_ref r4151
    faster_web3.types.StructLog = r4192 :: type
    r4193 = faster_web3.types.globals :: static
    r4194 = 'StructLog'
    r4195 = PyDict_SetItem(r4193, r4194, r4192)
    dec_ref r4192
    r4196 = r4195 >= 0 :: signed
    if not r4196 goto L1811 (error at <module>:594) else goto L1558 :: bool
L1558:
    r4197 = faster_web3.types.StructLog :: type
    r4198 = typing :: module
    r4199 = load_address _Py_NoneStruct
    r4200 = r4198 != r4199
    if r4200 goto L1561 else goto L1559 :: bool
L1559:
    r4201 = 'typing'
    r4202 = PyImport_Import(r4201)
    if is_error(r4202) goto L1811 (error at <module>:603) else goto L1560
L1560:
    typing = r4202 :: module
    dec_ref r4202
L1561:
    r4203 = PyImport_GetModuleDict()
    r4204 = 'typing'
    r4205 = CPyDict_GetItem(r4203, r4204)
    if is_error(r4205) goto L1811 (error at <module>:603) else goto L1562
L1562:
    r4206 = '_TypedDict'
    r4207 = CPyObject_GetAttr(r4205, r4206)
    dec_ref r4205
    if is_error(r4207) goto L1811 (error at <module>:603) else goto L1563
L1563:
    r4208 = PyTuple_Pack(1, r4207)
    dec_ref r4207
    if is_error(r4208) goto L1811 (error at <module>:603) else goto L1564
L1564:
    r4209 = typing :: module
    r4210 = load_address _Py_NoneStruct
    r4211 = r4209 != r4210
    if r4211 goto L1567 else goto L1565 :: bool
L1565:
    r4212 = 'typing'
    r4213 = PyImport_Import(r4212)
    if is_error(r4213) goto L2182 (error at <module>:603) else goto L1566
L1566:
    typing = r4213 :: module
    dec_ref r4213
L1567:
    r4214 = PyImport_GetModuleDict()
    r4215 = 'typing'
    r4216 = CPyDict_GetItem(r4214, r4215)
    if is_error(r4216) goto L2182 (error at <module>:603) else goto L1568
L1568:
    r4217 = '_TypedDictMeta'
    r4218 = CPyObject_GetAttr(r4216, r4217)
    dec_ref r4216
    if is_error(r4218) goto L2182 (error at <module>:603) else goto L1569
L1569:
    r4219 = '__prepare__'
    r4220 = PyObject_HasAttr(r4218, r4219)
    if r4220 goto L1570 else goto L1574 :: bool
L1570:
    r4221 = 'OpcodeTrace'
    r4222 = '__prepare__'
    r4223 = CPyObject_GetAttr(r4218, r4222)
    if is_error(r4223) goto L2183 (error at <module>:603) else goto L1571
L1571:
    r4224 = [r4221, r4208]
    r4225 = load_address r4224
    r4226 = PyObject_Vectorcall(r4223, r4225, 2, 0)
    dec_ref r4223
    if is_error(r4226) goto L2183 (error at <module>:603) else goto L1572
L1572:
    r4227 = cast(dict, r4226)
    if is_error(r4227) goto L2183 (error at <module>:603) else goto L1573
L1573:
    r4228 = r4227
    goto L1576
L1574:
    r4229 = PyDict_New()
    if is_error(r4229) goto L2183 (error at <module>:603) else goto L1575
L1575:
    r4228 = r4229
L1576:
    r4230 = PyDict_New()
    if is_error(r4230) goto L2184 (error at <module>:603) else goto L1577
L1577:
    r4231 = load_address PyLong_Type
    r4232 = 'gas'
    r4233 = PyDict_SetItem(r4230, r4232, r4231)
    r4234 = r4233 >= 0 :: signed
    if not r4234 goto L2185 (error at <module>:604) else goto L1578 :: bool
L1578:
    r4235 = load_address PyBool_Type
    r4236 = 'failed'
    r4237 = PyDict_SetItem(r4230, r4236, r4235)
    r4238 = r4237 >= 0 :: signed
    if not r4238 goto L2185 (error at <module>:605) else goto L1579 :: bool
L1579:
    r4239 = load_address PyUnicode_Type
    r4240 = 'returnValue'
    r4241 = PyDict_SetItem(r4230, r4240, r4239)
    r4242 = r4241 >= 0 :: signed
    if not r4242 goto L2185 (error at <module>:606) else goto L1580 :: bool
L1580:
    r4243 = load_address PyList_Type
    r4244 = 'structLogs'
    r4245 = PyDict_SetItem(r4230, r4244, r4243)
    r4246 = r4245 >= 0 :: signed
    if not r4246 goto L2185 (error at <module>:607) else goto L1581 :: bool
L1581:
    r4247 = 'OpcodeTrace'
    r4248 = '__annotations__'
    r4249 = CPyDict_SetItem(r4228, r4248, r4230)
    dec_ref r4230
    r4250 = r4249 >= 0 :: signed
    if not r4250 goto L2184 (error at <module>:603) else goto L1582 :: bool
L1582:
    r4251 = 'mypyc filler docstring'
    r4252 = '__doc__'
    r4253 = CPyDict_SetItem(r4228, r4252, r4251)
    r4254 = r4253 >= 0 :: signed
    if not r4254 goto L2184 (error at <module>:603) else goto L1583 :: bool
L1583:
    r4255 = 'faster_web3.types'
    r4256 = '__module__'
    r4257 = CPyDict_SetItem(r4228, r4256, r4255)
    r4258 = r4257 >= 0 :: signed
    if not r4258 goto L2184 (error at <module>:603) else goto L1584 :: bool
L1584:
    r4259 = [r4247, r4208, r4228]
    r4260 = load_address r4259
    r4261 = PyObject_Vectorcall(r4218, r4260, 3, 0)
    dec_ref r4218
    if is_error(r4261) goto L2186 (error at <module>:603) else goto L1585
L1585:
    dec_ref r4208
    dec_ref r4228
    faster_web3.types.OpcodeTrace = r4261 :: type
    r4262 = faster_web3.types.globals :: static
    r4263 = 'OpcodeTrace'
    r4264 = PyDict_SetItem(r4262, r4263, r4261)
    dec_ref r4261
    r4265 = r4264 >= 0 :: signed
    if not r4265 goto L1811 (error at <module>:603) else goto L1586 :: bool
L1586:
    r4266 = faster_web3.types.OpcodeTrace :: type
    r4267 = typing :: module
    r4268 = load_address _Py_NoneStruct
    r4269 = r4267 != r4268
    if r4269 goto L1589 else goto L1587 :: bool
L1587:
    r4270 = 'typing'
    r4271 = PyImport_Import(r4270)
    if is_error(r4271) goto L1811 (error at <module>:610) else goto L1588
L1588:
    typing = r4271 :: module
    dec_ref r4271
L1589:
    r4272 = PyImport_GetModuleDict()
    r4273 = 'typing'
    r4274 = CPyDict_GetItem(r4272, r4273)
    if is_error(r4274) goto L1811 (error at <module>:610) else goto L1590
L1590:
    r4275 = '_TypedDict'
    r4276 = CPyObject_GetAttr(r4274, r4275)
    dec_ref r4274
    if is_error(r4276) goto L1811 (error at <module>:610) else goto L1591
L1591:
    r4277 = PyTuple_Pack(1, r4276)
    dec_ref r4276
    if is_error(r4277) goto L1811 (error at <module>:610) else goto L1592
L1592:
    r4278 = typing :: module
    r4279 = load_address _Py_NoneStruct
    r4280 = r4278 != r4279
    if r4280 goto L1595 else goto L1593 :: bool
L1593:
    r4281 = 'typing'
    r4282 = PyImport_Import(r4281)
    if is_error(r4282) goto L2187 (error at <module>:610) else goto L1594
L1594:
    typing = r4282 :: module
    dec_ref r4282
L1595:
    r4283 = PyImport_GetModuleDict()
    r4284 = 'typing'
    r4285 = CPyDict_GetItem(r4283, r4284)
    if is_error(r4285) goto L2187 (error at <module>:610) else goto L1596
L1596:
    r4286 = '_TypedDictMeta'
    r4287 = CPyObject_GetAttr(r4285, r4286)
    dec_ref r4285
    if is_error(r4287) goto L2187 (error at <module>:610) else goto L1597
L1597:
    r4288 = '__prepare__'
    r4289 = PyObject_HasAttr(r4287, r4288)
    if r4289 goto L1598 else goto L1602 :: bool
L1598:
    r4290 = 'BlockStateCallV1'
    r4291 = '__prepare__'
    r4292 = CPyObject_GetAttr(r4287, r4291)
    if is_error(r4292) goto L2188 (error at <module>:610) else goto L1599
L1599:
    r4293 = [r4290, r4277]
    r4294 = load_address r4293
    r4295 = PyObject_Vectorcall(r4292, r4294, 2, 0)
    dec_ref r4292
    if is_error(r4295) goto L2188 (error at <module>:610) else goto L1600
L1600:
    r4296 = cast(dict, r4295)
    if is_error(r4296) goto L2188 (error at <module>:610) else goto L1601
L1601:
    r4297 = r4296
    goto L1604
L1602:
    r4298 = PyDict_New()
    if is_error(r4298) goto L2188 (error at <module>:610) else goto L1603
L1603:
    r4297 = r4298
L1604:
    r4299 = PyDict_New()
    if is_error(r4299) goto L2189 (error at <module>:610) else goto L1605
L1605:
    r4300 = load_address PyType_Type
    r4301 = 'blockOverrides'
    r4302 = PyDict_SetItem(r4299, r4301, r4300)
    r4303 = r4302 >= 0 :: signed
    if not r4303 goto L2190 (error at <module>:611) else goto L1606 :: bool
L1606:
    r4304 = load_address PyDict_Type
    r4305 = 'stateOverrides'
    r4306 = PyDict_SetItem(r4299, r4305, r4304)
    r4307 = r4306 >= 0 :: signed
    if not r4307 goto L2190 (error at <module>:612) else goto L1607 :: bool
L1607:
    r4308 = faster_web3.types.globals :: static
    r4309 = 'Sequence'
    r4310 = CPyDict_GetItem(r4308, r4309)
    if is_error(r4310) goto L2190 (error at <module>:613) else goto L1608
L1608:
    r4311 = 'calls'
    r4312 = PyDict_SetItem(r4299, r4311, r4310)
    dec_ref r4310
    r4313 = r4312 >= 0 :: signed
    if not r4313 goto L2190 (error at <module>:613) else goto L1609 :: bool
L1609:
    r4314 = 'BlockStateCallV1'
    r4315 = '__annotations__'
    r4316 = CPyDict_SetItem(r4297, r4315, r4299)
    dec_ref r4299
    r4317 = r4316 >= 0 :: signed
    if not r4317 goto L2189 (error at <module>:610) else goto L1610 :: bool
L1610:
    r4318 = 'mypyc filler docstring'
    r4319 = '__doc__'
    r4320 = CPyDict_SetItem(r4297, r4319, r4318)
    r4321 = r4320 >= 0 :: signed
    if not r4321 goto L2189 (error at <module>:610) else goto L1611 :: bool
L1611:
    r4322 = 'faster_web3.types'
    r4323 = '__module__'
    r4324 = CPyDict_SetItem(r4297, r4323, r4322)
    r4325 = r4324 >= 0 :: signed
    if not r4325 goto L2189 (error at <module>:610) else goto L1612 :: bool
L1612:
    r4326 = [r4314, r4277, r4297]
    r4327 = load_address r4326
    r4328 = PyObject_Vectorcall(r4287, r4327, 3, 0)
    dec_ref r4287
    if is_error(r4328) goto L2191 (error at <module>:610) else goto L1613
L1613:
    dec_ref r4277
    dec_ref r4297
    faster_web3.types.BlockStateCallV1 = r4328 :: type
    r4329 = faster_web3.types.globals :: static
    r4330 = 'BlockStateCallV1'
    r4331 = PyDict_SetItem(r4329, r4330, r4328)
    dec_ref r4328
    r4332 = r4331 >= 0 :: signed
    if not r4332 goto L1811 (error at <module>:610) else goto L1614 :: bool
L1614:
    r4333 = faster_web3.types.BlockStateCallV1 :: type
    r4334 = typing :: module
    r4335 = load_address _Py_NoneStruct
    r4336 = r4334 != r4335
    if r4336 goto L1617 else goto L1615 :: bool
L1615:
    r4337 = 'typing'
    r4338 = PyImport_Import(r4337)
    if is_error(r4338) goto L1811 (error at <module>:616) else goto L1616
L1616:
    typing = r4338 :: module
    dec_ref r4338
L1617:
    r4339 = PyImport_GetModuleDict()
    r4340 = 'typing'
    r4341 = CPyDict_GetItem(r4339, r4340)
    if is_error(r4341) goto L1811 (error at <module>:616) else goto L1618
L1618:
    r4342 = '_TypedDict'
    r4343 = CPyObject_GetAttr(r4341, r4342)
    dec_ref r4341
    if is_error(r4343) goto L1811 (error at <module>:616) else goto L1619
L1619:
    r4344 = PyTuple_Pack(1, r4343)
    dec_ref r4343
    if is_error(r4344) goto L1811 (error at <module>:616) else goto L1620
L1620:
    r4345 = typing :: module
    r4346 = load_address _Py_NoneStruct
    r4347 = r4345 != r4346
    if r4347 goto L1623 else goto L1621 :: bool
L1621:
    r4348 = 'typing'
    r4349 = PyImport_Import(r4348)
    if is_error(r4349) goto L2192 (error at <module>:616) else goto L1622
L1622:
    typing = r4349 :: module
    dec_ref r4349
L1623:
    r4350 = PyImport_GetModuleDict()
    r4351 = 'typing'
    r4352 = CPyDict_GetItem(r4350, r4351)
    if is_error(r4352) goto L2192 (error at <module>:616) else goto L1624
L1624:
    r4353 = '_TypedDictMeta'
    r4354 = CPyObject_GetAttr(r4352, r4353)
    dec_ref r4352
    if is_error(r4354) goto L2192 (error at <module>:616) else goto L1625
L1625:
    r4355 = '__prepare__'
    r4356 = PyObject_HasAttr(r4354, r4355)
    if r4356 goto L1626 else goto L1630 :: bool
L1626:
    r4357 = 'SimulateV1Payload'
    r4358 = '__prepare__'
    r4359 = CPyObject_GetAttr(r4354, r4358)
    if is_error(r4359) goto L2193 (error at <module>:616) else goto L1627
L1627:
    r4360 = [r4357, r4344]
    r4361 = load_address r4360
    r4362 = PyObject_Vectorcall(r4359, r4361, 2, 0)
    dec_ref r4359
    if is_error(r4362) goto L2193 (error at <module>:616) else goto L1628
L1628:
    r4363 = cast(dict, r4362)
    if is_error(r4363) goto L2193 (error at <module>:616) else goto L1629
L1629:
    r4364 = r4363
    goto L1632
L1630:
    r4365 = PyDict_New()
    if is_error(r4365) goto L2193 (error at <module>:616) else goto L1631
L1631:
    r4364 = r4365
L1632:
    r4366 = PyDict_New()
    if is_error(r4366) goto L2194 (error at <module>:616) else goto L1633
L1633:
    r4367 = faster_web3.types.globals :: static
    r4368 = 'Sequence'
    r4369 = CPyDict_GetItem(r4367, r4368)
    if is_error(r4369) goto L2195 (error at <module>:617) else goto L1634
L1634:
    r4370 = 'blockStateCalls'
    r4371 = PyDict_SetItem(r4366, r4370, r4369)
    dec_ref r4369
    r4372 = r4371 >= 0 :: signed
    if not r4372 goto L2195 (error at <module>:617) else goto L1635 :: bool
L1635:
    r4373 = load_address PyBool_Type
    r4374 = 'validation'
    r4375 = PyDict_SetItem(r4366, r4374, r4373)
    r4376 = r4375 >= 0 :: signed
    if not r4376 goto L2195 (error at <module>:618) else goto L1636 :: bool
L1636:
    r4377 = load_address PyBool_Type
    r4378 = 'traceTransfers'
    r4379 = PyDict_SetItem(r4366, r4378, r4377)
    r4380 = r4379 >= 0 :: signed
    if not r4380 goto L2195 (error at <module>:619) else goto L1637 :: bool
L1637:
    r4381 = 'SimulateV1Payload'
    r4382 = '__annotations__'
    r4383 = CPyDict_SetItem(r4364, r4382, r4366)
    dec_ref r4366
    r4384 = r4383 >= 0 :: signed
    if not r4384 goto L2194 (error at <module>:616) else goto L1638 :: bool
L1638:
    r4385 = 'mypyc filler docstring'
    r4386 = '__doc__'
    r4387 = CPyDict_SetItem(r4364, r4386, r4385)
    r4388 = r4387 >= 0 :: signed
    if not r4388 goto L2194 (error at <module>:616) else goto L1639 :: bool
L1639:
    r4389 = 'faster_web3.types'
    r4390 = '__module__'
    r4391 = CPyDict_SetItem(r4364, r4390, r4389)
    r4392 = r4391 >= 0 :: signed
    if not r4392 goto L2194 (error at <module>:616) else goto L1640 :: bool
L1640:
    r4393 = [r4381, r4344, r4364]
    r4394 = load_address r4393
    r4395 = PyObject_Vectorcall(r4354, r4394, 3, 0)
    dec_ref r4354
    if is_error(r4395) goto L2196 (error at <module>:616) else goto L1641
L1641:
    dec_ref r4344
    dec_ref r4364
    faster_web3.types.SimulateV1Payload = r4395 :: type
    r4396 = faster_web3.types.globals :: static
    r4397 = 'SimulateV1Payload'
    r4398 = PyDict_SetItem(r4396, r4397, r4395)
    dec_ref r4395
    r4399 = r4398 >= 0 :: signed
    if not r4399 goto L1811 (error at <module>:616) else goto L1642 :: bool
L1642:
    r4400 = faster_web3.types.SimulateV1Payload :: type
    r4401 = typing :: module
    r4402 = load_address _Py_NoneStruct
    r4403 = r4401 != r4402
    if r4403 goto L1645 else goto L1643 :: bool
L1643:
    r4404 = 'typing'
    r4405 = PyImport_Import(r4404)
    if is_error(r4405) goto L1811 (error at <module>:622) else goto L1644
L1644:
    typing = r4405 :: module
    dec_ref r4405
L1645:
    r4406 = PyImport_GetModuleDict()
    r4407 = 'typing'
    r4408 = CPyDict_GetItem(r4406, r4407)
    if is_error(r4408) goto L1811 (error at <module>:622) else goto L1646
L1646:
    r4409 = '_TypedDict'
    r4410 = CPyObject_GetAttr(r4408, r4409)
    dec_ref r4408
    if is_error(r4410) goto L1811 (error at <module>:622) else goto L1647
L1647:
    r4411 = PyTuple_Pack(1, r4410)
    dec_ref r4410
    if is_error(r4411) goto L1811 (error at <module>:622) else goto L1648
L1648:
    r4412 = typing :: module
    r4413 = load_address _Py_NoneStruct
    r4414 = r4412 != r4413
    if r4414 goto L1651 else goto L1649 :: bool
L1649:
    r4415 = 'typing'
    r4416 = PyImport_Import(r4415)
    if is_error(r4416) goto L2197 (error at <module>:622) else goto L1650
L1650:
    typing = r4416 :: module
    dec_ref r4416
L1651:
    r4417 = PyImport_GetModuleDict()
    r4418 = 'typing'
    r4419 = CPyDict_GetItem(r4417, r4418)
    if is_error(r4419) goto L2197 (error at <module>:622) else goto L1652
L1652:
    r4420 = '_TypedDictMeta'
    r4421 = CPyObject_GetAttr(r4419, r4420)
    dec_ref r4419
    if is_error(r4421) goto L2197 (error at <module>:622) else goto L1653
L1653:
    r4422 = '__prepare__'
    r4423 = PyObject_HasAttr(r4421, r4422)
    if r4423 goto L1654 else goto L1658 :: bool
L1654:
    r4424 = 'SimulateV1CallResult'
    r4425 = '__prepare__'
    r4426 = CPyObject_GetAttr(r4421, r4425)
    if is_error(r4426) goto L2198 (error at <module>:622) else goto L1655
L1655:
    r4427 = [r4424, r4411]
    r4428 = load_address r4427
    r4429 = PyObject_Vectorcall(r4426, r4428, 2, 0)
    dec_ref r4426
    if is_error(r4429) goto L2198 (error at <module>:622) else goto L1656
L1656:
    r4430 = cast(dict, r4429)
    if is_error(r4430) goto L2198 (error at <module>:622) else goto L1657
L1657:
    r4431 = r4430
    goto L1660
L1658:
    r4432 = PyDict_New()
    if is_error(r4432) goto L2198 (error at <module>:622) else goto L1659
L1659:
    r4431 = r4432
L1660:
    r4433 = PyDict_New()
    if is_error(r4433) goto L2199 (error at <module>:622) else goto L1661
L1661:
    r4434 = load_address PyType_Type
    r4435 = 'returnData'
    r4436 = PyDict_SetItem(r4433, r4435, r4434)
    r4437 = r4436 >= 0 :: signed
    if not r4437 goto L2200 (error at <module>:623) else goto L1662 :: bool
L1662:
    r4438 = faster_web3.types.globals :: static
    r4439 = 'Sequence'
    r4440 = CPyDict_GetItem(r4438, r4439)
    if is_error(r4440) goto L2200 (error at <module>:624) else goto L1663
L1663:
    r4441 = 'logs'
    r4442 = PyDict_SetItem(r4433, r4441, r4440)
    dec_ref r4440
    r4443 = r4442 >= 0 :: signed
    if not r4443 goto L2200 (error at <module>:624) else goto L1664 :: bool
L1664:
    r4444 = load_address PyLong_Type
    r4445 = 'gasUsed'
    r4446 = PyDict_SetItem(r4433, r4445, r4444)
    r4447 = r4446 >= 0 :: signed
    if not r4447 goto L2200 (error at <module>:625) else goto L1665 :: bool
L1665:
    r4448 = load_address PyLong_Type
    r4449 = 'status'
    r4450 = PyDict_SetItem(r4433, r4449, r4448)
    r4451 = r4450 >= 0 :: signed
    if not r4451 goto L2200 (error at <module>:626) else goto L1666 :: bool
L1666:
    r4452 = load_address PyType_Type
    r4453 = 'error'
    r4454 = PyDict_SetItem(r4433, r4453, r4452)
    r4455 = r4454 >= 0 :: signed
    if not r4455 goto L2200 (error at <module>:627) else goto L1667 :: bool
L1667:
    r4456 = 'SimulateV1CallResult'
    r4457 = '__annotations__'
    r4458 = CPyDict_SetItem(r4431, r4457, r4433)
    dec_ref r4433
    r4459 = r4458 >= 0 :: signed
    if not r4459 goto L2199 (error at <module>:622) else goto L1668 :: bool
L1668:
    r4460 = 'mypyc filler docstring'
    r4461 = '__doc__'
    r4462 = CPyDict_SetItem(r4431, r4461, r4460)
    r4463 = r4462 >= 0 :: signed
    if not r4463 goto L2199 (error at <module>:622) else goto L1669 :: bool
L1669:
    r4464 = 'faster_web3.types'
    r4465 = '__module__'
    r4466 = CPyDict_SetItem(r4431, r4465, r4464)
    r4467 = r4466 >= 0 :: signed
    if not r4467 goto L2199 (error at <module>:622) else goto L1670 :: bool
L1670:
    r4468 = [r4456, r4411, r4431]
    r4469 = load_address r4468
    r4470 = PyObject_Vectorcall(r4421, r4469, 3, 0)
    dec_ref r4421
    if is_error(r4470) goto L2201 (error at <module>:622) else goto L1671
L1671:
    dec_ref r4411
    dec_ref r4431
    faster_web3.types.SimulateV1CallResult = r4470 :: type
    r4471 = faster_web3.types.globals :: static
    r4472 = 'SimulateV1CallResult'
    r4473 = PyDict_SetItem(r4471, r4472, r4470)
    dec_ref r4470
    r4474 = r4473 >= 0 :: signed
    if not r4474 goto L1811 (error at <module>:622) else goto L1672 :: bool
L1672:
    r4475 = faster_web3.types.SimulateV1CallResult :: type
    r4476 = typing :: module
    r4477 = load_address _Py_NoneStruct
    r4478 = r4476 != r4477
    if r4478 goto L1675 else goto L1673 :: bool
L1673:
    r4479 = 'typing'
    r4480 = PyImport_Import(r4479)
    if is_error(r4480) goto L1811 (error at <module>:630) else goto L1674
L1674:
    typing = r4480 :: module
    dec_ref r4480
L1675:
    r4481 = PyImport_GetModuleDict()
    r4482 = 'typing'
    r4483 = CPyDict_GetItem(r4481, r4482)
    if is_error(r4483) goto L1811 (error at <module>:630) else goto L1676
L1676:
    r4484 = '_TypedDict'
    r4485 = CPyObject_GetAttr(r4483, r4484)
    dec_ref r4483
    if is_error(r4485) goto L1811 (error at <module>:630) else goto L1677
L1677:
    r4486 = PyTuple_Pack(1, r4485)
    dec_ref r4485
    if is_error(r4486) goto L1811 (error at <module>:630) else goto L1678
L1678:
    r4487 = typing :: module
    r4488 = load_address _Py_NoneStruct
    r4489 = r4487 != r4488
    if r4489 goto L1681 else goto L1679 :: bool
L1679:
    r4490 = 'typing'
    r4491 = PyImport_Import(r4490)
    if is_error(r4491) goto L2202 (error at <module>:630) else goto L1680
L1680:
    typing = r4491 :: module
    dec_ref r4491
L1681:
    r4492 = PyImport_GetModuleDict()
    r4493 = 'typing'
    r4494 = CPyDict_GetItem(r4492, r4493)
    if is_error(r4494) goto L2202 (error at <module>:630) else goto L1682
L1682:
    r4495 = '_TypedDictMeta'
    r4496 = CPyObject_GetAttr(r4494, r4495)
    dec_ref r4494
    if is_error(r4496) goto L2202 (error at <module>:630) else goto L1683
L1683:
    r4497 = '__prepare__'
    r4498 = PyObject_HasAttr(r4496, r4497)
    if r4498 goto L1684 else goto L1688 :: bool
L1684:
    r4499 = 'SimulateV1Result'
    r4500 = '__prepare__'
    r4501 = CPyObject_GetAttr(r4496, r4500)
    if is_error(r4501) goto L2203 (error at <module>:630) else goto L1685
L1685:
    r4502 = [r4499, r4486]
    r4503 = load_address r4502
    r4504 = PyObject_Vectorcall(r4501, r4503, 2, 0)
    dec_ref r4501
    if is_error(r4504) goto L2203 (error at <module>:630) else goto L1686
L1686:
    r4505 = cast(dict, r4504)
    if is_error(r4505) goto L2203 (error at <module>:630) else goto L1687
L1687:
    r4506 = r4505
    goto L1690
L1688:
    r4507 = PyDict_New()
    if is_error(r4507) goto L2203 (error at <module>:630) else goto L1689
L1689:
    r4506 = r4507
L1690:
    r4508 = PyDict_New()
    if is_error(r4508) goto L2204 (error at <module>:630) else goto L1691
L1691:
    r4509 = faster_web3.types.globals :: static
    r4510 = 'Sequence'
    r4511 = CPyDict_GetItem(r4509, r4510)
    if is_error(r4511) goto L2205 (error at <module>:631) else goto L1692
L1692:
    r4512 = 'calls'
    r4513 = PyDict_SetItem(r4508, r4512, r4511)
    dec_ref r4511
    r4514 = r4513 >= 0 :: signed
    if not r4514 goto L2205 (error at <module>:631) else goto L1693 :: bool
L1693:
    r4515 = 'SimulateV1Result'
    r4516 = '__annotations__'
    r4517 = CPyDict_SetItem(r4506, r4516, r4508)
    dec_ref r4508
    r4518 = r4517 >= 0 :: signed
    if not r4518 goto L2204 (error at <module>:630) else goto L1694 :: bool
L1694:
    r4519 = 'mypyc filler docstring'
    r4520 = '__doc__'
    r4521 = CPyDict_SetItem(r4506, r4520, r4519)
    r4522 = r4521 >= 0 :: signed
    if not r4522 goto L2204 (error at <module>:630) else goto L1695 :: bool
L1695:
    r4523 = 'faster_web3.types'
    r4524 = '__module__'
    r4525 = CPyDict_SetItem(r4506, r4524, r4523)
    r4526 = r4525 >= 0 :: signed
    if not r4526 goto L2204 (error at <module>:630) else goto L1696 :: bool
L1696:
    r4527 = [r4515, r4486, r4506]
    r4528 = load_address r4527
    r4529 = PyObject_Vectorcall(r4496, r4528, 3, 0)
    dec_ref r4496
    if is_error(r4529) goto L2206 (error at <module>:630) else goto L1697
L1697:
    dec_ref r4486
    dec_ref r4506
    faster_web3.types.SimulateV1Result = r4529 :: type
    r4530 = faster_web3.types.globals :: static
    r4531 = 'SimulateV1Result'
    r4532 = PyDict_SetItem(r4530, r4531, r4529)
    dec_ref r4529
    r4533 = r4532 >= 0 :: signed
    if not r4533 goto L1811 (error at <module>:630) else goto L1698 :: bool
L1698:
    r4534 = faster_web3.types.SimulateV1Result :: type
    r4535 = typing :: module
    r4536 = load_address _Py_NoneStruct
    r4537 = r4535 != r4536
    if r4537 goto L1701 else goto L1699 :: bool
L1699:
    r4538 = 'typing'
    r4539 = PyImport_Import(r4538)
    if is_error(r4539) goto L1811 (error at <module>:639) else goto L1700
L1700:
    typing = r4539 :: module
    dec_ref r4539
L1701:
    r4540 = PyImport_GetModuleDict()
    r4541 = 'typing'
    r4542 = CPyDict_GetItem(r4540, r4541)
    if is_error(r4542) goto L1811 (error at <module>:639) else goto L1702
L1702:
    r4543 = '_TypedDict'
    r4544 = CPyObject_GetAttr(r4542, r4543)
    dec_ref r4542
    if is_error(r4544) goto L1811 (error at <module>:639) else goto L1703
L1703:
    r4545 = PyTuple_Pack(1, r4544)
    dec_ref r4544
    if is_error(r4545) goto L1811 (error at <module>:639) else goto L1704
L1704:
    r4546 = typing :: module
    r4547 = load_address _Py_NoneStruct
    r4548 = r4546 != r4547
    if r4548 goto L1707 else goto L1705 :: bool
L1705:
    r4549 = 'typing'
    r4550 = PyImport_Import(r4549)
    if is_error(r4550) goto L2207 (error at <module>:639) else goto L1706
L1706:
    typing = r4550 :: module
    dec_ref r4550
L1707:
    r4551 = PyImport_GetModuleDict()
    r4552 = 'typing'
    r4553 = CPyDict_GetItem(r4551, r4552)
    if is_error(r4553) goto L2207 (error at <module>:639) else goto L1708
L1708:
    r4554 = '_TypedDictMeta'
    r4555 = CPyObject_GetAttr(r4553, r4554)
    dec_ref r4553
    if is_error(r4555) goto L2207 (error at <module>:639) else goto L1709
L1709:
    r4556 = '__prepare__'
    r4557 = PyObject_HasAttr(r4555, r4556)
    if r4557 goto L1710 else goto L1714 :: bool
L1710:
    r4558 = 'GethWallet'
    r4559 = '__prepare__'
    r4560 = CPyObject_GetAttr(r4555, r4559)
    if is_error(r4560) goto L2208 (error at <module>:639) else goto L1711
L1711:
    r4561 = [r4558, r4545]
    r4562 = load_address r4561
    r4563 = PyObject_Vectorcall(r4560, r4562, 2, 0)
    dec_ref r4560
    if is_error(r4563) goto L2208 (error at <module>:639) else goto L1712
L1712:
    r4564 = cast(dict, r4563)
    if is_error(r4564) goto L2208 (error at <module>:639) else goto L1713
L1713:
    r4565 = r4564
    goto L1716
L1714:
    r4566 = PyDict_New()
    if is_error(r4566) goto L2208 (error at <module>:639) else goto L1715
L1715:
    r4565 = r4566
L1716:
    r4567 = PyDict_New()
    if is_error(r4567) goto L2209 (error at <module>:639) else goto L1717
L1717:
    r4568 = faster_web3.types.globals :: static
    r4569 = 'Sequence'
    r4570 = CPyDict_GetItem(r4568, r4569)
    if is_error(r4570) goto L2210 (error at <module>:640) else goto L1718
L1718:
    r4571 = 'accounts'
    r4572 = PyDict_SetItem(r4567, r4571, r4570)
    dec_ref r4570
    r4573 = r4572 >= 0 :: signed
    if not r4573 goto L2210 (error at <module>:640) else goto L1719 :: bool
L1719:
    r4574 = load_address PyUnicode_Type
    r4575 = 'status'
    r4576 = PyDict_SetItem(r4567, r4575, r4574)
    r4577 = r4576 >= 0 :: signed
    if not r4577 goto L2210 (error at <module>:641) else goto L1720 :: bool
L1720:
    r4578 = load_address PyUnicode_Type
    r4579 = 'url'
    r4580 = PyDict_SetItem(r4567, r4579, r4578)
    r4581 = r4580 >= 0 :: signed
    if not r4581 goto L2210 (error at <module>:642) else goto L1721 :: bool
L1721:
    r4582 = 'GethWallet'
    r4583 = '__annotations__'
    r4584 = CPyDict_SetItem(r4565, r4583, r4567)
    dec_ref r4567
    r4585 = r4584 >= 0 :: signed
    if not r4585 goto L2209 (error at <module>:639) else goto L1722 :: bool
L1722:
    r4586 = 'mypyc filler docstring'
    r4587 = '__doc__'
    r4588 = CPyDict_SetItem(r4565, r4587, r4586)
    r4589 = r4588 >= 0 :: signed
    if not r4589 goto L2209 (error at <module>:639) else goto L1723 :: bool
L1723:
    r4590 = 'faster_web3.types'
    r4591 = '__module__'
    r4592 = CPyDict_SetItem(r4565, r4591, r4590)
    r4593 = r4592 >= 0 :: signed
    if not r4593 goto L2209 (error at <module>:639) else goto L1724 :: bool
L1724:
    r4594 = [r4582, r4545, r4565]
    r4595 = load_address r4594
    r4596 = PyObject_Vectorcall(r4555, r4595, 3, 0)
    dec_ref r4555
    if is_error(r4596) goto L2211 (error at <module>:639) else goto L1725
L1725:
    dec_ref r4545
    dec_ref r4565
    faster_web3.types.GethWallet = r4596 :: type
    r4597 = faster_web3.types.globals :: static
    r4598 = 'GethWallet'
    r4599 = PyDict_SetItem(r4597, r4598, r4596)
    dec_ref r4596
    r4600 = r4599 >= 0 :: signed
    if not r4600 goto L1811 (error at <module>:639) else goto L1726 :: bool
L1726:
    r4601 = faster_web3.types.GethWallet :: type
    r4602 = 'TContractFn'
    r4603 = 'BaseContractFunction'
    r4604 = faster_web3.types.globals :: static
    r4605 = 'TypeVar'
    r4606 = CPyDict_GetItem(r4604, r4605)
    if is_error(r4606) goto L1811 (error at <module>:647) else goto L1727
L1727:
    r4607 = [r4602, r4603]
    r4608 = load_address r4607
    r4609 = ('bound',)
    r4610 = PyObject_Vectorcall(r4606, r4608, 1, r4609)
    dec_ref r4606
    if is_error(r4610) goto L1811 (error at <module>:647) else goto L1728
L1728:
    r4611 = faster_web3.types.globals :: static
    r4612 = 'TContractFn'
    r4613 = CPyDict_SetItem(r4611, r4612, r4610)
    dec_ref r4610
    r4614 = r4613 >= 0 :: signed
    if not r4614 goto L1811 (error at <module>:647) else goto L1729 :: bool
L1729:
    r4615 = 'TContractEvent'
    r4616 = 'BaseContractEvent'
    r4617 = faster_web3.types.globals :: static
    r4618 = 'TypeVar'
    r4619 = CPyDict_GetItem(r4617, r4618)
    if is_error(r4619) goto L1811 (error at <module>:648) else goto L1730
L1730:
    r4620 = [r4615, r4616]
    r4621 = load_address r4620
    r4622 = ('bound',)
    r4623 = PyObject_Vectorcall(r4619, r4621, 1, r4622)
    dec_ref r4619
    if is_error(r4623) goto L1811 (error at <module>:648) else goto L1731
L1731:
    r4624 = faster_web3.types.globals :: static
    r4625 = 'TContractEvent'
    r4626 = CPyDict_SetItem(r4624, r4625, r4623)
    dec_ref r4623
    r4627 = r4626 >= 0 :: signed
    if not r4627 goto L1811 (error at <module>:648) else goto L1732 :: bool
L1732:
    r4628 = 'BlockTrace'
    r4629 = faster_web3.types.globals :: static
    r4630 = 'Dict'
    r4631 = CPyDict_GetItem(r4629, r4630)
    if is_error(r4631) goto L1811 (error at <module>:652) else goto L1733
L1733:
    r4632 = load_address PyUnicode_Type
    r4633 = faster_web3.types.globals :: static
    r4634 = 'Any'
    r4635 = CPyDict_GetItem(r4633, r4634)
    if is_error(r4635) goto L2212 (error at <module>:652) else goto L1734
L1734:
    inc_ref r4632
    r4636 = (r4632, r4635)
    r4637 = box(tuple[object, object], r4636)
    r4638 = PyObject_GetItem(r4631, r4637)
    dec_ref r4631
    dec_ref r4637
    if is_error(r4638) goto L1811 (error at <module>:652) else goto L1735
L1735:
    r4639 = faster_web3.types.globals :: static
    r4640 = 'NewType'
    r4641 = CPyDict_GetItem(r4639, r4640)
    if is_error(r4641) goto L2213 (error at <module>:652) else goto L1736
L1736:
    r4642 = [r4628, r4638]
    r4643 = load_address r4642
    r4644 = PyObject_Vectorcall(r4641, r4643, 2, 0)
    dec_ref r4641
    if is_error(r4644) goto L2213 (error at <module>:652) else goto L1737
L1737:
    dec_ref r4638
    r4645 = faster_web3.types.globals :: static
    r4646 = 'BlockTrace'
    r4647 = CPyDict_SetItem(r4645, r4646, r4644)
    dec_ref r4644
    r4648 = r4647 >= 0 :: signed
    if not r4648 goto L1811 (error at <module>:652) else goto L1738 :: bool
L1738:
    r4649 = 'FilterTrace'
    r4650 = faster_web3.types.globals :: static
    r4651 = 'Dict'
    r4652 = CPyDict_GetItem(r4650, r4651)
    if is_error(r4652) goto L1811 (error at <module>:653) else goto L1739
L1739:
    r4653 = load_address PyUnicode_Type
    r4654 = faster_web3.types.globals :: static
    r4655 = 'Any'
    r4656 = CPyDict_GetItem(r4654, r4655)
    if is_error(r4656) goto L2214 (error at <module>:653) else goto L1740
L1740:
    inc_ref r4653
    r4657 = (r4653, r4656)
    r4658 = box(tuple[object, object], r4657)
    r4659 = PyObject_GetItem(r4652, r4658)
    dec_ref r4652
    dec_ref r4658
    if is_error(r4659) goto L1811 (error at <module>:653) else goto L1741
L1741:
    r4660 = faster_web3.types.globals :: static
    r4661 = 'NewType'
    r4662 = CPyDict_GetItem(r4660, r4661)
    if is_error(r4662) goto L2215 (error at <module>:653) else goto L1742
L1742:
    r4663 = [r4649, r4659]
    r4664 = load_address r4663
    r4665 = PyObject_Vectorcall(r4662, r4664, 2, 0)
    dec_ref r4662
    if is_error(r4665) goto L2215 (error at <module>:653) else goto L1743
L1743:
    dec_ref r4659
    r4666 = faster_web3.types.globals :: static
    r4667 = 'FilterTrace'
    r4668 = CPyDict_SetItem(r4666, r4667, r4665)
    dec_ref r4665
    r4669 = r4668 >= 0 :: signed
    if not r4669 goto L1811 (error at <module>:653) else goto L1744 :: bool
L1744:
    r4670 = faster_web3.types.globals :: static
    r4671 = 'Sequence'
    r4672 = CPyDict_GetItem(r4670, r4671)
    if is_error(r4672) goto L1811 (error at <module>:654) else goto L1745
L1745:
    r4673 = faster_web3.types.globals :: static
    r4674 = 'Literal'
    r4675 = CPyDict_GetItem(r4673, r4674)
    if is_error(r4675) goto L2216 (error at <module>:654) else goto L1746
L1746:
    r4676 = 'trace'
    r4677 = 'vmTrace'
    r4678 = 'stateDiff'
    inc_ref r4676
    inc_ref r4677
    inc_ref r4678
    r4679 = (r4676, r4677, r4678)
    r4680 = box(tuple[str, str, str], r4679)
    r4681 = PyObject_GetItem(r4675, r4680)
    dec_ref r4675
    dec_ref r4680
    if is_error(r4681) goto L2216 (error at <module>:654) else goto L1747
L1747:
    r4682 = PyObject_GetItem(r4672, r4681)
    dec_ref r4672
    dec_ref r4681
    if is_error(r4682) goto L1811 (error at <module>:654) else goto L1748
L1748:
    r4683 = faster_web3.types.globals :: static
    r4684 = 'TraceMode'
    r4685 = CPyDict_SetItem(r4683, r4684, r4682)
    dec_ref r4682
    r4686 = r4685 >= 0 :: signed
    if not r4686 goto L1811 (error at <module>:654) else goto L1749 :: bool
L1749:
    r4687 = typing :: module
    r4688 = load_address _Py_NoneStruct
    r4689 = r4687 != r4688
    if r4689 goto L1752 else goto L1750 :: bool
L1750:
    r4690 = 'typing'
    r4691 = PyImport_Import(r4690)
    if is_error(r4691) goto L1811 (error at <module>:657) else goto L1751
L1751:
    typing = r4691 :: module
    dec_ref r4691
L1752:
    r4692 = PyImport_GetModuleDict()
    r4693 = 'typing'
    r4694 = CPyDict_GetItem(r4692, r4693)
    if is_error(r4694) goto L1811 (error at <module>:657) else goto L1753
L1753:
    r4695 = '_TypedDict'
    r4696 = CPyObject_GetAttr(r4694, r4695)
    dec_ref r4694
    if is_error(r4696) goto L1811 (error at <module>:657) else goto L1754
L1754:
    r4697 = PyTuple_Pack(1, r4696)
    dec_ref r4696
    if is_error(r4697) goto L1811 (error at <module>:657) else goto L1755
L1755:
    r4698 = typing :: module
    r4699 = load_address _Py_NoneStruct
    r4700 = r4698 != r4699
    if r4700 goto L1758 else goto L1756 :: bool
L1756:
    r4701 = 'typing'
    r4702 = PyImport_Import(r4701)
    if is_error(r4702) goto L2217 (error at <module>:657) else goto L1757
L1757:
    typing = r4702 :: module
    dec_ref r4702
L1758:
    r4703 = PyImport_GetModuleDict()
    r4704 = 'typing'
    r4705 = CPyDict_GetItem(r4703, r4704)
    if is_error(r4705) goto L2217 (error at <module>:657) else goto L1759
L1759:
    r4706 = '_TypedDictMeta'
    r4707 = CPyObject_GetAttr(r4705, r4706)
    dec_ref r4705
    if is_error(r4707) goto L2217 (error at <module>:657) else goto L1760
L1760:
    r4708 = '__prepare__'
    r4709 = PyObject_HasAttr(r4707, r4708)
    if r4709 goto L1761 else goto L1765 :: bool
L1761:
    r4710 = 'TraceFilterParams'
    r4711 = '__prepare__'
    r4712 = CPyObject_GetAttr(r4707, r4711)
    if is_error(r4712) goto L2218 (error at <module>:657) else goto L1762
L1762:
    r4713 = [r4710, r4697]
    r4714 = load_address r4713
    r4715 = PyObject_Vectorcall(r4712, r4714, 2, 0)
    dec_ref r4712
    if is_error(r4715) goto L2218 (error at <module>:657) else goto L1763
L1763:
    r4716 = cast(dict, r4715)
    if is_error(r4716) goto L2218 (error at <module>:657) else goto L1764
L1764:
    r4717 = r4716
    goto L1767
L1765:
    r4718 = PyDict_New()
    if is_error(r4718) goto L2218 (error at <module>:657) else goto L1766
L1766:
    r4717 = r4718
L1767:
    r4719 = PyDict_New()
    if is_error(r4719) goto L2219 (error at <module>:657) else goto L1768
L1768:
    r4720 = load_address PyLong_Type
    r4721 = 'after'
    r4722 = PyDict_SetItem(r4719, r4721, r4720)
    r4723 = r4722 >= 0 :: signed
    if not r4723 goto L2220 (error at <module>:658) else goto L1769 :: bool
L1769:
    r4724 = load_address PyLong_Type
    r4725 = 'count'
    r4726 = PyDict_SetItem(r4719, r4725, r4724)
    r4727 = r4726 >= 0 :: signed
    if not r4727 goto L2220 (error at <module>:659) else goto L1770 :: bool
L1770:
    r4728 = faster_web3.types.globals :: static
    r4729 = 'Sequence'
    r4730 = CPyDict_GetItem(r4728, r4729)
    if is_error(r4730) goto L2220 (error at <module>:660) else goto L1771
L1771:
    r4731 = 'fromAddress'
    r4732 = PyDict_SetItem(r4719, r4731, r4730)
    dec_ref r4730
    r4733 = r4732 >= 0 :: signed
    if not r4733 goto L2220 (error at <module>:660) else goto L1772 :: bool
L1772:
    r4734 = load_address PyType_Type
    r4735 = 'fromBlock'
    r4736 = PyDict_SetItem(r4719, r4735, r4734)
    r4737 = r4736 >= 0 :: signed
    if not r4737 goto L2220 (error at <module>:661) else goto L1773 :: bool
L1773:
    r4738 = faster_web3.types.globals :: static
    r4739 = 'Sequence'
    r4740 = CPyDict_GetItem(r4738, r4739)
    if is_error(r4740) goto L2220 (error at <module>:662) else goto L1774
L1774:
    r4741 = 'toAddress'
    r4742 = PyDict_SetItem(r4719, r4741, r4740)
    dec_ref r4740
    r4743 = r4742 >= 0 :: signed
    if not r4743 goto L2220 (error at <module>:662) else goto L1775 :: bool
L1775:
    r4744 = load_address PyType_Type
    r4745 = 'toBlock'
    r4746 = PyDict_SetItem(r4719, r4745, r4744)
    r4747 = r4746 >= 0 :: signed
    if not r4747 goto L2220 (error at <module>:663) else goto L1776 :: bool
L1776:
    r4748 = 'TraceFilterParams'
    r4749 = '__annotations__'
    r4750 = CPyDict_SetItem(r4717, r4749, r4719)
    dec_ref r4719
    r4751 = r4750 >= 0 :: signed
    if not r4751 goto L2219 (error at <module>:657) else goto L1777 :: bool
L1777:
    r4752 = 'mypyc filler docstring'
    r4753 = '__doc__'
    r4754 = CPyDict_SetItem(r4717, r4753, r4752)
    r4755 = r4754 >= 0 :: signed
    if not r4755 goto L2219 (error at <module>:657) else goto L1778 :: bool
L1778:
    r4756 = 'faster_web3.types'
    r4757 = '__module__'
    r4758 = CPyDict_SetItem(r4717, r4757, r4756)
    r4759 = r4758 >= 0 :: signed
    if not r4759 goto L2219 (error at <module>:657) else goto L1779 :: bool
L1779:
    r4760 = [r4748, r4697, r4717]
    r4761 = load_address r4760
    r4762 = PyObject_Vectorcall(r4707, r4761, 3, 0)
    dec_ref r4707
    if is_error(r4762) goto L2221 (error at <module>:657) else goto L1780
L1780:
    dec_ref r4697
    dec_ref r4717
    faster_web3.types.TraceFilterParams = r4762 :: type
    r4763 = faster_web3.types.globals :: static
    r4764 = 'TraceFilterParams'
    r4765 = PyDict_SetItem(r4763, r4764, r4762)
    dec_ref r4762
    r4766 = r4765 >= 0 :: signed
    if not r4766 goto L1811 (error at <module>:657) else goto L1781 :: bool
L1781:
    r4767 = faster_web3.types.TraceFilterParams :: type
    r4768 = faster_web3.types.globals :: static
    r4769 = 'Literal'
    r4770 = CPyDict_GetItem(r4768, r4769)
    if is_error(r4770) goto L1811 (error at <module>:668) else goto L1782
L1782:
    r4771 = 'newHeads'
    r4772 = 'logs'
    r4773 = 'newPendingTransactions'
    r4774 = 'syncing'
    inc_ref r4771
    inc_ref r4772
    inc_ref r4773
    inc_ref r4774
    r4775 = (r4771, r4772, r4773, r4774)
    r4776 = box(tuple[str, str, str, str], r4775)
    r4777 = PyObject_GetItem(r4770, r4776)
    dec_ref r4770
    dec_ref r4776
    if is_error(r4777) goto L1811 (error at <module>:668) else goto L1783
L1783:
    r4778 = faster_web3.types.globals :: static
    r4779 = 'SubscriptionType'
    r4780 = CPyDict_SetItem(r4778, r4779, r4777)
    dec_ref r4777
    r4781 = r4780 >= 0 :: signed
    if not r4781 goto L1811 (error at <module>:668) else goto L1784 :: bool
L1784:
    r4782 = typing :: module
    r4783 = load_address _Py_NoneStruct
    r4784 = r4782 != r4783
    if r4784 goto L1787 else goto L1785 :: bool
L1785:
    r4785 = 'typing'
    r4786 = PyImport_Import(r4785)
    if is_error(r4786) goto L1811 (error at <module>:676) else goto L1786
L1786:
    typing = r4786 :: module
    dec_ref r4786
L1787:
    r4787 = PyImport_GetModuleDict()
    r4788 = 'typing'
    r4789 = CPyDict_GetItem(r4787, r4788)
    if is_error(r4789) goto L1811 (error at <module>:676) else goto L1788
L1788:
    r4790 = '_TypedDict'
    r4791 = CPyObject_GetAttr(r4789, r4790)
    dec_ref r4789
    if is_error(r4791) goto L1811 (error at <module>:676) else goto L1789
L1789:
    r4792 = PyTuple_Pack(1, r4791)
    dec_ref r4791
    if is_error(r4792) goto L1811 (error at <module>:676) else goto L1790
L1790:
    r4793 = typing :: module
    r4794 = load_address _Py_NoneStruct
    r4795 = r4793 != r4794
    if r4795 goto L1793 else goto L1791 :: bool
L1791:
    r4796 = 'typing'
    r4797 = PyImport_Import(r4796)
    if is_error(r4797) goto L2222 (error at <module>:676) else goto L1792
L1792:
    typing = r4797 :: module
    dec_ref r4797
L1793:
    r4798 = PyImport_GetModuleDict()
    r4799 = 'typing'
    r4800 = CPyDict_GetItem(r4798, r4799)
    if is_error(r4800) goto L2222 (error at <module>:676) else goto L1794
L1794:
    r4801 = '_TypedDictMeta'
    r4802 = CPyObject_GetAttr(r4800, r4801)
    dec_ref r4800
    if is_error(r4802) goto L2222 (error at <module>:676) else goto L1795
L1795:
    r4803 = '__prepare__'
    r4804 = PyObject_HasAttr(r4802, r4803)
    if r4804 goto L1796 else goto L1800 :: bool
L1796:
    r4805 = 'LogsSubscriptionArg'
    r4806 = '__prepare__'
    r4807 = CPyObject_GetAttr(r4802, r4806)
    if is_error(r4807) goto L2223 (error at <module>:676) else goto L1797
L1797:
    r4808 = [r4805, r4792]
    r4809 = load_address r4808
    r4810 = PyObject_Vectorcall(r4807, r4809, 2, 0)
    dec_ref r4807
    if is_error(r4810) goto L2223 (error at <module>:676) else goto L1798
L1798:
    r4811 = cast(dict, r4810)
    if is_error(r4811) goto L2223 (error at <module>:676) else goto L1799
L1799:
    r4812 = r4811
    goto L1802
L1800:
    r4813 = PyDict_New()
    if is_error(r4813) goto L2223 (error at <module>:676) else goto L1801
L1801:
    r4812 = r4813
L1802:
    r4814 = PyDict_New()
    if is_error(r4814) goto L2224 (error at <module>:676) else goto L1803
L1803:
    r4815 = load_address PyType_Type
    r4816 = 'address'
    r4817 = PyDict_SetItem(r4814, r4816, r4815)
    r4818 = r4817 >= 0 :: signed
    if not r4818 goto L2225 (error at <module>:677) else goto L1804 :: bool
L1804:
    r4819 = load_address PyType_Type
    r4820 = 'topics'
    r4821 = PyDict_SetItem(r4814, r4820, r4819)
    r4822 = r4821 >= 0 :: signed
    if not r4822 goto L2225 (error at <module>:683) else goto L1805 :: bool
L1805:
    r4823 = 'LogsSubscriptionArg'
    r4824 = '__annotations__'
    r4825 = CPyDict_SetItem(r4812, r4824, r4814)
    dec_ref r4814
    r4826 = r4825 >= 0 :: signed
    if not r4826 goto L2224 (error at <module>:676) else goto L1806 :: bool
L1806:
    r4827 = 'mypyc filler docstring'
    r4828 = '__doc__'
    r4829 = CPyDict_SetItem(r4812, r4828, r4827)
    r4830 = r4829 >= 0 :: signed
    if not r4830 goto L2224 (error at <module>:676) else goto L1807 :: bool
L1807:
    r4831 = 'faster_web3.types'
    r4832 = '__module__'
    r4833 = CPyDict_SetItem(r4812, r4832, r4831)
    r4834 = r4833 >= 0 :: signed
    if not r4834 goto L2224 (error at <module>:676) else goto L1808 :: bool
L1808:
    r4835 = [r4823, r4792, r4812]
    r4836 = load_address r4835
    r4837 = PyObject_Vectorcall(r4802, r4836, 3, 0)
    dec_ref r4802
    if is_error(r4837) goto L2226 (error at <module>:676) else goto L1809
L1809:
    dec_ref r4792
    dec_ref r4812
    faster_web3.types.LogsSubscriptionArg = r4837 :: type
    r4838 = faster_web3.types.globals :: static
    r4839 = 'LogsSubscriptionArg'
    r4840 = PyDict_SetItem(r4838, r4839, r4837)
    dec_ref r4837
    r4841 = r4840 >= 0 :: signed
    if not r4841 goto L1811 (error at <module>:676) else goto L1810 :: bool
L1810:
    r4842 = faster_web3.types.LogsSubscriptionArg :: type
    return 1
L1811:
    r4843 = <error> :: None
    return r4843
L1812:
    dec_ref r32
    goto L1811
L1813:
    dec_ref r39
    goto L1811
L1814:
    dec_ref r101
    goto L1811
L1815:
    dec_ref r101
    dec_ref r104
    goto L1811
L1816:
    dec_ref r101
    dec_ref r104
    dec_ref r107
    goto L1811
L1817:
    dec_ref r101
    dec_ref r104
    dec_ref r107
    dec_ref r110
    goto L1811
L1818:
    dec_ref r101
    dec_ref r104
    dec_ref r107
    dec_ref r110
    dec_ref r113
    goto L1811
L1819:
    dec_ref r136
    goto L1811
L1820:
    dec_ref r136
    dec_ref r140
    goto L1811
L1821:
    dec_ref r136
    dec_ref r144
    goto L1811
L1822:
    dec_ref r136
    dec_ref r144
    dec_ref r147
    goto L1811
L1823:
    dec_ref r161
    goto L1811
L1824:
    dec_ref r161
    dec_ref r164
    goto L1811
L1825:
    dec_ref r161
    dec_ref r164
    dec_ref r167
    goto L1811
L1826:
    dec_ref r180
    goto L1811
L1827:
    dec_ref r180
    dec_ref r184
    goto L1811
L1828:
    dec_ref r180
    dec_ref r184
    dec_ref r187
    goto L1811
L1829:
    dec_ref r180
    dec_ref r184
    dec_ref r187
    dec_ref r190
    goto L1811
L1830:
    dec_ref r180
    dec_ref r184
    dec_ref r198
    goto L1811
L1831:
    dec_ref r297
    goto L1811
L1832:
    dec_ref r297
    dec_ref r300
    goto L1811
L1833:
    dec_ref r297
    dec_ref r300
    dec_ref r303
    goto L1811
L1834:
    dec_ref r328
    goto L1811
L1835:
    dec_ref r328
    dec_ref r338
    goto L1811
L1836:
    dec_ref r328
    dec_ref r338
    dec_ref r348
    goto L1811
L1837:
    dec_ref r328
    dec_ref r338
    dec_ref r348
    dec_ref r350
    goto L1811
L1838:
    dec_ref r328
    dec_ref r348
    goto L1811
L1839:
    dec_ref r386
    goto L1811
L1840:
    dec_ref r390
    goto L1811
L1841:
    dec_ref r411
    goto L1811
L1842:
    dec_ref r411
    dec_ref r421
    goto L1811
L1843:
    dec_ref r411
    dec_ref r421
    dec_ref r431
    goto L1811
L1844:
    dec_ref r411
    dec_ref r421
    dec_ref r431
    dec_ref r433
    goto L1811
L1845:
    dec_ref r411
    dec_ref r431
    goto L1811
L1846:
    dec_ref r498
    goto L1811
L1847:
    dec_ref r498
    dec_ref r508
    goto L1811
L1848:
    dec_ref r498
    dec_ref r508
    dec_ref r518
    goto L1811
L1849:
    dec_ref r498
    dec_ref r508
    dec_ref r518
    dec_ref r520
    goto L1811
L1850:
    dec_ref r498
    dec_ref r518
    goto L1811
L1851:
    dec_ref r563
    goto L1811
L1852:
    dec_ref r563
    dec_ref r573
    goto L1811
L1853:
    dec_ref r563
    dec_ref r573
    dec_ref r583
    goto L1811
L1854:
    dec_ref r563
    dec_ref r573
    dec_ref r583
    dec_ref r585
    goto L1811
L1855:
    dec_ref r563
    dec_ref r583
    goto L1811
L1856:
    dec_ref r638
    goto L1811
L1857:
    dec_ref r638
    dec_ref r642
    goto L1811
L1858:
    dec_ref r638
    dec_ref r646
    goto L1811
L1859:
    dec_ref r638
    dec_ref r646
    dec_ref r650
    goto L1811
L1860:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    goto L1811
L1861:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    goto L1811
L1862:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    goto L1811
L1863:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r668
    goto L1811
L1864:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    goto L1811
L1865:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    goto L1811
L1866:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    goto L1811
L1867:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    goto L1811
L1868:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    goto L1811
L1869:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    goto L1811
L1870:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    dec_ref r701
    goto L1811
L1871:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    dec_ref r701
    dec_ref r705
    goto L1811
L1872:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    dec_ref r701
    dec_ref r705
    dec_ref r709
    goto L1811
L1873:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    dec_ref r701
    dec_ref r705
    dec_ref r709
    dec_ref r713
    goto L1811
L1874:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    dec_ref r701
    dec_ref r705
    dec_ref r709
    dec_ref r713
    dec_ref r717
    goto L1811
L1875:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    dec_ref r701
    dec_ref r705
    dec_ref r709
    dec_ref r713
    dec_ref r717
    dec_ref r721
    goto L1811
L1876:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    dec_ref r701
    dec_ref r705
    dec_ref r709
    dec_ref r713
    dec_ref r717
    dec_ref r721
    dec_ref r727
    goto L1811
L1877:
    dec_ref r638
    dec_ref r646
    dec_ref r654
    dec_ref r658
    dec_ref r662
    dec_ref r675
    dec_ref r679
    dec_ref r685
    dec_ref r689
    dec_ref r693
    dec_ref r697
    dec_ref r701
    dec_ref r705
    dec_ref r709
    dec_ref r713
    dec_ref r717
    dec_ref r721
    dec_ref r734
    goto L1811
L1878:
    dec_ref r743
    goto L1811
L1879:
    dec_ref r766
    goto L1811
L1880:
    dec_ref r766
    dec_ref r776
    goto L1811
L1881:
    dec_ref r766
    dec_ref r776
    dec_ref r786
    goto L1811
L1882:
    dec_ref r766
    dec_ref r776
    dec_ref r786
    dec_ref r788
    goto L1811
L1883:
    dec_ref r766
    dec_ref r786
    goto L1811
L1884:
    dec_ref r839
    goto L1811
L1885:
    dec_ref r839
    dec_ref r843
    goto L1811
L1886:
    dec_ref r839
    dec_ref r843
    dec_ref r846
    goto L1811
L1887:
    dec_ref r839
    dec_ref r843
    dec_ref r846
    dec_ref r849
    goto L1811
L1888:
    dec_ref r839
    dec_ref r856
    goto L1811
L1889:
    dec_ref r839
    dec_ref r856
    dec_ref r860
    goto L1811
L1890:
    dec_ref r839
    dec_ref r856
    dec_ref r860
    dec_ref r863
    goto L1811
L1891:
    dec_ref r839
    dec_ref r856
    dec_ref r860
    dec_ref r863
    dec_ref r867
    goto L1811
L1892:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    goto L1811
L1893:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r881
    goto L1811
L1894:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    goto L1811
L1895:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r892
    goto L1811
L1896:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r892
    dec_ref r895
    goto L1811
L1897:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    goto L1811
L1898:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    goto L1811
L1899:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r912
    goto L1811
L1900:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    goto L1811
L1901:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r923
    goto L1811
L1902:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    goto L1811
L1903:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    dec_ref r934
    goto L1811
L1904:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    dec_ref r941
    goto L1811
L1905:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    dec_ref r941
    dec_ref r945
    goto L1811
L1906:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    dec_ref r941
    dec_ref r945
    dec_ref r949
    goto L1811
L1907:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    dec_ref r941
    dec_ref r945
    dec_ref r949
    dec_ref r952
    goto L1811
L1908:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    dec_ref r941
    dec_ref r945
    dec_ref r959
    goto L1811
L1909:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    dec_ref r941
    dec_ref r945
    dec_ref r959
    dec_ref r963
    goto L1811
L1910:
    dec_ref r839
    dec_ref r856
    dec_ref r875
    dec_ref r888
    dec_ref r902
    dec_ref r908
    dec_ref r919
    dec_ref r930
    dec_ref r941
    dec_ref r945
    dec_ref r959
    dec_ref r970
    goto L1811
L1911:
    dec_ref r975
    goto L1811
L1912:
    dec_ref r998
    goto L1811
L1913:
    dec_ref r998
    dec_ref r1008
    goto L1811
L1914:
    dec_ref r998
    dec_ref r1008
    dec_ref r1018
    goto L1811
L1915:
    dec_ref r998
    dec_ref r1008
    dec_ref r1018
    dec_ref r1020
    goto L1811
L1916:
    dec_ref r998
    dec_ref r1018
    goto L1811
L1917:
    dec_ref r1071
    goto L1811
L1918:
    dec_ref r1071
    dec_ref r1081
    goto L1811
L1919:
    dec_ref r1071
    dec_ref r1081
    dec_ref r1091
    goto L1811
L1920:
    dec_ref r1071
    dec_ref r1081
    dec_ref r1091
    dec_ref r1093
    goto L1811
L1921:
    dec_ref r1071
    dec_ref r1091
    goto L1811
L1922:
    dec_ref r1248
    goto L1811
L1923:
    dec_ref r1248
    dec_ref r1258
    goto L1811
L1924:
    dec_ref r1248
    dec_ref r1258
    dec_ref r1268
    goto L1811
L1925:
    dec_ref r1248
    dec_ref r1258
    dec_ref r1268
    dec_ref r1270
    goto L1811
L1926:
    dec_ref r1248
    dec_ref r1268
    goto L1811
L1927:
    dec_ref r1343
    goto L1811
L1928:
    dec_ref r1343
    dec_ref r1353
    goto L1811
L1929:
    dec_ref r1343
    dec_ref r1353
    dec_ref r1363
    goto L1811
L1930:
    dec_ref r1343
    dec_ref r1353
    dec_ref r1363
    dec_ref r1365
    goto L1811
L1931:
    dec_ref r1343
    dec_ref r1363
    goto L1811
L1932:
    dec_ref r1400
    goto L1811
L1933:
    dec_ref r1400
    dec_ref r1410
    goto L1811
L1934:
    dec_ref r1400
    dec_ref r1410
    dec_ref r1420
    goto L1811
L1935:
    dec_ref r1400
    dec_ref r1410
    dec_ref r1420
    dec_ref r1422
    goto L1811
L1936:
    dec_ref r1400
    dec_ref r1420
    goto L1811
L1937:
    dec_ref r1457
    goto L1811
L1938:
    dec_ref r1457
    dec_ref r1467
    goto L1811
L1939:
    dec_ref r1457
    dec_ref r1467
    dec_ref r1477
    goto L1811
L1940:
    dec_ref r1457
    dec_ref r1467
    dec_ref r1477
    dec_ref r1479
    goto L1811
L1941:
    dec_ref r1457
    dec_ref r1477
    goto L1811
L1942:
    dec_ref r1514
    goto L1811
L1943:
    dec_ref r1514
    dec_ref r1524
    goto L1811
L1944:
    dec_ref r1514
    dec_ref r1524
    dec_ref r1534
    goto L1811
L1945:
    dec_ref r1514
    dec_ref r1524
    dec_ref r1534
    dec_ref r1536
    goto L1811
L1946:
    dec_ref r1514
    dec_ref r1534
    goto L1811
L1947:
    dec_ref r1571
    goto L1811
L1948:
    dec_ref r1571
    dec_ref r1581
    goto L1811
L1949:
    dec_ref r1571
    dec_ref r1581
    dec_ref r1591
    goto L1811
L1950:
    dec_ref r1571
    dec_ref r1581
    dec_ref r1591
    dec_ref r1593
    goto L1811
L1951:
    dec_ref r1571
    dec_ref r1591
    goto L1811
L1952:
    dec_ref r1640
    goto L1811
L1953:
    dec_ref r1640
    dec_ref r1650
    goto L1811
L1954:
    dec_ref r1640
    dec_ref r1650
    dec_ref r1660
    goto L1811
L1955:
    dec_ref r1640
    dec_ref r1650
    dec_ref r1660
    dec_ref r1662
    goto L1811
L1956:
    dec_ref r1640
    dec_ref r1660
    goto L1811
L1957:
    dec_ref r1697
    goto L1811
L1958:
    dec_ref r1697
    dec_ref r1707
    goto L1811
L1959:
    dec_ref r1697
    dec_ref r1707
    dec_ref r1717
    goto L1811
L1960:
    dec_ref r1697
    dec_ref r1707
    dec_ref r1717
    dec_ref r1719
    goto L1811
L1961:
    dec_ref r1697
    dec_ref r1717
    goto L1811
L1962:
    dec_ref r1770
    goto L1811
L1963:
    dec_ref r1770
    dec_ref r1780
    goto L1811
L1964:
    dec_ref r1770
    dec_ref r1780
    dec_ref r1790
    goto L1811
L1965:
    dec_ref r1770
    dec_ref r1780
    dec_ref r1790
    dec_ref r1792
    goto L1811
L1966:
    dec_ref r1770
    dec_ref r1790
    goto L1811
L1967:
    dec_ref r1831
    goto L1811
L1968:
    dec_ref r1831
    dec_ref r1841
    goto L1811
L1969:
    dec_ref r1831
    dec_ref r1841
    dec_ref r1851
    goto L1811
L1970:
    dec_ref r1831
    dec_ref r1841
    dec_ref r1851
    dec_ref r1853
    goto L1811
L1971:
    dec_ref r1831
    dec_ref r1851
    goto L1811
L1972:
    dec_ref r1880
    goto L1811
L1973:
    dec_ref r1880
    dec_ref r1883
    goto L1811
L1974:
    dec_ref r1880
    dec_ref r1883
    dec_ref r1886
    goto L1811
L1975:
    dec_ref r1880
    dec_ref r1883
    dec_ref r1886
    dec_ref r1889
    goto L1811
L1976:
    dec_ref r1880
    dec_ref r1883
    dec_ref r1886
    dec_ref r1889
    dec_ref r1892
    goto L1811
L1977:
    dec_ref r1905
    goto L1811
L1978:
    dec_ref r1929
    goto L1811
L1979:
    dec_ref r1929
    dec_ref r1939
    goto L1811
L1980:
    dec_ref r1929
    dec_ref r1939
    dec_ref r1949
    goto L1811
L1981:
    dec_ref r1929
    dec_ref r1939
    dec_ref r1949
    dec_ref r1951
    goto L1811
L1982:
    dec_ref r1929
    dec_ref r1949
    goto L1811
L1983:
    dec_ref r2000
    goto L1811
L1984:
    dec_ref r2000
    dec_ref r2010
    goto L1811
L1985:
    dec_ref r2000
    dec_ref r2010
    dec_ref r2020
    goto L1811
L1986:
    dec_ref r2000
    dec_ref r2010
    dec_ref r2020
    dec_ref r2022
    goto L1811
L1987:
    dec_ref r2000
    dec_ref r2020
    goto L1811
L1988:
    dec_ref r2069
    goto L1811
L1989:
    dec_ref r2069
    dec_ref r2072
    goto L1811
L1990:
    dec_ref r2069
    dec_ref r2072
    dec_ref r2075
    goto L1811
L1991:
    dec_ref r2069
    dec_ref r2072
    dec_ref r2075
    dec_ref r2078
    goto L1811
L1992:
    dec_ref r2069
    dec_ref r2072
    dec_ref r2075
    dec_ref r2078
    dec_ref r2081
    goto L1811
L1993:
    dec_ref r2069
    dec_ref r2072
    dec_ref r2075
    dec_ref r2078
    dec_ref r2081
    dec_ref r2084
    goto L1811
L1994:
    dec_ref r2105
    goto L1811
L1995:
    dec_ref r2105
    dec_ref r2115
    goto L1811
L1996:
    dec_ref r2105
    dec_ref r2115
    dec_ref r2125
    goto L1811
L1997:
    dec_ref r2105
    dec_ref r2115
    dec_ref r2125
    dec_ref r2127
    goto L1811
L1998:
    dec_ref r2105
    dec_ref r2125
    goto L1811
L1999:
    dec_ref r2168
    goto L1811
L2000:
    dec_ref r2168
    dec_ref r2178
    goto L1811
L2001:
    dec_ref r2168
    dec_ref r2178
    dec_ref r2188
    goto L1811
L2002:
    dec_ref r2168
    dec_ref r2178
    dec_ref r2188
    dec_ref r2190
    goto L1811
L2003:
    dec_ref r2168
    dec_ref r2188
    goto L1811
L2004:
    dec_ref r2223
    goto L1811
L2005:
    dec_ref r2223
    dec_ref r2226
    goto L1811
L2006:
    dec_ref r2223
    dec_ref r2226
    dec_ref r2229
    goto L1811
L2007:
    dec_ref r2223
    dec_ref r2230
    goto L1811
L2008:
    dec_ref r2246
    goto L1811
L2009:
    dec_ref r2246
    dec_ref r2249
    goto L1811
L2010:
    dec_ref r2246
    dec_ref r2249
    dec_ref r2252
    goto L1811
L2011:
    dec_ref r2246
    dec_ref r2249
    dec_ref r2252
    dec_ref r2255
    goto L1811
L2012:
    dec_ref r2246
    dec_ref r2262
    goto L1811
L2013:
    dec_ref r2246
    dec_ref r2263
    goto L1811
L2014:
    dec_ref r2246
    dec_ref r2263
    dec_ref r2268
    goto L1811
L2015:
    dec_ref r2246
    dec_ref r2263
    dec_ref r2268
    dec_ref r2271
    goto L1811
L2016:
    dec_ref r2246
    dec_ref r2263
    dec_ref r2268
    dec_ref r2275
    goto L1811
L2017:
    dec_ref r2291
    goto L1811
L2018:
    dec_ref r2291
    dec_ref r2294
    goto L1811
L2019:
    dec_ref r2291
    dec_ref r2294
    dec_ref r2297
    goto L1811
L2020:
    dec_ref r2291
    dec_ref r2298
    goto L1811
L2021:
    dec_ref r2291
    dec_ref r2298
    dec_ref r2304
    goto L1811
L2022:
    dec_ref r2291
    dec_ref r2298
    dec_ref r2304
    dec_ref r2307
    goto L1811
L2023:
    dec_ref r2291
    dec_ref r2298
    dec_ref r2304
    dec_ref r2307
    dec_ref r2310
    goto L1811
L2024:
    dec_ref r2326
    goto L1811
L2025:
    dec_ref r2326
    dec_ref r2329
    goto L1811
L2026:
    dec_ref r2326
    dec_ref r2329
    dec_ref r2332
    goto L1811
L2027:
    dec_ref r2326
    dec_ref r2329
    dec_ref r2332
    dec_ref r2335
    goto L1811
L2028:
    dec_ref r2326
    dec_ref r2342
    goto L1811
L2029:
    dec_ref r2326
    dec_ref r2343
    goto L1811
L2030:
    dec_ref r2326
    dec_ref r2343
    dec_ref r2348
    goto L1811
L2031:
    dec_ref r2326
    dec_ref r2343
    dec_ref r2348
    dec_ref r2351
    goto L1811
L2032:
    dec_ref r2326
    dec_ref r2343
    dec_ref r2348
    dec_ref r2351
    dec_ref r2354
    goto L1811
L2033:
    dec_ref r2326
    dec_ref r2343
    dec_ref r2348
    dec_ref r2351
    dec_ref r2354
    dec_ref r2357
    goto L1811
L2034:
    dec_ref r2326
    dec_ref r2343
    dec_ref r2348
    dec_ref r2351
    dec_ref r2354
    dec_ref r2357
    dec_ref r2360
    goto L1811
L2035:
    dec_ref r2326
    dec_ref r2343
    dec_ref r2348
    dec_ref r2351
    dec_ref r2354
    dec_ref r2357
    dec_ref r2364
    goto L1811
L2036:
    dec_ref r2391
    goto L1811
L2037:
    dec_ref r2391
    dec_ref r2401
    goto L1811
L2038:
    dec_ref r2391
    dec_ref r2401
    dec_ref r2411
    goto L1811
L2039:
    dec_ref r2391
    dec_ref r2401
    dec_ref r2411
    dec_ref r2413
    goto L1811
L2040:
    dec_ref r2391
    dec_ref r2411
    goto L1811
L2041:
    dec_ref r2456
    goto L1811
L2042:
    dec_ref r2456
    dec_ref r2466
    goto L1811
L2043:
    dec_ref r2456
    dec_ref r2466
    dec_ref r2476
    goto L1811
L2044:
    dec_ref r2456
    dec_ref r2466
    dec_ref r2476
    dec_ref r2478
    goto L1811
L2045:
    dec_ref r2456
    dec_ref r2476
    goto L1811
L2046:
    dec_ref r2529
    goto L1811
L2047:
    dec_ref r2529
    dec_ref r2539
    goto L1811
L2048:
    dec_ref r2529
    dec_ref r2539
    dec_ref r2549
    goto L1811
L2049:
    dec_ref r2529
    dec_ref r2539
    dec_ref r2549
    dec_ref r2551
    goto L1811
L2050:
    dec_ref r2529
    dec_ref r2549
    goto L1811
L2051:
    dec_ref r2600
    goto L1811
L2052:
    dec_ref r2600
    dec_ref r2610
    goto L1811
L2053:
    dec_ref r2600
    dec_ref r2610
    dec_ref r2620
    goto L1811
L2054:
    dec_ref r2600
    dec_ref r2610
    dec_ref r2620
    dec_ref r2622
    goto L1811
L2055:
    dec_ref r2600
    dec_ref r2620
    goto L1811
L2056:
    dec_ref r2665
    goto L1811
L2057:
    dec_ref r2665
    dec_ref r2668
    goto L1811
L2058:
    dec_ref r2665
    dec_ref r2668
    dec_ref r2672
    goto L1811
L2059:
    dec_ref r2665
    dec_ref r2678
    goto L1811
L2060:
    dec_ref r2691
    goto L1811
L2061:
    dec_ref r2691
    dec_ref r2694
    goto L1811
L2062:
    dec_ref r2691
    dec_ref r2694
    dec_ref r2698
    goto L1811
L2063:
    dec_ref r2691
    dec_ref r2694
    dec_ref r2699
    goto L1811
L2064:
    dec_ref r2691
    dec_ref r2708
    goto L1811
L2065:
    dec_ref r2691
    dec_ref r2708
    dec_ref r2711
    goto L1811
L2066:
    dec_ref r2691
    dec_ref r2708
    dec_ref r2711
    dec_ref r2715
    goto L1811
L2067:
    dec_ref r2691
    dec_ref r2708
    dec_ref r2711
    dec_ref r2716
    goto L1811
L2068:
    dec_ref r2737
    goto L1811
L2069:
    dec_ref r2737
    dec_ref r2741
    goto L1811
L2070:
    dec_ref r2737
    dec_ref r2741
    dec_ref r2745
    goto L1811
L2071:
    dec_ref r2737
    dec_ref r2741
    dec_ref r2749
    goto L1811
L2072:
    dec_ref r2737
    dec_ref r2741
    dec_ref r2749
    dec_ref r2755
    goto L1811
L2073:
    dec_ref r2737
    dec_ref r2741
    dec_ref r2749
    dec_ref r2755
    dec_ref r2761
    goto L1811
L2074:
    dec_ref r2737
    dec_ref r2741
    dec_ref r2749
    dec_ref r2755
    dec_ref r2761
    dec_ref r2765
    goto L1811
L2075:
    dec_ref r2737
    dec_ref r2741
    dec_ref r2749
    dec_ref r2755
    dec_ref r2761
    dec_ref r2769
    goto L1811
L2076:
    dec_ref r2737
    dec_ref r2741
    dec_ref r2749
    dec_ref r2755
    dec_ref r2761
    dec_ref r2769
    dec_ref r2773
    goto L1811
L2077:
    dec_ref r2737
    dec_ref r2741
    dec_ref r2749
    dec_ref r2755
    dec_ref r2761
    dec_ref r2769
    dec_ref r2773
    dec_ref r2777
    goto L1811
L2078:
    dec_ref r2737
    dec_ref r2741
    dec_ref r2749
    dec_ref r2755
    dec_ref r2761
    dec_ref r2769
    dec_ref r2773
    dec_ref r2777
    dec_ref r2783
    goto L1811
L2079:
    dec_ref r2792
    goto L1811
L2080:
    dec_ref r2805
    goto L1811
L2081:
    dec_ref r2824
    goto L1811
L2082:
    dec_ref r2824
    dec_ref r2834
    goto L1811
L2083:
    dec_ref r2824
    dec_ref r2834
    dec_ref r2844
    goto L1811
L2084:
    dec_ref r2824
    dec_ref r2834
    dec_ref r2844
    dec_ref r2846
    goto L1811
L2085:
    dec_ref r2824
    dec_ref r2844
    goto L1811
L2086:
    dec_ref r2885
    goto L1811
L2087:
    dec_ref r2885
    dec_ref r2895
    goto L1811
L2088:
    dec_ref r2885
    dec_ref r2895
    dec_ref r2905
    goto L1811
L2089:
    dec_ref r2885
    dec_ref r2895
    dec_ref r2905
    dec_ref r2907
    goto L1811
L2090:
    dec_ref r2885
    dec_ref r2905
    goto L1811
L2091:
    dec_ref r2954
    goto L1811
L2092:
    dec_ref r2954
    dec_ref r2964
    goto L1811
L2093:
    dec_ref r2954
    dec_ref r2964
    dec_ref r2974
    goto L1811
L2094:
    dec_ref r2954
    dec_ref r2964
    dec_ref r2974
    dec_ref r2976
    goto L1811
L2095:
    dec_ref r2954
    dec_ref r2974
    goto L1811
L2096:
    dec_ref r3043
    goto L1811
L2097:
    dec_ref r3043
    dec_ref r3053
    goto L1811
L2098:
    dec_ref r3043
    dec_ref r3053
    dec_ref r3063
    goto L1811
L2099:
    dec_ref r3043
    dec_ref r3053
    dec_ref r3063
    dec_ref r3065
    goto L1811
L2100:
    dec_ref r3043
    dec_ref r3063
    goto L1811
L2101:
    dec_ref r3114
    goto L1811
L2102:
    dec_ref r3114
    dec_ref r3124
    goto L1811
L2103:
    dec_ref r3114
    dec_ref r3124
    dec_ref r3134
    goto L1811
L2104:
    dec_ref r3114
    dec_ref r3124
    dec_ref r3134
    dec_ref r3136
    goto L1811
L2105:
    dec_ref r3114
    dec_ref r3134
    goto L1811
L2106:
    dec_ref r3199
    goto L1811
L2107:
    dec_ref r3199
    dec_ref r3209
    goto L1811
L2108:
    dec_ref r3199
    dec_ref r3209
    dec_ref r3219
    goto L1811
L2109:
    dec_ref r3199
    dec_ref r3209
    dec_ref r3219
    dec_ref r3221
    goto L1811
L2110:
    dec_ref r3199
    dec_ref r3219
    goto L1811
L2111:
    dec_ref r3276
    goto L1811
L2112:
    dec_ref r3276
    dec_ref r3286
    goto L1811
L2113:
    dec_ref r3276
    dec_ref r3286
    dec_ref r3296
    goto L1811
L2114:
    dec_ref r3276
    dec_ref r3286
    dec_ref r3296
    dec_ref r3298
    goto L1811
L2115:
    dec_ref r3276
    dec_ref r3296
    goto L1811
L2116:
    dec_ref r3349
    goto L1811
L2117:
    dec_ref r3349
    dec_ref r3359
    goto L1811
L2118:
    dec_ref r3349
    dec_ref r3359
    dec_ref r3369
    goto L1811
L2119:
    dec_ref r3349
    dec_ref r3359
    dec_ref r3369
    dec_ref r3371
    goto L1811
L2120:
    dec_ref r3349
    dec_ref r3369
    goto L1811
L2121:
    dec_ref r3510
    goto L1811
L2122:
    dec_ref r3510
    dec_ref r3516
    goto L1811
L2123:
    dec_ref r3510
    dec_ref r3516
    dec_ref r3520
    goto L1811
L2124:
    dec_ref r3510
    dec_ref r3516
    dec_ref r3520
    dec_ref r3524
    goto L1811
L2125:
    dec_ref r3510
    dec_ref r3516
    dec_ref r3520
    dec_ref r3524
    dec_ref r3528
    goto L1811
L2126:
    dec_ref r3510
    dec_ref r3516
    dec_ref r3520
    dec_ref r3524
    dec_ref r3528
    dec_ref r3532
    goto L1811
L2127:
    dec_ref r3510
    dec_ref r3516
    dec_ref r3520
    dec_ref r3524
    dec_ref r3528
    dec_ref r3532
    dec_ref r3536
    goto L1811
L2128:
    dec_ref r3510
    dec_ref r3516
    dec_ref r3520
    dec_ref r3524
    dec_ref r3528
    dec_ref r3532
    dec_ref r3536
    dec_ref r3540
    goto L1811
L2129:
    dec_ref r3510
    dec_ref r3516
    dec_ref r3520
    dec_ref r3524
    dec_ref r3528
    dec_ref r3532
    dec_ref r3536
    dec_ref r3540
    dec_ref r3544
    goto L1811
L2130:
    dec_ref r3510
    dec_ref r3516
    dec_ref r3520
    dec_ref r3524
    dec_ref r3528
    dec_ref r3532
    dec_ref r3536
    dec_ref r3540
    dec_ref r3544
    dec_ref r3548
    goto L1811
L2131:
    dec_ref r3555
    goto L1811
L2132:
    dec_ref r3578
    goto L1811
L2133:
    dec_ref r3578
    dec_ref r3588
    goto L1811
L2134:
    dec_ref r3578
    dec_ref r3588
    dec_ref r3598
    goto L1811
L2135:
    dec_ref r3578
    dec_ref r3588
    dec_ref r3598
    dec_ref r3600
    goto L1811
L2136:
    dec_ref r3578
    dec_ref r3598
    goto L1811
L2137:
    dec_ref r3639
    goto L1811
L2138:
    dec_ref r3639
    dec_ref r3649
    goto L1811
L2139:
    dec_ref r3639
    dec_ref r3649
    dec_ref r3659
    goto L1811
L2140:
    dec_ref r3639
    dec_ref r3649
    dec_ref r3659
    dec_ref r3661
    goto L1811
L2141:
    dec_ref r3639
    dec_ref r3659
    goto L1811
L2142:
    dec_ref r3700
    goto L1811
L2143:
    dec_ref r3700
    dec_ref r3710
    goto L1811
L2144:
    dec_ref r3700
    dec_ref r3710
    dec_ref r3720
    goto L1811
L2145:
    dec_ref r3700
    dec_ref r3710
    dec_ref r3720
    dec_ref r3722
    goto L1811
L2146:
    dec_ref r3700
    dec_ref r3720
    goto L1811
L2147:
    dec_ref r3761
    goto L1811
L2148:
    dec_ref r3761
    dec_ref r3771
    goto L1811
L2149:
    dec_ref r3761
    dec_ref r3771
    dec_ref r3781
    goto L1811
L2150:
    dec_ref r3761
    dec_ref r3771
    dec_ref r3781
    dec_ref r3783
    goto L1811
L2151:
    dec_ref r3761
    dec_ref r3781
    goto L1811
L2152:
    dec_ref r3842
    goto L1811
L2153:
    dec_ref r3842
    dec_ref r3852
    goto L1811
L2154:
    dec_ref r3842
    dec_ref r3852
    dec_ref r3862
    goto L1811
L2155:
    dec_ref r3842
    dec_ref r3852
    dec_ref r3862
    dec_ref r3864
    goto L1811
L2156:
    dec_ref r3842
    dec_ref r3862
    goto L1811
L2157:
    dec_ref r3911
    goto L1811
L2158:
    dec_ref r3911
    dec_ref r3915
    goto L1811
L2159:
    dec_ref r3911
    dec_ref r3915
    dec_ref r3919
    goto L1811
L2160:
    dec_ref r3911
    dec_ref r3915
    dec_ref r3919
    dec_ref r3927
    goto L1811
L2161:
    dec_ref r3911
    dec_ref r3915
    dec_ref r3919
    dec_ref r3927
    dec_ref r3931
    goto L1811
L2162:
    dec_ref r3911
    dec_ref r3915
    dec_ref r3919
    dec_ref r3927
    dec_ref r3931
    dec_ref r3941
    goto L1811
L2163:
    dec_ref r3911
    dec_ref r3915
    dec_ref r3919
    dec_ref r3927
    dec_ref r3931
    dec_ref r3941
    dec_ref r3945
    goto L1811
L2164:
    dec_ref r3950
    goto L1811
L2165:
    dec_ref r3973
    goto L1811
L2166:
    dec_ref r3973
    dec_ref r3983
    goto L1811
L2167:
    dec_ref r3973
    dec_ref r3983
    dec_ref r3993
    goto L1811
L2168:
    dec_ref r3973
    dec_ref r3983
    dec_ref r3993
    dec_ref r3995
    goto L1811
L2169:
    dec_ref r3973
    dec_ref r3993
    goto L1811
L2170:
    dec_ref r4042
    goto L1811
L2171:
    dec_ref r4042
    dec_ref r4052
    goto L1811
L2172:
    dec_ref r4042
    dec_ref r4052
    dec_ref r4062
    goto L1811
L2173:
    dec_ref r4042
    dec_ref r4052
    dec_ref r4062
    dec_ref r4064
    goto L1811
L2174:
    dec_ref r4042
    dec_ref r4062
    goto L1811
L2175:
    dec_ref r4095
    goto L1811
L2176:
    dec_ref r4095
    dec_ref r4098
    goto L1811
L2177:
    dec_ref r4131
    goto L1811
L2178:
    dec_ref r4131
    dec_ref r4141
    goto L1811
L2179:
    dec_ref r4131
    dec_ref r4141
    dec_ref r4151
    goto L1811
L2180:
    dec_ref r4131
    dec_ref r4141
    dec_ref r4151
    dec_ref r4153
    goto L1811
L2181:
    dec_ref r4131
    dec_ref r4151
    goto L1811
L2182:
    dec_ref r4208
    goto L1811
L2183:
    dec_ref r4208
    dec_ref r4218
    goto L1811
L2184:
    dec_ref r4208
    dec_ref r4218
    dec_ref r4228
    goto L1811
L2185:
    dec_ref r4208
    dec_ref r4218
    dec_ref r4228
    dec_ref r4230
    goto L1811
L2186:
    dec_ref r4208
    dec_ref r4228
    goto L1811
L2187:
    dec_ref r4277
    goto L1811
L2188:
    dec_ref r4277
    dec_ref r4287
    goto L1811
L2189:
    dec_ref r4277
    dec_ref r4287
    dec_ref r4297
    goto L1811
L2190:
    dec_ref r4277
    dec_ref r4287
    dec_ref r4297
    dec_ref r4299
    goto L1811
L2191:
    dec_ref r4277
    dec_ref r4297
    goto L1811
L2192:
    dec_ref r4344
    goto L1811
L2193:
    dec_ref r4344
    dec_ref r4354
    goto L1811
L2194:
    dec_ref r4344
    dec_ref r4354
    dec_ref r4364
    goto L1811
L2195:
    dec_ref r4344
    dec_ref r4354
    dec_ref r4364
    dec_ref r4366
    goto L1811
L2196:
    dec_ref r4344
    dec_ref r4364
    goto L1811
L2197:
    dec_ref r4411
    goto L1811
L2198:
    dec_ref r4411
    dec_ref r4421
    goto L1811
L2199:
    dec_ref r4411
    dec_ref r4421
    dec_ref r4431
    goto L1811
L2200:
    dec_ref r4411
    dec_ref r4421
    dec_ref r4431
    dec_ref r4433
    goto L1811
L2201:
    dec_ref r4411
    dec_ref r4431
    goto L1811
L2202:
    dec_ref r4486
    goto L1811
L2203:
    dec_ref r4486
    dec_ref r4496
    goto L1811
L2204:
    dec_ref r4486
    dec_ref r4496
    dec_ref r4506
    goto L1811
L2205:
    dec_ref r4486
    dec_ref r4496
    dec_ref r4506
    dec_ref r4508
    goto L1811
L2206:
    dec_ref r4486
    dec_ref r4506
    goto L1811
L2207:
    dec_ref r4545
    goto L1811
L2208:
    dec_ref r4545
    dec_ref r4555
    goto L1811
L2209:
    dec_ref r4545
    dec_ref r4555
    dec_ref r4565
    goto L1811
L2210:
    dec_ref r4545
    dec_ref r4555
    dec_ref r4565
    dec_ref r4567
    goto L1811
L2211:
    dec_ref r4545
    dec_ref r4565
    goto L1811
L2212:
    dec_ref r4631
    goto L1811
L2213:
    dec_ref r4638
    goto L1811
L2214:
    dec_ref r4652
    goto L1811
L2215:
    dec_ref r4659
    goto L1811
L2216:
    dec_ref r4672
    goto L1811
L2217:
    dec_ref r4697
    goto L1811
L2218:
    dec_ref r4697
    dec_ref r4707
    goto L1811
L2219:
    dec_ref r4697
    dec_ref r4707
    dec_ref r4717
    goto L1811
L2220:
    dec_ref r4697
    dec_ref r4707
    dec_ref r4717
    dec_ref r4719
    goto L1811
L2221:
    dec_ref r4697
    dec_ref r4717
    goto L1811
L2222:
    dec_ref r4792
    goto L1811
L2223:
    dec_ref r4792
    dec_ref r4802
    goto L1811
L2224:
    dec_ref r4792
    dec_ref r4802
    dec_ref r4812
    goto L1811
L2225:
    dec_ref r4792
    dec_ref r4802
    dec_ref r4812
    dec_ref r4814
    goto L1811
L2226:
    dec_ref r4792
    dec_ref r4812
    goto L1811

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16, r17 :: object
    r18 :: str
    r19 :: dict
    r20 :: object
    r21 :: dict
    r22 :: str
    r23, r24 :: object
    r25 :: str
    r26 :: dict
    r27 :: str
    r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31 :: object
    r32 :: dict
    r33 :: str
    r34 :: object
    r35 :: object[1]
    r36 :: object_ptr
    r37 :: object
    r38 :: dict
    r39 :: str
    r40 :: i32
    r41 :: bit
    r42 :: object
    r43 :: bool
    r44 :: str
    r45 :: object
    r46 :: dict
    r47 :: str
    r48 :: object
    r49 :: str
    r50 :: object
    r51 :: object[3]
    r52 :: object_ptr
    r53, r54 :: object
    r55 :: dict
    r56 :: str
    r57, r58 :: object
    r59 :: str
    r60 :: dict
    r61 :: str
    r62 :: object
    r63 :: object[1]
    r64 :: object_ptr
    r65 :: object
    r66 :: dict
    r67 :: str
    r68 :: object
    r69 :: object[1]
    r70 :: object_ptr
    r71 :: object
    r72 :: dict
    r73 :: str
    r74 :: i32
    r75 :: bit
    r76 :: object
    r77 :: bool
    r78 :: str
    r79 :: object
    r80 :: dict
    r81 :: str
    r82 :: object
    r83 :: str
    r84 :: object
    r85 :: object[3]
    r86 :: object_ptr
    r87, r88 :: object
    r89 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L36 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = faster_web3.auto.gethdev.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L36 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('AsyncIPCProvider', 'AsyncWeb3', 'IPCProvider', 'Web3')
    r10 = 'faster_web3'
    r11 = faster_web3.auto.gethdev.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L36 (error at <module>:5) else goto L5
L5:
    faster_web3 = r12 :: module
    dec_ref r12
    r13 = ('ExtraDataToPOAMiddleware',)
    r14 = 'faster_web3.middleware'
    r15 = faster_web3.auto.gethdev.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L36 (error at <module>:11) else goto L6
L6:
    faster_web3.middleware = r16 :: module
    dec_ref r16
    r17 = ('get_dev_ipc_path',)
    r18 = 'faster_web3.providers.ipc'
    r19 = faster_web3.auto.gethdev.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L36 (error at <module>:14) else goto L7
L7:
    faster_web3.providers.ipc = r20 :: module
    dec_ref r20
    r21 = faster_web3.auto.gethdev.globals :: static
    r22 = 'get_dev_ipc_path'
    r23 = CPyDict_GetItem(r21, r22)
    if is_error(r23) goto L36 (error at <module>:18) else goto L8
L8:
    r24 = PyObject_Vectorcall(r23, 0, 0, 0)
    dec_ref r23
    if is_error(r24) goto L36 (error at <module>:18) else goto L9
L9:
    r25 = cast(str, r24)
    if is_error(r25) goto L36 (error at <module>:18) else goto L10
L10:
    r26 = faster_web3.auto.gethdev.globals :: static
    r27 = 'IPCProvider'
    r28 = CPyDict_GetItem(r26, r27)
    if is_error(r28) goto L37 (error at <module>:18) else goto L11
L11:
    r29 = [r25]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r28, r30, 1, 0)
    dec_ref r28
    if is_error(r31) goto L37 (error at <module>:18) else goto L12
L12:
    dec_ref r25
    r32 = faster_web3.auto.gethdev.globals :: static
    r33 = 'Web3'
    r34 = CPyDict_GetItem(r32, r33)
    if is_error(r34) goto L38 (error at <module>:18) else goto L13
L13:
    r35 = [r31]
    r36 = load_address r35
    r37 = PyObject_Vectorcall(r34, r36, 1, 0)
    dec_ref r34
    if is_error(r37) goto L38 (error at <module>:18) else goto L14
L14:
    dec_ref r31
    faster_web3.auto.gethdev.w3 = r37 :: static
    r38 = faster_web3.auto.gethdev.globals :: static
    r39 = 'w3'
    r40 = CPyDict_SetItem(r38, r39, r37)
    dec_ref r37
    r41 = r40 >= 0 :: signed
    if not r41 goto L36 (error at <module>:18) else goto L15 :: bool
L15:
    r42 = faster_web3.auto.gethdev.w3 :: static
    if is_error(r42) goto L16 else goto L18
L16:
    r43 = raise NameError('value for final name "w3" was not set')
    if not r43 goto L36 (error at <module>:19) else goto L17 :: bool
L17:
    unreachable
L18:
    r44 = 'middleware_onion'
    r45 = CPyObject_GetAttr(r42, r44)
    if is_error(r45) goto L36 (error at <module>:19) else goto L19
L19:
    r46 = faster_web3.auto.gethdev.globals :: static
    r47 = 'ExtraDataToPOAMiddleware'
    r48 = CPyDict_GetItem(r46, r47)
    if is_error(r48) goto L39 (error at <module>:19) else goto L20
L20:
    r49 = 'inject'
    r50 = object 0
    r51 = [r45, r48, r50]
    r52 = load_address r51
    r53 = ('layer',)
    r54 = PyObject_VectorcallMethod(r49, r52, 9223372036854775810, r53)
    if is_error(r54) goto L40 (error at <module>:19) else goto L41
L21:
    dec_ref r45
    dec_ref r48
    r55 = faster_web3.auto.gethdev.globals :: static
    r56 = 'get_dev_ipc_path'
    r57 = CPyDict_GetItem(r55, r56)
    if is_error(r57) goto L36 (error at <module>:21) else goto L22
L22:
    r58 = PyObject_Vectorcall(r57, 0, 0, 0)
    dec_ref r57
    if is_error(r58) goto L36 (error at <module>:21) else goto L23
L23:
    r59 = cast(str, r58)
    if is_error(r59) goto L36 (error at <module>:21) else goto L24
L24:
    r60 = faster_web3.auto.gethdev.globals :: static
    r61 = 'AsyncIPCProvider'
    r62 = CPyDict_GetItem(r60, r61)
    if is_error(r62) goto L42 (error at <module>:21) else goto L25
L25:
    r63 = [r59]
    r64 = load_address r63
    r65 = PyObject_Vectorcall(r62, r64, 1, 0)
    dec_ref r62
    if is_error(r65) goto L42 (error at <module>:21) else goto L26
L26:
    dec_ref r59
    r66 = faster_web3.auto.gethdev.globals :: static
    r67 = 'AsyncWeb3'
    r68 = CPyDict_GetItem(r66, r67)
    if is_error(r68) goto L43 (error at <module>:21) else goto L27
L27:
    r69 = [r65]
    r70 = load_address r69
    r71 = PyObject_Vectorcall(r68, r70, 1, 0)
    dec_ref r68
    if is_error(r71) goto L43 (error at <module>:21) else goto L28
L28:
    dec_ref r65
    faster_web3.auto.gethdev.async_w3 = r71 :: static
    r72 = faster_web3.auto.gethdev.globals :: static
    r73 = 'async_w3'
    r74 = CPyDict_SetItem(r72, r73, r71)
    dec_ref r71
    r75 = r74 >= 0 :: signed
    if not r75 goto L36 (error at <module>:21) else goto L29 :: bool
L29:
    r76 = faster_web3.auto.gethdev.async_w3 :: static
    if is_error(r76) goto L30 else goto L32
L30:
    r77 = raise NameError('value for final name "async_w3" was not set')
    if not r77 goto L36 (error at <module>:22) else goto L31 :: bool
L31:
    unreachable
L32:
    r78 = 'middleware_onion'
    r79 = CPyObject_GetAttr(r76, r78)
    if is_error(r79) goto L36 (error at <module>:22) else goto L33
L33:
    r80 = faster_web3.auto.gethdev.globals :: static
    r81 = 'ExtraDataToPOAMiddleware'
    r82 = CPyDict_GetItem(r80, r81)
    if is_error(r82) goto L44 (error at <module>:22) else goto L34
L34:
    r83 = 'inject'
    r84 = object 0
    r85 = [r79, r82, r84]
    r86 = load_address r85
    r87 = ('layer',)
    r88 = PyObject_VectorcallMethod(r83, r86, 9223372036854775810, r87)
    if is_error(r88) goto L45 (error at <module>:22) else goto L46
L35:
    dec_ref r79
    dec_ref r82
    return 1
L36:
    r89 = <error> :: None
    return r89
L37:
    dec_ref r25
    goto L36
L38:
    dec_ref r31
    goto L36
L39:
    dec_ref r45
    goto L36
L40:
    dec_ref r45
    dec_ref r48
    goto L36
L41:
    dec_ref r54
    goto L21
L42:
    dec_ref r59
    goto L36
L43:
    dec_ref r65
    goto L36
L44:
    dec_ref r79
    goto L36
L45:
    dec_ref r79
    dec_ref r82
    goto L36
L46:
    dec_ref r88
    goto L35

def _error_log(provider, e):
    provider, e :: object
    r0 :: str
    r1 :: object
    r2, r3 :: str
    r4 :: object[3]
    r5 :: object_ptr
    r6, r7 :: object
    r8 :: None
L0:
    r0 = 'logger'
    r1 = CPyObject_GetAttr(provider, r0)
    if is_error(r1) goto L3 (error at _error_log:36) else goto L1
L1:
    r2 = 'There was an exception while caching the request.'
    r3 = 'error'
    r4 = [r1, r2, e]
    r5 = load_address r4
    r6 = ('exc_info',)
    r7 = PyObject_VectorcallMethod(r3, r5, 9223372036854775810, r6)
    if is_error(r7) goto L4 (error at _error_log:36) else goto L5
L2:
    dec_ref r1
    return 1
L3:
    r8 = <error> :: None
    return r8
L4:
    dec_ref r1
    goto L3
L5:
    dec_ref r7
    goto L2

def always_cache_request(_args, _kwargs):
    _args :: tuple
    _kwargs :: dict
L0:
    return 1

def is_beyond_validation_threshold(provider, blocknum, block_timestamp):
    provider :: object
    blocknum, block_timestamp :: union[int, None]
    r0, r1 :: object
    r2 :: str
    r3 :: object
    r4 :: bool
    r5 :: str
    r6 :: object
    threshold :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r7 :: str
    r8 :: object
    r9 :: i32
    r10 :: bit
    r11 :: object
    r12 :: ptr
    r13 :: object
    r14 :: bit
    r15 :: str
    r16 :: faster_web3.utils.caching.RequestCacheValidationThreshold
    r17 :: str
    r18 :: object
    r19 :: str
    r20 :: list
    r21 :: object
    r22, r23, r24 :: ptr
    r25 :: str
    r26 :: object[3]
    r27 :: object_ptr
    r28 :: object
    r29 :: dict
    r30 :: str
    r31 :: object
    r32 :: str
    r33, r34, r35 :: object
    r36 :: object[2]
    r37 :: object_ptr
    r38 :: object
    r39 :: int
    r40, r41 :: object
    r42, r43 :: bool
    r44 :: bit
    r45 :: object
    r46 :: bit
    r47 :: int
    r48 :: bit
    r49 :: str
    r50 :: object
    r51 :: str
    r52 :: object
    r53 :: object[1]
    r54 :: object_ptr
    r55 :: object
    r56 :: str
    r57 :: list
    r58 :: object
    r59, r60, r61 :: ptr
    r62 :: str
    r63 :: object[3]
    r64 :: object_ptr
    r65 :: object
    r66 :: dict
    r67 :: str
    r68 :: object
    r69 :: str
    r70, r71, r72 :: object
    r73 :: object[2]
    r74 :: object_ptr
    r75 :: object
    r76 :: int
    r77 :: object
    r78 :: int
    r79 :: object
    r80 :: str
    r81, r82 :: object
    r83 :: float
    r84 :: bit
    r85 :: int
    r86 :: object
    r87 :: float
    r88 :: bit
    r89, r90 :: float
    r91 :: bit
    r92 :: object
    r93 :: bit
    r94 :: object
    r95 :: str
    r96 :: object
    r97, r98 :: str
    r99 :: object[3]
    r100 :: object_ptr
    r101 :: object
    r102 :: tuple[object, object, object]
    r103 :: object
    r104 :: str
    r105 :: object
    r106 :: bit
    r107 :: object
    r108 :: None
    r109 :: bit
    r110, r111 :: tuple[object, object, object]
    r112 :: bool
    r113 :: tuple[object, object, object]
    r114 :: str
    r115 :: object
    r116 :: i32
    r117, r118 :: bit
    r119 :: bool
L0:
    if is_error(blocknum) goto L1 else goto L74
L1:
    r0 = box(None, 1)
    inc_ref r0
    blocknum = r0
L2:
    if is_error(block_timestamp) goto L3 else goto L75
L3:
    r1 = box(None, 1)
    inc_ref r1
    block_timestamp = r1
L4:
    r2 = 'cache_allowed_requests'
    r3 = CPyObject_GetAttr(provider, r2)
    if is_error(r3) goto L76 (error at is_beyond_validation_threshold:50) else goto L5
L5:
    r4 = unbox(bool, r3)
    dec_ref r3
    if is_error(r4) goto L76 (error at is_beyond_validation_threshold:50) else goto L6
L6:
L7:
    r5 = 'request_cache_validation_threshold'
    r6 = CPyObject_GetAttr(provider, r5)
    if is_error(r6) goto L77 (error at is_beyond_validation_threshold:52) else goto L8
L8:
    threshold = r6
    r7 = 'cache_allowed_requests'
    r8 = box(bool, 0)
    r9 = PyObject_SetAttr(provider, r7, r8)
    r10 = r9 >= 0 :: signed
    if not r10 goto L78 (error at is_beyond_validation_threshold:55) else goto L9 :: bool
L9:
    r11 = faster_web3.utils.caching.RequestCacheValidationThreshold :: type
    r12 = get_element_ptr threshold ob_type :: PyObject
    r13 = borrow load_mem r12 :: builtins.object*
    r14 = r13 == r11
    if r14 goto L79 else goto L23 :: bool
L10:
    r15 = 'eth_getBlockByNumber'
    r16 = cast(faster_web3.utils.caching.RequestCacheValidationThreshold, threshold)
    if is_error(r16) goto L80 (error at is_beyond_validation_threshold:59) else goto L11
L11:
    r17 = 'value'
    r18 = CPyObject_GetAttr(r16, r17)
    dec_ref r16
    if is_error(r18) goto L80 (error at is_beyond_validation_threshold:59) else goto L12
L12:
    r19 = cast(str, r18)
    if is_error(r19) goto L80 (error at is_beyond_validation_threshold:59) else goto L13
L13:
    r20 = PyList_New(2)
    if is_error(r20) goto L81 (error at is_beyond_validation_threshold:59) else goto L14
L14:
    r21 = box(bool, 0)
    r22 = get_element_ptr r20 ob_item :: PyListObject
    r23 = load_mem r22 :: ptr*
    set_mem r23, r19 :: builtins.object*
    inc_ref r21
    r24 = r23 + 8
    set_mem r24, r21 :: builtins.object*
    r25 = 'make_request'
    r26 = [provider, r15, r20]
    r27 = load_address r26
    r28 = PyObject_VectorcallMethod(r25, r27, 9223372036854775811, 0)
    if is_error(r28) goto L82 (error at is_beyond_validation_threshold:58) else goto L15
L15:
    dec_ref r20
    r29 = cast(dict, r28)
    if is_error(r29) goto L80 (error at is_beyond_validation_threshold:58) else goto L16
L16:
    r30 = 'result'
    r31 = CPyDict_GetItem(r29, r30)
    dec_ref r29
    if is_error(r31) goto L80 (error at is_beyond_validation_threshold:58) else goto L17
L17:
    r32 = 'number'
    r33 = PyObject_GetItem(r31, r32)
    dec_ref r31
    if is_error(r33) goto L80 (error at is_beyond_validation_threshold:62) else goto L18
L18:
    r34 = load_address PyLong_Type
    r35 = object 16
    r36 = [r33, r35]
    r37 = load_address r36
    r38 = PyObject_Vectorcall(r34, r37, 2, 0)
    if is_error(r38) goto L83 (error at is_beyond_validation_threshold:62) else goto L19
L19:
    dec_ref r33
    r39 = unbox(int, r38)
    dec_ref r38
    if is_error(r39) goto L80 (error at is_beyond_validation_threshold:62) else goto L20
L20:
    r40 = box(int, r39)
    r41 = PyObject_RichCompare(blocknum, r40, 1)
    dec_ref blocknum
    dec_ref r40
    if is_error(r41) goto L52 (error at is_beyond_validation_threshold:62) else goto L21
L21:
    r42 = unbox(bool, r41)
    dec_ref r41
    if is_error(r42) goto L52 (error at is_beyond_validation_threshold:62) else goto L22
L22:
    r43 = r42
    goto L60
L23:
    r44 = PyLong_Check(threshold)
    if r44 goto L24 else goto L84 :: bool
L24:
    r45 = load_address _Py_NoneStruct
    r46 = block_timestamp != r45
    if r46 goto L25 else goto L85 :: bool
L25:
    r47 = unbox(int, block_timestamp)
    if is_error(r47) goto L78 (error at is_beyond_validation_threshold:48) else goto L26
L26:
    r48 = r47 != 0
    dec_ref r47 :: int
    if r48 goto L86 else goto L85 :: bool
L27:
    r49 = 'eth_getBlockByNumber'
    r50 = builtins :: module
    r51 = 'hex'
    r52 = CPyObject_GetAttr(r50, r51)
    if is_error(r52) goto L87 (error at is_beyond_validation_threshold:68) else goto L28
L28:
    r53 = [blocknum]
    r54 = load_address r53
    r55 = PyObject_Vectorcall(r52, r54, 1, 0)
    dec_ref r52
    if is_error(r55) goto L87 (error at is_beyond_validation_threshold:68) else goto L29
L29:
    dec_ref blocknum
    r56 = cast(str, r55)
    if is_error(r56) goto L88 (error at is_beyond_validation_threshold:68) else goto L30
L30:
    r57 = PyList_New(2)
    if is_error(r57) goto L89 (error at is_beyond_validation_threshold:68) else goto L31
L31:
    r58 = box(bool, 0)
    r59 = get_element_ptr r57 ob_item :: PyListObject
    r60 = load_mem r59 :: ptr*
    set_mem r60, r56 :: builtins.object*
    inc_ref r58
    r61 = r60 + 8
    set_mem r61, r58 :: builtins.object*
    r62 = 'make_request'
    r63 = [provider, r49, r57]
    r64 = load_address r63
    r65 = PyObject_VectorcallMethod(r62, r64, 9223372036854775811, 0)
    if is_error(r65) goto L90 (error at is_beyond_validation_threshold:67) else goto L32
L32:
    dec_ref r57
    r66 = cast(dict, r65)
    if is_error(r66) goto L88 (error at is_beyond_validation_threshold:67) else goto L33
L33:
    r67 = 'result'
    r68 = CPyDict_GetItem(r66, r67)
    dec_ref r66
    if is_error(r68) goto L88 (error at is_beyond_validation_threshold:67) else goto L34
L34:
    r69 = 'timestamp'
    r70 = PyObject_GetItem(r68, r69)
    dec_ref r68
    if is_error(r70) goto L88 (error at is_beyond_validation_threshold:70) else goto L35
L35:
    r71 = load_address PyLong_Type
    r72 = object 16
    r73 = [r70, r72]
    r74 = load_address r73
    r75 = PyObject_Vectorcall(r71, r74, 2, 0)
    if is_error(r75) goto L91 (error at is_beyond_validation_threshold:70) else goto L36
L36:
    dec_ref r70
    r76 = unbox(int, r75)
    dec_ref r75
    if is_error(r76) goto L88 (error at is_beyond_validation_threshold:70) else goto L37
L37:
    r77 = box(int, r76)
    block_timestamp = r77
L38:
    r78 = unbox(int, block_timestamp)
    dec_ref block_timestamp
    if is_error(r78) goto L88 (error at is_beyond_validation_threshold:74) else goto L39
L39:
    r79 = time :: module
    r80 = 'time'
    r81 = CPyObject_GetAttr(r79, r80)
    if is_error(r81) goto L92 (error at is_beyond_validation_threshold:74) else goto L40
L40:
    r82 = PyObject_Vectorcall(r81, 0, 0, 0)
    dec_ref r81
    if is_error(r82) goto L92 (error at is_beyond_validation_threshold:74) else goto L41
L41:
    r83 = unbox(float, r82)
    dec_ref r82
    r84 = r83 == -113.0
    if r84 goto L43 else goto L42 :: bool
L42:
    r85 = unbox(int, threshold)
    dec_ref threshold
    if is_error(r85) goto L93 (error at is_beyond_validation_threshold:74) else goto L44
L43:
    r86 = PyErr_Occurred()
    if not is_error(r86) goto L92 (error at is_beyond_validation_threshold:74) else goto L42
L44:
    r87 = CPyFloat_FromTagged(r85)
    dec_ref r85 :: int
    r88 = r87 == -113.0
    if r88 goto L46 else goto L45 :: bool
L45:
    r89 = r83 - r87
    r90 = CPyFloat_FromTagged(r78)
    dec_ref r78 :: int
    r91 = r90 == -113.0
    if r91 goto L48 else goto L47 :: bool
L46:
    r92 = PyErr_Occurred()
    if not is_error(r92) goto L93 (error at is_beyond_validation_threshold:74) else goto L45
L47:
    r93 = r90 <= r89
    r43 = r93
    goto L60
L48:
    r94 = PyErr_Occurred()
    if not is_error(r94) goto L52 (error at is_beyond_validation_threshold:74) else goto L47
L49:
    r95 = 'logger'
    r96 = CPyObject_GetAttr(provider, r95)
    if is_error(r96) goto L88 (error at is_beyond_validation_threshold:76) else goto L50
L50:
    r97 = 'Invalid request_cache_validation_threshold value. This should not have happened. Request not cached.\n    threshold: %s'
    r98 = 'error'
    r99 = [r96, r97, threshold]
    r100 = load_address r99
    r101 = PyObject_VectorcallMethod(r98, r100, 9223372036854775811, 0)
    if is_error(r101) goto L94 (error at is_beyond_validation_threshold:76) else goto L95
L51:
    dec_ref r96
    dec_ref threshold
    r43 = 0
    goto L60
L52:
    r102 = CPy_CatchError()
    r103 = builtins :: module
    r104 = 'Exception'
    r105 = CPyObject_GetAttr(r103, r104)
    if is_error(r105) goto L58 (error at is_beyond_validation_threshold:82) else goto L53
L53:
    r106 = CPy_ExceptionMatches(r105)
    dec_ref r105
    if r106 goto L54 else goto L56 :: bool
L54:
    r107 = CPy_GetExcValue()
    r108 = _error_log(provider, r107)
    dec_ref r107
    if is_error(r108) goto L58 (error at is_beyond_validation_threshold:83) else goto L55
L55:
    CPy_RestoreExcInfo(r102)
    dec_ref r102
    r43 = 0
    goto L60
L56:
    CPy_Reraise()
    if not 0 goto L58 else goto L96 :: bool
L57:
    unreachable
L58:
    CPy_RestoreExcInfo(r102)
    dec_ref r102
    r109 = CPy_KeepPropagating()
    if not r109 goto L61 else goto L59 :: bool
L59:
    unreachable
L60:
    r110 = <error> :: tuple[object, object, object]
    r111 = r110
    goto L62
L61:
    r112 = <error> :: bool
    r43 = r112
    r113 = CPy_CatchError()
    r111 = r113
L62:
    r114 = 'cache_allowed_requests'
    r115 = box(bool, r4)
    r116 = PyObject_SetAttr(provider, r114, r115)
    r117 = r116 >= 0 :: signed
    if not r117 goto L68 (error at is_beyond_validation_threshold:86) else goto L63 :: bool
L63:
    if is_error(r111) goto L66 else goto L64
L64:
    CPy_Reraise()
    if not 0 goto L68 else goto L97 :: bool
L65:
    unreachable
L66:
    if is_error(r43) goto L72 else goto L67
L67:
    return r43
L68:
    if is_error(r111) goto L70 else goto L69
L69:
    CPy_RestoreExcInfo(r111)
    xdec_ref r111
L70:
    r118 = CPy_KeepPropagating()
    if not r118 goto L73 else goto L71 :: bool
L71:
    unreachable
L72:
    unreachable
L73:
    r119 = <error> :: bool
    return r119
L74:
    inc_ref blocknum
    goto L2
L75:
    inc_ref block_timestamp
    goto L4
L76:
    dec_ref blocknum
    dec_ref block_timestamp
    goto L73
L77:
    dec_ref blocknum
    dec_ref block_timestamp
    goto L52
L78:
    dec_ref blocknum
    dec_ref block_timestamp
    dec_ref threshold
    goto L52
L79:
    dec_ref block_timestamp
    goto L10
L80:
    dec_ref blocknum
    goto L52
L81:
    dec_ref blocknum
    dec_ref r19
    goto L52
L82:
    dec_ref blocknum
    dec_ref r20
    goto L52
L83:
    dec_ref blocknum
    dec_ref r33
    goto L52
L84:
    dec_ref blocknum
    dec_ref block_timestamp
    goto L49
L85:
    dec_ref block_timestamp
    goto L27
L86:
    dec_ref blocknum
    goto L38
L87:
    dec_ref blocknum
    dec_ref threshold
    goto L52
L88:
    dec_ref threshold
    goto L52
L89:
    dec_ref threshold
    dec_ref r56
    goto L52
L90:
    dec_ref threshold
    dec_ref r57
    goto L52
L91:
    dec_ref threshold
    dec_ref r70
    goto L52
L92:
    dec_ref threshold
    dec_ref r78 :: int
    goto L52
L93:
    dec_ref r78 :: int
    goto L52
L94:
    dec_ref threshold
    dec_ref r96
    goto L52
L95:
    dec_ref r101
    goto L51
L96:
    dec_ref r102
    goto L57
L97:
    xdec_ref r111
    goto L65

def validate_from_block_id_in_params(provider, params, _result):
    provider, params, _result, r0, r1 :: object
    r2 :: str
    r3 :: object
    r4 :: i32
    r5 :: bit
    r6 :: bool
    r7, r8 :: object
    r9 :: object[2]
    r10 :: object_ptr
    r11 :: object
    r12 :: int
    r13 :: object
    r14 :: union[int, None]
    r15, r16 :: bool
L0:
    r0 = object 0
    r1 = PyObject_GetItem(params, r0)
    if is_error(r1) goto L9 (error at validate_from_block_id_in_params:94) else goto L1
L1:
    r2 = 'earliest'
    r3 = PyObject_RichCompare(r1, r2, 2)
    if is_error(r3) goto L10 (error at validate_from_block_id_in_params:95) else goto L2
L2:
    r4 = PyObject_IsTrue(r3)
    dec_ref r3
    r5 = r4 >= 0 :: signed
    if not r5 goto L10 (error at validate_from_block_id_in_params:95) else goto L3 :: bool
L3:
    r6 = truncate r4: i32 to builtins.bool
    if r6 goto L11 else goto L5 :: bool
L4:
    return 1
L5:
    r7 = load_address PyLong_Type
    r8 = object 16
    r9 = [r1, r8]
    r10 = load_address r9
    r11 = PyObject_Vectorcall(r7, r10, 2, 0)
    if is_error(r11) goto L10 (error at validate_from_block_id_in_params:99) else goto L6
L6:
    dec_ref r1
    r12 = unbox(int, r11)
    dec_ref r11
    if is_error(r12) goto L9 (error at validate_from_block_id_in_params:99) else goto L7
L7:
    r13 = box(int, r12)
    r14 = <error> :: union[int, None]
    r15 = is_beyond_validation_threshold(provider, r13, r14)
    dec_ref r13
    if is_error(r15) goto L9 (error at validate_from_block_id_in_params:100) else goto L8
L8:
    return r15
L9:
    r16 = <error> :: bool
    return r16
L10:
    dec_ref r1
    goto L9
L11:
    dec_ref r1
    goto L4

def validate_from_blocknum_in_result(provider, _params, result):
    provider, _params :: object
    result :: dict
    r0 :: str
    r1 :: object
    r2 :: bool
    r3 :: str
    r4 :: object
    r5 :: i32
    r6 :: bit
    r7 :: str
    r8 :: i32
    r9 :: bit
    r10 :: bool
    r11 :: str
    r12 :: object
    blocknum :: union[object, None]
    r13 :: str
    r14 :: list
    r15 :: object
    r16, r17, r18 :: ptr
    r19 :: str
    r20 :: object[3]
    r21 :: object_ptr
    r22 :: object
    r23 :: dict
    r24 :: str
    r25, r26, r27 :: object
    r28 :: object[2]
    r29 :: object_ptr
    r30 :: object
    r31 :: int
    r32 :: str
    r33, r34, r35 :: object
    r36 :: object[2]
    r37 :: object_ptr
    r38 :: object
    r39 :: int
    r40, r41 :: object
    r42, r43 :: bool
    r44 :: str
    r45 :: i32
    r46 :: bit
    r47 :: bool
    r48 :: str
    r49, r50, r51 :: object
    r52 :: object[2]
    r53 :: object_ptr
    r54 :: object
    r55 :: int
    r56 :: str
    r57, r58, r59 :: object
    r60 :: object[2]
    r61 :: object_ptr
    r62 :: object
    r63 :: int
    r64, r65 :: object
    r66 :: bool
    r67 :: str
    r68 :: object
    r69, r70 :: str
    r71 :: object[3]
    r72 :: object_ptr
    r73 :: object
    r74 :: tuple[object, object, object]
    r75 :: object
    r76 :: str
    r77 :: object
    r78 :: bit
    r79 :: object
    r80 :: None
    r81 :: bit
    r82, r83 :: tuple[object, object, object]
    r84 :: bool
    r85 :: tuple[object, object, object]
    r86 :: str
    r87 :: object
    r88 :: i32
    r89, r90 :: bit
    r91 :: bool
L0:
    r0 = 'cache_allowed_requests'
    r1 = CPyObject_GetAttr(provider, r0)
    if is_error(r1) goto L52 (error at validate_from_blocknum_in_result:108) else goto L1
L1:
    r2 = unbox(bool, r1)
    dec_ref r1
    if is_error(r2) goto L52 (error at validate_from_blocknum_in_result:108) else goto L2
L2:
L3:
    r3 = 'cache_allowed_requests'
    r4 = box(bool, 0)
    r5 = PyObject_SetAttr(provider, r3, r4)
    r6 = r5 >= 0 :: signed
    if not r6 goto L31 (error at validate_from_blocknum_in_result:111) else goto L4 :: bool
L4:
    r7 = 'blockNumber'
    r8 = PyDict_Contains(result, r7)
    r9 = r8 >= 0 :: signed
    if not r9 goto L31 (error at validate_from_blocknum_in_result:114) else goto L5 :: bool
L5:
    r10 = truncate r8: i32 to builtins.bool
    if r10 goto L6 else goto L18 :: bool
L6:
    r11 = 'blockNumber'
    r12 = CPyDict_GetWithNone(result, r11)
    if is_error(r12) goto L31 (error at validate_from_blocknum_in_result:115) else goto L7
L7:
    blocknum = r12
    r13 = 'eth_getBlockByNumber'
    r14 = PyList_New(2)
    if is_error(r14) goto L53 (error at validate_from_blocknum_in_result:118) else goto L8
L8:
    r15 = box(bool, 0)
    r16 = get_element_ptr r14 ob_item :: PyListObject
    r17 = load_mem r16 :: ptr*
    inc_ref blocknum
    set_mem r17, blocknum :: builtins.object*
    inc_ref r15
    r18 = r17 + 8
    set_mem r18, r15 :: builtins.object*
    r19 = 'make_request'
    r20 = [provider, r13, r14]
    r21 = load_address r20
    r22 = PyObject_VectorcallMethod(r19, r21, 9223372036854775811, 0)
    if is_error(r22) goto L54 (error at validate_from_blocknum_in_result:117) else goto L9
L9:
    dec_ref r14
    r23 = cast(dict, r22)
    if is_error(r23) goto L53 (error at validate_from_blocknum_in_result:117) else goto L10
L10:
    r24 = 'result'
    r25 = CPyDict_GetItem(r23, r24)
    dec_ref r23
    if is_error(r25) goto L53 (error at validate_from_blocknum_in_result:117) else goto L11
L11:
    r26 = load_address PyLong_Type
    r27 = object 16
    r28 = [blocknum, r27]
    r29 = load_address r28
    r30 = PyObject_Vectorcall(r26, r29, 2, 0)
    if is_error(r30) goto L55 (error at validate_from_blocknum_in_result:122) else goto L12
L12:
    dec_ref blocknum
    r31 = unbox(int, r30)
    dec_ref r30
    if is_error(r31) goto L56 (error at validate_from_blocknum_in_result:122) else goto L13
L13:
    r32 = 'timestamp'
    r33 = PyObject_GetItem(r25, r32)
    dec_ref r25
    if is_error(r33) goto L57 (error at validate_from_blocknum_in_result:123) else goto L14
L14:
    r34 = load_address PyLong_Type
    r35 = object 16
    r36 = [r33, r35]
    r37 = load_address r36
    r38 = PyObject_Vectorcall(r34, r37, 2, 0)
    if is_error(r38) goto L58 (error at validate_from_blocknum_in_result:123) else goto L15
L15:
    dec_ref r33
    r39 = unbox(int, r38)
    dec_ref r38
    if is_error(r39) goto L57 (error at validate_from_blocknum_in_result:123) else goto L16
L16:
    r40 = box(int, r31)
    r41 = box(int, r39)
    r42 = is_beyond_validation_threshold(provider, r40, r41)
    dec_ref r40
    dec_ref r41
    if is_error(r42) goto L31 (error at validate_from_blocknum_in_result:120) else goto L17
L17:
    r43 = r42
    goto L39
L18:
    r44 = 'number'
    r45 = PyDict_Contains(result, r44)
    r46 = r45 >= 0 :: signed
    if not r46 goto L31 (error at validate_from_blocknum_in_result:125) else goto L19 :: bool
L19:
    r47 = truncate r45: i32 to builtins.bool
    if r47 goto L20 else goto L28 :: bool
L20:
    r48 = 'number'
    r49 = CPyDict_GetItem(result, r48)
    if is_error(r49) goto L31 (error at validate_from_blocknum_in_result:128) else goto L21
L21:
    r50 = load_address PyLong_Type
    r51 = object 16
    r52 = [r49, r51]
    r53 = load_address r52
    r54 = PyObject_Vectorcall(r50, r53, 2, 0)
    if is_error(r54) goto L59 (error at validate_from_blocknum_in_result:128) else goto L22
L22:
    dec_ref r49
    r55 = unbox(int, r54)
    dec_ref r54
    if is_error(r55) goto L31 (error at validate_from_blocknum_in_result:128) else goto L23
L23:
    r56 = 'timestamp'
    r57 = CPyDict_GetItem(result, r56)
    if is_error(r57) goto L60 (error at validate_from_blocknum_in_result:129) else goto L24
L24:
    r58 = load_address PyLong_Type
    r59 = object 16
    r60 = [r57, r59]
    r61 = load_address r60
    r62 = PyObject_Vectorcall(r58, r61, 2, 0)
    if is_error(r62) goto L61 (error at validate_from_blocknum_in_result:129) else goto L25
L25:
    dec_ref r57
    r63 = unbox(int, r62)
    dec_ref r62
    if is_error(r63) goto L60 (error at validate_from_blocknum_in_result:129) else goto L26
L26:
    r64 = box(int, r55)
    r65 = box(int, r63)
    r66 = is_beyond_validation_threshold(provider, r64, r65)
    dec_ref r64
    dec_ref r65
    if is_error(r66) goto L31 (error at validate_from_blocknum_in_result:126) else goto L27
L27:
    r43 = r66
    goto L39
L28:
    r67 = 'logger'
    r68 = CPyObject_GetAttr(provider, r67)
    if is_error(r68) goto L31 (error at validate_from_blocknum_in_result:132) else goto L29
L29:
    r69 = 'Could not find block number in result. This should not have happened. Request not cached.\n    result: %s'
    r70 = 'error'
    r71 = [r68, r69, result]
    r72 = load_address r71
    r73 = PyObject_VectorcallMethod(r70, r72, 9223372036854775811, 0)
    if is_error(r73) goto L62 (error at validate_from_blocknum_in_result:132) else goto L63
L30:
    dec_ref r68
    r43 = 0
    goto L39
L31:
    r74 = CPy_CatchError()
    r75 = builtins :: module
    r76 = 'Exception'
    r77 = CPyObject_GetAttr(r75, r76)
    if is_error(r77) goto L37 (error at validate_from_blocknum_in_result:138) else goto L32
L32:
    r78 = CPy_ExceptionMatches(r77)
    dec_ref r77
    if r78 goto L33 else goto L35 :: bool
L33:
    r79 = CPy_GetExcValue()
    r80 = _error_log(provider, r79)
    dec_ref r79
    if is_error(r80) goto L37 (error at validate_from_blocknum_in_result:139) else goto L34
L34:
    CPy_RestoreExcInfo(r74)
    dec_ref r74
    r43 = 0
    goto L39
L35:
    CPy_Reraise()
    if not 0 goto L37 else goto L64 :: bool
L36:
    unreachable
L37:
    CPy_RestoreExcInfo(r74)
    dec_ref r74
    r81 = CPy_KeepPropagating()
    if not r81 goto L40 else goto L38 :: bool
L38:
    unreachable
L39:
    r82 = <error> :: tuple[object, object, object]
    r83 = r82
    goto L41
L40:
    r84 = <error> :: bool
    r43 = r84
    r85 = CPy_CatchError()
    r83 = r85
L41:
    r86 = 'cache_allowed_requests'
    r87 = box(bool, r2)
    r88 = PyObject_SetAttr(provider, r86, r87)
    r89 = r88 >= 0 :: signed
    if not r89 goto L47 (error at validate_from_blocknum_in_result:142) else goto L42 :: bool
L42:
    if is_error(r83) goto L45 else goto L43
L43:
    CPy_Reraise()
    if not 0 goto L47 else goto L65 :: bool
L44:
    unreachable
L45:
    if is_error(r43) goto L51 else goto L46
L46:
    return r43
L47:
    if is_error(r83) goto L49 else goto L48
L48:
    CPy_RestoreExcInfo(r83)
    xdec_ref r83
L49:
    r90 = CPy_KeepPropagating()
    if not r90 goto L52 else goto L50 :: bool
L50:
    unreachable
L51:
    unreachable
L52:
    r91 = <error> :: bool
    return r91
L53:
    dec_ref blocknum
    goto L31
L54:
    dec_ref blocknum
    dec_ref r14
    goto L31
L55:
    dec_ref blocknum
    dec_ref r25
    goto L31
L56:
    dec_ref r25
    goto L31
L57:
    dec_ref r31 :: int
    goto L31
L58:
    dec_ref r31 :: int
    dec_ref r33
    goto L31
L59:
    dec_ref r49
    goto L31
L60:
    dec_ref r55 :: int
    goto L31
L61:
    dec_ref r55 :: int
    dec_ref r57
    goto L31
L62:
    dec_ref r68
    goto L31
L63:
    dec_ref r73
    goto L30
L64:
    dec_ref r74
    goto L36
L65:
    xdec_ref r83
    goto L44

def validate_from_blockhash_in_params(provider, params, _result):
    provider, params, _result :: object
    r0 :: str
    r1 :: object
    r2 :: bool
    r3 :: str
    r4 :: object
    r5 :: i32
    r6 :: bit
    r7 :: str
    r8, r9 :: object
    r10 :: list
    r11 :: object
    r12, r13, r14 :: ptr
    r15 :: str
    r16 :: object[3]
    r17 :: object_ptr
    r18 :: object
    r19 :: dict
    r20 :: str
    r21 :: object
    r22 :: str
    r23, r24, r25 :: object
    r26 :: object[2]
    r27 :: object_ptr
    r28 :: object
    r29 :: int
    r30 :: str
    r31, r32, r33 :: object
    r34 :: object[2]
    r35 :: object_ptr
    r36 :: object
    r37 :: int
    r38, r39 :: object
    r40, r41 :: bool
    r42 :: tuple[object, object, object]
    r43 :: object
    r44 :: str
    r45 :: object
    r46 :: bit
    r47 :: object
    r48 :: None
    r49 :: bit
    r50, r51 :: tuple[object, object, object]
    r52 :: bool
    r53 :: tuple[object, object, object]
    r54 :: str
    r55 :: object
    r56 :: i32
    r57, r58 :: bit
    r59 :: bool
L0:
    r0 = 'cache_allowed_requests'
    r1 = CPyObject_GetAttr(provider, r0)
    if is_error(r1) goto L38 (error at validate_from_blockhash_in_params:150) else goto L1
L1:
    r2 = unbox(bool, r1)
    dec_ref r1
    if is_error(r2) goto L38 (error at validate_from_blockhash_in_params:150) else goto L2
L2:
L3:
    r3 = 'cache_allowed_requests'
    r4 = box(bool, 0)
    r5 = PyObject_SetAttr(provider, r3, r4)
    r6 = r5 >= 0 :: signed
    if not r6 goto L17 (error at validate_from_blockhash_in_params:153) else goto L4 :: bool
L4:
    r7 = 'eth_getBlockByHash'
    r8 = object 0
    r9 = PyObject_GetItem(params, r8)
    if is_error(r9) goto L17 (error at validate_from_blockhash_in_params:157) else goto L5
L5:
    r10 = PyList_New(2)
    if is_error(r10) goto L39 (error at validate_from_blockhash_in_params:157) else goto L6
L6:
    r11 = box(bool, 0)
    r12 = get_element_ptr r10 ob_item :: PyListObject
    r13 = load_mem r12 :: ptr*
    set_mem r13, r9 :: builtins.object*
    inc_ref r11
    r14 = r13 + 8
    set_mem r14, r11 :: builtins.object*
    r15 = 'make_request'
    r16 = [provider, r7, r10]
    r17 = load_address r16
    r18 = PyObject_VectorcallMethod(r15, r17, 9223372036854775811, 0)
    if is_error(r18) goto L40 (error at validate_from_blockhash_in_params:156) else goto L7
L7:
    dec_ref r10
    r19 = cast(dict, r18)
    if is_error(r19) goto L17 (error at validate_from_blockhash_in_params:156) else goto L8
L8:
    r20 = 'result'
    r21 = CPyDict_GetItem(r19, r20)
    dec_ref r19
    if is_error(r21) goto L17 (error at validate_from_blockhash_in_params:156) else goto L9
L9:
    r22 = 'number'
    r23 = PyObject_GetItem(r21, r22)
    if is_error(r23) goto L41 (error at validate_from_blockhash_in_params:161) else goto L10
L10:
    r24 = load_address PyLong_Type
    r25 = object 16
    r26 = [r23, r25]
    r27 = load_address r26
    r28 = PyObject_Vectorcall(r24, r27, 2, 0)
    if is_error(r28) goto L42 (error at validate_from_blockhash_in_params:161) else goto L11
L11:
    dec_ref r23
    r29 = unbox(int, r28)
    dec_ref r28
    if is_error(r29) goto L41 (error at validate_from_blockhash_in_params:161) else goto L12
L12:
    r30 = 'timestamp'
    r31 = PyObject_GetItem(r21, r30)
    dec_ref r21
    if is_error(r31) goto L43 (error at validate_from_blockhash_in_params:162) else goto L13
L13:
    r32 = load_address PyLong_Type
    r33 = object 16
    r34 = [r31, r33]
    r35 = load_address r34
    r36 = PyObject_Vectorcall(r32, r35, 2, 0)
    if is_error(r36) goto L44 (error at validate_from_blockhash_in_params:162) else goto L14
L14:
    dec_ref r31
    r37 = unbox(int, r36)
    dec_ref r36
    if is_error(r37) goto L43 (error at validate_from_blockhash_in_params:162) else goto L15
L15:
    r38 = box(int, r29)
    r39 = box(int, r37)
    r40 = is_beyond_validation_threshold(provider, r38, r39)
    dec_ref r38
    dec_ref r39
    if is_error(r40) goto L17 (error at validate_from_blockhash_in_params:159) else goto L16
L16:
    r41 = r40
    goto L25
L17:
    r42 = CPy_CatchError()
    r43 = builtins :: module
    r44 = 'Exception'
    r45 = CPyObject_GetAttr(r43, r44)
    if is_error(r45) goto L23 (error at validate_from_blockhash_in_params:164) else goto L18
L18:
    r46 = CPy_ExceptionMatches(r45)
    dec_ref r45
    if r46 goto L19 else goto L21 :: bool
L19:
    r47 = CPy_GetExcValue()
    r48 = _error_log(provider, r47)
    dec_ref r47
    if is_error(r48) goto L23 (error at validate_from_blockhash_in_params:165) else goto L20
L20:
    CPy_RestoreExcInfo(r42)
    dec_ref r42
    r41 = 0
    goto L25
L21:
    CPy_Reraise()
    if not 0 goto L23 else goto L45 :: bool
L22:
    unreachable
L23:
    CPy_RestoreExcInfo(r42)
    dec_ref r42
    r49 = CPy_KeepPropagating()
    if not r49 goto L26 else goto L24 :: bool
L24:
    unreachable
L25:
    r50 = <error> :: tuple[object, object, object]
    r51 = r50
    goto L27
L26:
    r52 = <error> :: bool
    r41 = r52
    r53 = CPy_CatchError()
    r51 = r53
L27:
    r54 = 'cache_allowed_requests'
    r55 = box(bool, r2)
    r56 = PyObject_SetAttr(provider, r54, r55)
    r57 = r56 >= 0 :: signed
    if not r57 goto L33 (error at validate_from_blockhash_in_params:168) else goto L28 :: bool
L28:
    if is_error(r51) goto L31 else goto L29
L29:
    CPy_Reraise()
    if not 0 goto L33 else goto L46 :: bool
L30:
    unreachable
L31:
    if is_error(r41) goto L37 else goto L32
L32:
    return r41
L33:
    if is_error(r51) goto L35 else goto L34
L34:
    CPy_RestoreExcInfo(r51)
    xdec_ref r51
L35:
    r58 = CPy_KeepPropagating()
    if not r58 goto L38 else goto L36 :: bool
L36:
    unreachable
L37:
    unreachable
L38:
    r59 = <error> :: bool
    return r59
L39:
    dec_ref r9
    goto L17
L40:
    dec_ref r10
    goto L17
L41:
    dec_ref r21
    goto L17
L42:
    dec_ref r21
    dec_ref r23
    goto L17
L43:
    dec_ref r29 :: int
    goto L17
L44:
    dec_ref r29 :: int
    dec_ref r31
    goto L17
L45:
    dec_ref r42
    goto L22
L46:
    xdec_ref r51
    goto L30

def async_is_beyond_validation_threshold_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: object
    r8 :: str
    r9 :: object
    r10, r11 :: bool
    r12 :: object
    r13 :: str
    r14 :: object
    r15 :: bool
    r16 :: object
    r17 :: str
    r18 :: object
    r19 :: i32
    r20 :: bit
    r21 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r22 :: object
    r23 :: ptr
    r24 :: object
    r25 :: bit
    r26 :: object
    r27 :: str
    r28 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r29 :: faster_web3.utils.caching.RequestCacheValidationThreshold
    r30 :: str
    r31 :: object
    r32 :: str
    r33 :: list
    r34 :: object
    r35, r36, r37 :: ptr
    r38 :: str
    r39 :: object[3]
    r40 :: object_ptr
    r41, r42 :: object
    r43 :: bool
    r44, r45, r46, r47, r48 :: object
    r49 :: bool
    r50 :: object
    r51 :: bool
    r52 :: object
    r53 :: bit
    r54 :: tuple[object, object, object]
    r55 :: bool
    r56 :: object_ptr
    r57 :: object
    r58 :: bool
    r59, r60, r61 :: tuple[object, object, object]
    r62 :: bit
    r63, r64, r65 :: object
    r66 :: dict
    r67 :: bool
    r68 :: union[int, None]
    r69 :: dict
    r70 :: str
    r71 :: object
    r72 :: str
    r73, r74, r75 :: object
    r76 :: object[2]
    r77 :: object_ptr
    r78 :: object
    r79 :: int
    r80, r81 :: object
    r82 :: bool
    r83 :: object
    r84 :: bool
    r85 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r86 :: bit
    r87 :: union[int, None]
    r88 :: object
    r89 :: bit
    r90 :: int
    r91 :: bit
    r92 :: object
    r93 :: str
    r94 :: union[int, None]
    r95 :: object
    r96 :: str
    r97 :: object
    r98 :: object[1]
    r99 :: object_ptr
    r100 :: object
    r101 :: str
    r102 :: list
    r103 :: object
    r104, r105, r106 :: ptr
    r107 :: str
    r108 :: object[3]
    r109 :: object_ptr
    r110, r111 :: object
    r112 :: bool
    r113, r114, r115, r116, r117 :: object
    r118 :: bool
    r119 :: object
    r120 :: bool
    r121 :: object
    r122 :: bit
    r123 :: tuple[object, object, object]
    r124 :: bool
    r125 :: object_ptr
    r126 :: object
    r127 :: bool
    r128, r129, r130 :: tuple[object, object, object]
    r131 :: bit
    r132, r133, r134 :: object
    r135 :: dict
    r136 :: bool
    r137 :: dict
    r138 :: str
    r139 :: object
    r140 :: str
    r141, r142, r143 :: object
    r144 :: object[2]
    r145 :: object_ptr
    r146 :: object
    r147 :: int
    r148 :: object
    r149 :: bool
    r150 :: union[int, None]
    r151 :: int
    r152 :: object
    r153 :: str
    r154, r155 :: object
    r156 :: float
    r157 :: bit
    r158 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r159 :: object
    r160 :: int
    r161 :: float
    r162 :: bit
    r163, r164 :: float
    r165 :: bit
    r166 :: object
    r167 :: bit
    r168 :: object
    r169 :: bool
    r170, r171 :: object
    r172 :: str
    r173 :: object
    r174 :: str
    r175 :: union[faster_web3.utils.caching.RequestCacheValidationThreshold, int, object, None]
    r176 :: str
    r177 :: object[3]
    r178 :: object_ptr
    r179, r180 :: object
    r181 :: bool
    r182 :: tuple[object, object, object]
    r183 :: bool
    r184 :: object
    r185 :: str
    r186 :: object
    r187 :: bit
    r188 :: object
    r189 :: bool
    r190, r191 :: object
    r192 :: None
    r193 :: object
    r194 :: tuple[object, object, object]
    r195 :: bool
    r196 :: tuple[object, object, object]
    r197 :: bit
    r198, r199 :: tuple[object, object, object]
    r200 :: object
    r201 :: bool
    r202 :: tuple[object, object, object]
    r203 :: bool
    r204 :: object
    r205 :: str
    r206 :: object
    r207 :: i32
    r208 :: bit
    r209 :: object
    r210 :: bool
    r211 :: bit
    r212 :: object
    r213 :: bool
    r214, r215, r216 :: bit
    r217 :: bool
    r218 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L166
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L171 (error at async_is_beyond_validation_threshold:174) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r7) goto L171 (error at async_is_beyond_validation_threshold:179) else goto L5
L5:
    r8 = 'cache_allowed_requests'
    r9 = CPyObject_GetAttr(r7, r8)
    dec_ref r7
    if is_error(r9) goto L171 (error at async_is_beyond_validation_threshold:179) else goto L6
L6:
    r10 = unbox(bool, r9)
    dec_ref r9
    if is_error(r10) goto L171 (error at async_is_beyond_validation_threshold:179) else goto L7
L7:
    __mypyc_self__.__mypyc_generator_attribute__cache_allowed_requests = r10; r11 = is_error
    if not r11 goto L171 (error at async_is_beyond_validation_threshold:179) else goto L8 :: bool
L8:
    r12 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r12) goto L128 (error at async_is_beyond_validation_threshold:181) else goto L9
L9:
    r13 = 'request_cache_validation_threshold'
    r14 = CPyObject_GetAttr(r12, r13)
    dec_ref r12
    if is_error(r14) goto L128 (error at async_is_beyond_validation_threshold:181) else goto L10
L10:
    __mypyc_self__.__mypyc_generator_attribute__threshold = r14; r15 = is_error
    if not r15 goto L128 (error at async_is_beyond_validation_threshold:181) else goto L11 :: bool
L11:
    r16 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r16) goto L128 (error at async_is_beyond_validation_threshold:184) else goto L12
L12:
    r17 = 'cache_allowed_requests'
    r18 = box(bool, 0)
    r19 = PyObject_SetAttr(r16, r17, r18)
    dec_ref r16
    r20 = r19 >= 0 :: signed
    if not r20 goto L128 (error at async_is_beyond_validation_threshold:184) else goto L13 :: bool
L13:
    r21 = __mypyc_self__.__mypyc_generator_attribute__threshold
    if is_error(r21) goto L128 (error at async_is_beyond_validation_threshold:185) else goto L14
L14:
    r22 = faster_web3.utils.caching.RequestCacheValidationThreshold :: type
    r23 = get_element_ptr r21 ob_type :: PyObject
    r24 = borrow load_mem r23 :: builtins.object*
    dec_ref r21
    r25 = r24 == r22
    if r25 goto L15 else goto L61 :: bool
L15:
    r26 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r26) goto L128 (error at async_is_beyond_validation_threshold:187) else goto L16
L16:
    r27 = 'eth_getBlockByNumber'
    r28 = __mypyc_self__.__mypyc_generator_attribute__threshold
    if is_error(r28) goto L172 (error at async_is_beyond_validation_threshold:188) else goto L17
L17:
    r29 = cast(faster_web3.utils.caching.RequestCacheValidationThreshold, r28)
    if is_error(r29) goto L172 (error at async_is_beyond_validation_threshold:188) else goto L18
L18:
    r30 = 'value'
    r31 = CPyObject_GetAttr(r29, r30)
    dec_ref r29
    if is_error(r31) goto L172 (error at async_is_beyond_validation_threshold:188) else goto L19
L19:
    r32 = cast(str, r31)
    if is_error(r32) goto L172 (error at async_is_beyond_validation_threshold:188) else goto L20
L20:
    r33 = PyList_New(2)
    if is_error(r33) goto L173 (error at async_is_beyond_validation_threshold:188) else goto L21
L21:
    r34 = box(bool, 0)
    r35 = get_element_ptr r33 ob_item :: PyListObject
    r36 = load_mem r35 :: ptr*
    set_mem r36, r32 :: builtins.object*
    inc_ref r34
    r37 = r36 + 8
    set_mem r37, r34 :: builtins.object*
    r38 = 'make_request'
    r39 = [r26, r27, r33]
    r40 = load_address r39
    r41 = PyObject_VectorcallMethod(r38, r40, 9223372036854775811, 0)
    if is_error(r41) goto L174 (error at async_is_beyond_validation_threshold:187) else goto L22
L22:
    dec_ref r26
    dec_ref r33
    r42 = CPy_GetCoro(r41)
    dec_ref r41
    if is_error(r42) goto L128 (error at async_is_beyond_validation_threshold:187) else goto L23
L23:
    __mypyc_self__.__mypyc_temp__0 = r42; r43 = is_error
    if not r43 goto L128 (error at async_is_beyond_validation_threshold:-1) else goto L24 :: bool
L24:
    r44 = __mypyc_self__.__mypyc_temp__0
    if is_error(r44) goto L128 (error at async_is_beyond_validation_threshold:-1) else goto L25
L25:
    r45 = CPyIter_Next(r44)
    dec_ref r44
    if is_error(r45) goto L26 else goto L28
L26:
    r46 = CPy_FetchStopIterationValue()
    if is_error(r46) goto L128 (error at async_is_beyond_validation_threshold:187) else goto L27
L27:
    r47 = r46
    r48 = <error> :: object
    __mypyc_self__.__mypyc_temp__0 = r48; r49 = is_error
    if not r49 goto L175 (error at async_is_beyond_validation_threshold:187) else goto L50 :: bool
L28:
    r50 = r45
L29:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r50
L30:
    r52 = load_address _Py_NoneStruct
    r53 = type != r52
    if r53 goto L31 else goto L176 :: bool
L31:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L34 (error at async_is_beyond_validation_threshold:187) else goto L177 :: bool
L32:
    unreachable
L33:
    inc_ref arg
    goto L45
L34:
    r54 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__1 = r54; r55 = is_error
    if not r55 goto L178 (error at async_is_beyond_validation_threshold:-1) else goto L35 :: bool
L35:
    r56 = load_address r1
    r57 = __mypyc_self__.__mypyc_temp__0
    if is_error(r57) goto L178 (error at async_is_beyond_validation_threshold:-1) else goto L36
L36:
    r58 = CPy_YieldFromErrorHandle(r57, r56)
    dec_ref r57
    if is_error(r58) goto L178 (error at async_is_beyond_validation_threshold:187) else goto L37
L37:
    if r58 goto L40 else goto L38 :: bool
L38:
    r50 = r1
    r59 = __mypyc_self__.__mypyc_temp__1
    if is_error(r59) goto L179 (error at async_is_beyond_validation_threshold:-1) else goto L39
L39:
    CPy_RestoreExcInfo(r59)
    dec_ref r59
    goto L29
L40:
    r47 = r1
    r60 = __mypyc_self__.__mypyc_temp__1
    if is_error(r60) goto L180 (error at async_is_beyond_validation_threshold:-1) else goto L41
L41:
    CPy_RestoreExcInfo(r60)
    dec_ref r60
    goto L50
L42:
    r61 = __mypyc_self__.__mypyc_temp__1
    if is_error(r61) goto L128 (error at async_is_beyond_validation_threshold:-1) else goto L43
L43:
    CPy_RestoreExcInfo(r61)
    dec_ref r61
    r62 = CPy_KeepPropagating()
    if not r62 goto L128 else goto L44 :: bool
L44:
    unreachable
L45:
    r63 = __mypyc_self__.__mypyc_temp__0
    if is_error(r63) goto L181 (error at async_is_beyond_validation_threshold:-1) else goto L46
L46:
    r64 = CPyIter_Send(r63, arg)
    dec_ref r63
    dec_ref arg
    if is_error(r64) goto L48 else goto L47
L47:
    r50 = r64
    goto L29
L48:
    r65 = CPy_FetchStopIterationValue()
    if is_error(r65) goto L128 (error at async_is_beyond_validation_threshold:187) else goto L49
L49:
    r47 = r65
L50:
    r66 = cast(dict, r47)
    if is_error(r66) goto L128 (error at async_is_beyond_validation_threshold:187) else goto L51
L51:
    __mypyc_self__.__mypyc_generator_attribute__threshold_block = r66; r67 = is_error
    if not r67 goto L128 (error at async_is_beyond_validation_threshold:187) else goto L52 :: bool
L52:
    r68 = __mypyc_self__.__mypyc_generator_attribute__blocknum
    if is_error(r68) goto L128 (error at async_is_beyond_validation_threshold:191) else goto L53
L53:
    r69 = __mypyc_self__.__mypyc_generator_attribute__threshold_block
    if is_error(r69) goto L182 (error at async_is_beyond_validation_threshold:191) else goto L54
L54:
    r70 = 'result'
    r71 = CPyDict_GetItem(r69, r70)
    dec_ref r69
    if is_error(r71) goto L182 (error at async_is_beyond_validation_threshold:191) else goto L55
L55:
    r72 = 'number'
    r73 = PyObject_GetItem(r71, r72)
    dec_ref r71
    if is_error(r73) goto L182 (error at async_is_beyond_validation_threshold:191) else goto L56
L56:
    r74 = load_address PyLong_Type
    r75 = object 16
    r76 = [r73, r75]
    r77 = load_address r76
    r78 = PyObject_Vectorcall(r74, r77, 2, 0)
    if is_error(r78) goto L183 (error at async_is_beyond_validation_threshold:191) else goto L57
L57:
    dec_ref r73
    r79 = unbox(int, r78)
    dec_ref r78
    if is_error(r79) goto L182 (error at async_is_beyond_validation_threshold:191) else goto L58
L58:
    r80 = box(int, r79)
    r81 = PyObject_RichCompare(r68, r80, 1)
    dec_ref r68
    dec_ref r80
    if is_error(r81) goto L128 (error at async_is_beyond_validation_threshold:191) else goto L59
L59:
    r82 = unbox(bool, r81)
    dec_ref r81
    if is_error(r82) goto L128 (error at async_is_beyond_validation_threshold:191) else goto L60
L60:
    r83 = box(bool, r82)
    inc_ref r83
    __mypyc_self__.__mypyc_temp__2 = r83; r84 = is_error
    if not r84 goto L128 (error at async_is_beyond_validation_threshold:191) else goto L142 :: bool
L61:
    r85 = __mypyc_self__.__mypyc_generator_attribute__threshold
    if is_error(r85) goto L128 (error at async_is_beyond_validation_threshold:192) else goto L62
L62:
    r86 = PyLong_Check(r85)
    dec_ref r85
    if r86 goto L63 else goto L123 :: bool
L63:
    r87 = __mypyc_self__.__mypyc_generator_attribute__block_timestamp
    if is_error(r87) goto L128 (error at async_is_beyond_validation_threshold:193) else goto L64
L64:
    r88 = load_address _Py_NoneStruct
    r89 = r87 != r88
    if r89 goto L65 else goto L184 :: bool
L65:
    r90 = unbox(int, r87)
    dec_ref r87
    if is_error(r90) goto L128 (error at async_is_beyond_validation_threshold:193) else goto L66
L66:
    r91 = r90 != 0
    dec_ref r90 :: int
    if r91 goto L110 else goto L67 :: bool
L67:
    r92 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r92) goto L128 (error at async_is_beyond_validation_threshold:194) else goto L68
L68:
    r93 = 'eth_getBlockByNumber'
    r94 = __mypyc_self__.__mypyc_generator_attribute__blocknum
    if is_error(r94) goto L185 (error at async_is_beyond_validation_threshold:195) else goto L69
L69:
    r95 = builtins :: module
    r96 = 'hex'
    r97 = CPyObject_GetAttr(r95, r96)
    if is_error(r97) goto L186 (error at async_is_beyond_validation_threshold:195) else goto L70
L70:
    r98 = [r94]
    r99 = load_address r98
    r100 = PyObject_Vectorcall(r97, r99, 1, 0)
    dec_ref r97
    if is_error(r100) goto L186 (error at async_is_beyond_validation_threshold:195) else goto L71
L71:
    dec_ref r94
    r101 = cast(str, r100)
    if is_error(r101) goto L185 (error at async_is_beyond_validation_threshold:195) else goto L72
L72:
    r102 = PyList_New(2)
    if is_error(r102) goto L187 (error at async_is_beyond_validation_threshold:195) else goto L73
L73:
    r103 = box(bool, 0)
    r104 = get_element_ptr r102 ob_item :: PyListObject
    r105 = load_mem r104 :: ptr*
    set_mem r105, r101 :: builtins.object*
    inc_ref r103
    r106 = r105 + 8
    set_mem r106, r103 :: builtins.object*
    r107 = 'make_request'
    r108 = [r92, r93, r102]
    r109 = load_address r108
    r110 = PyObject_VectorcallMethod(r107, r109, 9223372036854775811, 0)
    if is_error(r110) goto L188 (error at async_is_beyond_validation_threshold:194) else goto L74
L74:
    dec_ref r92
    dec_ref r102
    r111 = CPy_GetCoro(r110)
    dec_ref r110
    if is_error(r111) goto L128 (error at async_is_beyond_validation_threshold:194) else goto L75
L75:
    __mypyc_self__.__mypyc_temp__3 = r111; r112 = is_error
    if not r112 goto L128 (error at async_is_beyond_validation_threshold:-1) else goto L76 :: bool
L76:
    r113 = __mypyc_self__.__mypyc_temp__3
    if is_error(r113) goto L128 (error at async_is_beyond_validation_threshold:-1) else goto L77
L77:
    r114 = CPyIter_Next(r113)
    dec_ref r113
    if is_error(r114) goto L78 else goto L80
L78:
    r115 = CPy_FetchStopIterationValue()
    if is_error(r115) goto L128 (error at async_is_beyond_validation_threshold:194) else goto L79
L79:
    r116 = r115
    r117 = <error> :: object
    __mypyc_self__.__mypyc_temp__3 = r117; r118 = is_error
    if not r118 goto L189 (error at async_is_beyond_validation_threshold:194) else goto L102 :: bool
L80:
    r119 = r114
L81:
    __mypyc_self__.__mypyc_next_label__ = 2
    return r119
L82:
    r121 = load_address _Py_NoneStruct
    r122 = type != r121
    if r122 goto L83 else goto L190 :: bool
L83:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L86 (error at async_is_beyond_validation_threshold:194) else goto L191 :: bool
L84:
    unreachable
L85:
    inc_ref arg
    goto L97
L86:
    r123 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__4 = r123; r124 = is_error
    if not r124 goto L192 (error at async_is_beyond_validation_threshold:-1) else goto L87 :: bool
L87:
    r125 = load_address r3
    r126 = __mypyc_self__.__mypyc_temp__3
    if is_error(r126) goto L192 (error at async_is_beyond_validation_threshold:-1) else goto L88
L88:
    r127 = CPy_YieldFromErrorHandle(r126, r125)
    dec_ref r126
    if is_error(r127) goto L192 (error at async_is_beyond_validation_threshold:194) else goto L89
L89:
    if r127 goto L92 else goto L90 :: bool
L90:
    r119 = r3
    r128 = __mypyc_self__.__mypyc_temp__4
    if is_error(r128) goto L193 (error at async_is_beyond_validation_threshold:-1) else goto L91
L91:
    CPy_RestoreExcInfo(r128)
    dec_ref r128
    goto L81
L92:
    r116 = r3
    r129 = __mypyc_self__.__mypyc_temp__4
    if is_error(r129) goto L194 (error at async_is_beyond_validation_threshold:-1) else goto L93
L93:
    CPy_RestoreExcInfo(r129)
    dec_ref r129
    goto L102
L94:
    r130 = __mypyc_self__.__mypyc_temp__4
    if is_error(r130) goto L128 (error at async_is_beyond_validation_threshold:-1) else goto L95
L95:
    CPy_RestoreExcInfo(r130)
    dec_ref r130
    r131 = CPy_KeepPropagating()
    if not r131 goto L128 else goto L96 :: bool
L96:
    unreachable
L97:
    r132 = __mypyc_self__.__mypyc_temp__3
    if is_error(r132) goto L195 (error at async_is_beyond_validation_threshold:-1) else goto L98
L98:
    r133 = CPyIter_Send(r132, arg)
    dec_ref r132
    dec_ref arg
    if is_error(r133) goto L100 else goto L99
L99:
    r119 = r133
    goto L81
L100:
    r134 = CPy_FetchStopIterationValue()
    if is_error(r134) goto L128 (error at async_is_beyond_validation_threshold:194) else goto L101
L101:
    r116 = r134
L102:
    r135 = cast(dict, r116)
    if is_error(r135) goto L128 (error at async_is_beyond_validation_threshold:194) else goto L103
L103:
    __mypyc_self__.__mypyc_generator_attribute__block = r135; r136 = is_error
    if not r136 goto L128 (error at async_is_beyond_validation_threshold:194) else goto L104 :: bool
L104:
    r137 = __mypyc_self__.__mypyc_generator_attribute__block
    if is_error(r137) goto L128 (error at async_is_beyond_validation_threshold:197) else goto L105
L105:
    r138 = 'result'
    r139 = CPyDict_GetItem(r137, r138)
    dec_ref r137
    if is_error(r139) goto L128 (error at async_is_beyond_validation_threshold:197) else goto L106
L106:
    r140 = 'timestamp'
    r141 = PyObject_GetItem(r139, r140)
    dec_ref r139
    if is_error(r141) goto L128 (error at async_is_beyond_validation_threshold:197) else goto L107
L107:
    r142 = load_address PyLong_Type
    r143 = object 16
    r144 = [r141, r143]
    r145 = load_address r144
    r146 = PyObject_Vectorcall(r142, r145, 2, 0)
    if is_error(r146) goto L196 (error at async_is_beyond_validation_threshold:197) else goto L108
L108:
    dec_ref r141
    r147 = unbox(int, r146)
    dec_ref r146
    if is_error(r147) goto L128 (error at async_is_beyond_validation_threshold:197) else goto L109
L109:
    r148 = box(int, r147)
    __mypyc_self__.__mypyc_generator_attribute__block_timestamp = r148; r149 = is_error
    if not r149 goto L128 (error at async_is_beyond_validation_threshold:197) else goto L110 :: bool
L110:
    r150 = __mypyc_self__.__mypyc_generator_attribute__block_timestamp
    if is_error(r150) goto L128 (error at async_is_beyond_validation_threshold:201) else goto L111
L111:
    r151 = unbox(int, r150)
    dec_ref r150
    if is_error(r151) goto L128 (error at async_is_beyond_validation_threshold:201) else goto L112
L112:
    r152 = time :: module
    r153 = 'time'
    r154 = CPyObject_GetAttr(r152, r153)
    if is_error(r154) goto L197 (error at async_is_beyond_validation_threshold:201) else goto L113
L113:
    r155 = PyObject_Vectorcall(r154, 0, 0, 0)
    dec_ref r154
    if is_error(r155) goto L197 (error at async_is_beyond_validation_threshold:201) else goto L114
L114:
    r156 = unbox(float, r155)
    dec_ref r155
    r157 = r156 == -113.0
    if r157 goto L116 else goto L115 :: bool
L115:
    r158 = __mypyc_self__.__mypyc_generator_attribute__threshold
    if is_error(r158) goto L197 (error at async_is_beyond_validation_threshold:201) else goto L117
L116:
    r159 = PyErr_Occurred()
    if not is_error(r159) goto L197 (error at async_is_beyond_validation_threshold:201) else goto L115
L117:
    r160 = unbox(int, r158)
    dec_ref r158
    if is_error(r160) goto L197 (error at async_is_beyond_validation_threshold:201) else goto L118
L118:
    r161 = CPyFloat_FromTagged(r160)
    dec_ref r160 :: int
    r162 = r161 == -113.0
    if r162 goto L120 else goto L119 :: bool
L119:
    r163 = r156 - r161
    r164 = CPyFloat_FromTagged(r151)
    dec_ref r151 :: int
    r165 = r164 == -113.0
    if r165 goto L122 else goto L121 :: bool
L120:
    r166 = PyErr_Occurred()
    if not is_error(r166) goto L197 (error at async_is_beyond_validation_threshold:201) else goto L119
L121:
    r167 = r164 <= r163
    r168 = box(bit, r167)
    inc_ref r168
    __mypyc_self__.__mypyc_temp__2 = r168; r169 = is_error
    if not r169 goto L128 (error at async_is_beyond_validation_threshold:201) else goto L142 :: bool
L122:
    r170 = PyErr_Occurred()
    if not is_error(r170) goto L128 (error at async_is_beyond_validation_threshold:201) else goto L121
L123:
    r171 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r171) goto L128 (error at async_is_beyond_validation_threshold:203) else goto L124
L124:
    r172 = 'logger'
    r173 = CPyObject_GetAttr(r171, r172)
    dec_ref r171
    if is_error(r173) goto L128 (error at async_is_beyond_validation_threshold:203) else goto L125
L125:
    r174 = 'Invalid request_cache_validation_threshold value. This should not have happened. Request not cached.\n    threshold: %s'
    r175 = __mypyc_self__.__mypyc_generator_attribute__threshold
    if is_error(r175) goto L198 (error at async_is_beyond_validation_threshold:206) else goto L126
L126:
    r176 = 'error'
    r177 = [r173, r174, r175]
    r178 = load_address r177
    r179 = PyObject_VectorcallMethod(r176, r178, 9223372036854775811, 0)
    if is_error(r179) goto L199 (error at async_is_beyond_validation_threshold:203) else goto L200
L127:
    dec_ref r173
    dec_ref r175
    r180 = box(bool, 0)
    inc_ref r180
    __mypyc_self__.__mypyc_temp__2 = r180; r181 = is_error
    if not r181 goto L128 (error at async_is_beyond_validation_threshold:208) else goto L142 :: bool
L128:
    r182 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__5 = r182; r183 = is_error
    if not r183 goto L139 (error at async_is_beyond_validation_threshold:-1) else goto L129 :: bool
L129:
    r184 = builtins :: module
    r185 = 'Exception'
    r186 = CPyObject_GetAttr(r184, r185)
    if is_error(r186) goto L139 (error at async_is_beyond_validation_threshold:209) else goto L130
L130:
    r187 = CPy_ExceptionMatches(r186)
    dec_ref r186
    if r187 goto L131 else goto L137 :: bool
L131:
    r188 = CPy_GetExcValue()
    __mypyc_self__.__mypyc_generator_attribute__e = r188; r189 = is_error
    if not r189 goto L139 (error at async_is_beyond_validation_threshold:209) else goto L132 :: bool
L132:
    r190 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r190) goto L139 (error at async_is_beyond_validation_threshold:210) else goto L133
L133:
    r191 = __mypyc_self__.__mypyc_generator_attribute__e
    if is_error(r191) goto L201 (error at async_is_beyond_validation_threshold:210) else goto L134
L134:
    r192 = _error_log(r190, r191)
    dec_ref r190
    dec_ref r191
    if is_error(r192) goto L139 (error at async_is_beyond_validation_threshold:210) else goto L135
L135:
    r193 = box(bool, 0)
    r194 = __mypyc_self__.__mypyc_temp__5
    if is_error(r194) goto L139 (error at async_is_beyond_validation_threshold:-1) else goto L136
L136:
    CPy_RestoreExcInfo(r194)
    dec_ref r194
    inc_ref r193
    __mypyc_self__.__mypyc_temp__2 = r193; r195 = is_error
    if not r195 goto L139 (error at async_is_beyond_validation_threshold:211) else goto L142 :: bool
L137:
    CPy_Reraise()
    if not 0 goto L139 else goto L138 :: bool
L138:
    unreachable
L139:
    r196 = __mypyc_self__.__mypyc_temp__5
    if is_error(r196) goto L143 (error at async_is_beyond_validation_threshold:-1) else goto L140
L140:
    CPy_RestoreExcInfo(r196)
    dec_ref r196
    r197 = CPy_KeepPropagating()
    if not r197 goto L143 else goto L141 :: bool
L141:
    unreachable
L142:
    r198 = <error> :: tuple[object, object, object]
    r199 = r198
    goto L145
L143:
    r200 = <error> :: object
    __mypyc_self__.__mypyc_temp__2 = r200; r201 = is_error
    if not r201 goto L171 (error at async_is_beyond_validation_threshold:-1) else goto L144 :: bool
L144:
    r202 = CPy_CatchError()
    r199 = r202
L145:
    r203 = __mypyc_self__.__mypyc_generator_attribute__cache_allowed_requests
    if is_error(r203) goto L157 (error at async_is_beyond_validation_threshold:213) else goto L146
L146:
    r204 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r204) goto L157 (error at async_is_beyond_validation_threshold:213) else goto L147
L147:
    r205 = 'cache_allowed_requests'
    r206 = box(bool, r203)
    r207 = PyObject_SetAttr(r204, r205, r206)
    dec_ref r204
    r208 = r207 >= 0 :: signed
    if not r208 goto L157 (error at async_is_beyond_validation_threshold:213) else goto L148 :: bool
L148:
    if is_error(r199) goto L151 else goto L149
L149:
    CPy_Reraise()
    if not 0 goto L157 else goto L202 :: bool
L150:
    unreachable
L151:
    r209 = __mypyc_self__.__mypyc_temp__2
    if is_error(r209) goto L161 else goto L152
L152:
    __mypyc_self__.__mypyc_next_label__ = -1
L153:
    if is_error(stop_iter_ptr) goto L154 else goto L156
L154:
    CPyGen_SetStopIterationValue(r209)
    dec_ref r209
    if not 0 goto L171 else goto L155 :: bool
L155:
    unreachable
L156:
    set_mem stop_iter_ptr, r209 :: builtins.object*
    return 0
L157:
    if is_error(r199) goto L159 else goto L158
L158:
    CPy_RestoreExcInfo(r199)
    xdec_ref r199
L159:
    r211 = CPy_KeepPropagating()
    if not r211 goto L171 else goto L160 :: bool
L160:
    unreachable
L161:
    r212 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L162:
    if is_error(stop_iter_ptr) goto L163 else goto L165
L163:
    CPyGen_SetStopIterationValue(r212)
    if not 0 goto L171 else goto L164 :: bool
L164:
    unreachable
L165:
    inc_ref r212
    set_mem stop_iter_ptr, r212 :: builtins.object*
    return 0
L166:
    r214 = r4 == 0
    if r214 goto L203 else goto L167 :: bool
L167:
    r215 = r4 == 1
    if r215 goto L204 else goto L205 :: bool
L168:
    r216 = r4 == 2
    if r216 goto L82 else goto L206 :: bool
L169:
    r217 = raise StopIteration
    if not r217 goto L171 (error at async_is_beyond_validation_threshold:174) else goto L170 :: bool
L170:
    unreachable
L171:
    r218 = <error> :: object
    return r218
L172:
    dec_ref r26
    goto L128
L173:
    dec_ref r26
    dec_ref r32
    goto L128
L174:
    dec_ref r26
    dec_ref r33
    goto L128
L175:
    dec_ref r47
    goto L128
L176:
    xdec_ref r1
    goto L33
L177:
    xdec_ref r1
    goto L32
L178:
    xdec_ref r1
    goto L42
L179:
    dec_ref r50
    goto L42
L180:
    dec_ref r47
    goto L42
L181:
    dec_ref arg
    goto L128
L182:
    dec_ref r68
    goto L128
L183:
    dec_ref r68
    dec_ref r73
    goto L128
L184:
    dec_ref r87
    goto L67
L185:
    dec_ref r92
    goto L128
L186:
    dec_ref r92
    dec_ref r94
    goto L128
L187:
    dec_ref r92
    dec_ref r101
    goto L128
L188:
    dec_ref r92
    dec_ref r102
    goto L128
L189:
    dec_ref r116
    goto L128
L190:
    xdec_ref r3
    goto L85
L191:
    xdec_ref r3
    goto L84
L192:
    xdec_ref r3
    goto L94
L193:
    dec_ref r119
    goto L94
L194:
    dec_ref r116
    goto L94
L195:
    dec_ref arg
    goto L128
L196:
    dec_ref r141
    goto L128
L197:
    dec_ref r151 :: int
    goto L128
L198:
    dec_ref r173
    goto L128
L199:
    dec_ref r173
    dec_ref r175
    goto L128
L200:
    dec_ref r179
    goto L127
L201:
    dec_ref r190
    goto L139
L202:
    xdec_ref r199
    goto L150
L203:
    xdec_ref r1
    xdec_ref r3
    goto L1
L204:
    xdec_ref r3
    goto L30
L205:
    xdec_ref r1
    goto L168
L206:
    xdec_ref r3
    goto L169

def async_is_beyond_validation_threshold_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_is_beyond_validation_threshold_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_is_beyond_validation_threshold_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_is_beyond_validation_threshold_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_is_beyond_validation_threshold_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_is_beyond_validation_threshold_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = async_is_beyond_validation_threshold_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def async_is_beyond_validation_threshold_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def async_is_beyond_validation_threshold_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_is_beyond_validation_threshold(provider, blocknum, block_timestamp):
    provider :: object
    blocknum, block_timestamp :: union[int, None]
    r0, r1 :: object
    r2 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r3, r4, r5, r6 :: bool
    r7 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
L0:
    if is_error(blocknum) goto L1 else goto L10
L1:
    r0 = box(None, 1)
    inc_ref r0
    blocknum = r0
L2:
    if is_error(block_timestamp) goto L3 else goto L11
L3:
    r1 = box(None, 1)
    inc_ref r1
    block_timestamp = r1
L4:
    r2 = async_is_beyond_validation_threshold_gen()
    if is_error(r2) goto L12 (error at async_is_beyond_validation_threshold:174) else goto L5
L5:
    r2.__mypyc_next_label__ = 0
    inc_ref provider
    r2.__mypyc_generator_attribute__provider = provider; r4 = is_error
    if not r4 goto L13 (error at async_is_beyond_validation_threshold:174) else goto L6 :: bool
L6:
    r2.__mypyc_generator_attribute__blocknum = blocknum; r5 = is_error
    if not r5 goto L14 (error at async_is_beyond_validation_threshold:174) else goto L7 :: bool
L7:
    r2.__mypyc_generator_attribute__block_timestamp = block_timestamp; r6 = is_error
    if not r6 goto L15 (error at async_is_beyond_validation_threshold:174) else goto L8 :: bool
L8:
    return r2
L9:
    r7 = <error> :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    return r7
L10:
    inc_ref blocknum
    goto L2
L11:
    inc_ref block_timestamp
    goto L4
L12:
    dec_ref blocknum
    dec_ref block_timestamp
    goto L9
L13:
    dec_ref blocknum
    dec_ref block_timestamp
    dec_ref r2
    goto L9
L14:
    dec_ref block_timestamp
    dec_ref r2
    goto L9
L15:
    dec_ref r2
    goto L9

def async_validate_from_block_id_in_params_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7, r8, r9 :: object
    r10 :: bool
    r11 :: object
    r12 :: str
    r13 :: object
    r14 :: i32
    r15 :: bit
    r16 :: bool
    r17 :: object
    r18 :: bool
    r19, r20, r21 :: object
    r22 :: object[2]
    r23 :: object_ptr
    r24 :: object
    r25 :: int
    r26 :: bool
    r27 :: object
    r28 :: int
    r29 :: object
    r30 :: union[int, None]
    r31 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r32 :: bool
    r33 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r34, r35 :: object
    r36 :: object_ptr
    r37 :: object
    r38 :: bit
    r39 :: object
    r40 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r41 :: bool
    r42 :: object
    r43 :: bool
    r44 :: object
    r45 :: bit
    r46 :: tuple[object, object, object]
    r47 :: bool
    r48 :: object_ptr
    r49 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r50 :: bool
    r51, r52, r53 :: tuple[object, object, object]
    r54 :: bit
    r55 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r56, r57 :: object
    r58 :: bool
    r59 :: object
    r60 :: bool
    r61, r62 :: bit
    r63 :: bool
    r64 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    xdec_ref r1
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L56
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L60 (error at async_validate_from_block_id_in_params:216) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = __mypyc_self__.__mypyc_generator_attribute__params
    if is_error(r7) goto L60 (error at async_validate_from_block_id_in_params:221) else goto L5
L5:
    r8 = object 0
    r9 = PyObject_GetItem(r7, r8)
    dec_ref r7
    if is_error(r9) goto L60 (error at async_validate_from_block_id_in_params:221) else goto L6
L6:
    __mypyc_self__.__mypyc_generator_attribute__block_id = r9; r10 = is_error
    if not r10 goto L60 (error at async_validate_from_block_id_in_params:221) else goto L7 :: bool
L7:
    r11 = __mypyc_self__.__mypyc_generator_attribute__block_id
    if is_error(r11) goto L60 (error at async_validate_from_block_id_in_params:222) else goto L8
L8:
    r12 = 'earliest'
    r13 = PyObject_RichCompare(r11, r12, 2)
    dec_ref r11
    if is_error(r13) goto L60 (error at async_validate_from_block_id_in_params:222) else goto L9
L9:
    r14 = PyObject_IsTrue(r13)
    dec_ref r13
    r15 = r14 >= 0 :: signed
    if not r15 goto L60 (error at async_validate_from_block_id_in_params:222) else goto L10 :: bool
L10:
    r16 = truncate r14: i32 to builtins.bool
    if r16 goto L11 else goto L16 :: bool
L11:
    r17 = box(bool, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L12:
    if is_error(stop_iter_ptr) goto L13 else goto L15
L13:
    CPyGen_SetStopIterationValue(r17)
    if not 0 goto L60 else goto L14 :: bool
L14:
    unreachable
L15:
    inc_ref r17
    set_mem stop_iter_ptr, r17 :: builtins.object*
    return 0
L16:
    r19 = __mypyc_self__.__mypyc_generator_attribute__block_id
    if is_error(r19) goto L60 (error at async_validate_from_block_id_in_params:226) else goto L17
L17:
    r20 = load_address PyLong_Type
    r21 = object 16
    r22 = [r19, r21]
    r23 = load_address r22
    r24 = PyObject_Vectorcall(r20, r23, 2, 0)
    if is_error(r24) goto L61 (error at async_validate_from_block_id_in_params:226) else goto L18
L18:
    dec_ref r19
    r25 = unbox(int, r24)
    dec_ref r24
    if is_error(r25) goto L60 (error at async_validate_from_block_id_in_params:226) else goto L19
L19:
    __mypyc_self__.__mypyc_generator_attribute__blocknum = r25; r26 = is_error
    if not r26 goto L60 (error at async_validate_from_block_id_in_params:226) else goto L20 :: bool
L20:
    r27 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r27) goto L60 (error at async_validate_from_block_id_in_params:227) else goto L21
L21:
    r28 = __mypyc_self__.__mypyc_generator_attribute__blocknum
    if is_error(r28) goto L62 (error at async_validate_from_block_id_in_params:227) else goto L22
L22:
    r29 = box(int, r28)
    r30 = <error> :: union[int, None]
    r31 = async_is_beyond_validation_threshold(r27, r29, r30)
    dec_ref r27
    dec_ref r29
    if is_error(r31) goto L60 (error at async_validate_from_block_id_in_params:227) else goto L23
L23:
    __mypyc_self__.__mypyc_temp__6 = r31; r32 = is_error
    if not r32 goto L60 (error at async_validate_from_block_id_in_params:-1) else goto L24 :: bool
L24:
    r33 = __mypyc_self__.__mypyc_temp__6
    if is_error(r33) goto L60 (error at async_validate_from_block_id_in_params:-1) else goto L25
L25:
    r34 = load_address _Py_NoneStruct
    r35 = <error> :: object
    r1 = r35
    r36 = load_address r1
    r37 = r33.__mypyc_generator_helper__(r34, r34, r34, r34, r36)
    dec_ref r33
    if is_error(r37) goto L26 else goto L63
L26:
    r38 = r1 != 0
    if not r38 goto L64 (error at async_validate_from_block_id_in_params:-1) else goto L27 :: bool
L27:
    r39 = r1
    r40 = <error> :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    __mypyc_self__.__mypyc_temp__6 = r40; r41 = is_error
    if not r41 goto L65 (error at async_validate_from_block_id_in_params:227) else goto L50 :: bool
L28:
    r42 = r37
L29:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r42
L30:
    r44 = load_address _Py_NoneStruct
    r45 = type != r44
    if r45 goto L31 else goto L66 :: bool
L31:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L34 (error at async_validate_from_block_id_in_params:227) else goto L67 :: bool
L32:
    unreachable
L33:
    inc_ref arg
    goto L45
L34:
    r46 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__7 = r46; r47 = is_error
    if not r47 goto L68 (error at async_validate_from_block_id_in_params:-1) else goto L35 :: bool
L35:
    r48 = load_address r3
    r49 = __mypyc_self__.__mypyc_temp__6
    if is_error(r49) goto L68 (error at async_validate_from_block_id_in_params:-1) else goto L36
L36:
    r50 = CPy_YieldFromErrorHandle(r49, r48)
    dec_ref r49
    if is_error(r50) goto L68 (error at async_validate_from_block_id_in_params:227) else goto L37
L37:
    if r50 goto L40 else goto L38 :: bool
L38:
    r42 = r3
    r51 = __mypyc_self__.__mypyc_temp__7
    if is_error(r51) goto L69 (error at async_validate_from_block_id_in_params:-1) else goto L39
L39:
    CPy_RestoreExcInfo(r51)
    dec_ref r51
    goto L29
L40:
    r39 = r3
    r52 = __mypyc_self__.__mypyc_temp__7
    if is_error(r52) goto L70 (error at async_validate_from_block_id_in_params:-1) else goto L41
L41:
    CPy_RestoreExcInfo(r52)
    dec_ref r52
    goto L50
L42:
    r53 = __mypyc_self__.__mypyc_temp__7
    if is_error(r53) goto L60 (error at async_validate_from_block_id_in_params:-1) else goto L43
L43:
    CPy_RestoreExcInfo(r53)
    dec_ref r53
    r54 = CPy_KeepPropagating()
    if not r54 goto L60 else goto L44 :: bool
L44:
    unreachable
L45:
    r55 = __mypyc_self__.__mypyc_temp__6
    if is_error(r55) goto L71 (error at async_validate_from_block_id_in_params:-1) else goto L46
L46:
    r56 = CPyIter_Send(r55, arg)
    dec_ref r55
    dec_ref arg
    if is_error(r56) goto L48 else goto L47
L47:
    r42 = r56
    goto L29
L48:
    r57 = CPy_FetchStopIterationValue()
    if is_error(r57) goto L60 (error at async_validate_from_block_id_in_params:227) else goto L49
L49:
    r39 = r57
L50:
    r58 = unbox(bool, r39)
    dec_ref r39
    if is_error(r58) goto L60 (error at async_validate_from_block_id_in_params:227) else goto L51
L51:
    r59 = box(bool, r58)
    __mypyc_self__.__mypyc_next_label__ = -1
L52:
    if is_error(stop_iter_ptr) goto L53 else goto L55
L53:
    CPyGen_SetStopIterationValue(r59)
    if not 0 goto L60 else goto L54 :: bool
L54:
    unreachable
L55:
    inc_ref r59
    set_mem stop_iter_ptr, r59 :: builtins.object*
    return 0
L56:
    r61 = r4 == 0
    if r61 goto L72 else goto L57 :: bool
L57:
    r62 = r4 == 1
    if r62 goto L30 else goto L73 :: bool
L58:
    r63 = raise StopIteration
    if not r63 goto L60 (error at async_validate_from_block_id_in_params:216) else goto L59 :: bool
L59:
    unreachable
L60:
    r64 = <error> :: object
    return r64
L61:
    dec_ref r19
    goto L60
L62:
    dec_ref r27
    goto L60
L63:
    xdec_ref r1
    goto L28
L64:
    xdec_ref r1
    goto L60
L65:
    dec_ref r39
    goto L60
L66:
    xdec_ref r3
    goto L33
L67:
    xdec_ref r3
    goto L32
L68:
    xdec_ref r3
    goto L42
L69:
    dec_ref r42
    goto L42
L70:
    dec_ref r39
    goto L42
L71:
    dec_ref arg
    goto L60
L72:
    xdec_ref r3
    goto L1
L73:
    xdec_ref r3
    goto L58

def async_validate_from_block_id_in_params_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_validate_from_block_id_in_params_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_validate_from_block_id_in_params_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_validate_from_block_id_in_params_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_validate_from_block_id_in_params_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_validate_from_block_id_in_params_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = async_validate_from_block_id_in_params_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def async_validate_from_block_id_in_params_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def async_validate_from_block_id_in_params_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_validate_from_block_id_in_params(provider, params, _result):
    provider, params :: object
    _result :: dict
    r0 :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
    r1, r2, r3, r4 :: bool
    r5 :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
L0:
    r0 = async_validate_from_block_id_in_params_gen()
    if is_error(r0) goto L5 (error at async_validate_from_block_id_in_params:216) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref provider
    r0.__mypyc_generator_attribute__provider = provider; r2 = is_error
    if not r2 goto L6 (error at async_validate_from_block_id_in_params:216) else goto L2 :: bool
L2:
    inc_ref params
    r0.__mypyc_generator_attribute__params = params; r3 = is_error
    if not r3 goto L6 (error at async_validate_from_block_id_in_params:216) else goto L3 :: bool
L3:
    inc_ref _result
    r0.__mypyc_generator_attribute___result = _result; r4 = is_error
    if not r4 goto L6 (error at async_validate_from_block_id_in_params:216) else goto L4 :: bool
L4:
    return r0
L5:
    r5 = <error> :: faster_web3._utils.caching.request_caching_validation.async_validate_from_block_id_in_params_gen
    return r5
L6:
    dec_ref r0
    goto L5

def async_validate_from_blocknum_in_result_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3, r4, r5, r6, r7, r8, r9 :: object
    r10 :: i32
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: str
    r15 :: object
    r16, r17 :: bool
    r18 :: object
    r19 :: str
    r20 :: object
    r21 :: i32
    r22 :: bit
    r23 :: str
    r24 :: dict
    r25 :: i32
    r26 :: bit
    r27 :: bool
    r28 :: dict
    r29 :: str
    r30 :: object
    r31 :: bool
    r32 :: object
    r33 :: str
    r34 :: union[object, None]
    r35 :: list
    r36 :: object
    r37, r38, r39 :: ptr
    r40 :: str
    r41 :: object[3]
    r42 :: object_ptr
    r43, r44 :: object
    r45 :: bool
    r46, r47, r48, r49, r50 :: object
    r51 :: bool
    r52 :: object
    r53 :: bool
    r54 :: object
    r55 :: bit
    r56 :: tuple[object, object, object]
    r57 :: bool
    r58 :: object_ptr
    r59 :: object
    r60 :: bool
    r61, r62, r63 :: tuple[object, object, object]
    r64 :: bit
    r65, r66, r67 :: object
    r68 :: dict
    r69 :: bool
    r70 :: object
    r71 :: union[object, None]
    r72, r73 :: object
    r74 :: object[2]
    r75 :: object_ptr
    r76 :: object
    r77 :: int
    r78 :: dict
    r79 :: str
    r80 :: object
    r81 :: str
    r82, r83, r84 :: object
    r85 :: object[2]
    r86 :: object_ptr
    r87 :: object
    r88 :: int
    r89, r90 :: object
    r91 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r92 :: bool
    r93 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r94, r95 :: object
    r96 :: object_ptr
    r97 :: object
    r98 :: bit
    r99 :: object
    r100 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r101 :: bool
    r102 :: object
    r103 :: bool
    r104 :: object
    r105 :: bit
    r106 :: tuple[object, object, object]
    r107 :: bool
    r108 :: object_ptr
    r109 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r110 :: bool
    r111, r112, r113 :: tuple[object, object, object]
    r114 :: bit
    r115 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r116, r117 :: object
    r118 :: bool
    r119 :: object
    r120 :: bool
    r121 :: str
    r122 :: dict
    r123 :: i32
    r124 :: bit
    r125 :: bool
    r126 :: object
    r127 :: dict
    r128 :: str
    r129, r130, r131 :: object
    r132 :: object[2]
    r133 :: object_ptr
    r134 :: object
    r135 :: int
    r136 :: dict
    r137 :: str
    r138, r139, r140 :: object
    r141 :: object[2]
    r142 :: object_ptr
    r143 :: object
    r144 :: int
    r145, r146 :: object
    r147 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r148 :: bool
    r149 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r150, r151 :: object
    r152 :: object_ptr
    r153 :: object
    r154 :: bit
    r155 :: object
    r156 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r157 :: bool
    r158 :: object
    r159 :: bool
    r160 :: object
    r161 :: bit
    r162 :: tuple[object, object, object]
    r163 :: bool
    r164 :: object_ptr
    r165 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r166 :: bool
    r167, r168, r169 :: tuple[object, object, object]
    r170 :: bit
    r171 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r172, r173 :: object
    r174 :: bool
    r175 :: object
    r176 :: bool
    r177 :: object
    r178 :: str
    r179 :: object
    r180 :: str
    r181 :: dict
    r182 :: str
    r183 :: object[3]
    r184 :: object_ptr
    r185, r186 :: object
    r187 :: bool
    r188 :: tuple[object, object, object]
    r189 :: bool
    r190 :: object
    r191 :: str
    r192 :: object
    r193 :: bit
    r194 :: object
    r195 :: bool
    r196, r197 :: object
    r198 :: None
    r199 :: object
    r200 :: tuple[object, object, object]
    r201 :: bool
    r202 :: tuple[object, object, object]
    r203 :: bit
    r204, r205 :: tuple[object, object, object]
    r206 :: object
    r207 :: bool
    r208 :: tuple[object, object, object]
    r209 :: bool
    r210 :: object
    r211 :: str
    r212 :: object
    r213 :: i32
    r214 :: bit
    r215 :: object
    r216 :: bool
    r217 :: bit
    r218 :: object
    r219 :: bool
    r220, r221, r222, r223 :: bit
    r224 :: bool
    r225 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = <error> :: object
    r3 = r2
    xdec_ref r3
    r4 = <error> :: object
    r5 = r4
    r6 = <error> :: object
    r7 = r6
    xdec_ref r7
    r8 = <error> :: object
    r9 = r8
    r10 = __mypyc_self__.__mypyc_next_label__
    goto L174
L1:
    r11 = load_address _Py_NoneStruct
    r12 = type != r11
    if r12 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L180 (error at async_validate_from_blocknum_in_result:230) else goto L3 :: bool
L3:
    unreachable
L4:
    r13 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r13) goto L180 (error at async_validate_from_blocknum_in_result:235) else goto L5
L5:
    r14 = 'cache_allowed_requests'
    r15 = CPyObject_GetAttr(r13, r14)
    dec_ref r13
    if is_error(r15) goto L180 (error at async_validate_from_blocknum_in_result:235) else goto L6
L6:
    r16 = unbox(bool, r15)
    dec_ref r15
    if is_error(r16) goto L180 (error at async_validate_from_blocknum_in_result:235) else goto L7
L7:
    __mypyc_self__.__mypyc_generator_attribute__cache_allowed_requests = r16; r17 = is_error
    if not r17 goto L180 (error at async_validate_from_blocknum_in_result:235) else goto L8 :: bool
L8:
    r18 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r18) goto L136 (error at async_validate_from_blocknum_in_result:238) else goto L9
L9:
    r19 = 'cache_allowed_requests'
    r20 = box(bool, 0)
    r21 = PyObject_SetAttr(r18, r19, r20)
    dec_ref r18
    r22 = r21 >= 0 :: signed
    if not r22 goto L136 (error at async_validate_from_blocknum_in_result:238) else goto L10 :: bool
L10:
    r23 = 'blockNumber'
    r24 = __mypyc_self__.__mypyc_generator_attribute__result
    if is_error(r24) goto L136 (error at async_validate_from_blocknum_in_result:241) else goto L11
L11:
    r25 = PyDict_Contains(r24, r23)
    dec_ref r24
    r26 = r25 >= 0 :: signed
    if not r26 goto L136 (error at async_validate_from_blocknum_in_result:241) else goto L12 :: bool
L12:
    r27 = truncate r25: i32 to builtins.bool
    if r27 goto L13 else goto L89 :: bool
L13:
    r28 = __mypyc_self__.__mypyc_generator_attribute__result
    if is_error(r28) goto L136 (error at async_validate_from_blocknum_in_result:242) else goto L14
L14:
    r29 = 'blockNumber'
    r30 = CPyDict_GetWithNone(r28, r29)
    dec_ref r28
    if is_error(r30) goto L136 (error at async_validate_from_blocknum_in_result:242) else goto L15
L15:
    __mypyc_self__.__mypyc_generator_attribute__blocknum = r30; r31 = is_error
    if not r31 goto L136 (error at async_validate_from_blocknum_in_result:242) else goto L16 :: bool
L16:
    r32 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r32) goto L136 (error at async_validate_from_blocknum_in_result:244) else goto L17
L17:
    r33 = 'eth_getBlockByNumber'
    r34 = __mypyc_self__.__mypyc_generator_attribute__blocknum
    if is_error(r34) goto L181 (error at async_validate_from_blocknum_in_result:245) else goto L18
L18:
    r35 = PyList_New(2)
    if is_error(r35) goto L182 (error at async_validate_from_blocknum_in_result:245) else goto L19
L19:
    r36 = box(bool, 0)
    r37 = get_element_ptr r35 ob_item :: PyListObject
    r38 = load_mem r37 :: ptr*
    set_mem r38, r34 :: builtins.object*
    inc_ref r36
    r39 = r38 + 8
    set_mem r39, r36 :: builtins.object*
    r40 = 'make_request'
    r41 = [r32, r33, r35]
    r42 = load_address r41
    r43 = PyObject_VectorcallMethod(r40, r42, 9223372036854775811, 0)
    if is_error(r43) goto L183 (error at async_validate_from_blocknum_in_result:244) else goto L20
L20:
    dec_ref r32
    dec_ref r35
    r44 = CPy_GetCoro(r43)
    dec_ref r43
    if is_error(r44) goto L136 (error at async_validate_from_blocknum_in_result:244) else goto L21
L21:
    __mypyc_self__.__mypyc_temp__8 = r44; r45 = is_error
    if not r45 goto L136 (error at async_validate_from_blocknum_in_result:-1) else goto L22 :: bool
L22:
    r46 = __mypyc_self__.__mypyc_temp__8
    if is_error(r46) goto L136 (error at async_validate_from_blocknum_in_result:-1) else goto L23
L23:
    r47 = CPyIter_Next(r46)
    dec_ref r46
    if is_error(r47) goto L24 else goto L26
L24:
    r48 = CPy_FetchStopIterationValue()
    if is_error(r48) goto L136 (error at async_validate_from_blocknum_in_result:244) else goto L25
L25:
    r49 = r48
    r50 = <error> :: object
    __mypyc_self__.__mypyc_temp__8 = r50; r51 = is_error
    if not r51 goto L184 (error at async_validate_from_blocknum_in_result:244) else goto L48 :: bool
L26:
    r52 = r47
L27:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r52
L28:
    r54 = load_address _Py_NoneStruct
    r55 = type != r54
    if r55 goto L29 else goto L185 :: bool
L29:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L32 (error at async_validate_from_blocknum_in_result:244) else goto L186 :: bool
L30:
    unreachable
L31:
    inc_ref arg
    goto L43
L32:
    r56 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__9 = r56; r57 = is_error
    if not r57 goto L187 (error at async_validate_from_blocknum_in_result:-1) else goto L33 :: bool
L33:
    r58 = load_address r1
    r59 = __mypyc_self__.__mypyc_temp__8
    if is_error(r59) goto L187 (error at async_validate_from_blocknum_in_result:-1) else goto L34
L34:
    r60 = CPy_YieldFromErrorHandle(r59, r58)
    dec_ref r59
    if is_error(r60) goto L187 (error at async_validate_from_blocknum_in_result:244) else goto L35
L35:
    if r60 goto L38 else goto L36 :: bool
L36:
    r52 = r1
    r61 = __mypyc_self__.__mypyc_temp__9
    if is_error(r61) goto L188 (error at async_validate_from_blocknum_in_result:-1) else goto L37
L37:
    CPy_RestoreExcInfo(r61)
    dec_ref r61
    goto L27
L38:
    r49 = r1
    r62 = __mypyc_self__.__mypyc_temp__9
    if is_error(r62) goto L189 (error at async_validate_from_blocknum_in_result:-1) else goto L39
L39:
    CPy_RestoreExcInfo(r62)
    dec_ref r62
    goto L48
L40:
    r63 = __mypyc_self__.__mypyc_temp__9
    if is_error(r63) goto L136 (error at async_validate_from_blocknum_in_result:-1) else goto L41
L41:
    CPy_RestoreExcInfo(r63)
    dec_ref r63
    r64 = CPy_KeepPropagating()
    if not r64 goto L136 else goto L42 :: bool
L42:
    unreachable
L43:
    r65 = __mypyc_self__.__mypyc_temp__8
    if is_error(r65) goto L190 (error at async_validate_from_blocknum_in_result:-1) else goto L44
L44:
    r66 = CPyIter_Send(r65, arg)
    dec_ref r65
    dec_ref arg
    if is_error(r66) goto L46 else goto L45
L45:
    r52 = r66
    goto L27
L46:
    r67 = CPy_FetchStopIterationValue()
    if is_error(r67) goto L136 (error at async_validate_from_blocknum_in_result:244) else goto L47
L47:
    r49 = r67
L48:
    r68 = cast(dict, r49)
    if is_error(r68) goto L136 (error at async_validate_from_blocknum_in_result:244) else goto L49
L49:
    __mypyc_self__.__mypyc_generator_attribute__block = r68; r69 = is_error
    if not r69 goto L136 (error at async_validate_from_blocknum_in_result:244) else goto L50 :: bool
L50:
    r70 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r70) goto L136 (error at async_validate_from_blocknum_in_result:248) else goto L51
L51:
    r71 = __mypyc_self__.__mypyc_generator_attribute__blocknum
    if is_error(r71) goto L191 (error at async_validate_from_blocknum_in_result:249) else goto L52
L52:
    r72 = load_address PyLong_Type
    r73 = object 16
    r74 = [r71, r73]
    r75 = load_address r74
    r76 = PyObject_Vectorcall(r72, r75, 2, 0)
    if is_error(r76) goto L192 (error at async_validate_from_blocknum_in_result:249) else goto L53
L53:
    dec_ref r71
    r77 = unbox(int, r76)
    dec_ref r76
    if is_error(r77) goto L191 (error at async_validate_from_blocknum_in_result:249) else goto L54
L54:
    r78 = __mypyc_self__.__mypyc_generator_attribute__block
    if is_error(r78) goto L193 (error at async_validate_from_blocknum_in_result:250) else goto L55
L55:
    r79 = 'result'
    r80 = CPyDict_GetItem(r78, r79)
    dec_ref r78
    if is_error(r80) goto L193 (error at async_validate_from_blocknum_in_result:250) else goto L56
L56:
    r81 = 'timestamp'
    r82 = PyObject_GetItem(r80, r81)
    dec_ref r80
    if is_error(r82) goto L193 (error at async_validate_from_blocknum_in_result:250) else goto L57
L57:
    r83 = load_address PyLong_Type
    r84 = object 16
    r85 = [r82, r84]
    r86 = load_address r85
    r87 = PyObject_Vectorcall(r83, r86, 2, 0)
    if is_error(r87) goto L194 (error at async_validate_from_blocknum_in_result:250) else goto L58
L58:
    dec_ref r82
    r88 = unbox(int, r87)
    dec_ref r87
    if is_error(r88) goto L193 (error at async_validate_from_blocknum_in_result:250) else goto L59
L59:
    r89 = box(int, r77)
    r90 = box(int, r88)
    r91 = async_is_beyond_validation_threshold(r70, r89, r90)
    dec_ref r70
    dec_ref r89
    dec_ref r90
    if is_error(r91) goto L136 (error at async_validate_from_blocknum_in_result:247) else goto L60
L60:
    __mypyc_self__.__mypyc_temp__10 = r91; r92 = is_error
    if not r92 goto L136 (error at async_validate_from_blocknum_in_result:-1) else goto L61 :: bool
L61:
    r93 = __mypyc_self__.__mypyc_temp__10
    if is_error(r93) goto L136 (error at async_validate_from_blocknum_in_result:-1) else goto L62
L62:
    r94 = load_address _Py_NoneStruct
    r95 = <error> :: object
    r3 = r95
    r96 = load_address r3
    r97 = r93.__mypyc_generator_helper__(r94, r94, r94, r94, r96)
    dec_ref r93
    if is_error(r97) goto L63 else goto L195
L63:
    r98 = r3 != 0
    if not r98 goto L196 (error at async_validate_from_blocknum_in_result:-1) else goto L64 :: bool
L64:
    r99 = r3
    r100 = <error> :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    __mypyc_self__.__mypyc_temp__10 = r100; r101 = is_error
    if not r101 goto L197 (error at async_validate_from_blocknum_in_result:247) else goto L87 :: bool
L65:
    r102 = r97
L66:
    __mypyc_self__.__mypyc_next_label__ = 2
    return r102
L67:
    r104 = load_address _Py_NoneStruct
    r105 = type != r104
    if r105 goto L68 else goto L198 :: bool
L68:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L71 (error at async_validate_from_blocknum_in_result:247) else goto L199 :: bool
L69:
    unreachable
L70:
    inc_ref arg
    goto L82
L71:
    r106 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__11 = r106; r107 = is_error
    if not r107 goto L200 (error at async_validate_from_blocknum_in_result:-1) else goto L72 :: bool
L72:
    r108 = load_address r5
    r109 = __mypyc_self__.__mypyc_temp__10
    if is_error(r109) goto L200 (error at async_validate_from_blocknum_in_result:-1) else goto L73
L73:
    r110 = CPy_YieldFromErrorHandle(r109, r108)
    dec_ref r109
    if is_error(r110) goto L200 (error at async_validate_from_blocknum_in_result:247) else goto L74
L74:
    if r110 goto L77 else goto L75 :: bool
L75:
    r102 = r5
    r111 = __mypyc_self__.__mypyc_temp__11
    if is_error(r111) goto L201 (error at async_validate_from_blocknum_in_result:-1) else goto L76
L76:
    CPy_RestoreExcInfo(r111)
    dec_ref r111
    goto L66
L77:
    r99 = r5
    r112 = __mypyc_self__.__mypyc_temp__11
    if is_error(r112) goto L202 (error at async_validate_from_blocknum_in_result:-1) else goto L78
L78:
    CPy_RestoreExcInfo(r112)
    dec_ref r112
    goto L87
L79:
    r113 = __mypyc_self__.__mypyc_temp__11
    if is_error(r113) goto L136 (error at async_validate_from_blocknum_in_result:-1) else goto L80
L80:
    CPy_RestoreExcInfo(r113)
    dec_ref r113
    r114 = CPy_KeepPropagating()
    if not r114 goto L136 else goto L81 :: bool
L81:
    unreachable
L82:
    r115 = __mypyc_self__.__mypyc_temp__10
    if is_error(r115) goto L203 (error at async_validate_from_blocknum_in_result:-1) else goto L83
L83:
    r116 = CPyIter_Send(r115, arg)
    dec_ref r115
    dec_ref arg
    if is_error(r116) goto L85 else goto L84
L84:
    r102 = r116
    goto L66
L85:
    r117 = CPy_FetchStopIterationValue()
    if is_error(r117) goto L136 (error at async_validate_from_blocknum_in_result:247) else goto L86
L86:
    r99 = r117
L87:
    r118 = unbox(bool, r99)
    dec_ref r99
    if is_error(r118) goto L136 (error at async_validate_from_blocknum_in_result:247) else goto L88
L88:
    r119 = box(bool, r118)
    inc_ref r119
    __mypyc_self__.__mypyc_temp__12 = r119; r120 = is_error
    if not r120 goto L136 (error at async_validate_from_blocknum_in_result:247) else goto L150 :: bool
L89:
    r121 = 'number'
    r122 = __mypyc_self__.__mypyc_generator_attribute__result
    if is_error(r122) goto L136 (error at async_validate_from_blocknum_in_result:252) else goto L90
L90:
    r123 = PyDict_Contains(r122, r121)
    dec_ref r122
    r124 = r123 >= 0 :: signed
    if not r124 goto L136 (error at async_validate_from_blocknum_in_result:252) else goto L91 :: bool
L91:
    r125 = truncate r123: i32 to builtins.bool
    if r125 goto L92 else goto L131 :: bool
L92:
    r126 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r126) goto L136 (error at async_validate_from_blocknum_in_result:254) else goto L93
L93:
    r127 = __mypyc_self__.__mypyc_generator_attribute__result
    if is_error(r127) goto L204 (error at async_validate_from_blocknum_in_result:255) else goto L94
L94:
    r128 = 'number'
    r129 = CPyDict_GetItem(r127, r128)
    dec_ref r127
    if is_error(r129) goto L204 (error at async_validate_from_blocknum_in_result:255) else goto L95
L95:
    r130 = load_address PyLong_Type
    r131 = object 16
    r132 = [r129, r131]
    r133 = load_address r132
    r134 = PyObject_Vectorcall(r130, r133, 2, 0)
    if is_error(r134) goto L205 (error at async_validate_from_blocknum_in_result:255) else goto L96
L96:
    dec_ref r129
    r135 = unbox(int, r134)
    dec_ref r134
    if is_error(r135) goto L204 (error at async_validate_from_blocknum_in_result:255) else goto L97
L97:
    r136 = __mypyc_self__.__mypyc_generator_attribute__result
    if is_error(r136) goto L206 (error at async_validate_from_blocknum_in_result:256) else goto L98
L98:
    r137 = 'timestamp'
    r138 = CPyDict_GetItem(r136, r137)
    dec_ref r136
    if is_error(r138) goto L206 (error at async_validate_from_blocknum_in_result:256) else goto L99
L99:
    r139 = load_address PyLong_Type
    r140 = object 16
    r141 = [r138, r140]
    r142 = load_address r141
    r143 = PyObject_Vectorcall(r139, r142, 2, 0)
    if is_error(r143) goto L207 (error at async_validate_from_blocknum_in_result:256) else goto L100
L100:
    dec_ref r138
    r144 = unbox(int, r143)
    dec_ref r143
    if is_error(r144) goto L206 (error at async_validate_from_blocknum_in_result:256) else goto L101
L101:
    r145 = box(int, r135)
    r146 = box(int, r144)
    r147 = async_is_beyond_validation_threshold(r126, r145, r146)
    dec_ref r126
    dec_ref r145
    dec_ref r146
    if is_error(r147) goto L136 (error at async_validate_from_blocknum_in_result:253) else goto L102
L102:
    __mypyc_self__.__mypyc_temp__13 = r147; r148 = is_error
    if not r148 goto L136 (error at async_validate_from_blocknum_in_result:-1) else goto L103 :: bool
L103:
    r149 = __mypyc_self__.__mypyc_temp__13
    if is_error(r149) goto L136 (error at async_validate_from_blocknum_in_result:-1) else goto L104
L104:
    r150 = load_address _Py_NoneStruct
    r151 = <error> :: object
    r7 = r151
    r152 = load_address r7
    r153 = r149.__mypyc_generator_helper__(r150, r150, r150, r150, r152)
    dec_ref r149
    if is_error(r153) goto L105 else goto L208
L105:
    r154 = r7 != 0
    if not r154 goto L209 (error at async_validate_from_blocknum_in_result:-1) else goto L106 :: bool
L106:
    r155 = r7
    r156 = <error> :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    __mypyc_self__.__mypyc_temp__13 = r156; r157 = is_error
    if not r157 goto L210 (error at async_validate_from_blocknum_in_result:253) else goto L129 :: bool
L107:
    r158 = r153
L108:
    __mypyc_self__.__mypyc_next_label__ = 3
    return r158
L109:
    r160 = load_address _Py_NoneStruct
    r161 = type != r160
    if r161 goto L110 else goto L211 :: bool
L110:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L113 (error at async_validate_from_blocknum_in_result:253) else goto L212 :: bool
L111:
    unreachable
L112:
    inc_ref arg
    goto L124
L113:
    r162 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__14 = r162; r163 = is_error
    if not r163 goto L213 (error at async_validate_from_blocknum_in_result:-1) else goto L114 :: bool
L114:
    r164 = load_address r9
    r165 = __mypyc_self__.__mypyc_temp__13
    if is_error(r165) goto L213 (error at async_validate_from_blocknum_in_result:-1) else goto L115
L115:
    r166 = CPy_YieldFromErrorHandle(r165, r164)
    dec_ref r165
    if is_error(r166) goto L213 (error at async_validate_from_blocknum_in_result:253) else goto L116
L116:
    if r166 goto L119 else goto L117 :: bool
L117:
    r158 = r9
    r167 = __mypyc_self__.__mypyc_temp__14
    if is_error(r167) goto L214 (error at async_validate_from_blocknum_in_result:-1) else goto L118
L118:
    CPy_RestoreExcInfo(r167)
    dec_ref r167
    goto L108
L119:
    r155 = r9
    r168 = __mypyc_self__.__mypyc_temp__14
    if is_error(r168) goto L215 (error at async_validate_from_blocknum_in_result:-1) else goto L120
L120:
    CPy_RestoreExcInfo(r168)
    dec_ref r168
    goto L129
L121:
    r169 = __mypyc_self__.__mypyc_temp__14
    if is_error(r169) goto L136 (error at async_validate_from_blocknum_in_result:-1) else goto L122
L122:
    CPy_RestoreExcInfo(r169)
    dec_ref r169
    r170 = CPy_KeepPropagating()
    if not r170 goto L136 else goto L123 :: bool
L123:
    unreachable
L124:
    r171 = __mypyc_self__.__mypyc_temp__13
    if is_error(r171) goto L216 (error at async_validate_from_blocknum_in_result:-1) else goto L125
L125:
    r172 = CPyIter_Send(r171, arg)
    dec_ref r171
    dec_ref arg
    if is_error(r172) goto L127 else goto L126
L126:
    r158 = r172
    goto L108
L127:
    r173 = CPy_FetchStopIterationValue()
    if is_error(r173) goto L136 (error at async_validate_from_blocknum_in_result:253) else goto L128
L128:
    r155 = r173
L129:
    r174 = unbox(bool, r155)
    dec_ref r155
    if is_error(r174) goto L136 (error at async_validate_from_blocknum_in_result:253) else goto L130
L130:
    r175 = box(bool, r174)
    inc_ref r175
    __mypyc_self__.__mypyc_temp__12 = r175; r176 = is_error
    if not r176 goto L136 (error at async_validate_from_blocknum_in_result:253) else goto L150 :: bool
L131:
    r177 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r177) goto L136 (error at async_validate_from_blocknum_in_result:259) else goto L132
L132:
    r178 = 'logger'
    r179 = CPyObject_GetAttr(r177, r178)
    dec_ref r177
    if is_error(r179) goto L136 (error at async_validate_from_blocknum_in_result:259) else goto L133
L133:
    r180 = 'Could not find block number in result. This should not have happened. Request not cached.\n    result: %s'
    r181 = __mypyc_self__.__mypyc_generator_attribute__result
    if is_error(r181) goto L217 (error at async_validate_from_blocknum_in_result:262) else goto L134
L134:
    r182 = 'error'
    r183 = [r179, r180, r181]
    r184 = load_address r183
    r185 = PyObject_VectorcallMethod(r182, r184, 9223372036854775811, 0)
    if is_error(r185) goto L218 (error at async_validate_from_blocknum_in_result:259) else goto L219
L135:
    dec_ref r179
    dec_ref r181
    r186 = box(bool, 0)
    inc_ref r186
    __mypyc_self__.__mypyc_temp__12 = r186; r187 = is_error
    if not r187 goto L136 (error at async_validate_from_blocknum_in_result:264) else goto L150 :: bool
L136:
    r188 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__15 = r188; r189 = is_error
    if not r189 goto L147 (error at async_validate_from_blocknum_in_result:-1) else goto L137 :: bool
L137:
    r190 = builtins :: module
    r191 = 'Exception'
    r192 = CPyObject_GetAttr(r190, r191)
    if is_error(r192) goto L147 (error at async_validate_from_blocknum_in_result:265) else goto L138
L138:
    r193 = CPy_ExceptionMatches(r192)
    dec_ref r192
    if r193 goto L139 else goto L145 :: bool
L139:
    r194 = CPy_GetExcValue()
    __mypyc_self__.__mypyc_generator_attribute__e = r194; r195 = is_error
    if not r195 goto L147 (error at async_validate_from_blocknum_in_result:265) else goto L140 :: bool
L140:
    r196 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r196) goto L147 (error at async_validate_from_blocknum_in_result:266) else goto L141
L141:
    r197 = __mypyc_self__.__mypyc_generator_attribute__e
    if is_error(r197) goto L220 (error at async_validate_from_blocknum_in_result:266) else goto L142
L142:
    r198 = _error_log(r196, r197)
    dec_ref r196
    dec_ref r197
    if is_error(r198) goto L147 (error at async_validate_from_blocknum_in_result:266) else goto L143
L143:
    r199 = box(bool, 0)
    r200 = __mypyc_self__.__mypyc_temp__15
    if is_error(r200) goto L147 (error at async_validate_from_blocknum_in_result:-1) else goto L144
L144:
    CPy_RestoreExcInfo(r200)
    dec_ref r200
    inc_ref r199
    __mypyc_self__.__mypyc_temp__12 = r199; r201 = is_error
    if not r201 goto L147 (error at async_validate_from_blocknum_in_result:267) else goto L150 :: bool
L145:
    CPy_Reraise()
    if not 0 goto L147 else goto L146 :: bool
L146:
    unreachable
L147:
    r202 = __mypyc_self__.__mypyc_temp__15
    if is_error(r202) goto L151 (error at async_validate_from_blocknum_in_result:-1) else goto L148
L148:
    CPy_RestoreExcInfo(r202)
    dec_ref r202
    r203 = CPy_KeepPropagating()
    if not r203 goto L151 else goto L149 :: bool
L149:
    unreachable
L150:
    r204 = <error> :: tuple[object, object, object]
    r205 = r204
    goto L153
L151:
    r206 = <error> :: object
    __mypyc_self__.__mypyc_temp__12 = r206; r207 = is_error
    if not r207 goto L180 (error at async_validate_from_blocknum_in_result:-1) else goto L152 :: bool
L152:
    r208 = CPy_CatchError()
    r205 = r208
L153:
    r209 = __mypyc_self__.__mypyc_generator_attribute__cache_allowed_requests
    if is_error(r209) goto L165 (error at async_validate_from_blocknum_in_result:269) else goto L154
L154:
    r210 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r210) goto L165 (error at async_validate_from_blocknum_in_result:269) else goto L155
L155:
    r211 = 'cache_allowed_requests'
    r212 = box(bool, r209)
    r213 = PyObject_SetAttr(r210, r211, r212)
    dec_ref r210
    r214 = r213 >= 0 :: signed
    if not r214 goto L165 (error at async_validate_from_blocknum_in_result:269) else goto L156 :: bool
L156:
    if is_error(r205) goto L159 else goto L157
L157:
    CPy_Reraise()
    if not 0 goto L165 else goto L221 :: bool
L158:
    unreachable
L159:
    r215 = __mypyc_self__.__mypyc_temp__12
    if is_error(r215) goto L169 else goto L160
L160:
    __mypyc_self__.__mypyc_next_label__ = -1
L161:
    if is_error(stop_iter_ptr) goto L162 else goto L164
L162:
    CPyGen_SetStopIterationValue(r215)
    dec_ref r215
    if not 0 goto L180 else goto L163 :: bool
L163:
    unreachable
L164:
    set_mem stop_iter_ptr, r215 :: builtins.object*
    return 0
L165:
    if is_error(r205) goto L167 else goto L166
L166:
    CPy_RestoreExcInfo(r205)
    xdec_ref r205
L167:
    r217 = CPy_KeepPropagating()
    if not r217 goto L180 else goto L168 :: bool
L168:
    unreachable
L169:
    r218 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L170:
    if is_error(stop_iter_ptr) goto L171 else goto L173
L171:
    CPyGen_SetStopIterationValue(r218)
    if not 0 goto L180 else goto L172 :: bool
L172:
    unreachable
L173:
    inc_ref r218
    set_mem stop_iter_ptr, r218 :: builtins.object*
    return 0
L174:
    r220 = r10 == 0
    if r220 goto L222 else goto L175 :: bool
L175:
    r221 = r10 == 1
    if r221 goto L223 else goto L224 :: bool
L176:
    r222 = r10 == 2
    if r222 goto L225 else goto L226 :: bool
L177:
    r223 = r10 == 3
    if r223 goto L109 else goto L227 :: bool
L178:
    r224 = raise StopIteration
    if not r224 goto L180 (error at async_validate_from_blocknum_in_result:230) else goto L179 :: bool
L179:
    unreachable
L180:
    r225 = <error> :: object
    return r225
L181:
    dec_ref r32
    goto L136
L182:
    dec_ref r32
    dec_ref r34
    goto L136
L183:
    dec_ref r32
    dec_ref r35
    goto L136
L184:
    dec_ref r49
    goto L136
L185:
    xdec_ref r1
    goto L31
L186:
    xdec_ref r1
    goto L30
L187:
    xdec_ref r1
    goto L40
L188:
    dec_ref r52
    goto L40
L189:
    dec_ref r49
    goto L40
L190:
    dec_ref arg
    goto L136
L191:
    dec_ref r70
    goto L136
L192:
    dec_ref r70
    dec_ref r71
    goto L136
L193:
    dec_ref r70
    dec_ref r77 :: int
    goto L136
L194:
    dec_ref r70
    dec_ref r77 :: int
    dec_ref r82
    goto L136
L195:
    xdec_ref r3
    goto L65
L196:
    xdec_ref r3
    goto L136
L197:
    dec_ref r99
    goto L136
L198:
    xdec_ref r5
    goto L70
L199:
    xdec_ref r5
    goto L69
L200:
    xdec_ref r5
    goto L79
L201:
    dec_ref r102
    goto L79
L202:
    dec_ref r99
    goto L79
L203:
    dec_ref arg
    goto L136
L204:
    dec_ref r126
    goto L136
L205:
    dec_ref r126
    dec_ref r129
    goto L136
L206:
    dec_ref r126
    dec_ref r135 :: int
    goto L136
L207:
    dec_ref r126
    dec_ref r135 :: int
    dec_ref r138
    goto L136
L208:
    xdec_ref r7
    goto L107
L209:
    xdec_ref r7
    goto L136
L210:
    dec_ref r155
    goto L136
L211:
    xdec_ref r9
    goto L112
L212:
    xdec_ref r9
    goto L111
L213:
    xdec_ref r9
    goto L121
L214:
    dec_ref r158
    goto L121
L215:
    dec_ref r155
    goto L121
L216:
    dec_ref arg
    goto L136
L217:
    dec_ref r179
    goto L136
L218:
    dec_ref r179
    dec_ref r181
    goto L136
L219:
    dec_ref r185
    goto L135
L220:
    dec_ref r196
    goto L147
L221:
    xdec_ref r205
    goto L158
L222:
    xdec_ref r1
    xdec_ref r5
    xdec_ref r9
    goto L1
L223:
    xdec_ref r5
    xdec_ref r9
    goto L28
L224:
    xdec_ref r1
    goto L176
L225:
    xdec_ref r9
    goto L67
L226:
    xdec_ref r5
    goto L177
L227:
    xdec_ref r9
    goto L178

def async_validate_from_blocknum_in_result_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_validate_from_blocknum_in_result_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_validate_from_blocknum_in_result_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_validate_from_blocknum_in_result_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_validate_from_blocknum_in_result_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_validate_from_blocknum_in_result_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = async_validate_from_blocknum_in_result_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def async_validate_from_blocknum_in_result_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def async_validate_from_blocknum_in_result_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_validate_from_blocknum_in_result(provider, _params, result):
    provider, _params :: object
    result :: dict
    r0 :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
    r1, r2, r3, r4 :: bool
    r5 :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
L0:
    r0 = async_validate_from_blocknum_in_result_gen()
    if is_error(r0) goto L5 (error at async_validate_from_blocknum_in_result:230) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref provider
    r0.__mypyc_generator_attribute__provider = provider; r2 = is_error
    if not r2 goto L6 (error at async_validate_from_blocknum_in_result:230) else goto L2 :: bool
L2:
    inc_ref _params
    r0.__mypyc_generator_attribute___params = _params; r3 = is_error
    if not r3 goto L6 (error at async_validate_from_blocknum_in_result:230) else goto L3 :: bool
L3:
    inc_ref result
    r0.__mypyc_generator_attribute__result = result; r4 = is_error
    if not r4 goto L6 (error at async_validate_from_blocknum_in_result:230) else goto L4 :: bool
L4:
    return r0
L5:
    r5 = <error> :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blocknum_in_result_gen
    return r5
L6:
    dec_ref r0
    goto L5

def async_validate_from_blockhash_in_params_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3, r4, r5 :: object
    r6 :: i32
    r7 :: object
    r8 :: bit
    r9 :: object
    r10 :: str
    r11 :: object
    r12, r13 :: bool
    r14 :: object
    r15 :: str
    r16 :: object
    r17 :: i32
    r18 :: bit
    r19 :: object
    r20 :: str
    r21, r22, r23 :: object
    r24 :: list
    r25 :: object
    r26, r27, r28 :: ptr
    r29 :: str
    r30 :: object[3]
    r31 :: object_ptr
    r32, r33 :: object
    r34 :: bool
    r35, r36, r37, r38, r39 :: object
    r40 :: bool
    r41 :: object
    r42 :: bool
    r43 :: object
    r44 :: bit
    r45 :: tuple[object, object, object]
    r46 :: bool
    r47 :: object_ptr
    r48 :: object
    r49 :: bool
    r50, r51, r52 :: tuple[object, object, object]
    r53 :: bit
    r54, r55, r56 :: object
    r57 :: dict
    r58 :: bool
    r59 :: object
    r60 :: dict
    r61 :: str
    r62 :: object
    r63 :: str
    r64, r65, r66 :: object
    r67 :: object[2]
    r68 :: object_ptr
    r69 :: object
    r70 :: int
    r71 :: dict
    r72 :: str
    r73 :: object
    r74 :: str
    r75, r76, r77 :: object
    r78 :: object[2]
    r79 :: object_ptr
    r80 :: object
    r81 :: int
    r82, r83 :: object
    r84 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r85 :: bool
    r86 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r87, r88 :: object
    r89 :: object_ptr
    r90 :: object
    r91 :: bit
    r92 :: object
    r93 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r94 :: bool
    r95 :: object
    r96 :: bool
    r97 :: object
    r98 :: bit
    r99 :: tuple[object, object, object]
    r100 :: bool
    r101 :: object_ptr
    r102 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r103 :: bool
    r104, r105, r106 :: tuple[object, object, object]
    r107 :: bit
    r108 :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    r109, r110 :: object
    r111 :: bool
    r112 :: object
    r113 :: bool
    r114 :: tuple[object, object, object]
    r115 :: bool
    r116 :: object
    r117 :: str
    r118 :: object
    r119 :: bit
    r120 :: object
    r121 :: bool
    r122, r123 :: object
    r124 :: None
    r125 :: object
    r126 :: tuple[object, object, object]
    r127 :: bool
    r128 :: tuple[object, object, object]
    r129 :: bit
    r130, r131 :: tuple[object, object, object]
    r132 :: object
    r133 :: bool
    r134 :: tuple[object, object, object]
    r135 :: bool
    r136 :: object
    r137 :: str
    r138 :: object
    r139 :: i32
    r140 :: bit
    r141 :: object
    r142 :: bool
    r143 :: bit
    r144 :: object
    r145 :: bool
    r146, r147, r148 :: bit
    r149 :: bool
    r150 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = <error> :: object
    r3 = r2
    xdec_ref r3
    r4 = <error> :: object
    r5 = r4
    r6 = __mypyc_self__.__mypyc_next_label__
    goto L124
L1:
    r7 = load_address _Py_NoneStruct
    r8 = type != r7
    if r8 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L129 (error at async_validate_from_blockhash_in_params:272) else goto L3 :: bool
L3:
    unreachable
L4:
    r9 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r9) goto L129 (error at async_validate_from_blockhash_in_params:275) else goto L5
L5:
    r10 = 'cache_allowed_requests'
    r11 = CPyObject_GetAttr(r9, r10)
    dec_ref r9
    if is_error(r11) goto L129 (error at async_validate_from_blockhash_in_params:275) else goto L6
L6:
    r12 = unbox(bool, r11)
    dec_ref r11
    if is_error(r12) goto L129 (error at async_validate_from_blockhash_in_params:275) else goto L7
L7:
    __mypyc_self__.__mypyc_generator_attribute__cache_allowed_requests = r12; r13 = is_error
    if not r13 goto L129 (error at async_validate_from_blockhash_in_params:275) else goto L8 :: bool
L8:
    r14 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r14) goto L86 (error at async_validate_from_blockhash_in_params:278) else goto L9
L9:
    r15 = 'cache_allowed_requests'
    r16 = box(bool, 0)
    r17 = PyObject_SetAttr(r14, r15, r16)
    dec_ref r14
    r18 = r17 >= 0 :: signed
    if not r18 goto L86 (error at async_validate_from_blockhash_in_params:278) else goto L10 :: bool
L10:
    r19 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r19) goto L86 (error at async_validate_from_blockhash_in_params:281) else goto L11
L11:
    r20 = 'eth_getBlockByHash'
    r21 = __mypyc_self__.__mypyc_generator_attribute__params
    if is_error(r21) goto L130 (error at async_validate_from_blockhash_in_params:282) else goto L12
L12:
    r22 = object 0
    r23 = PyObject_GetItem(r21, r22)
    dec_ref r21
    if is_error(r23) goto L130 (error at async_validate_from_blockhash_in_params:282) else goto L13
L13:
    r24 = PyList_New(2)
    if is_error(r24) goto L131 (error at async_validate_from_blockhash_in_params:282) else goto L14
L14:
    r25 = box(bool, 0)
    r26 = get_element_ptr r24 ob_item :: PyListObject
    r27 = load_mem r26 :: ptr*
    set_mem r27, r23 :: builtins.object*
    inc_ref r25
    r28 = r27 + 8
    set_mem r28, r25 :: builtins.object*
    r29 = 'make_request'
    r30 = [r19, r20, r24]
    r31 = load_address r30
    r32 = PyObject_VectorcallMethod(r29, r31, 9223372036854775811, 0)
    if is_error(r32) goto L132 (error at async_validate_from_blockhash_in_params:281) else goto L15
L15:
    dec_ref r19
    dec_ref r24
    r33 = CPy_GetCoro(r32)
    dec_ref r32
    if is_error(r33) goto L86 (error at async_validate_from_blockhash_in_params:281) else goto L16
L16:
    __mypyc_self__.__mypyc_temp__16 = r33; r34 = is_error
    if not r34 goto L86 (error at async_validate_from_blockhash_in_params:-1) else goto L17 :: bool
L17:
    r35 = __mypyc_self__.__mypyc_temp__16
    if is_error(r35) goto L86 (error at async_validate_from_blockhash_in_params:-1) else goto L18
L18:
    r36 = CPyIter_Next(r35)
    dec_ref r35
    if is_error(r36) goto L19 else goto L21
L19:
    r37 = CPy_FetchStopIterationValue()
    if is_error(r37) goto L86 (error at async_validate_from_blockhash_in_params:281) else goto L20
L20:
    r38 = r37
    r39 = <error> :: object
    __mypyc_self__.__mypyc_temp__16 = r39; r40 = is_error
    if not r40 goto L133 (error at async_validate_from_blockhash_in_params:281) else goto L43 :: bool
L21:
    r41 = r36
L22:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r41
L23:
    r43 = load_address _Py_NoneStruct
    r44 = type != r43
    if r44 goto L24 else goto L134 :: bool
L24:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L27 (error at async_validate_from_blockhash_in_params:281) else goto L135 :: bool
L25:
    unreachable
L26:
    inc_ref arg
    goto L38
L27:
    r45 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__17 = r45; r46 = is_error
    if not r46 goto L136 (error at async_validate_from_blockhash_in_params:-1) else goto L28 :: bool
L28:
    r47 = load_address r1
    r48 = __mypyc_self__.__mypyc_temp__16
    if is_error(r48) goto L136 (error at async_validate_from_blockhash_in_params:-1) else goto L29
L29:
    r49 = CPy_YieldFromErrorHandle(r48, r47)
    dec_ref r48
    if is_error(r49) goto L136 (error at async_validate_from_blockhash_in_params:281) else goto L30
L30:
    if r49 goto L33 else goto L31 :: bool
L31:
    r41 = r1
    r50 = __mypyc_self__.__mypyc_temp__17
    if is_error(r50) goto L137 (error at async_validate_from_blockhash_in_params:-1) else goto L32
L32:
    CPy_RestoreExcInfo(r50)
    dec_ref r50
    goto L22
L33:
    r38 = r1
    r51 = __mypyc_self__.__mypyc_temp__17
    if is_error(r51) goto L138 (error at async_validate_from_blockhash_in_params:-1) else goto L34
L34:
    CPy_RestoreExcInfo(r51)
    dec_ref r51
    goto L43
L35:
    r52 = __mypyc_self__.__mypyc_temp__17
    if is_error(r52) goto L86 (error at async_validate_from_blockhash_in_params:-1) else goto L36
L36:
    CPy_RestoreExcInfo(r52)
    dec_ref r52
    r53 = CPy_KeepPropagating()
    if not r53 goto L86 else goto L37 :: bool
L37:
    unreachable
L38:
    r54 = __mypyc_self__.__mypyc_temp__16
    if is_error(r54) goto L139 (error at async_validate_from_blockhash_in_params:-1) else goto L39
L39:
    r55 = CPyIter_Send(r54, arg)
    dec_ref r54
    dec_ref arg
    if is_error(r55) goto L41 else goto L40
L40:
    r41 = r55
    goto L22
L41:
    r56 = CPy_FetchStopIterationValue()
    if is_error(r56) goto L86 (error at async_validate_from_blockhash_in_params:281) else goto L42
L42:
    r38 = r56
L43:
    r57 = cast(dict, r38)
    if is_error(r57) goto L86 (error at async_validate_from_blockhash_in_params:281) else goto L44
L44:
    __mypyc_self__.__mypyc_generator_attribute__response = r57; r58 = is_error
    if not r58 goto L86 (error at async_validate_from_blockhash_in_params:281) else goto L45 :: bool
L45:
    r59 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r59) goto L86 (error at async_validate_from_blockhash_in_params:285) else goto L46
L46:
    r60 = __mypyc_self__.__mypyc_generator_attribute__response
    if is_error(r60) goto L140 (error at async_validate_from_blockhash_in_params:286) else goto L47
L47:
    r61 = 'result'
    r62 = CPyDict_GetItem(r60, r61)
    dec_ref r60
    if is_error(r62) goto L140 (error at async_validate_from_blockhash_in_params:286) else goto L48
L48:
    r63 = 'number'
    r64 = PyObject_GetItem(r62, r63)
    dec_ref r62
    if is_error(r64) goto L140 (error at async_validate_from_blockhash_in_params:286) else goto L49
L49:
    r65 = load_address PyLong_Type
    r66 = object 16
    r67 = [r64, r66]
    r68 = load_address r67
    r69 = PyObject_Vectorcall(r65, r68, 2, 0)
    if is_error(r69) goto L141 (error at async_validate_from_blockhash_in_params:286) else goto L50
L50:
    dec_ref r64
    r70 = unbox(int, r69)
    dec_ref r69
    if is_error(r70) goto L140 (error at async_validate_from_blockhash_in_params:286) else goto L51
L51:
    r71 = __mypyc_self__.__mypyc_generator_attribute__response
    if is_error(r71) goto L142 (error at async_validate_from_blockhash_in_params:287) else goto L52
L52:
    r72 = 'result'
    r73 = CPyDict_GetItem(r71, r72)
    dec_ref r71
    if is_error(r73) goto L142 (error at async_validate_from_blockhash_in_params:287) else goto L53
L53:
    r74 = 'timestamp'
    r75 = PyObject_GetItem(r73, r74)
    dec_ref r73
    if is_error(r75) goto L142 (error at async_validate_from_blockhash_in_params:287) else goto L54
L54:
    r76 = load_address PyLong_Type
    r77 = object 16
    r78 = [r75, r77]
    r79 = load_address r78
    r80 = PyObject_Vectorcall(r76, r79, 2, 0)
    if is_error(r80) goto L143 (error at async_validate_from_blockhash_in_params:287) else goto L55
L55:
    dec_ref r75
    r81 = unbox(int, r80)
    dec_ref r80
    if is_error(r81) goto L142 (error at async_validate_from_blockhash_in_params:287) else goto L56
L56:
    r82 = box(int, r70)
    r83 = box(int, r81)
    r84 = async_is_beyond_validation_threshold(r59, r82, r83)
    dec_ref r59
    dec_ref r82
    dec_ref r83
    if is_error(r84) goto L86 (error at async_validate_from_blockhash_in_params:284) else goto L57
L57:
    __mypyc_self__.__mypyc_temp__18 = r84; r85 = is_error
    if not r85 goto L86 (error at async_validate_from_blockhash_in_params:-1) else goto L58 :: bool
L58:
    r86 = __mypyc_self__.__mypyc_temp__18
    if is_error(r86) goto L86 (error at async_validate_from_blockhash_in_params:-1) else goto L59
L59:
    r87 = load_address _Py_NoneStruct
    r88 = <error> :: object
    r3 = r88
    r89 = load_address r3
    r90 = r86.__mypyc_generator_helper__(r87, r87, r87, r87, r89)
    dec_ref r86
    if is_error(r90) goto L60 else goto L144
L60:
    r91 = r3 != 0
    if not r91 goto L145 (error at async_validate_from_blockhash_in_params:-1) else goto L61 :: bool
L61:
    r92 = r3
    r93 = <error> :: faster_web3._utils.caching.request_caching_validation.async_is_beyond_validation_threshold_gen
    __mypyc_self__.__mypyc_temp__18 = r93; r94 = is_error
    if not r94 goto L146 (error at async_validate_from_blockhash_in_params:284) else goto L84 :: bool
L62:
    r95 = r90
L63:
    __mypyc_self__.__mypyc_next_label__ = 2
    return r95
L64:
    r97 = load_address _Py_NoneStruct
    r98 = type != r97
    if r98 goto L65 else goto L147 :: bool
L65:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L68 (error at async_validate_from_blockhash_in_params:284) else goto L148 :: bool
L66:
    unreachable
L67:
    inc_ref arg
    goto L79
L68:
    r99 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__19 = r99; r100 = is_error
    if not r100 goto L149 (error at async_validate_from_blockhash_in_params:-1) else goto L69 :: bool
L69:
    r101 = load_address r5
    r102 = __mypyc_self__.__mypyc_temp__18
    if is_error(r102) goto L149 (error at async_validate_from_blockhash_in_params:-1) else goto L70
L70:
    r103 = CPy_YieldFromErrorHandle(r102, r101)
    dec_ref r102
    if is_error(r103) goto L149 (error at async_validate_from_blockhash_in_params:284) else goto L71
L71:
    if r103 goto L74 else goto L72 :: bool
L72:
    r95 = r5
    r104 = __mypyc_self__.__mypyc_temp__19
    if is_error(r104) goto L150 (error at async_validate_from_blockhash_in_params:-1) else goto L73
L73:
    CPy_RestoreExcInfo(r104)
    dec_ref r104
    goto L63
L74:
    r92 = r5
    r105 = __mypyc_self__.__mypyc_temp__19
    if is_error(r105) goto L151 (error at async_validate_from_blockhash_in_params:-1) else goto L75
L75:
    CPy_RestoreExcInfo(r105)
    dec_ref r105
    goto L84
L76:
    r106 = __mypyc_self__.__mypyc_temp__19
    if is_error(r106) goto L86 (error at async_validate_from_blockhash_in_params:-1) else goto L77
L77:
    CPy_RestoreExcInfo(r106)
    dec_ref r106
    r107 = CPy_KeepPropagating()
    if not r107 goto L86 else goto L78 :: bool
L78:
    unreachable
L79:
    r108 = __mypyc_self__.__mypyc_temp__18
    if is_error(r108) goto L152 (error at async_validate_from_blockhash_in_params:-1) else goto L80
L80:
    r109 = CPyIter_Send(r108, arg)
    dec_ref r108
    dec_ref arg
    if is_error(r109) goto L82 else goto L81
L81:
    r95 = r109
    goto L63
L82:
    r110 = CPy_FetchStopIterationValue()
    if is_error(r110) goto L86 (error at async_validate_from_blockhash_in_params:284) else goto L83
L83:
    r92 = r110
L84:
    r111 = unbox(bool, r92)
    dec_ref r92
    if is_error(r111) goto L86 (error at async_validate_from_blockhash_in_params:284) else goto L85
L85:
    r112 = box(bool, r111)
    inc_ref r112
    __mypyc_self__.__mypyc_temp__20 = r112; r113 = is_error
    if not r113 goto L86 (error at async_validate_from_blockhash_in_params:284) else goto L100 :: bool
L86:
    r114 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__21 = r114; r115 = is_error
    if not r115 goto L97 (error at async_validate_from_blockhash_in_params:-1) else goto L87 :: bool
L87:
    r116 = builtins :: module
    r117 = 'Exception'
    r118 = CPyObject_GetAttr(r116, r117)
    if is_error(r118) goto L97 (error at async_validate_from_blockhash_in_params:289) else goto L88
L88:
    r119 = CPy_ExceptionMatches(r118)
    dec_ref r118
    if r119 goto L89 else goto L95 :: bool
L89:
    r120 = CPy_GetExcValue()
    __mypyc_self__.__mypyc_generator_attribute__e = r120; r121 = is_error
    if not r121 goto L97 (error at async_validate_from_blockhash_in_params:289) else goto L90 :: bool
L90:
    r122 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r122) goto L97 (error at async_validate_from_blockhash_in_params:290) else goto L91
L91:
    r123 = __mypyc_self__.__mypyc_generator_attribute__e
    if is_error(r123) goto L153 (error at async_validate_from_blockhash_in_params:290) else goto L92
L92:
    r124 = _error_log(r122, r123)
    dec_ref r122
    dec_ref r123
    if is_error(r124) goto L97 (error at async_validate_from_blockhash_in_params:290) else goto L93
L93:
    r125 = box(bool, 0)
    r126 = __mypyc_self__.__mypyc_temp__21
    if is_error(r126) goto L97 (error at async_validate_from_blockhash_in_params:-1) else goto L94
L94:
    CPy_RestoreExcInfo(r126)
    dec_ref r126
    inc_ref r125
    __mypyc_self__.__mypyc_temp__20 = r125; r127 = is_error
    if not r127 goto L97 (error at async_validate_from_blockhash_in_params:291) else goto L100 :: bool
L95:
    CPy_Reraise()
    if not 0 goto L97 else goto L96 :: bool
L96:
    unreachable
L97:
    r128 = __mypyc_self__.__mypyc_temp__21
    if is_error(r128) goto L101 (error at async_validate_from_blockhash_in_params:-1) else goto L98
L98:
    CPy_RestoreExcInfo(r128)
    dec_ref r128
    r129 = CPy_KeepPropagating()
    if not r129 goto L101 else goto L99 :: bool
L99:
    unreachable
L100:
    r130 = <error> :: tuple[object, object, object]
    r131 = r130
    goto L103
L101:
    r132 = <error> :: object
    __mypyc_self__.__mypyc_temp__20 = r132; r133 = is_error
    if not r133 goto L129 (error at async_validate_from_blockhash_in_params:-1) else goto L102 :: bool
L102:
    r134 = CPy_CatchError()
    r131 = r134
L103:
    r135 = __mypyc_self__.__mypyc_generator_attribute__cache_allowed_requests
    if is_error(r135) goto L115 (error at async_validate_from_blockhash_in_params:293) else goto L104
L104:
    r136 = __mypyc_self__.__mypyc_generator_attribute__provider
    if is_error(r136) goto L115 (error at async_validate_from_blockhash_in_params:293) else goto L105
L105:
    r137 = 'cache_allowed_requests'
    r138 = box(bool, r135)
    r139 = PyObject_SetAttr(r136, r137, r138)
    dec_ref r136
    r140 = r139 >= 0 :: signed
    if not r140 goto L115 (error at async_validate_from_blockhash_in_params:293) else goto L106 :: bool
L106:
    if is_error(r131) goto L109 else goto L107
L107:
    CPy_Reraise()
    if not 0 goto L115 else goto L154 :: bool
L108:
    unreachable
L109:
    r141 = __mypyc_self__.__mypyc_temp__20
    if is_error(r141) goto L119 else goto L110
L110:
    __mypyc_self__.__mypyc_next_label__ = -1
L111:
    if is_error(stop_iter_ptr) goto L112 else goto L114
L112:
    CPyGen_SetStopIterationValue(r141)
    dec_ref r141
    if not 0 goto L129 else goto L113 :: bool
L113:
    unreachable
L114:
    set_mem stop_iter_ptr, r141 :: builtins.object*
    return 0
L115:
    if is_error(r131) goto L117 else goto L116
L116:
    CPy_RestoreExcInfo(r131)
    xdec_ref r131
L117:
    r143 = CPy_KeepPropagating()
    if not r143 goto L129 else goto L118 :: bool
L118:
    unreachable
L119:
    r144 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L120:
    if is_error(stop_iter_ptr) goto L121 else goto L123
L121:
    CPyGen_SetStopIterationValue(r144)
    if not 0 goto L129 else goto L122 :: bool
L122:
    unreachable
L123:
    inc_ref r144
    set_mem stop_iter_ptr, r144 :: builtins.object*
    return 0
L124:
    r146 = r6 == 0
    if r146 goto L155 else goto L125 :: bool
L125:
    r147 = r6 == 1
    if r147 goto L156 else goto L157 :: bool
L126:
    r148 = r6 == 2
    if r148 goto L64 else goto L158 :: bool
L127:
    r149 = raise StopIteration
    if not r149 goto L129 (error at async_validate_from_blockhash_in_params:272) else goto L128 :: bool
L128:
    unreachable
L129:
    r150 = <error> :: object
    return r150
L130:
    dec_ref r19
    goto L86
L131:
    dec_ref r19
    dec_ref r23
    goto L86
L132:
    dec_ref r19
    dec_ref r24
    goto L86
L133:
    dec_ref r38
    goto L86
L134:
    xdec_ref r1
    goto L26
L135:
    xdec_ref r1
    goto L25
L136:
    xdec_ref r1
    goto L35
L137:
    dec_ref r41
    goto L35
L138:
    dec_ref r38
    goto L35
L139:
    dec_ref arg
    goto L86
L140:
    dec_ref r59
    goto L86
L141:
    dec_ref r59
    dec_ref r64
    goto L86
L142:
    dec_ref r59
    dec_ref r70 :: int
    goto L86
L143:
    dec_ref r59
    dec_ref r70 :: int
    dec_ref r75
    goto L86
L144:
    xdec_ref r3
    goto L62
L145:
    xdec_ref r3
    goto L86
L146:
    dec_ref r92
    goto L86
L147:
    xdec_ref r5
    goto L67
L148:
    xdec_ref r5
    goto L66
L149:
    xdec_ref r5
    goto L76
L150:
    dec_ref r95
    goto L76
L151:
    dec_ref r92
    goto L76
L152:
    dec_ref arg
    goto L86
L153:
    dec_ref r122
    goto L97
L154:
    xdec_ref r131
    goto L108
L155:
    xdec_ref r1
    xdec_ref r5
    goto L1
L156:
    xdec_ref r5
    goto L23
L157:
    xdec_ref r1
    goto L126
L158:
    xdec_ref r5
    goto L127

def async_validate_from_blockhash_in_params_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_validate_from_blockhash_in_params_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_validate_from_blockhash_in_params_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_validate_from_blockhash_in_params_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_validate_from_blockhash_in_params_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_validate_from_blockhash_in_params_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = async_validate_from_blockhash_in_params_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def async_validate_from_blockhash_in_params_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def async_validate_from_blockhash_in_params_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_validate_from_blockhash_in_params(provider, params, _result):
    provider, params :: object
    _result :: dict
    r0 :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
    r1, r2, r3, r4 :: bool
    r5 :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
L0:
    r0 = async_validate_from_blockhash_in_params_gen()
    if is_error(r0) goto L5 (error at async_validate_from_blockhash_in_params:272) else goto L1
L1:
    r0.__mypyc_next_label__ = 0
    inc_ref provider
    r0.__mypyc_generator_attribute__provider = provider; r2 = is_error
    if not r2 goto L6 (error at async_validate_from_blockhash_in_params:272) else goto L2 :: bool
L2:
    inc_ref params
    r0.__mypyc_generator_attribute__params = params; r3 = is_error
    if not r3 goto L6 (error at async_validate_from_blockhash_in_params:272) else goto L3 :: bool
L3:
    inc_ref _result
    r0.__mypyc_generator_attribute___result = _result; r4 = is_error
    if not r4 goto L6 (error at async_validate_from_blockhash_in_params:272) else goto L4 :: bool
L4:
    return r0
L5:
    r5 = <error> :: faster_web3._utils.caching.request_caching_validation.async_validate_from_blockhash_in_params_gen
    return r5
L6:
    dec_ref r0
    goto L5

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: object_ptr
    r6 :: object_ptr[1]
    r7 :: c_ptr
    r8 :: native_int[1]
    r9 :: c_ptr
    r10 :: object
    r11 :: dict
    r12, r13 :: str
    r14 :: bit
    r15 :: object
    r16 :: str
    r17 :: dict
    r18, r19 :: object
    r20 :: str
    r21 :: dict
    r22, r23 :: object
    r24 :: str
    r25 :: dict
    r26 :: object
    r27, r28, r29, r30 :: str
    r31 :: set
    r32 :: i32
    r33 :: bit
    r34 :: i32
    r35 :: bit
    r36 :: i32
    r37 :: bit
    r38 :: i32
    r39 :: bit
    r40 :: frozenset
    r41 :: dict
    r42 :: str
    r43 :: i32
    r44 :: bit
    r45, r46 :: str
    r47 :: dict
    r48 :: str
    r49 :: object
    r50 :: object[2]
    r51 :: object_ptr
    r52, r53 :: object
    r54 :: dict
    r55 :: str
    r56 :: i32
    r57 :: bit
    r58, r59 :: str
    r60 :: dict
    r61 :: str
    r62 :: object
    r63 :: object[2]
    r64 :: object_ptr
    r65, r66 :: object
    r67 :: dict
    r68 :: str
    r69 :: i32
    r70 :: bit
    r71 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L22 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address time :: module
    r6 = [r5]
    r7 = load_address r6
    r8 = [1]
    r9 = load_address r8
    r10 = (('time', 'time', 'time'),)
    r11 = faster_web3._utils.caching.request_caching_validation.globals :: static
    r12 = 'faster_web3/_utils/caching/request_caching_validation.py'
    r13 = '<module>'
    r14 = CPyImport_ImportMany(r10, r7, r11, r12, r13, r9)
    if not r14 goto L22 else goto L4 :: bool
L4:
    r15 = ('TYPE_CHECKING', 'Any', 'Dict', 'Final', 'Optional', 'Sequence', 'TypeVar', 'Union')
    r16 = 'typing'
    r17 = faster_web3._utils.caching.request_caching_validation.globals :: static
    r18 = CPyImport_ImportFromMany(r16, r15, r15, r17)
    if is_error(r18) goto L22 (error at <module>:2) else goto L5
L5:
    typing = r18 :: module
    dec_ref r18
    r19 = ('RPCEndpoint',)
    r20 = 'faster_web3.types'
    r21 = faster_web3._utils.caching.request_caching_validation.globals :: static
    r22 = CPyImport_ImportFromMany(r20, r19, r19, r21)
    if is_error(r22) goto L22 (error at <module>:13) else goto L6
L6:
    faster_web3.types = r22 :: module
    dec_ref r22
    r23 = ('RequestCacheValidationThreshold',)
    r24 = 'faster_web3.utils'
    r25 = faster_web3._utils.caching.request_caching_validation.globals :: static
    r26 = CPyImport_ImportFromMany(r24, r23, r23, r25)
    if is_error(r26) goto L22 (error at <module>:16) else goto L7
L7:
    faster_web3.utils = r26 :: module
    dec_ref r26
    if 0 goto L8 else goto L8 :: bool
L8:
    r27 = 'finalized'
    r28 = 'safe'
    r29 = 'latest'
    r30 = 'pending'
    r31 = PySet_New(0)
    if is_error(r31) goto L22 (error at <module>:27) else goto L9
L9:
    r32 = PySet_Add(r31, r27)
    r33 = r32 >= 0 :: signed
    if not r33 goto L23 (error at <module>:27) else goto L10 :: bool
L10:
    r34 = PySet_Add(r31, r28)
    r35 = r34 >= 0 :: signed
    if not r35 goto L23 (error at <module>:27) else goto L11 :: bool
L11:
    r36 = PySet_Add(r31, r29)
    r37 = r36 >= 0 :: signed
    if not r37 goto L23 (error at <module>:27) else goto L12 :: bool
L12:
    r38 = PySet_Add(r31, r30)
    r39 = r38 >= 0 :: signed
    if not r39 goto L23 (error at <module>:27) else goto L13 :: bool
L13:
    r40 = PyFrozenSet_New(r31)
    dec_ref r31
    if is_error(r40) goto L22 (error at <module>:27) else goto L14
L14:
    faster_web3._utils.caching.request_caching_validation.UNCACHEABLE_BLOCK_IDS = r40 :: static
    r41 = faster_web3._utils.caching.request_caching_validation.globals :: static
    r42 = 'UNCACHEABLE_BLOCK_IDS'
    r43 = CPyDict_SetItem(r41, r42, r40)
    dec_ref r40
    r44 = r43 >= 0 :: signed
    if not r44 goto L22 (error at <module>:27) else goto L15 :: bool
L15:
    r45 = 'ASYNC_PROVIDER_TYPE'
    r46 = 'AsyncBaseProvider'
    r47 = faster_web3._utils.caching.request_caching_validation.globals :: static
    r48 = 'TypeVar'
    r49 = CPyDict_GetItem(r47, r48)
    if is_error(r49) goto L22 (error at <module>:29) else goto L16
L16:
    r50 = [r45, r46]
    r51 = load_address r50
    r52 = ('bound',)
    r53 = PyObject_Vectorcall(r49, r51, 1, r52)
    dec_ref r49
    if is_error(r53) goto L22 (error at <module>:29) else goto L17
L17:
    r54 = faster_web3._utils.caching.request_caching_validation.globals :: static
    r55 = 'ASYNC_PROVIDER_TYPE'
    r56 = CPyDict_SetItem(r54, r55, r53)
    dec_ref r53
    r57 = r56 >= 0 :: signed
    if not r57 goto L22 (error at <module>:29) else goto L18 :: bool
L18:
    r58 = 'SYNC_PROVIDER_TYPE'
    r59 = 'BaseProvider'
    r60 = faster_web3._utils.caching.request_caching_validation.globals :: static
    r61 = 'TypeVar'
    r62 = CPyDict_GetItem(r60, r61)
    if is_error(r62) goto L22 (error at <module>:30) else goto L19
L19:
    r63 = [r58, r59]
    r64 = load_address r63
    r65 = ('bound',)
    r66 = PyObject_Vectorcall(r62, r64, 1, r65)
    dec_ref r62
    if is_error(r66) goto L22 (error at <module>:30) else goto L20
L20:
    r67 = faster_web3._utils.caching.request_caching_validation.globals :: static
    r68 = 'SYNC_PROVIDER_TYPE'
    r69 = CPyDict_SetItem(r67, r68, r66)
    dec_ref r66
    r70 = r69 >= 0 :: signed
    if not r70 goto L22 (error at <module>:30) else goto L21 :: bool
L21:
    return 1
L22:
    r71 = <error> :: None
    return r71
L23:
    dec_ref r31
    goto L22

def Beacon.__init__(self, base_url, request_timeout, __bitmap):
    self :: faster_web3.beacon.beacon.Beacon
    base_url :: str
    request_timeout :: float
    __bitmap, r0 :: u32
    r1 :: bit
    r2 :: dict
    r3 :: str
    r4, r5 :: object
    r6 :: None
L0:
    r0 = __bitmap & 1
    r1 = r0 == 0
    if r1 goto L1 else goto L2 :: bool
L1:
    request_timeout = 10.0
L2:
    inc_ref base_url
    self.base_url = base_url
    self.request_timeout = request_timeout
    r2 = faster_web3.beacon.beacon.globals :: static
    r3 = 'HTTPSessionManager'
    r4 = CPyDict_GetItem(r2, r3)
    if is_error(r4) goto L5 (error at __init__:75) else goto L3
L3:
    r5 = PyObject_Vectorcall(r4, 0, 0, 0)
    dec_ref r4
    if is_error(r5) goto L5 (error at __init__:75) else goto L4
L4:
    self._request_session_manager = r5
    return 1
L5:
    r6 = <error> :: None
    return r6

def Beacon._make_get_request(self, endpoint_url, params):
    self :: faster_web3.beacon.beacon.Beacon
    endpoint_url :: str
    params :: union[dict, None]
    r0 :: object
    r1, r2 :: str
    r3 :: object
    r4 :: float
    r5 :: str
    r6 :: object
    r7 :: object[4]
    r8 :: object_ptr
    r9, r10 :: object
    r11, r12 :: dict
L0:
    if is_error(params) goto L1 else goto L7
L1:
    r0 = box(None, 1)
    inc_ref r0
    params = r0
L2:
    r1 = self.base_url
    r2 = PyUnicode_Concat(r1, endpoint_url)
    dec_ref r1
    if is_error(r2) goto L8 (error at _make_get_request:80) else goto L3
L3:
    r3 = self._request_session_manager
    r4 = self.request_timeout
    r5 = 'json_make_get_request'
    r6 = box(float, r4)
    r7 = [r3, r2, params, r6]
    r8 = load_address r7
    r9 = ('params', 'timeout')
    r10 = PyObject_VectorcallMethod(r5, r8, 9223372036854775810, r9)
    if is_error(r10) goto L9 (error at _make_get_request:81) else goto L4
L4:
    dec_ref r3
    dec_ref r2
    dec_ref params
    dec_ref r6
    r11 = cast(dict, r10)
    if is_error(r11) goto L6 (error at _make_get_request:81) else goto L5
L5:
    return r11
L6:
    r12 = <error> :: dict
    return r12
L7:
    inc_ref params
    goto L2
L8:
    dec_ref params
    goto L6
L9:
    dec_ref params
    dec_ref r2
    dec_ref r3
    dec_ref r6
    goto L6

def Beacon._make_post_request(self, endpoint_url, body):
    self :: faster_web3.beacon.beacon.Beacon
    endpoint_url :: str
    body :: union[list, dict]
    r0, r1 :: str
    r2 :: object
    r3 :: float
    r4 :: str
    r5 :: object
    r6 :: object[4]
    r7 :: object_ptr
    r8, r9 :: object
    r10, r11 :: dict
L0:
    r0 = self.base_url
    r1 = PyUnicode_Concat(r0, endpoint_url)
    dec_ref r0
    if is_error(r1) goto L4 (error at _make_post_request:88) else goto L1
L1:
    r2 = self._request_session_manager
    r3 = self.request_timeout
    r4 = 'json_make_post_request'
    r5 = box(float, r3)
    r6 = [r2, r1, body, r5]
    r7 = load_address r6
    r8 = ('json', 'timeout')
    r9 = PyObject_VectorcallMethod(r4, r7, 9223372036854775810, r8)
    if is_error(r9) goto L5 (error at _make_post_request:89) else goto L2
L2:
    dec_ref r2
    dec_ref r1
    dec_ref r5
    r10 = cast(dict, r9)
    if is_error(r10) goto L4 (error at _make_post_request:89) else goto L3
L3:
    return r10
L4:
    r11 = <error> :: dict
    return r11
L5:
    dec_ref r1
    dec_ref r2
    dec_ref r5
    goto L4

def Beacon.get_genesis(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/genesis'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_genesis:98) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_hash_root(self, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    state_id, r0, r1, r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/beacon/states/{0}/root'
    r2 = 'format'
    r3 = [r1, state_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L8 (error at get_hash_root:101) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_hash_root:101) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_hash_root:101) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_fork_data(self, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    state_id, r0, r1, r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/beacon/states/{0}/fork'
    r2 = 'format'
    r3 = [r1, state_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L8 (error at get_fork_data:104) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_fork_data:104) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_fork_data:104) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_finality_checkpoint(self, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    state_id, r0, r1, r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/beacon/states/{0}/finality_checkpoints'
    r2 = 'format'
    r3 = [r1, state_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L8 (error at get_finality_checkpoint:107) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_finality_checkpoint:107) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_finality_checkpoint:107) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_validators(self, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    state_id, r0, r1, r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/beacon/states/{0}/validators'
    r2 = 'format'
    r3 = [r1, state_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L8 (error at get_validators:110) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_validators:110) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_validators:110) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_validator(self, validator_id, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    validator_id, state_id, r0, r1, r2 :: str
    r3 :: object[3]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/beacon/states/{0}/validators/{1}'
    r2 = 'format'
    r3 = [r1, state_id, validator_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775811, 0)
    if is_error(r5) goto L8 (error at get_validator:115) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_validator:115) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_validator:115) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_validator_balances(self, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    state_id, r0, r1, r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/beacon/states/{0}/validator_balances'
    r2 = 'format'
    r3 = [r1, state_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L8 (error at get_validator_balances:118) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_validator_balances:118) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_validator_balances:118) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_epoch_committees(self, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    state_id, r0, r1, r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/beacon/states/{0}/committees'
    r2 = 'format'
    r3 = [r1, state_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L8 (error at get_epoch_committees:121) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_epoch_committees:121) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_epoch_committees:121) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_epoch_sync_committees(self, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    state_id, r0, r1, r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/beacon/states/{0}/sync_committees'
    r2 = 'format'
    r3 = [r1, state_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L8 (error at get_epoch_sync_committees:124) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_epoch_sync_committees:124) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_epoch_sync_committees:124) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_epoch_randao(self, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    state_id, r0, r1, r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/beacon/states/{0}/randao'
    r2 = 'format'
    r3 = [r1, state_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L8 (error at get_epoch_randao:127) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_epoch_randao:127) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_epoch_randao:127) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_block_headers(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/headers'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_block_headers:132) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_block_header(self, block_id):
    self :: faster_web3.beacon.beacon.Beacon
    block_id, r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6 :: union[dict, None]
    r7, r8 :: dict
L0:
    r0 = '/eth/v1/beacon/headers/{0}'
    r1 = 'format'
    r2 = [r0, block_id]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_block_header:135) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_block_header:135) else goto L2
L2:
    r6 = <error> :: union[dict, None]
    r7 = self._make_get_request(r5, r6)
    dec_ref r5
    if is_error(r7) goto L4 (error at get_block_header:135) else goto L3
L3:
    return r7
L4:
    r8 = <error> :: dict
    return r8

def Beacon.get_block(self, block_id):
    self :: faster_web3.beacon.beacon.Beacon
    block_id, r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6 :: union[dict, None]
    r7, r8 :: dict
L0:
    r0 = '/eth/v2/beacon/blocks/{0}'
    r1 = 'format'
    r2 = [r0, block_id]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_block:140) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_block:140) else goto L2
L2:
    r6 = <error> :: union[dict, None]
    r7 = self._make_get_request(r5, r6)
    dec_ref r5
    if is_error(r7) goto L4 (error at get_block:140) else goto L3
L3:
    return r7
L4:
    r8 = <error> :: dict
    return r8

def Beacon.get_block_root(self, block_id):
    self :: faster_web3.beacon.beacon.Beacon
    block_id, r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6 :: union[dict, None]
    r7, r8 :: dict
L0:
    r0 = '/eth/v1/beacon/blocks/{0}/root'
    r1 = 'format'
    r2 = [r0, block_id]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_block_root:143) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_block_root:143) else goto L2
L2:
    r6 = <error> :: union[dict, None]
    r7 = self._make_get_request(r5, r6)
    dec_ref r5
    if is_error(r7) goto L4 (error at get_block_root:143) else goto L3
L3:
    return r7
L4:
    r8 = <error> :: dict
    return r8

def Beacon.get_block_attestations(self, block_id):
    self :: faster_web3.beacon.beacon.Beacon
    block_id, r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6 :: union[dict, None]
    r7, r8 :: dict
L0:
    r0 = '/eth/v1/beacon/blocks/{0}/attestations'
    r1 = 'format'
    r2 = [r0, block_id]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_block_attestations:146) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_block_attestations:146) else goto L2
L2:
    r6 = <error> :: union[dict, None]
    r7 = self._make_get_request(r5, r6)
    dec_ref r5
    if is_error(r7) goto L4 (error at get_block_attestations:146) else goto L3
L3:
    return r7
L4:
    r8 = <error> :: dict
    return r8

def Beacon.get_blinded_blocks(self, block_id):
    self :: faster_web3.beacon.beacon.Beacon
    block_id, r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6 :: union[dict, None]
    r7, r8 :: dict
L0:
    r0 = '/eth/v1/beacon/blinded_blocks/{0}'
    r1 = 'format'
    r2 = [r0, block_id]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_blinded_blocks:149) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_blinded_blocks:149) else goto L2
L2:
    r6 = <error> :: union[dict, None]
    r7 = self._make_get_request(r5, r6)
    dec_ref r5
    if is_error(r7) goto L4 (error at get_blinded_blocks:149) else goto L3
L3:
    return r7
L4:
    r8 = <error> :: dict
    return r8

def Beacon.get_rewards(self, block_id):
    self :: faster_web3.beacon.beacon.Beacon
    block_id, r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6 :: union[dict, None]
    r7, r8 :: dict
L0:
    r0 = '/eth/v1/beacon/rewards/blocks/{0}'
    r1 = 'format'
    r2 = [r0, block_id]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_rewards:154) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_rewards:154) else goto L2
L2:
    r6 = <error> :: union[dict, None]
    r7 = self._make_get_request(r5, r6)
    dec_ref r5
    if is_error(r7) goto L4 (error at get_rewards:154) else goto L3
L3:
    return r7
L4:
    r8 = <error> :: dict
    return r8

def Beacon.get_light_client_bootstrap_structure(self, block_root):
    self :: faster_web3.beacon.beacon.Beacon
    block_root, r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6 :: union[dict, None]
    r7, r8 :: dict
L0:
    r0 = '/eth/v1/beacon/light_client/bootstrap/{0}'
    r1 = 'format'
    r2 = [r0, block_root]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_light_client_bootstrap_structure:162) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_light_client_bootstrap_structure:162) else goto L2
L2:
    r6 = <error> :: union[dict, None]
    r7 = self._make_get_request(r5, r6)
    dec_ref r5
    if is_error(r7) goto L4 (error at get_light_client_bootstrap_structure:161) else goto L3
L3:
    return r7
L4:
    r8 = <error> :: dict
    return r8

def Beacon.get_light_client_updates(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/light_client/updates'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_light_client_updates:166) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_light_client_finality_update(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/light_client/finality_update'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_light_client_finality_update:169) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_light_client_optimistic_update(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/light_client/optimistic_update'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_light_client_optimistic_update:172) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_attestations(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/pool/attestations'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_attestations:177) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_attester_slashings(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/pool/attester_slashings'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_attester_slashings:180) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_proposer_slashings(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/pool/proposer_slashings'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_proposer_slashings:183) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_voluntary_exits(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/pool/voluntary_exits'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_voluntary_exits:186) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_bls_to_execution_changes(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/beacon/pool/bls_to_execution_changes'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_bls_to_execution_changes:189) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_fork_schedule(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/config/fork_schedule'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_fork_schedule:194) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_spec(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/config/spec'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_spec:197) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_deposit_contract(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/config/deposit_contract'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_deposit_contract:200) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_beacon_state(self, state_id):
    self :: faster_web3.beacon.beacon.Beacon
    state_id, r0, r1, r2 :: str
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: str
    r7 :: union[dict, None]
    r8, r9 :: dict
L0:
    if is_error(state_id) goto L1 else goto L7
L1:
    r0 = 'head'
    inc_ref r0
    state_id = r0
L2:
    r1 = '/eth/v1/debug/beacon/states/{0}'
    r2 = 'format'
    r3 = [r1, state_id]
    r4 = load_address r3
    r5 = PyObject_VectorcallMethod(r2, r4, 9223372036854775810, 0)
    if is_error(r5) goto L8 (error at get_beacon_state:205) else goto L3
L3:
    dec_ref state_id
    r6 = cast(str, r5)
    if is_error(r6) goto L6 (error at get_beacon_state:205) else goto L4
L4:
    r7 = <error> :: union[dict, None]
    r8 = self._make_get_request(r6, r7)
    dec_ref r6
    if is_error(r8) goto L6 (error at get_beacon_state:205) else goto L5
L5:
    return r8
L6:
    r9 = <error> :: dict
    return r9
L7:
    inc_ref state_id
    goto L2
L8:
    dec_ref state_id
    goto L6

def Beacon.get_beacon_heads(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/debug/beacon/heads'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_beacon_heads:208) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_node_identity(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/node/identity'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_node_identity:213) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_peers(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/node/peers'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_peers:216) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_peer(self, peer_id):
    self :: faster_web3.beacon.beacon.Beacon
    peer_id, r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6 :: union[dict, None]
    r7, r8 :: dict
L0:
    r0 = '/eth/v1/node/peers/{0}'
    r1 = 'format'
    r2 = [r0, peer_id]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_peer:219) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_peer:219) else goto L2
L2:
    r6 = <error> :: union[dict, None]
    r7 = self._make_get_request(r5, r6)
    dec_ref r5
    if is_error(r7) goto L4 (error at get_peer:219) else goto L3
L3:
    return r7
L4:
    r8 = <error> :: dict
    return r8

def Beacon.get_peer_count(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/node/peer_count'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_peer_count:222) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_health(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0, r1, r2 :: str
    r3 :: object
    r4 :: str
    r5 :: object[2]
    r6 :: object_ptr
    r7 :: object
    r8 :: str
    r9 :: object
    r10, r11 :: int
L0:
    r0 = self.base_url
    r1 = '/eth/v1/node/health'
    r2 = PyUnicode_Concat(r0, r1)
    dec_ref r0
    if is_error(r2) goto L5 (error at get_health:225) else goto L1
L1:
    r3 = self._request_session_manager
    r4 = 'get_response_from_get_request'
    r5 = [r3, r2]
    r6 = load_address r5
    r7 = PyObject_VectorcallMethod(r4, r6, 9223372036854775810, 0)
    if is_error(r7) goto L6 (error at get_health:226) else goto L2
L2:
    dec_ref r3
    dec_ref r2
    r8 = 'status_code'
    r9 = CPyObject_GetAttr(r7, r8)
    dec_ref r7
    if is_error(r9) goto L5 (error at get_health:227) else goto L3
L3:
    r10 = unbox(int, r9)
    dec_ref r9
    if is_error(r10) goto L5 (error at get_health:227) else goto L4
L4:
    return r10
L5:
    r11 = <error> :: int
    return r11
L6:
    dec_ref r2
    dec_ref r3
    goto L5

def Beacon.get_version(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/node/version'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_version:230) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_syncing(self):
    self :: faster_web3.beacon.beacon.Beacon
    r0 :: str
    r1 :: union[dict, None]
    r2, r3 :: dict
L0:
    r0 = '/eth/v1/node/syncing'
    r1 = <error> :: union[dict, None]
    r2 = self._make_get_request(r0, r1)
    if is_error(r2) goto L2 (error at get_syncing:233) else goto L1
L1:
    return r2
L2:
    r3 = <error> :: dict
    return r3

def Beacon.get_blob_sidecars(self, block_id, indices):
    self :: faster_web3.beacon.beacon.Beacon
    block_id :: str
    indices :: union[list, None]
    r0, r1 :: object
    r2 :: bit
    r3 :: list
    r4 :: ptr
    r5 :: native_int
    r6 :: short_int
    r7 :: bit
    r8, r9 :: str
    r10 :: object
    r11 :: list
    r12 :: object
    r13 :: str
    r14 :: object
    r15 :: object[2]
    r16 :: object_ptr
    r17 :: object
    r18 :: str
    r19 :: dict
    r20 :: union[dict, None]
    r21 :: object
    indices_param :: union[dict, None]
    r22, r23 :: str
    r24 :: object[2]
    r25 :: object_ptr
    r26 :: object
    r27 :: str
    r28, r29 :: dict
L0:
    if is_error(indices) goto L1 else goto L17
L1:
    r0 = box(None, 1)
    inc_ref r0
    indices = r0
L2:
    r1 = load_address _Py_NoneStruct
    r2 = indices != r1
    if r2 goto L3 else goto L18 :: bool
L3:
    inc_ref indices
    r3 = cast(list, indices)
    if is_error(r3) goto L19 (error at get_blob_sidecars:238) else goto L4
L4:
    r4 = get_element_ptr r3 ob_size :: PyVarObject
    r5 = load_mem r4 :: native_int*
    dec_ref r3
    r6 = r5 << 1
    r7 = r6 != 0
    if r7 goto L5 else goto L18 :: bool
L5:
    r8 = 'indices'
    r9 = ','
    r10 = load_address PyUnicode_Type
    r11 = cast(list, indices)
    if is_error(r11) goto L16 (error at get_blob_sidecars:240) else goto L6
L6:
    r12 = builtins :: module
    r13 = 'map'
    r14 = CPyObject_GetAttr(r12, r13)
    if is_error(r14) goto L20 (error at get_blob_sidecars:240) else goto L7
L7:
    r15 = [r10, r11]
    r16 = load_address r15
    r17 = PyObject_Vectorcall(r14, r16, 2, 0)
    dec_ref r14
    if is_error(r17) goto L20 (error at get_blob_sidecars:240) else goto L8
L8:
    dec_ref r11
    r18 = PyUnicode_Join(r9, r17)
    dec_ref r17
    if is_error(r18) goto L16 (error at get_blob_sidecars:240) else goto L9
L9:
    r19 = CPyDict_Build(1, r8, r18)
    dec_ref r18
    if is_error(r19) goto L16 (error at get_blob_sidecars:240) else goto L10
L10:
    r20 = r19
    goto L12
L11:
    r21 = box(None, 1)
    inc_ref r21
    r20 = r21
L12:
    indices_param = r20
    r22 = '/eth/v1/beacon/blob_sidecars/{0}'
    r23 = 'format'
    r24 = [r22, block_id]
    r25 = load_address r24
    r26 = PyObject_VectorcallMethod(r23, r25, 9223372036854775810, 0)
    if is_error(r26) goto L21 (error at get_blob_sidecars:242) else goto L13
L13:
    r27 = cast(str, r26)
    if is_error(r27) goto L21 (error at get_blob_sidecars:242) else goto L14
L14:
    r28 = self._make_get_request(r27, indices_param)
    dec_ref r27
    dec_ref indices_param
    if is_error(r28) goto L16 (error at get_blob_sidecars:241) else goto L15
L15:
    return r28
L16:
    r29 = <error> :: dict
    return r29
L17:
    inc_ref indices
    goto L2
L18:
    dec_ref indices
    goto L11
L19:
    dec_ref indices
    goto L16
L20:
    dec_ref r11
    goto L16
L21:
    dec_ref indices_param
    goto L16

def Beacon.get_attester_duties(self, epoch, validator_indices):
    self :: faster_web3.beacon.beacon.Beacon
    epoch :: str
    validator_indices :: list
    r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6, r7 :: dict
L0:
    r0 = '/eth/v1/validator/duties/attester/{0}'
    r1 = 'format'
    r2 = [r0, epoch]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_attester_duties:252) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_attester_duties:252) else goto L2
L2:
    r6 = self._make_post_request(r5, validator_indices)
    dec_ref r5
    if is_error(r6) goto L4 (error at get_attester_duties:251) else goto L3
L3:
    return r6
L4:
    r7 = <error> :: dict
    return r7

def Beacon.get_block_proposer_duties(self, epoch):
    self :: faster_web3.beacon.beacon.Beacon
    epoch, r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6 :: union[dict, None]
    r7, r8 :: dict
L0:
    r0 = '/eth/v1/validator/duties/proposer/{0}'
    r1 = 'format'
    r2 = [r0, epoch]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_block_proposer_duties:256) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_block_proposer_duties:256) else goto L2
L2:
    r6 = <error> :: union[dict, None]
    r7 = self._make_get_request(r5, r6)
    dec_ref r5
    if is_error(r7) goto L4 (error at get_block_proposer_duties:256) else goto L3
L3:
    return r7
L4:
    r8 = <error> :: dict
    return r8

def Beacon.get_sync_committee_duties(self, epoch, validator_indices):
    self :: faster_web3.beacon.beacon.Beacon
    epoch :: str
    validator_indices :: list
    r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6, r7 :: dict
L0:
    r0 = '/eth/v1/validator/duties/sync/{0}'
    r1 = 'format'
    r2 = [r0, epoch]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_sync_committee_duties:262) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_sync_committee_duties:262) else goto L2
L2:
    r6 = self._make_post_request(r5, validator_indices)
    dec_ref r5
    if is_error(r6) goto L4 (error at get_sync_committee_duties:261) else goto L3
L3:
    return r6
L4:
    r7 = <error> :: dict
    return r7

def Beacon.get_attestations_rewards(self, epoch, validator_indices):
    self :: faster_web3.beacon.beacon.Beacon
    epoch :: str
    validator_indices :: list
    r0, r1 :: str
    r2 :: object[2]
    r3 :: object_ptr
    r4 :: object
    r5 :: str
    r6, r7 :: dict
L0:
    r0 = '/eth/v1/beacon/rewards/attestations/{0}'
    r1 = 'format'
    r2 = [r0, epoch]
    r3 = load_address r2
    r4 = PyObject_VectorcallMethod(r1, r3, 9223372036854775810, 0)
    if is_error(r4) goto L4 (error at get_attestations_rewards:271) else goto L1
L1:
    r5 = cast(str, r4)
    if is_error(r5) goto L4 (error at get_attestations_rewards:271) else goto L2
L2:
    r6 = self._make_post_request(r5, validator_indices)
    dec_ref r5
    if is_error(r6) goto L4 (error at get_attestations_rewards:270) else goto L3
L3:
    return r6
L4:
    r7 = <error> :: dict
    return r7

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16, r17 :: object
    r18 :: str
    r19 :: dict
    r20, r21 :: object
    r22 :: str
    r23, r24 :: object
    r25 :: bool
    r26, r27, r28, r29 :: str
    r30 :: tuple
    r31 :: i32
    r32 :: bit
    r33 :: dict
    r34 :: str
    r35 :: i32
    r36 :: bit
    r37 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L13 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Any', 'Dict', 'Final', 'List', 'Optional', 'Union', 'final')
    r6 = 'typing'
    r7 = faster_web3.beacon.beacon.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L13 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('URI', 'HexStr')
    r10 = 'eth_typing'
    r11 = faster_web3.beacon.beacon.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L13 (error at <module>:11) else goto L5
L5:
    eth_typing = r12 :: module
    dec_ref r12
    r13 = ('HTTPSessionManager',)
    r14 = 'faster_web3._utils.http_session_manager'
    r15 = faster_web3.beacon.beacon.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L13 (error at <module>:16) else goto L6
L6:
    faster_web3._utils.http_session_manager = r16 :: module
    dec_ref r16
    r17 = ('GET_ATTESTATIONS', 'GET_ATTESTATIONS_REWARDS', 'GET_ATTESTER_DUTIES', 'GET_ATTESTER_SLASHINGS', 'GET_BEACON_HEADS', 'GET_BEACON_STATE', 'GET_BLINDED_BLOCKS', 'GET_BLOB_SIDECARS', 'GET_BLOCK', 'GET_BLOCK_ATTESTATIONS', 'GET_BLOCK_HEADER', 'GET_BLOCK_HEADERS', 'GET_BLOCK_PROPOSERS_DUTIES', 'GET_BLOCK_ROOT', 'GET_BLS_TO_EXECUTION_CHANGES', 'GET_DEPOSIT_CONTRACT', 'GET_EPOCH_COMMITTEES', 'GET_EPOCH_RANDAO', 'GET_EPOCH_SYNC_COMMITTEES', 'GET_FINALITY_CHECKPOINT', 'GET_FORK_DATA', 'GET_FORK_SCHEDULE', 'GET_GENESIS', 'GET_HASH_ROOT', 'GET_HEALTH', 'GET_LIGHT_CLIENT_BOOTSTRAP_STRUCTURE', 'GET_LIGHT_CLIENT_FINALITY_UPDATE', 'GET_LIGHT_CLIENT_OPTIMISTIC_UPDATE', 'GET_LIGHT_CLIENT_UPDATES', 'GET_NODE_IDENTITY', 'GET_PEER', 'GET_PEER_COUNT', 'GET_PEERS', 'GET_PROPOSER_SLASHINGS', 'GET_REWARDS', 'GET_SPEC', 'GET_SYNC_COMMITTEE_DUTIES', 'GET_SYNCING', 'GET_VALIDATOR', 'GET_VALIDATOR_BALANCES', 'GET_VALIDATORS', 'GET_VERSION', 'GET_VOLUNTARY_EXITS')
    r18 = 'faster_web3.beacon.api_endpoints'
    r19 = faster_web3.beacon.beacon.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L13 (error at <module>:19) else goto L7
L7:
    faster_web3.beacon.api_endpoints = r20 :: module
    dec_ref r20
    r21 = <error> :: object
    r22 = 'faster_web3.beacon.beacon'
    r23 = faster_web3.beacon.beacon.Beacon_template :: type
    r24 = CPyType_FromTemplate(r23, r21, r22)
    if is_error(r24) goto L13 (error at <module>:67) else goto L8
L8:
    r25 = Beacon_trait_vtable_setup()
    if is_error(r25) goto L14 (error at <module>:-1) else goto L9
L9:
    r26 = '__mypyc_attrs__'
    r27 = 'base_url'
    r28 = 'request_timeout'
    r29 = '_request_session_manager'
    r30 = PyTuple_Pack(3, r27, r28, r29)
    if is_error(r30) goto L14 (error at <module>:67) else goto L10
L10:
    r31 = PyObject_SetAttr(r24, r26, r30)
    dec_ref r30
    r32 = r31 >= 0 :: signed
    if not r32 goto L14 (error at <module>:67) else goto L11 :: bool
L11:
    faster_web3.beacon.beacon.Beacon = r24 :: type
    r33 = faster_web3.beacon.beacon.globals :: static
    r34 = 'Beacon'
    r35 = PyDict_SetItem(r33, r34, r24)
    dec_ref r24
    r36 = r35 >= 0 :: signed
    if not r36 goto L13 (error at <module>:67) else goto L12 :: bool
L12:
    return 1
L13:
    r37 = <error> :: None
    return r37
L14:
    dec_ref r24
    goto L13

def wait_for_socket(ipc_path, timeout):
    ipc_path :: str
    timeout :: int
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: float
    r5 :: bit
    r6, r7 :: object
    r8 :: str
    r9, r10 :: object
    r11 :: float
    r12 :: bit
    r13 :: float
    r14 :: bit
    r15 :: object
    r16 :: float
    r17 :: bit
    r18, r19 :: object
    r20 :: str
    r21, r22 :: object
    r23 :: str
    r24, r25 :: object
    r26 :: str
    r27 :: object
    r28 :: object[2]
    r29 :: object_ptr
    r30 :: object
    r31 :: str
    r32 :: object[2]
    r33 :: object_ptr
    r34 :: object
    r35 :: str
    r36 :: object
    r37 :: object[2]
    r38 :: object_ptr
    r39 :: object
    r40 :: tuple[object, object, object]
    r41 :: object
    r42 :: str
    r43 :: object
    r44 :: bit
    r45 :: object
    r46 :: str
    r47, r48 :: object
    r49 :: object[1]
    r50 :: object_ptr
    r51 :: object
    r52 :: bit
    r53 :: None
L0:
    if is_error(timeout) goto L1 else goto L33
L1:
    timeout = 60
L2:
    r0 = time :: module
    r1 = 'time'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L34 (error at wait_for_socket:14) else goto L3
L3:
    r3 = PyObject_Vectorcall(r2, 0, 0, 0)
    dec_ref r2
    if is_error(r3) goto L34 (error at wait_for_socket:14) else goto L4
L4:
    r4 = unbox(float, r3)
    dec_ref r3
    r5 = r4 == -113.0
    if r5 goto L6 else goto L5 :: bool
L5:
    goto L7
L6:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L34 (error at wait_for_socket:14) else goto L5
L7:
    r7 = time :: module
    r8 = 'time'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L34 (error at wait_for_socket:15) else goto L8
L8:
    r10 = PyObject_Vectorcall(r9, 0, 0, 0)
    dec_ref r9
    if is_error(r10) goto L34 (error at wait_for_socket:15) else goto L9
L9:
    r11 = unbox(float, r10)
    dec_ref r10
    r12 = r11 == -113.0
    if r12 goto L11 else goto L10 :: bool
L10:
    r13 = CPyFloat_FromTagged(timeout)
    r14 = r13 == -113.0
    if r14 goto L13 else goto L12 :: bool
L11:
    r15 = PyErr_Occurred()
    if not is_error(r15) goto L34 (error at wait_for_socket:15) else goto L10
L12:
    r16 = r4 + r13
    r17 = r11 < r16
    if r17 goto L14 else goto L35 :: bool
L13:
    r18 = PyErr_Occurred()
    if not is_error(r18) goto L34 (error at wait_for_socket:15) else goto L12
L14:
    r19 = socket :: module
    r20 = 'AF_UNIX'
    r21 = CPyObject_GetAttr(r19, r20)
    if is_error(r21) goto L21 (error at wait_for_socket:17) else goto L15
L15:
    r22 = socket :: module
    r23 = 'SOCK_STREAM'
    r24 = CPyObject_GetAttr(r22, r23)
    if is_error(r24) goto L36 (error at wait_for_socket:17) else goto L16
L16:
    r25 = socket :: module
    r26 = 'socket'
    r27 = CPyObject_GetAttr(r25, r26)
    if is_error(r27) goto L37 (error at wait_for_socket:17) else goto L17
L17:
    r28 = [r21, r24]
    r29 = load_address r28
    r30 = PyObject_Vectorcall(r27, r29, 2, 0)
    dec_ref r27
    if is_error(r30) goto L37 (error at wait_for_socket:17) else goto L18
L18:
    dec_ref r21
    dec_ref r24
    r31 = 'connect'
    r32 = [r30, ipc_path]
    r33 = load_address r32
    r34 = PyObject_VectorcallMethod(r31, r33, 9223372036854775810, 0)
    if is_error(r34) goto L38 (error at wait_for_socket:18) else goto L39
L19:
    r35 = 'settimeout'
    inc_ref timeout :: int
    r36 = box(int, timeout)
    r37 = [r30, r36]
    r38 = load_address r37
    r39 = PyObject_VectorcallMethod(r35, r38, 9223372036854775810, 0)
    if is_error(r39) goto L40 (error at wait_for_socket:19) else goto L41
L20:
    dec_ref r30
    dec_ref r36
    goto L31
L21:
    r40 = CPy_CatchError()
    r41 = builtins :: module
    r42 = 'OSError'
    r43 = CPyObject_GetAttr(r41, r42)
    if is_error(r43) goto L42 (error at wait_for_socket:20) else goto L22
L22:
    r44 = CPy_ExceptionMatches(r43)
    dec_ref r43
    if r44 goto L23 else goto L43 :: bool
L23:
    r45 = time :: module
    r46 = 'sleep'
    r47 = CPyObject_GetAttr(r45, r46)
    if is_error(r47) goto L42 (error at wait_for_socket:21) else goto L24
L24:
    r48 = box(float, 0.01)
    r49 = [r48]
    r50 = load_address r49
    r51 = PyObject_Vectorcall(r47, r50, 1, 0)
    dec_ref r47
    if is_error(r51) goto L44 (error at wait_for_socket:21) else goto L45
L25:
    dec_ref r48
    goto L28
L26:
    CPy_Reraise()
    if not 0 goto L29 else goto L46 :: bool
L27:
    unreachable
L28:
    CPy_RestoreExcInfo(r40)
    dec_ref r40
    goto L7
L29:
    CPy_RestoreExcInfo(r40)
    dec_ref r40
    r52 = CPy_KeepPropagating()
    if not r52 goto L32 else goto L30 :: bool
L30:
    unreachable
L31:
    return 1
L32:
    r53 = <error> :: None
    return r53
L33:
    inc_ref timeout :: int
    goto L2
L34:
    dec_ref timeout :: int
    goto L32
L35:
    dec_ref timeout :: int
    goto L31
L36:
    dec_ref r21
    goto L21
L37:
    dec_ref r21
    dec_ref r24
    goto L21
L38:
    dec_ref r30
    goto L21
L39:
    dec_ref r34
    goto L19
L40:
    dec_ref r30
    dec_ref r36
    goto L21
L41:
    dec_ref timeout :: int
    dec_ref r39
    goto L20
L42:
    dec_ref timeout :: int
    goto L29
L43:
    dec_ref timeout :: int
    goto L26
L44:
    dec_ref timeout :: int
    dec_ref r48
    goto L29
L45:
    dec_ref r51
    goto L25
L46:
    dec_ref r40
    goto L27

def wait_for_http(endpoint_uri, timeout):
    endpoint_uri :: str
    timeout :: int
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: float
    r5 :: bit
    r6, r7 :: object
    r8 :: str
    r9, r10 :: object
    r11 :: float
    r12 :: bit
    r13 :: float
    r14 :: bit
    r15 :: object
    r16 :: float
    r17 :: bit
    r18, r19 :: object
    r20 :: str
    r21 :: object
    r22 :: object[1]
    r23 :: object_ptr
    r24 :: object
    r25 :: tuple[object, object, object]
    r26 :: object
    r27 :: str
    r28 :: object
    r29 :: bit
    r30 :: object
    r31 :: str
    r32, r33 :: object
    r34 :: object[1]
    r35 :: object_ptr
    r36 :: object
    r37 :: bit
    r38 :: None
L0:
    if is_error(timeout) goto L1 else goto L28
L1:
    timeout = 120
L2:
    r0 = time :: module
    r1 = 'time'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L29 (error at wait_for_http:27) else goto L3
L3:
    r3 = PyObject_Vectorcall(r2, 0, 0, 0)
    dec_ref r2
    if is_error(r3) goto L29 (error at wait_for_http:27) else goto L4
L4:
    r4 = unbox(float, r3)
    dec_ref r3
    r5 = r4 == -113.0
    if r5 goto L6 else goto L5 :: bool
L5:
    goto L7
L6:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L29 (error at wait_for_http:27) else goto L5
L7:
    r7 = time :: module
    r8 = 'time'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L29 (error at wait_for_http:28) else goto L8
L8:
    r10 = PyObject_Vectorcall(r9, 0, 0, 0)
    dec_ref r9
    if is_error(r10) goto L29 (error at wait_for_http:28) else goto L9
L9:
    r11 = unbox(float, r10)
    dec_ref r10
    r12 = r11 == -113.0
    if r12 goto L11 else goto L10 :: bool
L10:
    r13 = CPyFloat_FromTagged(timeout)
    r14 = r13 == -113.0
    if r14 goto L13 else goto L12 :: bool
L11:
    r15 = PyErr_Occurred()
    if not is_error(r15) goto L29 (error at wait_for_http:28) else goto L10
L12:
    r16 = r4 + r13
    r17 = r11 < r16
    if r17 goto L14 else goto L30 :: bool
L13:
    r18 = PyErr_Occurred()
    if not is_error(r18) goto L29 (error at wait_for_http:28) else goto L12
L14:
    r19 = requests :: module
    r20 = 'get'
    r21 = CPyObject_GetAttr(r19, r20)
    if is_error(r21) goto L16 (error at wait_for_http:30) else goto L15
L15:
    r22 = [endpoint_uri]
    r23 = load_address r22
    r24 = PyObject_Vectorcall(r21, r23, 1, 0)
    dec_ref r21
    if is_error(r24) goto L16 (error at wait_for_http:30) else goto L31
L16:
    r25 = CPy_CatchError()
    r26 = requests :: module
    r27 = 'ConnectionError'
    r28 = CPyObject_GetAttr(r26, r27)
    if is_error(r28) goto L32 (error at wait_for_http:31) else goto L17
L17:
    r29 = CPy_ExceptionMatches(r28)
    dec_ref r28
    if r29 goto L18 else goto L33 :: bool
L18:
    r30 = time :: module
    r31 = 'sleep'
    r32 = CPyObject_GetAttr(r30, r31)
    if is_error(r32) goto L32 (error at wait_for_http:32) else goto L19
L19:
    r33 = box(float, 0.01)
    r34 = [r33]
    r35 = load_address r34
    r36 = PyObject_Vectorcall(r32, r35, 1, 0)
    dec_ref r32
    if is_error(r36) goto L34 (error at wait_for_http:32) else goto L35
L20:
    dec_ref r33
    goto L23
L21:
    CPy_Reraise()
    if not 0 goto L24 else goto L36 :: bool
L22:
    unreachable
L23:
    CPy_RestoreExcInfo(r25)
    dec_ref r25
    goto L7
L24:
    CPy_RestoreExcInfo(r25)
    dec_ref r25
    r37 = CPy_KeepPropagating()
    if not r37 goto L27 else goto L25 :: bool
L25:
    unreachable
L26:
    return 1
L27:
    r38 = <error> :: None
    return r38
L28:
    inc_ref timeout :: int
    goto L2
L29:
    dec_ref timeout :: int
    goto L27
L30:
    dec_ref timeout :: int
    goto L26
L31:
    dec_ref timeout :: int
    dec_ref r24
    goto L26
L32:
    dec_ref timeout :: int
    goto L24
L33:
    dec_ref timeout :: int
    goto L21
L34:
    dec_ref timeout :: int
    dec_ref r33
    goto L24
L35:
    dec_ref r36
    goto L20
L36:
    dec_ref r25
    goto L22

def wait_for_aiohttp_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3, r4, r5, r6, r7 :: object
    r8, r9 :: tuple[object, object, object]
    r10, r11 :: object
    r12 :: i32
    r13 :: object
    r14 :: bit
    r15 :: object
    r16 :: str
    r17, r18 :: object
    r19 :: float
    r20 :: bit
    r21 :: bool
    r22, r23 :: object
    r24 :: str
    r25, r26 :: object
    r27 :: float
    r28 :: bit
    r29 :: float
    r30 :: bit
    r31 :: object
    r32 :: int
    r33 :: object
    r34 :: float
    r35 :: bit
    r36 :: float
    r37 :: bit
    r38 :: object
    r39 :: dict
    r40 :: str
    r41 :: object
    r42 :: str
    r43 :: object[1]
    r44 :: object_ptr
    r45, r46 :: object
    r47 :: str
    r48 :: object
    r49 :: bool
    r50 :: str
    r51 :: object
    r52 :: object[1]
    r53 :: object_ptr
    r54 :: object
    r55, r56 :: bool
    r57 :: object
    r58 :: bool
    r59, r60, r61, r62, r63 :: object
    r64 :: bool
    r65 :: object
    r66 :: bool
    r67 :: object
    r68 :: bit
    r69 :: tuple[object, object, object]
    r70 :: bool
    r71 :: object_ptr
    r72 :: object
    r73 :: bool
    r74, r75, r76 :: tuple[object, object, object]
    r77 :: bit
    r78, r79, r80 :: object
    r81 :: bool
    r82 :: object
    r83, r84 :: str
    r85 :: object[2]
    r86 :: object_ptr
    r87, r88 :: object
    r89 :: bool
    r90, r91, r92, r93, r94 :: object
    r95 :: bool
    r96 :: object
    r97 :: bool
    r98 :: object
    r99 :: bit
    r100 :: tuple[object, object, object]
    r101 :: bool
    r102 :: object_ptr
    r103 :: object
    r104 :: bool
    r105, r106, r107 :: tuple[object, object, object]
    r108 :: bit
    r109, r110, r111 :: object
    r112 :: tuple[object, object, object]
    r113, r114 :: bool
    r115 :: tuple[object, object, object]
    r116, r117, r118, r119, r120 :: object
    r121 :: object[4]
    r122 :: object_ptr
    r123, r124 :: object
    r125 :: bool
    r126, r127, r128, r129, r130 :: object
    r131 :: bool
    r132 :: object
    r133 :: bool
    r134 :: object
    r135 :: bit
    r136 :: tuple[object, object, object]
    r137 :: bool
    r138 :: object_ptr
    r139 :: object
    r140 :: bool
    r141, r142, r143 :: tuple[object, object, object]
    r144 :: bit
    r145, r146, r147 :: object
    r148 :: i32
    r149 :: bit
    r150 :: bool
    r151, r152 :: tuple[object, object, object]
    r153 :: bit
    r154, r155 :: tuple[object, object, object]
    r156 :: bool
    r157, r158, r159 :: object
    r160 :: object[4]
    r161 :: object_ptr
    r162, r163 :: object
    r164 :: bool
    r165, r166, r167, r168, r169 :: object
    r170 :: bool
    r171 :: object
    r172 :: bool
    r173 :: object
    r174 :: bit
    r175 :: tuple[object, object, object]
    r176 :: bool
    r177 :: object_ptr
    r178 :: object
    r179 :: bool
    r180, r181, r182 :: tuple[object, object, object]
    r183 :: bit
    r184, r185, r186 :: object
    r187 :: bit
    r188 :: tuple[object, object, object]
    r189 :: bool
    r190 :: dict
    r191 :: str
    r192 :: object
    r193 :: str
    r194 :: object
    r195 :: str
    r196 :: object
    r197 :: bit
    r198 :: object
    r199 :: str
    r200, r201 :: object
    r202 :: object[1]
    r203 :: object_ptr
    r204, r205 :: object
    r206 :: bool
    r207, r208, r209, r210, r211 :: object
    r212 :: bool
    r213 :: object
    r214 :: bool
    r215 :: object
    r216 :: bit
    r217 :: tuple[object, object, object]
    r218 :: bool
    r219 :: object_ptr
    r220 :: object
    r221 :: bool
    r222, r223, r224 :: tuple[object, object, object]
    r225 :: bit
    r226, r227, r228 :: object
    r229, r230 :: tuple[object, object, object]
    r231 :: bit
    r232 :: object
    r233 :: bool
    r234, r235, r236, r237, r238, r239 :: bit
    r240 :: bool
    r241 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = <error> :: object
    r3 = r2
    r4 = <error> :: object
    r5 = r4
    r6 = <error> :: object
    r7 = r6
    r8 = <error> :: tuple[object, object, object]
    r9 = r8
    r10 = <error> :: object
    r11 = r10
    r12 = __mypyc_self__.__mypyc_next_label__
    goto L218
L1:
    r13 = load_address _Py_NoneStruct
    r14 = type != r13
    if r14 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L226 (error at wait_for_aiohttp:37) else goto L3 :: bool
L3:
    unreachable
L4:
    r15 = time :: module
    r16 = 'time'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L226 (error at wait_for_aiohttp:38) else goto L5
L5:
    r18 = PyObject_Vectorcall(r17, 0, 0, 0)
    dec_ref r17
    if is_error(r18) goto L226 (error at wait_for_aiohttp:38) else goto L6
L6:
    r19 = unbox(float, r18)
    dec_ref r18
    r20 = r19 == -113.0
    if r20 goto L8 else goto L7 :: bool
L7:
    __mypyc_self__.__mypyc_generator_attribute__start = r19; r21 = is_error
    if not r21 goto L226 (error at wait_for_aiohttp:38) else goto L9 :: bool
L8:
    r22 = PyErr_Occurred()
    if not is_error(r22) goto L226 (error at wait_for_aiohttp:38) else goto L7
L9:
    r23 = time :: module
    r24 = 'time'
    r25 = CPyObject_GetAttr(r23, r24)
    if is_error(r25) goto L226 (error at wait_for_aiohttp:39) else goto L10
L10:
    r26 = PyObject_Vectorcall(r25, 0, 0, 0)
    dec_ref r25
    if is_error(r26) goto L226 (error at wait_for_aiohttp:39) else goto L11
L11:
    r27 = unbox(float, r26)
    dec_ref r26
    r28 = r27 == -113.0
    if r28 goto L13 else goto L12 :: bool
L12:
    r29 = __mypyc_self__.__mypyc_generator_attribute__start
    r30 = r29 == -113.0
    if r30 goto L15 else goto L14 :: bool
L13:
    r31 = PyErr_Occurred()
    if not is_error(r31) goto L226 (error at wait_for_aiohttp:39) else goto L12
L14:
    r32 = __mypyc_self__.__mypyc_generator_attribute__timeout
    if is_error(r32) goto L226 (error at wait_for_aiohttp:39) else goto L16
L15:
    r33 = PyErr_Occurred()
    if not is_error(r33) goto L226 (error at wait_for_aiohttp:39) else goto L14
L16:
    r34 = CPyFloat_FromTagged(r32)
    dec_ref r32 :: int
    r35 = r34 == -113.0
    if r35 goto L18 else goto L17 :: bool
L17:
    r36 = r29 + r34
    r37 = r27 < r36
    if r37 goto L19 else goto L213 :: bool
L18:
    r38 = PyErr_Occurred()
    if not is_error(r38) goto L226 (error at wait_for_aiohttp:39) else goto L17
L19:
    r39 = faster_web3.tools.benchmark.utils.globals :: static
    r40 = 'aiohttp'
    r41 = CPyDict_GetItem(r39, r40)
    if is_error(r41) goto L171 (error at wait_for_aiohttp:41) else goto L20
L20:
    r42 = 'ClientSession'
    r43 = [r41]
    r44 = load_address r43
    r45 = PyObject_VectorcallMethod(r42, r44, 9223372036854775809, 0)
    if is_error(r45) goto L227 (error at wait_for_aiohttp:41) else goto L21
L21:
    dec_ref r41
    r46 = CPy_TYPE(r45)
    r47 = '__aexit__'
    r48 = CPyObject_GetAttr(r46, r47)
    if is_error(r48) goto L228 (error at wait_for_aiohttp:41) else goto L22
L22:
    __mypyc_self__.__mypyc_temp__0 = r48; r49 = is_error
    if not r49 goto L228 (error at wait_for_aiohttp:-1) else goto L23 :: bool
L23:
    r50 = '__aenter__'
    r51 = CPyObject_GetAttr(r46, r50)
    dec_ref r46
    if is_error(r51) goto L229 (error at wait_for_aiohttp:41) else goto L24
L24:
    r52 = [r45]
    r53 = load_address r52
    r54 = PyObject_Vectorcall(r51, r53, 1, 0)
    dec_ref r51
    if is_error(r54) goto L229 (error at wait_for_aiohttp:41) else goto L25
L25:
    __mypyc_self__.__mypyc_temp__1 = r45; r55 = is_error
    if not r55 goto L230 (error at wait_for_aiohttp:-1) else goto L26 :: bool
L26:
    __mypyc_self__.__mypyc_temp__2 = 1; r56 = is_error
    if not r56 goto L230 (error at wait_for_aiohttp:-1) else goto L27 :: bool
L27:
    r57 = CPy_GetCoro(r54)
    dec_ref r54
    if is_error(r57) goto L171 (error at wait_for_aiohttp:41) else goto L28
L28:
    __mypyc_self__.__mypyc_temp__3 = r57; r58 = is_error
    if not r58 goto L171 (error at wait_for_aiohttp:-1) else goto L29 :: bool
L29:
    r59 = __mypyc_self__.__mypyc_temp__3
    if is_error(r59) goto L171 (error at wait_for_aiohttp:-1) else goto L30
L30:
    r60 = CPyIter_Next(r59)
    dec_ref r59
    if is_error(r60) goto L31 else goto L33
L31:
    r61 = CPy_FetchStopIterationValue()
    if is_error(r61) goto L171 (error at wait_for_aiohttp:41) else goto L32
L32:
    r62 = r61
    r63 = <error> :: object
    __mypyc_self__.__mypyc_temp__3 = r63; r64 = is_error
    if not r64 goto L231 (error at wait_for_aiohttp:41) else goto L55 :: bool
L33:
    r65 = r60
L34:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r65
L35:
    r67 = load_address _Py_NoneStruct
    r68 = type != r67
    if r68 goto L36 else goto L232 :: bool
L36:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L39 (error at wait_for_aiohttp:41) else goto L233 :: bool
L37:
    unreachable
L38:
    inc_ref arg
    goto L50
L39:
    r69 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__4 = r69; r70 = is_error
    if not r70 goto L234 (error at wait_for_aiohttp:-1) else goto L40 :: bool
L40:
    r71 = load_address r1
    r72 = __mypyc_self__.__mypyc_temp__3
    if is_error(r72) goto L234 (error at wait_for_aiohttp:-1) else goto L41
L41:
    r73 = CPy_YieldFromErrorHandle(r72, r71)
    dec_ref r72
    if is_error(r73) goto L234 (error at wait_for_aiohttp:41) else goto L42
L42:
    if r73 goto L45 else goto L43 :: bool
L43:
    r65 = r1
    r74 = __mypyc_self__.__mypyc_temp__4
    if is_error(r74) goto L235 (error at wait_for_aiohttp:-1) else goto L44
L44:
    CPy_RestoreExcInfo(r74)
    dec_ref r74
    goto L34
L45:
    r62 = r1
    r75 = __mypyc_self__.__mypyc_temp__4
    if is_error(r75) goto L236 (error at wait_for_aiohttp:-1) else goto L46
L46:
    CPy_RestoreExcInfo(r75)
    dec_ref r75
    goto L55
L47:
    r76 = __mypyc_self__.__mypyc_temp__4
    if is_error(r76) goto L171 (error at wait_for_aiohttp:-1) else goto L48
L48:
    CPy_RestoreExcInfo(r76)
    dec_ref r76
    r77 = CPy_KeepPropagating()
    if not r77 goto L171 else goto L49 :: bool
L49:
    unreachable
L50:
    r78 = __mypyc_self__.__mypyc_temp__3
    if is_error(r78) goto L237 (error at wait_for_aiohttp:-1) else goto L51
L51:
    r79 = CPyIter_Send(r78, arg)
    dec_ref r78
    dec_ref arg
    if is_error(r79) goto L53 else goto L52
L52:
    r65 = r79
    goto L34
L53:
    r80 = CPy_FetchStopIterationValue()
    if is_error(r80) goto L171 (error at wait_for_aiohttp:41) else goto L54
L54:
    r62 = r80
L55:
    __mypyc_self__.__mypyc_generator_attribute__session = r62; r81 = is_error
    if not r81 goto L87 (error at wait_for_aiohttp:41) else goto L56 :: bool
L56:
    r82 = __mypyc_self__.__mypyc_generator_attribute__session
    if is_error(r82) goto L87 (error at wait_for_aiohttp:42) else goto L57
L57:
    r83 = __mypyc_self__.__mypyc_generator_attribute__endpoint_uri
    if is_error(r83) goto L238 (error at wait_for_aiohttp:42) else goto L58
L58:
    r84 = 'get'
    r85 = [r82, r83]
    r86 = load_address r85
    r87 = PyObject_VectorcallMethod(r84, r86, 9223372036854775810, 0)
    if is_error(r87) goto L239 (error at wait_for_aiohttp:42) else goto L59
L59:
    dec_ref r82
    dec_ref r83
    r88 = CPy_GetCoro(r87)
    dec_ref r87
    if is_error(r88) goto L87 (error at wait_for_aiohttp:42) else goto L60
L60:
    __mypyc_self__.__mypyc_temp__5 = r88; r89 = is_error
    if not r89 goto L87 (error at wait_for_aiohttp:-1) else goto L61 :: bool
L61:
    r90 = __mypyc_self__.__mypyc_temp__5
    if is_error(r90) goto L87 (error at wait_for_aiohttp:-1) else goto L62
L62:
    r91 = CPyIter_Next(r90)
    dec_ref r90
    if is_error(r91) goto L63 else goto L65
L63:
    r92 = CPy_FetchStopIterationValue()
    if is_error(r92) goto L87 (error at wait_for_aiohttp:42) else goto L64
L64:
    r93 = r92
    dec_ref r93
    r94 = <error> :: object
    __mypyc_self__.__mypyc_temp__5 = r94; r95 = is_error
    if not r95 goto L87 (error at wait_for_aiohttp:42) else goto L129 :: bool
L65:
    r96 = r91
L66:
    __mypyc_self__.__mypyc_next_label__ = 2
    return r96
L67:
    r98 = load_address _Py_NoneStruct
    r99 = type != r98
    if r99 goto L68 else goto L240 :: bool
L68:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L71 (error at wait_for_aiohttp:42) else goto L241 :: bool
L69:
    unreachable
L70:
    inc_ref arg
    goto L82
L71:
    r100 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__6 = r100; r101 = is_error
    if not r101 goto L242 (error at wait_for_aiohttp:-1) else goto L72 :: bool
L72:
    r102 = load_address r3
    r103 = __mypyc_self__.__mypyc_temp__5
    if is_error(r103) goto L242 (error at wait_for_aiohttp:-1) else goto L73
L73:
    r104 = CPy_YieldFromErrorHandle(r103, r102)
    dec_ref r103
    if is_error(r104) goto L242 (error at wait_for_aiohttp:42) else goto L74
L74:
    if r104 goto L77 else goto L75 :: bool
L75:
    r96 = r3
    r105 = __mypyc_self__.__mypyc_temp__6
    if is_error(r105) goto L243 (error at wait_for_aiohttp:-1) else goto L76
L76:
    CPy_RestoreExcInfo(r105)
    dec_ref r105
    goto L66
L77:
    r93 = r3
    dec_ref r93
    r106 = __mypyc_self__.__mypyc_temp__6
    if is_error(r106) goto L79 (error at wait_for_aiohttp:-1) else goto L78
L78:
    CPy_RestoreExcInfo(r106)
    dec_ref r106
    goto L129
L79:
    r107 = __mypyc_self__.__mypyc_temp__6
    if is_error(r107) goto L87 (error at wait_for_aiohttp:-1) else goto L80
L80:
    CPy_RestoreExcInfo(r107)
    dec_ref r107
    r108 = CPy_KeepPropagating()
    if not r108 goto L87 else goto L81 :: bool
L81:
    unreachable
L82:
    r109 = __mypyc_self__.__mypyc_temp__5
    if is_error(r109) goto L244 (error at wait_for_aiohttp:-1) else goto L83
L83:
    r110 = CPyIter_Send(r109, arg)
    dec_ref r109
    dec_ref arg
    if is_error(r110) goto L85 else goto L84
L84:
    r96 = r110
    goto L66
L85:
    r111 = CPy_FetchStopIterationValue()
    if is_error(r111) goto L87 (error at wait_for_aiohttp:42) else goto L86
L86:
    r93 = r111
    dec_ref r93
    goto L129
L87:
    r112 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__7 = r112; r113 = is_error
    if not r113 goto L126 (error at wait_for_aiohttp:-1) else goto L88 :: bool
L88:
    __mypyc_self__.__mypyc_temp__2 = 0; r114 = is_error
    if not r114 goto L126 (error at wait_for_aiohttp:41) else goto L89 :: bool
L89:
    r115 = CPy_GetExcInfo()
    r116 = r115[0]
    r117 = r115[1]
    r118 = r115[2]
    dec_ref r115
    r119 = __mypyc_self__.__mypyc_temp__0
    if is_error(r119) goto L245 (error at wait_for_aiohttp:-1) else goto L90
L90:
    r120 = __mypyc_self__.__mypyc_temp__1
    if is_error(r120) goto L246 (error at wait_for_aiohttp:-1) else goto L91
L91:
    r121 = [r120, r116, r117, r118]
    r122 = load_address r121
    r123 = PyObject_Vectorcall(r119, r122, 4, 0)
    dec_ref r119
    if is_error(r123) goto L247 (error at wait_for_aiohttp:41) else goto L92
L92:
    dec_ref r120
    dec_ref r116
    dec_ref r117
    dec_ref r118
    r124 = CPy_GetCoro(r123)
    dec_ref r123
    if is_error(r124) goto L126 (error at wait_for_aiohttp:41) else goto L93
L93:
    __mypyc_self__.__mypyc_temp__8 = r124; r125 = is_error
    if not r125 goto L126 (error at wait_for_aiohttp:-1) else goto L94 :: bool
L94:
    r126 = __mypyc_self__.__mypyc_temp__8
    if is_error(r126) goto L126 (error at wait_for_aiohttp:-1) else goto L95
L95:
    r127 = CPyIter_Next(r126)
    dec_ref r126
    if is_error(r127) goto L96 else goto L98
L96:
    r128 = CPy_FetchStopIterationValue()
    if is_error(r128) goto L126 (error at wait_for_aiohttp:41) else goto L97
L97:
    r129 = r128
    r130 = <error> :: object
    __mypyc_self__.__mypyc_temp__8 = r130; r131 = is_error
    if not r131 goto L248 (error at wait_for_aiohttp:41) else goto L120 :: bool
L98:
    r132 = r127
L99:
    __mypyc_self__.__mypyc_next_label__ = 3
    return r132
L100:
    r134 = load_address _Py_NoneStruct
    r135 = type != r134
    if r135 goto L101 else goto L249 :: bool
L101:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L104 (error at wait_for_aiohttp:41) else goto L250 :: bool
L102:
    unreachable
L103:
    inc_ref arg
    goto L115
L104:
    r136 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__9 = r136; r137 = is_error
    if not r137 goto L251 (error at wait_for_aiohttp:-1) else goto L105 :: bool
L105:
    r138 = load_address r5
    r139 = __mypyc_self__.__mypyc_temp__8
    if is_error(r139) goto L251 (error at wait_for_aiohttp:-1) else goto L106
L106:
    r140 = CPy_YieldFromErrorHandle(r139, r138)
    dec_ref r139
    if is_error(r140) goto L251 (error at wait_for_aiohttp:41) else goto L107
L107:
    if r140 goto L110 else goto L108 :: bool
L108:
    r132 = r5
    r141 = __mypyc_self__.__mypyc_temp__9
    if is_error(r141) goto L252 (error at wait_for_aiohttp:-1) else goto L109
L109:
    CPy_RestoreExcInfo(r141)
    dec_ref r141
    goto L99
L110:
    r129 = r5
    r142 = __mypyc_self__.__mypyc_temp__9
    if is_error(r142) goto L253 (error at wait_for_aiohttp:-1) else goto L111
L111:
    CPy_RestoreExcInfo(r142)
    dec_ref r142
    goto L120
L112:
    r143 = __mypyc_self__.__mypyc_temp__9
    if is_error(r143) goto L126 (error at wait_for_aiohttp:-1) else goto L113
L113:
    CPy_RestoreExcInfo(r143)
    dec_ref r143
    r144 = CPy_KeepPropagating()
    if not r144 goto L126 else goto L114 :: bool
L114:
    unreachable
L115:
    r145 = __mypyc_self__.__mypyc_temp__8
    if is_error(r145) goto L254 (error at wait_for_aiohttp:-1) else goto L116
L116:
    r146 = CPyIter_Send(r145, arg)
    dec_ref r145
    dec_ref arg
    if is_error(r146) goto L118 else goto L117
L117:
    r132 = r146
    goto L99
L118:
    r147 = CPy_FetchStopIterationValue()
    if is_error(r147) goto L126 (error at wait_for_aiohttp:41) else goto L119
L119:
    r129 = r147
L120:
    r148 = PyObject_IsTrue(r129)
    dec_ref r129
    r149 = r148 >= 0 :: signed
    if not r149 goto L126 (error at wait_for_aiohttp:-1) else goto L121 :: bool
L121:
    r150 = truncate r148: i32 to builtins.bool
    if r150 goto L124 else goto L122 :: bool
L122:
    CPy_Reraise()
    if not 0 goto L126 else goto L123 :: bool
L123:
    unreachable
L124:
    r151 = __mypyc_self__.__mypyc_temp__7
    if is_error(r151) goto L130 (error at wait_for_aiohttp:-1) else goto L125
L125:
    CPy_RestoreExcInfo(r151)
    dec_ref r151
    goto L129
L126:
    r152 = __mypyc_self__.__mypyc_temp__7
    if is_error(r152) goto L130 (error at wait_for_aiohttp:-1) else goto L127
L127:
    CPy_RestoreExcInfo(r152)
    dec_ref r152
    r153 = CPy_KeepPropagating()
    if not r153 goto L130 else goto L128 :: bool
L128:
    unreachable
L129:
    r154 = <error> :: tuple[object, object, object]
    r9 = r154
    goto L131
L130:
    r155 = CPy_CatchError()
    r9 = r155
L131:
    r156 = __mypyc_self__.__mypyc_temp__2
    if is_error(r156) goto L167 (error at wait_for_aiohttp:-1) else goto L132
L132:
    if r156 goto L133 else goto L164 :: bool
L133:
    r157 = load_address _Py_NoneStruct
    r158 = __mypyc_self__.__mypyc_temp__0
    if is_error(r158) goto L167 (error at wait_for_aiohttp:-1) else goto L134
L134:
    r159 = __mypyc_self__.__mypyc_temp__1
    if is_error(r159) goto L255 (error at wait_for_aiohttp:-1) else goto L135
L135:
    r160 = [r159, r157, r157, r157]
    r161 = load_address r160
    r162 = PyObject_Vectorcall(r158, r161, 4, 0)
    dec_ref r158
    if is_error(r162) goto L256 (error at wait_for_aiohttp:41) else goto L136
L136:
    dec_ref r159
    r163 = CPy_GetCoro(r162)
    dec_ref r162
    if is_error(r163) goto L167 (error at wait_for_aiohttp:41) else goto L137
L137:
    __mypyc_self__.__mypyc_temp__10 = r163; r164 = is_error
    if not r164 goto L167 (error at wait_for_aiohttp:-1) else goto L138 :: bool
L138:
    r165 = __mypyc_self__.__mypyc_temp__10
    if is_error(r165) goto L167 (error at wait_for_aiohttp:-1) else goto L139
L139:
    r166 = CPyIter_Next(r165)
    dec_ref r165
    if is_error(r166) goto L140 else goto L257
L140:
    r167 = CPy_FetchStopIterationValue()
    if is_error(r167) goto L167 (error at wait_for_aiohttp:41) else goto L141
L141:
    r168 = r167
    dec_ref r168
    r169 = <error> :: object
    __mypyc_self__.__mypyc_temp__10 = r169; r170 = is_error
    if not r170 goto L167 (error at wait_for_aiohttp:41) else goto L164 :: bool
L142:
    r171 = r166
L143:
    __mypyc_self__.__mypyc_next_label__ = 4
    return r171
L144:
    r173 = load_address _Py_NoneStruct
    r174 = type != r173
    if r174 goto L145 else goto L258 :: bool
L145:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L148 (error at wait_for_aiohttp:41) else goto L259 :: bool
L146:
    unreachable
L147:
    inc_ref arg
    goto L159
L148:
    r175 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__11 = r175; r176 = is_error
    if not r176 goto L260 (error at wait_for_aiohttp:-1) else goto L149 :: bool
L149:
    r177 = load_address r7
    r178 = __mypyc_self__.__mypyc_temp__10
    if is_error(r178) goto L260 (error at wait_for_aiohttp:-1) else goto L150
L150:
    r179 = CPy_YieldFromErrorHandle(r178, r177)
    dec_ref r178
    if is_error(r179) goto L260 (error at wait_for_aiohttp:41) else goto L151
L151:
    if r179 goto L154 else goto L152 :: bool
L152:
    r171 = r7
    r180 = __mypyc_self__.__mypyc_temp__11
    if is_error(r180) goto L261 (error at wait_for_aiohttp:-1) else goto L262
L153:
    CPy_RestoreExcInfo(r180)
    dec_ref r180
    goto L143
L154:
    r168 = r7
    dec_ref r168
    r181 = __mypyc_self__.__mypyc_temp__11
    if is_error(r181) goto L156 (error at wait_for_aiohttp:-1) else goto L155
L155:
    CPy_RestoreExcInfo(r181)
    dec_ref r181
    goto L164
L156:
    r182 = __mypyc_self__.__mypyc_temp__11
    if is_error(r182) goto L167 (error at wait_for_aiohttp:-1) else goto L157
L157:
    CPy_RestoreExcInfo(r182)
    dec_ref r182
    r183 = CPy_KeepPropagating()
    if not r183 goto L167 else goto L263 :: bool
L158:
    unreachable
L159:
    r184 = __mypyc_self__.__mypyc_temp__10
    if is_error(r184) goto L264 (error at wait_for_aiohttp:-1) else goto L160
L160:
    r185 = CPyIter_Send(r184, arg)
    dec_ref r184
    dec_ref arg
    if is_error(r185) goto L162 else goto L265
L161:
    r171 = r185
    goto L143
L162:
    r186 = CPy_FetchStopIterationValue()
    if is_error(r186) goto L167 (error at wait_for_aiohttp:41) else goto L163
L163:
    r168 = r186
    dec_ref r168
L164:
    if is_error(r9) goto L213 else goto L165
L165:
    CPy_Reraise()
    if not 0 goto L167 else goto L266 :: bool
L166:
    unreachable
L167:
    if is_error(r9) goto L169 else goto L168
L168:
    CPy_RestoreExcInfo(r9)
    xdec_ref r9
L169:
    r187 = CPy_KeepPropagating()
    if not r187 goto L171 else goto L170 :: bool
L170:
    unreachable
L171:
    r188 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__12 = r188; r189 = is_error
    if not r189 goto L210 (error at wait_for_aiohttp:-1) else goto L172 :: bool
L172:
    r190 = faster_web3.tools.benchmark.utils.globals :: static
    r191 = 'aiohttp'
    r192 = CPyDict_GetItem(r190, r191)
    if is_error(r192) goto L210 (error at wait_for_aiohttp:43) else goto L173
L173:
    r193 = 'client_exceptions'
    r194 = CPyObject_GetAttr(r192, r193)
    dec_ref r192
    if is_error(r194) goto L210 (error at wait_for_aiohttp:43) else goto L174
L174:
    r195 = 'ClientConnectorError'
    r196 = CPyObject_GetAttr(r194, r195)
    dec_ref r194
    if is_error(r196) goto L210 (error at wait_for_aiohttp:43) else goto L175
L175:
    r197 = CPy_ExceptionMatches(r196)
    dec_ref r196
    if r197 goto L176 else goto L206 :: bool
L176:
    r198 = asyncio :: module
    r199 = 'sleep'
    r200 = CPyObject_GetAttr(r198, r199)
    if is_error(r200) goto L210 (error at wait_for_aiohttp:44) else goto L177
L177:
    r201 = box(float, 0.01)
    r202 = [r201]
    r203 = load_address r202
    r204 = PyObject_Vectorcall(r200, r203, 1, 0)
    dec_ref r200
    if is_error(r204) goto L267 (error at wait_for_aiohttp:44) else goto L178
L178:
    dec_ref r201
    r205 = CPy_GetCoro(r204)
    dec_ref r204
    if is_error(r205) goto L210 (error at wait_for_aiohttp:44) else goto L179
L179:
    __mypyc_self__.__mypyc_temp__13 = r205; r206 = is_error
    if not r206 goto L210 (error at wait_for_aiohttp:-1) else goto L180 :: bool
L180:
    r207 = __mypyc_self__.__mypyc_temp__13
    if is_error(r207) goto L210 (error at wait_for_aiohttp:-1) else goto L181
L181:
    r208 = CPyIter_Next(r207)
    dec_ref r207
    if is_error(r208) goto L182 else goto L184
L182:
    r209 = CPy_FetchStopIterationValue()
    if is_error(r209) goto L210 (error at wait_for_aiohttp:44) else goto L183
L183:
    r210 = r209
    dec_ref r210
    r211 = <error> :: object
    __mypyc_self__.__mypyc_temp__13 = r211; r212 = is_error
    if not r212 goto L210 (error at wait_for_aiohttp:44) else goto L208 :: bool
L184:
    r213 = r208
L185:
    __mypyc_self__.__mypyc_next_label__ = 5
    return r213
L186:
    r215 = load_address _Py_NoneStruct
    r216 = type != r215
    if r216 goto L187 else goto L268 :: bool
L187:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L190 (error at wait_for_aiohttp:44) else goto L269 :: bool
L188:
    unreachable
L189:
    inc_ref arg
    goto L201
L190:
    r217 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__14 = r217; r218 = is_error
    if not r218 goto L270 (error at wait_for_aiohttp:-1) else goto L191 :: bool
L191:
    r219 = load_address r11
    r220 = __mypyc_self__.__mypyc_temp__13
    if is_error(r220) goto L270 (error at wait_for_aiohttp:-1) else goto L192
L192:
    r221 = CPy_YieldFromErrorHandle(r220, r219)
    dec_ref r220
    if is_error(r221) goto L270 (error at wait_for_aiohttp:44) else goto L193
L193:
    if r221 goto L196 else goto L194 :: bool
L194:
    r213 = r11
    r222 = __mypyc_self__.__mypyc_temp__14
    if is_error(r222) goto L271 (error at wait_for_aiohttp:-1) else goto L195
L195:
    CPy_RestoreExcInfo(r222)
    dec_ref r222
    goto L185
L196:
    r210 = r11
    dec_ref r210
    r223 = __mypyc_self__.__mypyc_temp__14
    if is_error(r223) goto L198 (error at wait_for_aiohttp:-1) else goto L197
L197:
    CPy_RestoreExcInfo(r223)
    dec_ref r223
    goto L208
L198:
    r224 = __mypyc_self__.__mypyc_temp__14
    if is_error(r224) goto L210 (error at wait_for_aiohttp:-1) else goto L199
L199:
    CPy_RestoreExcInfo(r224)
    dec_ref r224
    r225 = CPy_KeepPropagating()
    if not r225 goto L210 else goto L200 :: bool
L200:
    unreachable
L201:
    r226 = __mypyc_self__.__mypyc_temp__13
    if is_error(r226) goto L272 (error at wait_for_aiohttp:-1) else goto L202
L202:
    r227 = CPyIter_Send(r226, arg)
    dec_ref r226
    dec_ref arg
    if is_error(r227) goto L204 else goto L203
L203:
    r213 = r227
    goto L185
L204:
    r228 = CPy_FetchStopIterationValue()
    if is_error(r228) goto L210 (error at wait_for_aiohttp:44) else goto L205
L205:
    r210 = r228
    dec_ref r210
    goto L208
L206:
    CPy_Reraise()
    if not 0 goto L210 else goto L207 :: bool
L207:
    unreachable
L208:
    r229 = __mypyc_self__.__mypyc_temp__12
    if is_error(r229) goto L226 (error at wait_for_aiohttp:-1) else goto L209
L209:
    CPy_RestoreExcInfo(r229)
    dec_ref r229
    goto L9
L210:
    r230 = __mypyc_self__.__mypyc_temp__12
    if is_error(r230) goto L226 (error at wait_for_aiohttp:-1) else goto L211
L211:
    CPy_RestoreExcInfo(r230)
    dec_ref r230
    r231 = CPy_KeepPropagating()
    if not r231 goto L226 else goto L212 :: bool
L212:
    unreachable
L213:
    r232 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L214:
    if is_error(stop_iter_ptr) goto L215 else goto L217
L215:
    CPyGen_SetStopIterationValue(r232)
    if not 0 goto L226 else goto L216 :: bool
L216:
    unreachable
L217:
    inc_ref r232
    set_mem stop_iter_ptr, r232 :: builtins.object*
    return 0
L218:
    r234 = r12 == 0
    if r234 goto L273 else goto L219 :: bool
L219:
    r235 = r12 == 1
    if r235 goto L274 else goto L275 :: bool
L220:
    r236 = r12 == 2
    if r236 goto L276 else goto L277 :: bool
L221:
    r237 = r12 == 3
    if r237 goto L278 else goto L279 :: bool
L222:
    r238 = r12 == 4
    if r238 goto L280 else goto L281 :: bool
L223:
    r239 = r12 == 5
    if r239 goto L186 else goto L282 :: bool
L224:
    r240 = raise StopIteration
    if not r240 goto L226 (error at wait_for_aiohttp:37) else goto L225 :: bool
L225:
    unreachable
L226:
    r241 = <error> :: object
    return r241
L227:
    dec_ref r41
    goto L171
L228:
    dec_ref r45
    dec_ref r46
    goto L171
L229:
    dec_ref r45
    goto L171
L230:
    dec_ref r54
    goto L171
L231:
    dec_ref r62
    goto L171
L232:
    xdec_ref r1
    goto L38
L233:
    xdec_ref r1
    goto L37
L234:
    xdec_ref r1
    goto L47
L235:
    dec_ref r65
    goto L47
L236:
    dec_ref r62
    goto L47
L237:
    dec_ref arg
    goto L171
L238:
    dec_ref r82
    goto L87
L239:
    dec_ref r82
    dec_ref r83
    goto L87
L240:
    xdec_ref r3
    goto L70
L241:
    xdec_ref r3
    goto L69
L242:
    xdec_ref r3
    goto L79
L243:
    dec_ref r96
    goto L79
L244:
    dec_ref arg
    goto L87
L245:
    dec_ref r116
    dec_ref r117
    dec_ref r118
    goto L126
L246:
    dec_ref r116
    dec_ref r117
    dec_ref r118
    dec_ref r119
    goto L126
L247:
    dec_ref r116
    dec_ref r117
    dec_ref r118
    dec_ref r120
    goto L126
L248:
    dec_ref r129
    goto L126
L249:
    xdec_ref r5
    goto L103
L250:
    xdec_ref r5
    goto L102
L251:
    xdec_ref r5
    goto L112
L252:
    dec_ref r132
    goto L112
L253:
    dec_ref r129
    goto L112
L254:
    dec_ref arg
    goto L126
L255:
    dec_ref r158
    goto L167
L256:
    dec_ref r159
    goto L167
L257:
    xdec_ref r9
    goto L142
L258:
    xdec_ref r7
    goto L147
L259:
    xdec_ref r7
    xdec_ref r9
    goto L146
L260:
    xdec_ref r7
    goto L156
L261:
    dec_ref r171
    goto L156
L262:
    xdec_ref r9
    goto L153
L263:
    xdec_ref r9
    goto L158
L264:
    dec_ref arg
    goto L167
L265:
    xdec_ref r9
    goto L161
L266:
    xdec_ref r9
    goto L166
L267:
    dec_ref r201
    goto L210
L268:
    xdec_ref r11
    goto L189
L269:
    xdec_ref r11
    goto L188
L270:
    xdec_ref r11
    goto L198
L271:
    dec_ref r213
    goto L198
L272:
    dec_ref arg
    goto L210
L273:
    xdec_ref r1
    xdec_ref r3
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    goto L1
L274:
    xdec_ref r3
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    goto L35
L275:
    xdec_ref r1
    goto L220
L276:
    xdec_ref r5
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    goto L67
L277:
    xdec_ref r3
    goto L221
L278:
    xdec_ref r7
    xdec_ref r9
    xdec_ref r11
    goto L100
L279:
    xdec_ref r5
    goto L222
L280:
    xdec_ref r11
    goto L144
L281:
    xdec_ref r7
    xdec_ref r9
    goto L223
L282:
    xdec_ref r11
    goto L224

def wait_for_aiohttp_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wait_for_aiohttp_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wait_for_aiohttp_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = wait_for_aiohttp_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def wait_for_aiohttp_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wait_for_aiohttp_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = wait_for_aiohttp_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def wait_for_aiohttp_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def wait_for_aiohttp_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def wait_for_aiohttp(endpoint_uri, timeout):
    endpoint_uri :: str
    timeout :: int
    r0 :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    r1, r2, r3 :: bool
    r4 :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
L0:
    if is_error(timeout) goto L1 else goto L7
L1:
    timeout = 120
L2:
    r0 = wait_for_aiohttp_gen()
    if is_error(r0) goto L8 (error at wait_for_aiohttp:37) else goto L3
L3:
    r0.__mypyc_next_label__ = 0
    inc_ref endpoint_uri
    r0.__mypyc_generator_attribute__endpoint_uri = endpoint_uri; r2 = is_error
    if not r2 goto L9 (error at wait_for_aiohttp:37) else goto L4 :: bool
L4:
    r0.__mypyc_generator_attribute__timeout = timeout; r3 = is_error
    if not r3 goto L10 (error at wait_for_aiohttp:37) else goto L5 :: bool
L5:
    return r0
L6:
    r4 = <error> :: faster_web3.tools.benchmark.utils.wait_for_aiohttp_gen
    return r4
L7:
    inc_ref timeout :: int
    goto L2
L8:
    dec_ref timeout :: int
    goto L6
L9:
    dec_ref timeout :: int
    dec_ref r0
    goto L6
L10:
    dec_ref r0
    goto L6

def wait_for_popen(proc, timeout):
    proc :: object
    timeout :: int
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: float
    r5 :: bit
    r6, r7 :: object
    r8 :: str
    r9, r10 :: object
    r11 :: float
    r12 :: bit
    r13 :: float
    r14 :: bit
    r15 :: object
    r16 :: float
    r17 :: bit
    r18 :: object
    r19 :: str
    r20 :: object[1]
    r21 :: object_ptr
    r22, r23 :: object
    r24 :: bit
    r25 :: object
    r26 :: str
    r27, r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31 :: object
    r32 :: None
L0:
    r0 = time :: module
    r1 = 'time'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L18 (error at wait_for_popen:50) else goto L1
L1:
    r3 = PyObject_Vectorcall(r2, 0, 0, 0)
    dec_ref r2
    if is_error(r3) goto L18 (error at wait_for_popen:50) else goto L2
L2:
    r4 = unbox(float, r3)
    dec_ref r3
    r5 = r4 == -113.0
    if r5 goto L4 else goto L3 :: bool
L3:
    goto L5
L4:
    r6 = PyErr_Occurred()
    if not is_error(r6) goto L18 (error at wait_for_popen:50) else goto L3
L5:
    r7 = time :: module
    r8 = 'time'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L18 (error at wait_for_popen:51) else goto L6
L6:
    r10 = PyObject_Vectorcall(r9, 0, 0, 0)
    dec_ref r9
    if is_error(r10) goto L18 (error at wait_for_popen:51) else goto L7
L7:
    r11 = unbox(float, r10)
    dec_ref r10
    r12 = r11 == -113.0
    if r12 goto L9 else goto L8 :: bool
L8:
    r13 = CPyFloat_FromTagged(timeout)
    r14 = r13 == -113.0
    if r14 goto L11 else goto L10 :: bool
L9:
    r15 = PyErr_Occurred()
    if not is_error(r15) goto L18 (error at wait_for_popen:51) else goto L8
L10:
    r16 = r4 + r13
    r17 = r11 < r16
    if r17 goto L12 else goto L17 :: bool
L11:
    r18 = PyErr_Occurred()
    if not is_error(r18) goto L18 (error at wait_for_popen:51) else goto L10
L12:
    r19 = 'poll'
    r20 = [proc]
    r21 = load_address r20
    r22 = PyObject_VectorcallMethod(r19, r21, 9223372036854775809, 0)
    if is_error(r22) goto L18 (error at wait_for_popen:52) else goto L13
L13:
    r23 = load_address _Py_NoneStruct
    r24 = r22 == r23
    dec_ref r22
    if r24 goto L14 else goto L17 :: bool
L14:
    r25 = time :: module
    r26 = 'sleep'
    r27 = CPyObject_GetAttr(r25, r26)
    if is_error(r27) goto L18 (error at wait_for_popen:53) else goto L15
L15:
    r28 = box(float, 0.01)
    r29 = [r28]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r27, r30, 1, 0)
    dec_ref r27
    if is_error(r31) goto L19 (error at wait_for_popen:53) else goto L20
L16:
    dec_ref r28
    goto L5
L17:
    return 1
L18:
    r32 = <error> :: None
    return r32
L19:
    dec_ref r28
    goto L18
L20:
    dec_ref r31
    goto L16

def kill_proc_gracefully(proc):
    proc :: object
    r0 :: str
    r1 :: object[1]
    r2 :: object_ptr
    r3, r4 :: object
    r5 :: bit
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: str
    r10 :: object[2]
    r11 :: object_ptr
    r12 :: object
    r13 :: None
    r14 :: str
    r15 :: object[1]
    r16 :: object_ptr
    r17, r18 :: object
    r19 :: bit
    r20 :: str
    r21 :: object[1]
    r22 :: object_ptr
    r23 :: object
    r24 :: None
    r25 :: str
    r26 :: object[1]
    r27 :: object_ptr
    r28, r29 :: object
    r30 :: bit
    r31 :: str
    r32 :: object[1]
    r33 :: object_ptr
    r34 :: object
    r35, r36 :: None
L0:
    r0 = 'poll'
    r1 = [proc]
    r2 = load_address r1
    r3 = PyObject_VectorcallMethod(r0, r2, 9223372036854775809, 0)
    if is_error(r3) goto L14 (error at kill_proc_gracefully:59) else goto L1
L1:
    r4 = load_address _Py_NoneStruct
    r5 = r3 == r4
    dec_ref r3
    if r5 goto L2 else goto L5 :: bool
L2:
    r6 = signal :: module
    r7 = 'SIGINT'
    r8 = CPyObject_GetAttr(r6, r7)
    if is_error(r8) goto L14 (error at kill_proc_gracefully:60) else goto L3
L3:
    r9 = 'send_signal'
    r10 = [proc, r8]
    r11 = load_address r10
    r12 = PyObject_VectorcallMethod(r9, r11, 9223372036854775810, 0)
    if is_error(r12) goto L15 (error at kill_proc_gracefully:60) else goto L16
L4:
    dec_ref r8
    r13 = wait_for_popen(proc, 26)
    if is_error(r13) goto L14 (error at kill_proc_gracefully:61) else goto L5
L5:
    r14 = 'poll'
    r15 = [proc]
    r16 = load_address r15
    r17 = PyObject_VectorcallMethod(r14, r16, 9223372036854775809, 0)
    if is_error(r17) goto L14 (error at kill_proc_gracefully:63) else goto L6
L6:
    r18 = load_address _Py_NoneStruct
    r19 = r17 == r18
    dec_ref r17
    if r19 goto L7 else goto L9 :: bool
L7:
    r20 = 'terminate'
    r21 = [proc]
    r22 = load_address r21
    r23 = PyObject_VectorcallMethod(r20, r22, 9223372036854775809, 0)
    if is_error(r23) goto L14 (error at kill_proc_gracefully:64) else goto L17
L8:
    r24 = wait_for_popen(proc, 10)
    if is_error(r24) goto L14 (error at kill_proc_gracefully:65) else goto L9
L9:
    r25 = 'poll'
    r26 = [proc]
    r27 = load_address r26
    r28 = PyObject_VectorcallMethod(r25, r27, 9223372036854775809, 0)
    if is_error(r28) goto L14 (error at kill_proc_gracefully:67) else goto L10
L10:
    r29 = load_address _Py_NoneStruct
    r30 = r28 == r29
    dec_ref r28
    if r30 goto L11 else goto L13 :: bool
L11:
    r31 = 'kill'
    r32 = [proc]
    r33 = load_address r32
    r34 = PyObject_VectorcallMethod(r31, r33, 9223372036854775809, 0)
    if is_error(r34) goto L14 (error at kill_proc_gracefully:68) else goto L18
L12:
    r35 = wait_for_popen(proc, 4)
    if is_error(r35) goto L14 (error at kill_proc_gracefully:69) else goto L13
L13:
    return 1
L14:
    r36 = <error> :: None
    return r36
L15:
    dec_ref r8
    goto L14
L16:
    dec_ref r12
    goto L4
L17:
    dec_ref r23
    goto L8
L18:
    dec_ref r34
    goto L12

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5, r6, r7, r8 :: object_ptr
    r9 :: object_ptr[4]
    r10 :: c_ptr
    r11 :: native_int[4]
    r12 :: c_ptr
    r13 :: object
    r14 :: dict
    r15, r16 :: str
    r17 :: bit
    r18 :: object
    r19 :: str
    r20 :: dict
    r21 :: object
    r22, r23 :: object_ptr
    r24 :: object_ptr[2]
    r25 :: c_ptr
    r26 :: native_int[2]
    r27 :: c_ptr
    r28 :: object
    r29 :: dict
    r30, r31 :: str
    r32 :: bit
    r33 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L7 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address asyncio :: module
    r6 = load_address signal :: module
    r7 = load_address socket :: module
    r8 = load_address time :: module
    r9 = [r5, r6, r7, r8]
    r10 = load_address r9
    r11 = [1, 2, 3, 4]
    r12 = load_address r11
    r13 = (('asyncio', 'asyncio', 'asyncio'), ('signal', 'signal', 'signal'), ('socket', 'socket', 'socket'), ('time', 'time', 'time'))
    r14 = faster_web3.tools.benchmark.utils.globals :: static
    r15 = 'faster_web3/tools/benchmark/utils.py'
    r16 = '<module>'
    r17 = CPyImport_ImportMany(r13, r10, r14, r15, r16, r12)
    if not r17 goto L7 else goto L4 :: bool
L4:
    r18 = ('Any',)
    r19 = 'typing'
    r20 = faster_web3.tools.benchmark.utils.globals :: static
    r21 = CPyImport_ImportFromMany(r19, r18, r18, r20)
    if is_error(r21) goto L7 (error at <module>:5) else goto L5
L5:
    typing = r21 :: module
    dec_ref r21
    r22 = load_address aiohttp :: module
    r23 = load_address requests :: module
    r24 = [r22, r23]
    r25 = load_address r24
    r26 = [9, 10]
    r27 = load_address r26
    r28 = (('aiohttp', 'aiohttp', 'aiohttp'), ('requests', 'requests', 'requests'))
    r29 = faster_web3.tools.benchmark.utils.globals :: static
    r30 = 'faster_web3/tools/benchmark/utils.py'
    r31 = '<module>'
    r32 = CPyImport_ImportMany(r28, r25, r29, r30, r31, r27)
    if not r32 goto L7 else goto L6 :: bool
L6:
    return 1
L7:
    r33 = <error> :: None
    return r33

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L4 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    return 1
L4:
    r5 = <error> :: None
    return r5

def percentile(values, percentile):
    values :: object
    percentile :: float
    r0 :: i32
    r1 :: bit
    r2 :: bool
    r3, r4, r5, r6, r7 :: str
    r8 :: object[3]
    r9 :: object_ptr
    r10 :: object
    r11 :: str
    r12 :: list
    r13, r14, r15 :: ptr
    r16 :: str
    r17 :: dict
    r18 :: str
    r19 :: object
    r20 :: object[1]
    r21 :: object_ptr
    r22 :: object
    r23, r24 :: bit
    r25 :: str
    r26 :: dict
    r27 :: str
    r28 :: object
    r29 :: object[1]
    r30 :: object_ptr
    r31 :: object
    r32 :: list
    r33 :: int
    r34 :: float
    r35 :: bit
    r36, r37, r38 :: float
    r39 :: bit
    r40, r41 :: object
    r42 :: int
    r43 :: float
    r44 :: bit
    r45 :: object
    r46, r47 :: float
    r48, r49, r50, r51 :: bit
    r52, r53, fractional :: float
    r54 :: bit
    r55 :: int
    r56 :: object
    r57 :: int
    r58 :: float
    r59 :: bit
    r60 :: object
    r61 :: float
    r62 :: int
    r63 :: object
    r64, r65 :: int
    r66 :: object
    r67, r68 :: int
    r69 :: float
    r70 :: bit
    r71, r72 :: float
    r73 :: bit
    r74 :: object
    r75 :: float
    r76 :: object
    r77 :: float
L0:
    r0 = PyObject_IsTrue(values)
    r1 = r0 >= 0 :: signed
    if not r1 goto L47 (error at percentile:11) else goto L1 :: bool
L1:
    r2 = truncate r0: i32 to builtins.bool
    if r2 goto L10 else goto L2 :: bool
L2:
    r3 = ''
    r4 = 'Expected a sequence of at least 1 integers, got '
    r5 = '{!r:{}}'
    r6 = ''
    r7 = 'format'
    r8 = [r5, values, r6]
    r9 = load_address r8
    r10 = PyObject_VectorcallMethod(r7, r9, 9223372036854775811, 0)
    if is_error(r10) goto L47 (error at percentile:15) else goto L3
L3:
    r11 = cast(str, r10)
    if is_error(r11) goto L47 (error at percentile:15) else goto L4
L4:
    r12 = PyList_New(2)
    if is_error(r12) goto L48 (error at percentile:15) else goto L5
L5:
    r13 = get_element_ptr r12 ob_item :: PyListObject
    r14 = load_mem r13 :: ptr*
    inc_ref r4
    set_mem r14, r4 :: builtins.object*
    r15 = r14 + 8
    set_mem r15, r11 :: builtins.object*
    r16 = PyUnicode_Join(r3, r12)
    dec_ref r12
    if is_error(r16) goto L47 (error at percentile:15) else goto L6
L6:
    r17 = faster_web3._utils.math.globals :: static
    r18 = 'InsufficientData'
    r19 = CPyDict_GetItem(r17, r18)
    if is_error(r19) goto L49 (error at percentile:14) else goto L7
L7:
    r20 = [r16]
    r21 = load_address r20
    r22 = PyObject_Vectorcall(r19, r21, 1, 0)
    dec_ref r19
    if is_error(r22) goto L49 (error at percentile:14) else goto L8
L8:
    dec_ref r16
    CPy_Raise(r22)
    dec_ref r22
    if not 0 goto L47 (error at percentile:14) else goto L9 :: bool
L9:
    unreachable
L10:
    r23 = percentile < 0.0
    if r23 goto L12 else goto L11 :: bool
L11:
    r24 = percentile > 100.0
    if r24 goto L12 else goto L16 :: bool
L12:
    r25 = 'percentile must be in the range [0, 100]'
    r26 = faster_web3._utils.math.globals :: static
    r27 = 'Web3ValueError'
    r28 = CPyDict_GetItem(r26, r27)
    if is_error(r28) goto L47 (error at percentile:18) else goto L13
L13:
    r29 = [r25]
    r30 = load_address r29
    r31 = PyObject_Vectorcall(r28, r30, 1, 0)
    dec_ref r28
    if is_error(r31) goto L47 (error at percentile:18) else goto L14
L14:
    CPy_Raise(r31)
    dec_ref r31
    if not 0 goto L47 (error at percentile:18) else goto L15 :: bool
L15:
    unreachable
L16:
    r32 = CPySequence_Sort(values)
    if is_error(r32) goto L47 (error at percentile:20) else goto L17
L17:
    r33 = CPyObject_Size(values)
    if is_error(r33) goto L50 (error at percentile:22) else goto L18
L18:
    r34 = CPyFloat_FromTagged(r33)
    dec_ref r33 :: int
    r35 = r34 == -113.0
    if r35 goto L20 else goto L19 :: bool
L19:
    r36 = r34 * percentile
    r37 = r36 / 100.0
    r38 = r37 - 1.0
    r39 = r38 < 0.0
    if r39 goto L21 else goto L26 :: bool
L20:
    r40 = PyErr_Occurred()
    if not is_error(r40) goto L50 (error at percentile:22) else goto L19
L21:
    r41 = CPyList_GetItemShort(r32, 0)
    dec_ref r32
    if is_error(r41) goto L47 (error at percentile:24) else goto L22
L22:
    r42 = unbox(int, r41)
    dec_ref r41
    if is_error(r42) goto L47 (error at percentile:24) else goto L23
L23:
    r43 = CPyFloat_FromTagged(r42)
    dec_ref r42 :: int
    r44 = r43 == -113.0
    if r44 goto L25 else goto L24 :: bool
L24:
    return r43
L25:
    r45 = PyErr_Occurred()
    if not is_error(r45) goto L47 (error at percentile:24) else goto L24
L26:
    r46 = r38 % 1.0
    r47 = r46
    r48 = r47 == 0.0
    if r48 goto L29 else goto L27 :: bool
L27:
    r49 = r38 < 0.0
    r50 = 1.0 < 0.0
    r51 = r49 == r50
    if r51 goto L30 else goto L28 :: bool
L28:
    r52 = r47 + 1.0
    r47 = r52
    goto L30
L29:
    r53 = copysign(0.0, 1.0)
    r47 = r53
L30:
    fractional = r47
    r54 = fractional == 0.0
    if r54 goto L31 else goto L37 :: bool
L31:
    r55 = CPyTagged_FromFloat(r38)
    if is_error(r55) goto L50 (error at percentile:28) else goto L32
L32:
    r56 = CPyList_GetItem(r32, r55)
    dec_ref r32
    dec_ref r55 :: int
    if is_error(r56) goto L47 (error at percentile:28) else goto L33
L33:
    r57 = unbox(int, r56)
    dec_ref r56
    if is_error(r57) goto L47 (error at percentile:28) else goto L34
L34:
    r58 = CPyFloat_FromTagged(r57)
    dec_ref r57 :: int
    r59 = r58 == -113.0
    if r59 goto L36 else goto L35 :: bool
L35:
    return r58
L36:
    r60 = PyErr_Occurred()
    if not is_error(r60) goto L47 (error at percentile:28) else goto L35
L37:
    r61 = r38 - fractional
    r62 = CPyTagged_FromFloat(r61)
    if is_error(r62) goto L50 (error at percentile:30) else goto L38
L38:
    r63 = CPyList_GetItem(r32, r62)
    if is_error(r63) goto L51 (error at percentile:31) else goto L39
L39:
    r64 = unbox(int, r63)
    dec_ref r63
    if is_error(r64) goto L51 (error at percentile:31) else goto L40
L40:
    r65 = CPyTagged_Add(r62, 2)
    dec_ref r62 :: int
    r66 = CPyList_GetItem(r32, r65)
    dec_ref r32
    dec_ref r65 :: int
    if is_error(r66) goto L52 (error at percentile:32) else goto L41
L41:
    r67 = unbox(int, r66)
    dec_ref r66
    if is_error(r67) goto L52 (error at percentile:32) else goto L42
L42:
    r68 = CPyTagged_Subtract(r67, r64)
    dec_ref r67 :: int
    r69 = CPyFloat_FromTagged(r68)
    dec_ref r68 :: int
    r70 = r69 == -113.0
    if r70 goto L44 else goto L43 :: bool
L43:
    r71 = fractional * r69
    r72 = CPyFloat_FromTagged(r64)
    dec_ref r64 :: int
    r73 = r72 == -113.0
    if r73 goto L46 else goto L45 :: bool
L44:
    r74 = PyErr_Occurred()
    if not is_error(r74) goto L52 (error at percentile:33) else goto L43
L45:
    r75 = r72 + r71
    return r75
L46:
    r76 = PyErr_Occurred()
    if not is_error(r76) goto L47 (error at percentile:33) else goto L45
L47:
    r77 = <error> :: float
    return r77
L48:
    dec_ref r11
    goto L47
L49:
    dec_ref r16
    goto L47
L50:
    dec_ref r32
    goto L47
L51:
    dec_ref r32
    dec_ref r62 :: int
    goto L47
L52:
    dec_ref r64 :: int
    goto L47

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Sequence',)
    r6 = 'typing'
    r7 = faster_web3._utils.math.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('InsufficientData', 'Web3ValueError')
    r10 = 'faster_web3.exceptions'
    r11 = faster_web3._utils.math.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L6 (error at <module>:5) else goto L5
L5:
    faster_web3.exceptions = r12 :: module
    dec_ref r12
    return 1
L6:
    r13 = <error> :: None
    return r13

def construct_user_agent(module, class_name):
    module, class_name :: str
    r0, r1 :: object
    r2 :: str
    r3 :: dict
    r4 :: object
    r5 :: str
    r6 :: dict
    r7 :: str
    r8 :: object
    r9, r10, r11, r12, r13 :: str
L0:
    r0 = ('__version__',)
    r1 = ('web3_version',)
    r2 = 'faster_web3'
    r3 = faster_web3._utils.http.globals :: static
    r4 = CPyImport_ImportFromMany(r2, r0, r1, r3)
    if is_error(r4) goto L5 (error at construct_user_agent:11) else goto L1
L1:
    faster_web3 = r4 :: module
    dec_ref r4
    r5 = 'faster_web3.py/'
    r6 = faster_web3._utils.http.globals :: static
    r7 = 'web3_version'
    r8 = CPyDict_GetItem(r6, r7)
    if is_error(r8) goto L5 (error at construct_user_agent:15) else goto L2
L2:
    r9 = cast(str, r8)
    if is_error(r9) goto L5 (error at construct_user_agent:15) else goto L3
L3:
    r10 = '/'
    r11 = '.'
    r12 = CPyStr_Build(6, r5, r9, r10, module, r11, class_name)
    dec_ref r9
    if is_error(r12) goto L5 (error at construct_user_agent:15) else goto L4
L4:
    return r12
L5:
    r13 = <error> :: str
    return r13

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: dict
    r10 :: str
    r11 :: object
    r12 :: i32
    r13 :: bit
    r14 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = faster_web3._utils.http.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = faster_web3._utils.http.globals :: static
    r10 = 'DEFAULT_HTTP_TIMEOUT'
    r11 = box(float, 30.0)
    r12 = CPyDict_SetItem(r9, r10, r11)
    dec_ref r11
    r13 = r12 >= 0 :: signed
    if not r13 goto L6 (error at <module>:4) else goto L5 :: bool
L5:
    return 1
L6:
    r14 = <error> :: None
    return r14

def SimpleCache.__init__(self, size):
    self :: faster_web3.utils.caching.SimpleCache
    size :: int
    r0 :: bool
    r1 :: dict
    r2 :: str
    r3, r4 :: object
    r5 :: dict
    r6 :: bool
    r7 :: None
L0:
    if is_error(size) goto L1 else goto L9
L1:
    size = 200
L2:
    self._size = size; r0 = is_error
    if not r0 goto L8 (error at __init__:34) else goto L3 :: bool
L3:
    r1 = faster_web3.utils.caching.globals :: static
    r2 = 'OrderedDict'
    r3 = CPyDict_GetItem(r1, r2)
    if is_error(r3) goto L8 (error at __init__:35) else goto L4
L4:
    r4 = PyObject_Vectorcall(r3, 0, 0, 0)
    dec_ref r3
    if is_error(r4) goto L8 (error at __init__:35) else goto L5
L5:
    r5 = cast(dict, r4)
    if is_error(r5) goto L8 (error at __init__:35) else goto L6
L6:
    self._data = r5; r6 = is_error
    if not r6 goto L8 (error at __init__:35) else goto L7 :: bool
L7:
    return 1
L8:
    r7 = <error> :: None
    return r7
L9:
    inc_ref size :: int
    goto L2

def SimpleCache.__contains__(self, key):
    self :: faster_web3.utils.caching.SimpleCache
    key :: str
    r0 :: dict
    r1 :: i32
    r2 :: bit
    r3, r4 :: bool
L0:
    r0 = self._data
    if is_error(r0) goto L3 (error at __contains__:38) else goto L1
L1:
    r1 = PyDict_Contains(r0, key)
    dec_ref r0
    r2 = r1 >= 0 :: signed
    if not r2 goto L3 (error at __contains__:38) else goto L2 :: bool
L2:
    r3 = truncate r1: i32 to builtins.bool
    return r3
L3:
    r4 = <error> :: bool
    return r4

def SimpleCache.__len__(self):
    self :: faster_web3.utils.caching.SimpleCache
    r0 :: dict
    r1 :: native_int
    r2 :: short_int
    r3 :: int
L0:
    r0 = self._data
    if is_error(r0) goto L2 (error at __len__:41) else goto L1
L1:
    r1 = PyDict_Size(r0)
    dec_ref r0
    r2 = r1 << 1
    return r2
L2:
    r3 = <error> :: int
    return r3

def SimpleCache.cache(self, key, value):
    self :: faster_web3.utils.caching.SimpleCache
    key :: str
    value :: object
    r0, r1 :: dict
    r2 :: i32
    r3 :: bit
    r4, r5 :: bool
    r6 :: dict
    r7 :: native_int
    r8 :: short_int
    r9 :: int
    r10 :: native_int
    r11 :: bit
    r12 :: native_int
    r13, r14, r15, r16 :: bit
    r17 :: dict
    r18 :: str
    r19 :: object
    r20 :: object[2]
    r21 :: object_ptr
    r22, r23 :: object
    r24 :: tuple[str, object]
    r25 :: str
    r26 :: object
    r27 :: str
    r28 :: object
    r29 :: i32
    r30 :: bit
    r31 :: dict
    r32 :: i32
    r33 :: bit
    r34 :: native_int
    r35 :: short_int
    r36 :: bit
    r37 :: union[dict, None]
    r38 :: object
    r39, r40 :: tuple[object, union[dict, None]]
L0:
    r0 = PyDict_New()
    if is_error(r0) goto L20 (error at cache:44) else goto L1
L1:
    r1 = self._data
    if is_error(r1) goto L21 (error at cache:49) else goto L2
L2:
    r2 = PyDict_Contains(r1, key)
    dec_ref r1
    r3 = r2 >= 0 :: signed
    if not r3 goto L21 (error at cache:49) else goto L3 :: bool
L3:
    r4 = truncate r2: i32 to builtins.bool
    r5 = r4 ^ 1
    if r5 goto L4 else goto L14 :: bool
L4:
    r6 = self._data
    if is_error(r6) goto L21 (error at cache:50) else goto L5
L5:
    r7 = PyDict_Size(r6)
    dec_ref r6
    r8 = r7 << 1
    r9 = borrow self._size
    if is_error(r9) goto L21 (error at cache:50) else goto L6
L6:
    r10 = r8 & 1
    r11 = r10 != 0
    if r11 goto L8 else goto L7 :: bool
L7:
    r12 = r9 & 1
    r13 = r12 != 0
    if r13 goto L8 else goto L9 :: bool
L8:
    r14 = CPyTagged_IsLt_(r8, r9)
    r15 = r14 ^ 1
    if r15 goto L10 else goto L14 :: bool
L9:
    r16 = r8 >= r9 :: signed
    if r16 goto L10 else goto L14 :: bool
L10:
    r17 = self._data
    if is_error(r17) goto L21 (error at cache:51) else goto L11
L11:
    r18 = 'popitem'
    r19 = box(bool, 0)
    r20 = [r17, r19]
    r21 = load_address r20
    r22 = ('last',)
    r23 = PyObject_VectorcallMethod(r18, r21, 9223372036854775809, r22)
    if is_error(r23) goto L22 (error at cache:51) else goto L12
L12:
    dec_ref r17
    r24 = unbox(tuple[str, object], r23)
    dec_ref r23
    if is_error(r24) goto L21 (error at cache:51) else goto L13
L13:
    r25 = borrow r24[0]
    r26 = borrow r24[1]
    r27 = unborrow r25
    r28 = unborrow r26
    r29 = CPyDict_SetItem(r0, r27, r28)
    dec_ref r27
    dec_ref r28
    r30 = r29 >= 0 :: signed
    if not r30 goto L21 (error at cache:52) else goto L4 :: bool
L14:
    r31 = self._data
    if is_error(r31) goto L21 (error at cache:53) else goto L15
L15:
    r32 = CPyDict_SetItem(r31, key, value)
    dec_ref r31
    r33 = r32 >= 0 :: signed
    if not r33 goto L21 (error at cache:53) else goto L16 :: bool
L16:
    r34 = PyDict_Size(r0)
    r35 = r34 << 1
    r36 = r35 != 0
    if r36 goto L17 else goto L23 :: bool
L17:
    r37 = r0
    goto L19
L18:
    r38 = box(None, 1)
    inc_ref r38
    r37 = r38
L19:
    inc_ref value
    r39 = (value, r37)
    return r39
L20:
    r40 = <error> :: tuple[object, union[dict, None]]
    return r40
L21:
    dec_ref r0
    goto L20
L22:
    dec_ref r0
    dec_ref r17
    goto L20
L23:
    dec_ref r0
    goto L18

def SimpleCache.get_cache_entry(self, key):
    self :: faster_web3.utils.caching.SimpleCache
    key :: str
    r0 :: dict
    r1 :: i32
    r2 :: bit
    r3 :: bool
    r4 :: dict
    r5 :: object
    r6 :: union[object, None]
    r7 :: object
    r8 :: union[object, None]
L0:
    r0 = self._data
    if is_error(r0) goto L8 (error at get_cache_entry:60) else goto L1
L1:
    r1 = PyDict_Contains(r0, key)
    dec_ref r0
    r2 = r1 >= 0 :: signed
    if not r2 goto L8 (error at get_cache_entry:60) else goto L2 :: bool
L2:
    r3 = truncate r1: i32 to builtins.bool
    if r3 goto L3 else goto L6 :: bool
L3:
    r4 = self._data
    if is_error(r4) goto L8 (error at get_cache_entry:60) else goto L4
L4:
    r5 = CPyDict_GetItem(r4, key)
    dec_ref r4
    if is_error(r5) goto L8 (error at get_cache_entry:60) else goto L5
L5:
    r6 = r5
    goto L7
L6:
    r7 = box(None, 1)
    inc_ref r7
    r6 = r7
L7:
    return r6
L8:
    r8 = <error> :: union[object, None]
    return r8

def SimpleCache.clear(self):
    self :: faster_web3.utils.caching.SimpleCache
    r0 :: dict
    r1 :: bit
    r2 :: None
L0:
    r0 = self._data
    if is_error(r0) goto L3 (error at clear:63) else goto L1
L1:
    r1 = CPyDict_Clear(r0)
    dec_ref r0
    if not r1 goto L3 (error at clear:63) else goto L2 :: bool
L2:
    return 1
L3:
    r2 = <error> :: None
    return r2

def SimpleCache.items(self):
    self :: faster_web3.utils.caching.SimpleCache
    r0 :: dict
    r1, r2 :: list
L0:
    r0 = self._data
    if is_error(r0) goto L3 (error at items:66) else goto L1
L1:
    r1 = CPyDict_Items(r0)
    dec_ref r0
    if is_error(r1) goto L3 (error at items:66) else goto L2
L2:
    return r1
L3:
    r2 = <error> :: list
    return r2

def SimpleCache.pop(self, key):
    self :: faster_web3.utils.caching.SimpleCache
    key :: str
    r0 :: dict
    r1 :: i32
    r2 :: bit
    r3, r4 :: bool
    r5 :: object
    r6 :: dict
    r7 :: str
    r8 :: object[2]
    r9 :: object_ptr
    r10 :: object
    r11 :: union[object, None]
L0:
    r0 = self._data
    if is_error(r0) goto L7 (error at pop:69) else goto L1
L1:
    r1 = PyDict_Contains(r0, key)
    dec_ref r0
    r2 = r1 >= 0 :: signed
    if not r2 goto L7 (error at pop:69) else goto L2 :: bool
L2:
    r3 = truncate r1: i32 to builtins.bool
    r4 = r3 ^ 1
    if r4 goto L3 else goto L4 :: bool
L3:
    r5 = box(None, 1)
    inc_ref r5
    return r5
L4:
    r6 = self._data
    if is_error(r6) goto L7 (error at pop:72) else goto L5
L5:
    r7 = 'pop'
    r8 = [r6, key]
    r9 = load_address r8
    r10 = PyObject_VectorcallMethod(r7, r9, 9223372036854775810, 0)
    if is_error(r10) goto L8 (error at pop:72) else goto L6
L6:
    dec_ref r6
    return r10
L7:
    r11 = <error> :: union[object, None]
    return r11
L8:
    dec_ref r6
    goto L7

def SimpleCache.popitem(self, last):
    self :: faster_web3.utils.caching.SimpleCache
    last :: bool
    r0 :: dict
    r1 :: str
    r2 :: object
    r3 :: object[2]
    r4 :: object_ptr
    r5, r6 :: object
    r7, r8 :: tuple[str, object]
L0:
    if is_error(last) goto L1 else goto L2
L1:
    last = 1
L2:
    r0 = self._data
    if is_error(r0) goto L6 (error at popitem:75) else goto L3
L3:
    r1 = 'popitem'
    r2 = box(bool, last)
    r3 = [r0, r2]
    r4 = load_address r3
    r5 = ('last',)
    r6 = PyObject_VectorcallMethod(r1, r4, 9223372036854775809, r5)
    if is_error(r6) goto L7 (error at popitem:75) else goto L4
L4:
    dec_ref r0
    r7 = unbox(tuple[str, object], r6)
    dec_ref r6
    if is_error(r7) goto L6 (error at popitem:75) else goto L5
L5:
    return r7
L6:
    r8 = <error> :: tuple[str, object]
    return r8
L7:
    dec_ref r0
    goto L6

def SimpleCache.is_full(self):
    self :: faster_web3.utils.caching.SimpleCache
    r0 :: dict
    r1 :: native_int
    r2 :: short_int
    r3 :: int
    r4 :: native_int
    r5 :: bit
    r6 :: native_int
    r7, r8, r9 :: bit
    r10 :: bool
    r11 :: bit
    r12 :: bool
L0:
    r0 = self._data
    if is_error(r0) goto L7 (error at is_full:78) else goto L1
L1:
    r1 = PyDict_Size(r0)
    dec_ref r0
    r2 = r1 << 1
    r3 = borrow self._size
    if is_error(r3) goto L7 (error at is_full:78) else goto L2
L2:
    r4 = r2 & 1
    r5 = r4 != 0
    if r5 goto L4 else goto L3 :: bool
L3:
    r6 = r3 & 1
    r7 = r6 != 0
    if r7 goto L4 else goto L5 :: bool
L4:
    r8 = CPyTagged_IsLt_(r2, r3)
    r9 = r8 ^ 1
    r10 = r9
    goto L6
L5:
    r11 = r2 >= r3 :: signed
    r10 = r11
L6:
    return r10
L7:
    r12 = <error> :: bool
    return r12

def async_await_and_popitem_SimpleCache_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, arg, stop_iter_ptr):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    type, value, traceback, arg :: object
    stop_iter_ptr :: object_ptr
    r0, r1, r2, r3 :: object
    r4 :: i32
    r5 :: object
    r6 :: bit
    r7 :: object
    r8 :: str
    r9, r10 :: object
    r11 :: float
    r12 :: bit
    r13 :: bool
    r14 :: object
    r15 :: float
    r16 :: bit
    r17 :: float
    r18 :: bit
    r19 :: object
    r20 :: float
    r21 :: bool
    r22, r23 :: object
    r24 :: str
    r25, r26 :: object
    r27 :: object[1]
    r28 :: object_ptr
    r29, r30 :: object
    r31 :: bool
    r32, r33, r34, r35, r36 :: object
    r37 :: bool
    r38 :: object
    r39 :: bool
    r40 :: object
    r41 :: bit
    r42 :: tuple[object, object, object]
    r43 :: bool
    r44 :: object_ptr
    r45 :: object
    r46 :: bool
    r47, r48, r49 :: tuple[object, object, object]
    r50 :: bit
    r51, r52, r53 :: object
    r54 :: faster_web3.utils.caching.SimpleCache
    r55 :: bool
    r56 :: tuple[str, object]
    r57 :: object
    r58 :: bool
    r59 :: tuple[object, object, object]
    r60 :: bool
    r61 :: object
    r62 :: str
    r63 :: object
    r64 :: bit
    r65 :: object
    r66 :: str
    r67, r68 :: object
    r69 :: float
    r70 :: bit
    r71 :: bool
    r72 :: object
    r73 :: float
    r74 :: bit
    r75 :: float
    r76 :: bit
    r77 :: object
    r78 :: bit
    r79 :: object
    r80 :: str
    r81 :: object
    r82 :: str
    r83 :: object
    r84 :: object[1]
    r85 :: object_ptr
    r86 :: object
    r87 :: float
    r88 :: bit
    r89 :: float
    r90 :: bit
    r91 :: object
    r92 :: float
    r93 :: bit
    r94 :: object
    r95 :: float
    r96 :: object
    r97 :: str
    r98, r99 :: object
    r100 :: object[1]
    r101 :: object_ptr
    r102, r103 :: object
    r104 :: bool
    r105, r106, r107, r108, r109 :: object
    r110 :: bool
    r111 :: object
    r112 :: bool
    r113 :: object
    r114 :: bit
    r115 :: tuple[object, object, object]
    r116 :: bool
    r117 :: object_ptr
    r118 :: object
    r119 :: bool
    r120, r121, r122 :: tuple[object, object, object]
    r123 :: bit
    r124, r125, r126 :: object
    r127, r128 :: tuple[object, object, object]
    r129 :: bit
    r130 :: object
    r131 :: bool
    r132, r133, r134 :: bit
    r135 :: bool
    r136 :: object
L0:
    r0 = <error> :: object
    r1 = r0
    r2 = <error> :: object
    r3 = r2
    r4 = __mypyc_self__.__mypyc_next_label__
    goto L119
L1:
    r5 = load_address _Py_NoneStruct
    r6 = type != r5
    if r6 goto L2 else goto L4 :: bool
L2:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L124 (error at async_await_and_popitem:82) else goto L3 :: bool
L3:
    unreachable
L4:
    r7 = time :: module
    r8 = 'time'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L124 (error at async_await_and_popitem:85) else goto L5
L5:
    r10 = PyObject_Vectorcall(r9, 0, 0, 0)
    dec_ref r9
    if is_error(r10) goto L124 (error at async_await_and_popitem:85) else goto L6
L6:
    r11 = unbox(float, r10)
    dec_ref r10
    r12 = r11 == -113.0
    if r12 goto L8 else goto L7 :: bool
L7:
    __mypyc_self__.__mypyc_generator_attribute__start = r11; r13 = is_error
    if not r13 goto L124 (error at async_await_and_popitem:85) else goto L9 :: bool
L8:
    r14 = PyErr_Occurred()
    if not is_error(r14) goto L124 (error at async_await_and_popitem:85) else goto L7
L9:
    r15 = __mypyc_self__.__mypyc_generator_attribute__start
    r16 = r15 == -113.0
    if r16 goto L11 else goto L10 :: bool
L10:
    r17 = __mypyc_self__.__mypyc_generator_attribute__timeout
    r18 = r17 == -113.0
    if r18 goto L13 else goto L12 :: bool
L11:
    r19 = PyErr_Occurred()
    if not is_error(r19) goto L124 (error at async_await_and_popitem:86) else goto L10
L12:
    r20 = r15 + r17
    __mypyc_self__.__mypyc_generator_attribute__end_time = r20; r21 = is_error
    if not r21 goto L124 (error at async_await_and_popitem:86) else goto L14 :: bool
L13:
    r22 = PyErr_Occurred()
    if not is_error(r22) goto L124 (error at async_await_and_popitem:86) else goto L12
L14:
    if 1 goto L15 else goto L114 :: bool
L15:
    r23 = asyncio :: module
    r24 = 'sleep'
    r25 = CPyObject_GetAttr(r23, r24)
    if is_error(r25) goto L124 (error at async_await_and_popitem:88) else goto L16
L16:
    r26 = object 0
    r27 = [r26]
    r28 = load_address r27
    r29 = PyObject_Vectorcall(r25, r28, 1, 0)
    dec_ref r25
    if is_error(r29) goto L124 (error at async_await_and_popitem:88) else goto L17
L17:
    r30 = CPy_GetCoro(r29)
    dec_ref r29
    if is_error(r30) goto L124 (error at async_await_and_popitem:88) else goto L18
L18:
    __mypyc_self__.__mypyc_temp__0 = r30; r31 = is_error
    if not r31 goto L124 (error at async_await_and_popitem:-1) else goto L19 :: bool
L19:
    r32 = __mypyc_self__.__mypyc_temp__0
    if is_error(r32) goto L124 (error at async_await_and_popitem:-1) else goto L20
L20:
    r33 = CPyIter_Next(r32)
    dec_ref r32
    if is_error(r33) goto L21 else goto L23
L21:
    r34 = CPy_FetchStopIterationValue()
    if is_error(r34) goto L124 (error at async_await_and_popitem:88) else goto L22
L22:
    r35 = r34
    dec_ref r35
    r36 = <error> :: object
    __mypyc_self__.__mypyc_temp__0 = r36; r37 = is_error
    if not r37 goto L124 (error at async_await_and_popitem:88) else goto L45 :: bool
L23:
    r38 = r33
L24:
    __mypyc_self__.__mypyc_next_label__ = 1
    return r38
L25:
    r40 = load_address _Py_NoneStruct
    r41 = type != r40
    if r41 goto L26 else goto L125 :: bool
L26:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L29 (error at async_await_and_popitem:88) else goto L126 :: bool
L27:
    unreachable
L28:
    inc_ref arg
    goto L40
L29:
    r42 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__1 = r42; r43 = is_error
    if not r43 goto L127 (error at async_await_and_popitem:-1) else goto L30 :: bool
L30:
    r44 = load_address r1
    r45 = __mypyc_self__.__mypyc_temp__0
    if is_error(r45) goto L127 (error at async_await_and_popitem:-1) else goto L31
L31:
    r46 = CPy_YieldFromErrorHandle(r45, r44)
    dec_ref r45
    if is_error(r46) goto L127 (error at async_await_and_popitem:88) else goto L32
L32:
    if r46 goto L35 else goto L33 :: bool
L33:
    r38 = r1
    r47 = __mypyc_self__.__mypyc_temp__1
    if is_error(r47) goto L128 (error at async_await_and_popitem:-1) else goto L34
L34:
    CPy_RestoreExcInfo(r47)
    dec_ref r47
    goto L24
L35:
    r35 = r1
    dec_ref r35
    r48 = __mypyc_self__.__mypyc_temp__1
    if is_error(r48) goto L37 (error at async_await_and_popitem:-1) else goto L36
L36:
    CPy_RestoreExcInfo(r48)
    dec_ref r48
    goto L45
L37:
    r49 = __mypyc_self__.__mypyc_temp__1
    if is_error(r49) goto L124 (error at async_await_and_popitem:-1) else goto L38
L38:
    CPy_RestoreExcInfo(r49)
    dec_ref r49
    r50 = CPy_KeepPropagating()
    if not r50 goto L124 else goto L39 :: bool
L39:
    unreachable
L40:
    r51 = __mypyc_self__.__mypyc_temp__0
    if is_error(r51) goto L129 (error at async_await_and_popitem:-1) else goto L41
L41:
    r52 = CPyIter_Send(r51, arg)
    dec_ref r51
    dec_ref arg
    if is_error(r52) goto L43 else goto L42
L42:
    r38 = r52
    goto L24
L43:
    r53 = CPy_FetchStopIterationValue()
    if is_error(r53) goto L124 (error at async_await_and_popitem:88) else goto L44
L44:
    r35 = r53
    dec_ref r35
L45:
    r54 = __mypyc_self__.__mypyc_generator_attribute__self
    if is_error(r54) goto L53 (error at async_await_and_popitem:90) else goto L46
L46:
    r55 = __mypyc_self__.__mypyc_generator_attribute__last
    if is_error(r55) goto L130 (error at async_await_and_popitem:90) else goto L47
L47:
    r56 = r54.popitem(r55)
    dec_ref r54
    if is_error(r56) goto L53 (error at async_await_and_popitem:90) else goto L48
L48:
    r57 = box(tuple[str, object], r56)
    __mypyc_self__.__mypyc_next_label__ = -1
L49:
    if is_error(stop_iter_ptr) goto L50 else goto L52
L50:
    CPyGen_SetStopIterationValue(r57)
    dec_ref r57
    if not 0 goto L124 else goto L51 :: bool
L51:
    unreachable
L52:
    set_mem stop_iter_ptr, r57 :: builtins.object*
    return 0
L53:
    r59 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__2 = r59; r60 = is_error
    if not r60 goto L111 (error at async_await_and_popitem:-1) else goto L54 :: bool
L54:
    r61 = builtins :: module
    r62 = 'KeyError'
    r63 = CPyObject_GetAttr(r61, r62)
    if is_error(r63) goto L111 (error at async_await_and_popitem:91) else goto L55
L55:
    r64 = CPy_ExceptionMatches(r63)
    dec_ref r63
    if r64 goto L56 else goto L107 :: bool
L56:
    r65 = time :: module
    r66 = 'time'
    r67 = CPyObject_GetAttr(r65, r66)
    if is_error(r67) goto L111 (error at async_await_and_popitem:92) else goto L57
L57:
    r68 = PyObject_Vectorcall(r67, 0, 0, 0)
    dec_ref r67
    if is_error(r68) goto L111 (error at async_await_and_popitem:92) else goto L58
L58:
    r69 = unbox(float, r68)
    dec_ref r68
    r70 = r69 == -113.0
    if r70 goto L60 else goto L59 :: bool
L59:
    __mypyc_self__.__mypyc_generator_attribute__now = r69; r71 = is_error
    if not r71 goto L111 (error at async_await_and_popitem:92) else goto L61 :: bool
L60:
    r72 = PyErr_Occurred()
    if not is_error(r72) goto L111 (error at async_await_and_popitem:92) else goto L59
L61:
    r73 = __mypyc_self__.__mypyc_generator_attribute__now
    r74 = r73 == -113.0
    if r74 goto L63 else goto L62 :: bool
L62:
    r75 = __mypyc_self__.__mypyc_generator_attribute__end_time
    r76 = r75 == -113.0
    if r76 goto L65 else goto L64 :: bool
L63:
    r77 = PyErr_Occurred()
    if not is_error(r77) goto L111 (error at async_await_and_popitem:93) else goto L62
L64:
    r78 = r73 >= r75
    if r78 goto L66 else goto L70 :: bool
L65:
    r79 = PyErr_Occurred()
    if not is_error(r79) goto L111 (error at async_await_and_popitem:93) else goto L64
L66:
    r80 = 'Timeout waiting for item to be available'
    r81 = asyncio :: module
    r82 = 'TimeoutError'
    r83 = CPyObject_GetAttr(r81, r82)
    if is_error(r83) goto L111 (error at async_await_and_popitem:94) else goto L67
L67:
    r84 = [r80]
    r85 = load_address r84
    r86 = PyObject_Vectorcall(r83, r85, 1, 0)
    dec_ref r83
    if is_error(r86) goto L111 (error at async_await_and_popitem:94) else goto L68
L68:
    CPy_Raise(r86)
    dec_ref r86
    if not 0 goto L111 (error at async_await_and_popitem:94) else goto L69 :: bool
L69:
    unreachable
L70:
    r87 = __mypyc_self__.__mypyc_generator_attribute__end_time
    r88 = r87 == -113.0
    if r88 goto L72 else goto L71 :: bool
L71:
    r89 = __mypyc_self__.__mypyc_generator_attribute__now
    r90 = r89 == -113.0
    if r90 goto L74 else goto L73 :: bool
L72:
    r91 = PyErr_Occurred()
    if not is_error(r91) goto L111 (error at async_await_and_popitem:97) else goto L71
L73:
    r92 = r87 - r89
    r93 = r92 < 0.1
    if r93 goto L75 else goto L76 :: bool
L74:
    r94 = PyErr_Occurred()
    if not is_error(r94) goto L111 (error at async_await_and_popitem:97) else goto L73
L75:
    r95 = r92
    goto L77
L76:
    r95 = 0.1
L77:
    r96 = asyncio :: module
    r97 = 'sleep'
    r98 = CPyObject_GetAttr(r96, r97)
    if is_error(r98) goto L111 (error at async_await_and_popitem:97) else goto L78
L78:
    r99 = box(float, r95)
    r100 = [r99]
    r101 = load_address r100
    r102 = PyObject_Vectorcall(r98, r101, 1, 0)
    dec_ref r98
    if is_error(r102) goto L131 (error at async_await_and_popitem:97) else goto L79
L79:
    dec_ref r99
    r103 = CPy_GetCoro(r102)
    dec_ref r102
    if is_error(r103) goto L111 (error at async_await_and_popitem:97) else goto L80
L80:
    __mypyc_self__.__mypyc_temp__3 = r103; r104 = is_error
    if not r104 goto L111 (error at async_await_and_popitem:-1) else goto L81 :: bool
L81:
    r105 = __mypyc_self__.__mypyc_temp__3
    if is_error(r105) goto L111 (error at async_await_and_popitem:-1) else goto L82
L82:
    r106 = CPyIter_Next(r105)
    dec_ref r105
    if is_error(r106) goto L83 else goto L85
L83:
    r107 = CPy_FetchStopIterationValue()
    if is_error(r107) goto L111 (error at async_await_and_popitem:97) else goto L84
L84:
    r108 = r107
    dec_ref r108
    r109 = <error> :: object
    __mypyc_self__.__mypyc_temp__3 = r109; r110 = is_error
    if not r110 goto L111 (error at async_await_and_popitem:97) else goto L109 :: bool
L85:
    r111 = r106
L86:
    __mypyc_self__.__mypyc_next_label__ = 2
    return r111
L87:
    r113 = load_address _Py_NoneStruct
    r114 = type != r113
    if r114 goto L88 else goto L132 :: bool
L88:
    CPyErr_SetObjectAndTraceback(type, value, traceback)
    if not 0 goto L91 (error at async_await_and_popitem:97) else goto L133 :: bool
L89:
    unreachable
L90:
    inc_ref arg
    goto L102
L91:
    r115 = CPy_CatchError()
    __mypyc_self__.__mypyc_temp__4 = r115; r116 = is_error
    if not r116 goto L134 (error at async_await_and_popitem:-1) else goto L92 :: bool
L92:
    r117 = load_address r3
    r118 = __mypyc_self__.__mypyc_temp__3
    if is_error(r118) goto L134 (error at async_await_and_popitem:-1) else goto L93
L93:
    r119 = CPy_YieldFromErrorHandle(r118, r117)
    dec_ref r118
    if is_error(r119) goto L134 (error at async_await_and_popitem:97) else goto L94
L94:
    if r119 goto L97 else goto L95 :: bool
L95:
    r111 = r3
    r120 = __mypyc_self__.__mypyc_temp__4
    if is_error(r120) goto L135 (error at async_await_and_popitem:-1) else goto L96
L96:
    CPy_RestoreExcInfo(r120)
    dec_ref r120
    goto L86
L97:
    r108 = r3
    dec_ref r108
    r121 = __mypyc_self__.__mypyc_temp__4
    if is_error(r121) goto L99 (error at async_await_and_popitem:-1) else goto L98
L98:
    CPy_RestoreExcInfo(r121)
    dec_ref r121
    goto L109
L99:
    r122 = __mypyc_self__.__mypyc_temp__4
    if is_error(r122) goto L111 (error at async_await_and_popitem:-1) else goto L100
L100:
    CPy_RestoreExcInfo(r122)
    dec_ref r122
    r123 = CPy_KeepPropagating()
    if not r123 goto L111 else goto L101 :: bool
L101:
    unreachable
L102:
    r124 = __mypyc_self__.__mypyc_temp__3
    if is_error(r124) goto L136 (error at async_await_and_popitem:-1) else goto L103
L103:
    r125 = CPyIter_Send(r124, arg)
    dec_ref r124
    dec_ref arg
    if is_error(r125) goto L105 else goto L104
L104:
    r111 = r125
    goto L86
L105:
    r126 = CPy_FetchStopIterationValue()
    if is_error(r126) goto L111 (error at async_await_and_popitem:97) else goto L106
L106:
    r108 = r126
    dec_ref r108
    goto L109
L107:
    CPy_Reraise()
    if not 0 goto L111 else goto L108 :: bool
L108:
    unreachable
L109:
    r127 = __mypyc_self__.__mypyc_temp__2
    if is_error(r127) goto L124 (error at async_await_and_popitem:-1) else goto L110
L110:
    CPy_RestoreExcInfo(r127)
    dec_ref r127
    goto L14
L111:
    r128 = __mypyc_self__.__mypyc_temp__2
    if is_error(r128) goto L124 (error at async_await_and_popitem:-1) else goto L112
L112:
    CPy_RestoreExcInfo(r128)
    dec_ref r128
    r129 = CPy_KeepPropagating()
    if not r129 goto L124 else goto L113 :: bool
L113:
    unreachable
L114:
    r130 = box(None, 1)
    __mypyc_self__.__mypyc_next_label__ = -1
L115:
    if is_error(stop_iter_ptr) goto L116 else goto L118
L116:
    CPyGen_SetStopIterationValue(r130)
    if not 0 goto L124 else goto L117 :: bool
L117:
    unreachable
L118:
    inc_ref r130
    set_mem stop_iter_ptr, r130 :: builtins.object*
    return 0
L119:
    r132 = r4 == 0
    if r132 goto L137 else goto L120 :: bool
L120:
    r133 = r4 == 1
    if r133 goto L138 else goto L139 :: bool
L121:
    r134 = r4 == 2
    if r134 goto L87 else goto L140 :: bool
L122:
    r135 = raise StopIteration
    if not r135 goto L124 (error at async_await_and_popitem:82) else goto L123 :: bool
L123:
    unreachable
L124:
    r136 = <error> :: object
    return r136
L125:
    xdec_ref r1
    goto L28
L126:
    xdec_ref r1
    goto L27
L127:
    xdec_ref r1
    goto L37
L128:
    dec_ref r38
    goto L37
L129:
    dec_ref arg
    goto L124
L130:
    dec_ref r54
    goto L53
L131:
    dec_ref r99
    goto L111
L132:
    xdec_ref r3
    goto L90
L133:
    xdec_ref r3
    goto L89
L134:
    xdec_ref r3
    goto L99
L135:
    dec_ref r111
    goto L99
L136:
    dec_ref arg
    goto L111
L137:
    xdec_ref r1
    xdec_ref r3
    goto L1
L138:
    xdec_ref r3
    goto L25
L139:
    xdec_ref r1
    goto L121
L140:
    xdec_ref r3
    goto L122

def async_await_and_popitem_SimpleCache_gen.__next__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_await_and_popitem_SimpleCache_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, r0, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_await_and_popitem_SimpleCache_gen.send(__mypyc_self__, arg):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    arg, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = async_await_and_popitem_SimpleCache_gen.__mypyc_generator_helper__(__mypyc_self__, r0, r0, r0, arg, 0)
    if is_error(r1) goto L2 else goto L1
L1:
    return r1
L2:
    r2 = <error> :: object
    return r2

def async_await_and_popitem_SimpleCache_gen.__iter__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def async_await_and_popitem_SimpleCache_gen.throw(__mypyc_self__, type, value, traceback):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    type, value, traceback, r0, r1, r2 :: object
L0:
    r0 = load_address _Py_NoneStruct
    if is_error(value) goto L1 else goto L7
L1:
    inc_ref r0
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L8
L3:
    inc_ref r0
    traceback = r0
L4:
    r1 = async_await_and_popitem_SimpleCache_gen.__mypyc_generator_helper__(__mypyc_self__, type, value, traceback, r0, 0)
    dec_ref value
    dec_ref traceback
    if is_error(r1) goto L6 else goto L5
L5:
    return r1
L6:
    r2 = <error> :: object
    return r2
L7:
    inc_ref value
    goto L2
L8:
    inc_ref traceback
    goto L4

def async_await_and_popitem_SimpleCache_gen.close(__mypyc_self__):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    r0 :: object
    r1 :: str
    r2, r3, r4, r5 :: object
    r6 :: tuple[object, object, object]
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: tuple[object, object]
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: bool
    r15 :: object
L0:
L1:
    r0 = builtins :: module
    r1 = 'GeneratorExit'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L3 else goto L2
L2:
    r3 = load_address _Py_NoneStruct
    r4 = load_address _Py_NoneStruct
    r5 = __mypyc_self__.throw(r2, r3, r4)
    if is_error(r5) goto L3 else goto L11
L3:
    r6 = CPy_CatchError()
    r7 = builtins :: module
    r8 = 'StopIteration'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L12 else goto L4
L4:
    r10 = (r2, r9)
    r11 = box(tuple[object, object], r10)
    r12 = CPy_ExceptionMatches(r11)
    dec_ref r11
    if r12 goto L5 else goto L13 :: bool
L5:
    CPy_RestoreExcInfo(r6)
    dec_ref r6
    r13 = load_address _Py_NoneStruct
    inc_ref r13
    return r13
L6:
    CPy_Reraise()
    if not 0 goto L10 else goto L7 :: bool
L7:
    unreachable
L8:
    r14 = raise RuntimeError('generator ignored GeneratorExit')
    if not r14 goto L10 else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = <error> :: object
    return r15
L11:
    dec_ref r2
    dec_ref r5
    goto L8
L12:
    dec_ref r2
    dec_ref r6
    goto L10
L13:
    dec_ref r6
    goto L6

def async_await_and_popitem_SimpleCache_gen.__await__(__mypyc_self__):
    __mypyc_self__ :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
L0:
    inc_ref __mypyc_self__
    return __mypyc_self__

def SimpleCache.async_await_and_popitem(self, last, timeout, __bitmap):
    self :: faster_web3.utils.caching.SimpleCache
    last :: bool
    timeout :: float
    __bitmap, r0 :: u32
    r1 :: bit
    r2 :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    r3, r4, r5, r6 :: bool
    r7 :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
L0:
    if is_error(last) goto L1 else goto L2
L1:
    last = 1
L2:
    r0 = __bitmap & 1
    r1 = r0 == 0
    if r1 goto L3 else goto L4 :: bool
L3:
    timeout = 10.0
L4:
    r2 = async_await_and_popitem_SimpleCache_gen()
    if is_error(r2) goto L9 (error at async_await_and_popitem:82) else goto L5
L5:
    r2.__mypyc_next_label__ = 0
    inc_ref self
    r2.__mypyc_generator_attribute__self = self; r4 = is_error
    if not r4 goto L10 (error at async_await_and_popitem:82) else goto L6 :: bool
L6:
    r2.__mypyc_generator_attribute__last = last; r5 = is_error
    if not r5 goto L10 (error at async_await_and_popitem:82) else goto L7 :: bool
L7:
    r2.__mypyc_generator_attribute__timeout = timeout; r6 = is_error
    if not r6 goto L10 (error at async_await_and_popitem:82) else goto L8 :: bool
L8:
    return r2
L9:
    r7 = <error> :: faster_web3.utils.caching.async_await_and_popitem_SimpleCache_gen
    return r7
L10:
    dec_ref r2
    goto L9

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: object_ptr
    r6 :: object_ptr[1]
    r7 :: c_ptr
    r8 :: native_int[1]
    r9 :: c_ptr
    r10 :: object
    r11 :: dict
    r12, r13 :: str
    r14 :: bit
    r15 :: object
    r16 :: str
    r17 :: dict
    r18, r19 :: object
    r20 :: str
    r21 :: dict
    r22 :: object
    r23 :: object_ptr
    r24 :: object_ptr[1]
    r25 :: c_ptr
    r26 :: native_int[1]
    r27 :: c_ptr
    r28 :: object
    r29 :: dict
    r30, r31 :: str
    r32 :: bit
    r33 :: object
    r34 :: str
    r35 :: dict
    r36 :: object
    r37 :: str
    r38 :: dict
    r39 :: str
    r40 :: object
    r41 :: object[1]
    r42 :: object_ptr
    r43 :: object
    r44 :: dict
    r45 :: str
    r46 :: i32
    r47 :: bit
    r48 :: object
    r49 :: str
    r50 :: object
    r51 :: tuple
    r52, r53 :: object
    r54 :: str
    r55 :: bool
    r56, r57 :: str
    r58 :: object
    r59 :: object[2]
    r60 :: object_ptr
    r61 :: object
    r62, r63, r64, r65 :: dict
    r66 :: object
    r67 :: str
    r68 :: i32
    r69 :: bit
    r70, r71 :: str
    r72 :: i32
    r73 :: bit
    r74 :: object
    r75 :: str
    r76 :: i32
    r77 :: bit
    r78, r79 :: str
    r80 :: i32
    r81 :: bit
    r82, r83 :: str
    r84 :: i32
    r85 :: bit
    r86, r87 :: str
    r88 :: i32
    r89 :: bit
    r90, r91 :: str
    r92 :: i32
    r93 :: bit
    r94 :: object[3]
    r95 :: object_ptr
    r96 :: object
    r97 :: dict
    r98 :: str
    r99 :: object
    r100 :: object[1]
    r101 :: object_ptr
    r102 :: object
    r103 :: dict
    r104 :: str
    r105 :: i32
    r106 :: bit
    r107 :: object
    r108 :: str
    r109 :: object
    r110 :: str
    r111 :: object
    r112 :: dict
    r113 :: str
    r114 :: object
    r115 :: dict
    r116 :: str
    r117, r118 :: object
    r119 :: tuple
    r120 :: str
    r121, r122 :: object
    r123 :: bool
    r124, r125, r126, r127 :: str
    r128 :: tuple
    r129 :: i32
    r130 :: bit
    r131 :: dict
    r132 :: str
    r133 :: i32
    r134 :: bit
    r135 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L45 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address asyncio :: module
    r6 = [r5]
    r7 = load_address r6
    r8 = [1]
    r9 = load_address r8
    r10 = (('asyncio', 'asyncio', 'asyncio'),)
    r11 = faster_web3.utils.caching.globals :: static
    r12 = 'faster_web3/utils/caching.py'
    r13 = '<module>'
    r14 = CPyImport_ImportMany(r10, r7, r11, r12, r13, r9)
    if not r14 goto L45 else goto L4 :: bool
L4:
    r15 = ('OrderedDict',)
    r16 = 'collections'
    r17 = faster_web3.utils.caching.globals :: static
    r18 = CPyImport_ImportFromMany(r16, r15, r15, r17)
    if is_error(r18) goto L45 (error at <module>:2) else goto L5
L5:
    collections = r18 :: module
    dec_ref r18
    r19 = ('Enum',)
    r20 = 'enum'
    r21 = faster_web3.utils.caching.globals :: static
    r22 = CPyImport_ImportFromMany(r20, r19, r19, r21)
    if is_error(r22) goto L45 (error at <module>:5) else goto L6
L6:
    enum = r22 :: module
    dec_ref r22
    r23 = load_address time :: module
    r24 = [r23]
    r25 = load_address r24
    r26 = [8]
    r27 = load_address r26
    r28 = (('time', 'time', 'time'),)
    r29 = faster_web3.utils.caching.globals :: static
    r30 = 'faster_web3/utils/caching.py'
    r31 = '<module>'
    r32 = CPyImport_ImportMany(r28, r25, r29, r30, r31, r27)
    if not r32 goto L45 else goto L7 :: bool
L7:
    r33 = ('Any', 'Dict', 'Final', 'Generic', 'List', 'Optional', 'Tuple', 'TypeVar', 'final')
    r34 = 'typing'
    r35 = faster_web3.utils.caching.globals :: static
    r36 = CPyImport_ImportFromMany(r34, r33, r33, r35)
    if is_error(r36) goto L45 (error at <module>:9) else goto L8
L8:
    typing = r36 :: module
    dec_ref r36
    r37 = 'T'
    r38 = faster_web3.utils.caching.globals :: static
    r39 = 'TypeVar'
    r40 = CPyDict_GetItem(r38, r39)
    if is_error(r40) goto L45 (error at <module>:22) else goto L9
L9:
    r41 = [r37]
    r42 = load_address r41
    r43 = PyObject_Vectorcall(r40, r42, 1, 0)
    dec_ref r40
    if is_error(r43) goto L45 (error at <module>:22) else goto L10
L10:
    r44 = faster_web3.utils.caching.globals :: static
    r45 = 'T'
    r46 = CPyDict_SetItem(r44, r45, r43)
    dec_ref r43
    r47 = r46 >= 0 :: signed
    if not r47 goto L45 (error at <module>:22) else goto L11 :: bool
L11:
    r48 = enum :: module
    r49 = 'Enum'
    r50 = CPyObject_GetAttr(r48, r49)
    if is_error(r50) goto L45 (error at <module>:26) else goto L12
L12:
    r51 = PyTuple_Pack(1, r50)
    dec_ref r50
    if is_error(r51) goto L45 (error at <module>:26) else goto L13
L13:
    r52 = load_address PyType_Type
    r53 = CPy_CalculateMetaclass(r52, r51)
    if is_error(r53) goto L46 (error at <module>:26) else goto L14
L14:
    r54 = '__prepare__'
    r55 = PyObject_HasAttr(r53, r54)
    if r55 goto L15 else goto L19 :: bool
L15:
    r56 = 'RequestCacheValidationThreshold'
    r57 = '__prepare__'
    r58 = CPyObject_GetAttr(r53, r57)
    if is_error(r58) goto L46 (error at <module>:26) else goto L16
L16:
    r59 = [r56, r51]
    r60 = load_address r59
    r61 = PyObject_Vectorcall(r58, r60, 2, 0)
    dec_ref r58
    if is_error(r61) goto L46 (error at <module>:26) else goto L17
L17:
    r62 = cast(dict, r61)
    if is_error(r62) goto L46 (error at <module>:26) else goto L18
L18:
    r63 = r62
    goto L21
L19:
    r64 = PyDict_New()
    if is_error(r64) goto L46 (error at <module>:26) else goto L20
L20:
    r63 = r64
L21:
    r65 = PyDict_New()
    if is_error(r65) goto L47 (error at <module>:26) else goto L22
L22:
    r66 = load_address PyUnicode_Type
    r67 = 'FINALIZED'
    r68 = PyDict_SetItem(r65, r67, r66)
    r69 = r68 >= 0 :: signed
    if not r69 goto L48 (error at <module>:27) else goto L23 :: bool
L23:
    r70 = 'finalized'
    r71 = 'FINALIZED'
    r72 = CPyDict_SetItem(r63, r71, r70)
    r73 = r72 >= 0 :: signed
    if not r73 goto L48 (error at <module>:27) else goto L24 :: bool
L24:
    r74 = load_address PyUnicode_Type
    r75 = 'SAFE'
    r76 = PyDict_SetItem(r65, r75, r74)
    r77 = r76 >= 0 :: signed
    if not r77 goto L48 (error at <module>:28) else goto L25 :: bool
L25:
    r78 = 'safe'
    r79 = 'SAFE'
    r80 = CPyDict_SetItem(r63, r79, r78)
    r81 = r80 >= 0 :: signed
    if not r81 goto L48 (error at <module>:28) else goto L26 :: bool
L26:
    r82 = 'RequestCacheValidationThreshold'
    r83 = '__annotations__'
    r84 = CPyDict_SetItem(r63, r83, r65)
    dec_ref r65
    r85 = r84 >= 0 :: signed
    if not r85 goto L47 (error at <module>:26) else goto L27 :: bool
L27:
    r86 = 'mypyc filler docstring'
    r87 = '__doc__'
    r88 = CPyDict_SetItem(r63, r87, r86)
    r89 = r88 >= 0 :: signed
    if not r89 goto L47 (error at <module>:26) else goto L28 :: bool
L28:
    r90 = 'faster_web3.utils.caching'
    r91 = '__module__'
    r92 = CPyDict_SetItem(r63, r91, r90)
    r93 = r92 >= 0 :: signed
    if not r93 goto L47 (error at <module>:26) else goto L29 :: bool
L29:
    r94 = [r82, r51, r63]
    r95 = load_address r94
    r96 = PyObject_Vectorcall(r53, r95, 3, 0)
    if is_error(r96) goto L47 (error at <module>:26) else goto L30
L30:
    dec_ref r51
    dec_ref r63
    r97 = faster_web3.utils.caching.globals :: static
    r98 = 'final'
    r99 = CPyDict_GetItem(r97, r98)
    if is_error(r99) goto L49 (error at <module>:25) else goto L31
L31:
    r100 = [r96]
    r101 = load_address r100
    r102 = PyObject_Vectorcall(r99, r101, 1, 0)
    dec_ref r99
    if is_error(r102) goto L49 (error at <module>:26) else goto L32
L32:
    dec_ref r96
    faster_web3.utils.caching.RequestCacheValidationThreshold = r102 :: type
    r103 = faster_web3.utils.caching.globals :: static
    r104 = 'RequestCacheValidationThreshold'
    r105 = PyDict_SetItem(r103, r104, r102)
    dec_ref r102
    r106 = r105 >= 0 :: signed
    if not r106 goto L45 (error at <module>:26) else goto L33 :: bool
L33:
    r107 = faster_web3.utils.caching.RequestCacheValidationThreshold :: type
    r108 = 'FINALIZED'
    r109 = CPyObject_GetAttr(r107, r108)
    if is_error(r109) goto L45 (error at <module>:26) else goto L34
L34:
    faster_web3.utils.caching.RequestCacheValidationThreshold.FINALIZED = r109 :: static
    dec_ref r109
    r110 = 'SAFE'
    r111 = CPyObject_GetAttr(r107, r110)
    if is_error(r111) goto L45 (error at <module>:26) else goto L35
L35:
    faster_web3.utils.caching.RequestCacheValidationThreshold.SAFE = r111 :: static
    dec_ref r111
    r112 = faster_web3.utils.caching.globals :: static
    r113 = 'Generic'
    r114 = CPyDict_GetItem(r112, r113)
    if is_error(r114) goto L45 (error at <module>:32) else goto L36
L36:
    r115 = faster_web3.utils.caching.globals :: static
    r116 = 'T'
    r117 = CPyDict_GetItem(r115, r116)
    if is_error(r117) goto L50 (error at <module>:32) else goto L37
L37:
    r118 = PyObject_GetItem(r114, r117)
    dec_ref r114
    dec_ref r117
    if is_error(r118) goto L45 (error at <module>:32) else goto L38
L38:
    r119 = PyTuple_Pack(1, r118)
    dec_ref r118
    if is_error(r119) goto L45 (error at <module>:32) else goto L39
L39:
    r120 = 'faster_web3.utils.caching'
    r121 = faster_web3.utils.caching.SimpleCache_template :: type
    r122 = CPyType_FromTemplate(r121, r119, r120)
    dec_ref r119
    if is_error(r122) goto L45 (error at <module>:32) else goto L40
L40:
    r123 = SimpleCache_trait_vtable_setup()
    if is_error(r123) goto L51 (error at <module>:-1) else goto L41
L41:
    r124 = '__mypyc_attrs__'
    r125 = '_size'
    r126 = '_data'
    r127 = '__dict__'
    r128 = PyTuple_Pack(3, r125, r126, r127)
    if is_error(r128) goto L51 (error at <module>:32) else goto L42
L42:
    r129 = PyObject_SetAttr(r122, r124, r128)
    dec_ref r128
    r130 = r129 >= 0 :: signed
    if not r130 goto L51 (error at <module>:32) else goto L43 :: bool
L43:
    faster_web3.utils.caching.SimpleCache = r122 :: type
    r131 = faster_web3.utils.caching.globals :: static
    r132 = 'SimpleCache'
    r133 = PyDict_SetItem(r131, r132, r122)
    dec_ref r122
    r134 = r133 >= 0 :: signed
    if not r134 goto L45 (error at <module>:32) else goto L44 :: bool
L44:
    return 1
L45:
    r135 = <error> :: None
    return r135
L46:
    dec_ref r51
    goto L45
L47:
    dec_ref r51
    dec_ref r63
    goto L45
L48:
    dec_ref r51
    dec_ref r63
    dec_ref r65
    goto L45
L49:
    dec_ref r96
    goto L45
L50:
    dec_ref r114
    goto L45
L51:
    dec_ref r122
    goto L45
