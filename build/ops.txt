def to_hex_if_bytes(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1, r2 :: str
    r3 :: i32
    r4 :: bool
    r5, r6, r7, r8, r9, r10 :: str
    r11 :: object[3]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: list
    r16, r17, r18 :: ptr
    r19 :: str
    r20 :: dict
    r21 :: str
    r22 :: object
    r23 :: object[1]
    r24 :: object_ptr
    r25 :: object
    r26 :: str
    r27 :: dict
    r28 :: str
    r29 :: object
    r30 :: object[1]
    r31 :: object_ptr
    r32, r33 :: object
    r34 :: str
    r35, r36 :: object
    r37 :: str
    r38 :: object
    r39 :: tuple[object, object]
    r40 :: object
    r41 :: i32
    r42 :: bit
    r43 :: bool
    r44 :: dict
    r45 :: str
    r46 :: object
    r47 :: object[1]
    r48 :: object_ptr
    r49, r50 :: object
    r51 :: dict
    r52 :: str
    r53 :: object
    r54 :: object[1]
    r55 :: object_ptr
    r56, r57 :: object
    r58, r59 :: str
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L17 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L28 (error at to_hex_if_bytes:24) else goto L2
L2:
    r2 = '0x'
    r3 = CPyStr_Startswith(r1, r2)
    dec_ref r1
    r4 = truncate r3: i32 to builtins.bool
    if r4 goto L12 else goto L3 :: bool
L3:
    r5 = ''
    r6 = 'Expected a hex string. Got: '
    r7 = '{!r:{}}'
    inc_ref val
    r8 = cast(str, val)
    if is_error(r8) goto L28 (error at to_hex_if_bytes:25) else goto L4
L4:
    r9 = ''
    r10 = 'format'
    r11 = [r7, r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775811, 0)
    if is_error(r13) goto L29 (error at to_hex_if_bytes:25) else goto L5
L5:
    dec_ref r8
    r14 = cast(str, r13)
    if is_error(r14) goto L28 (error at to_hex_if_bytes:25) else goto L6
L6:
    r15 = PyList_New(2)
    if is_error(r15) goto L30 (error at to_hex_if_bytes:25) else goto L7
L7:
    r16 = get_element_ptr r15 ob_item :: PyListObject
    r17 = load_mem r16 :: ptr*
    inc_ref r6
    set_mem r17, r6 :: builtins.object*
    r18 = r17 + 8
    set_mem r18, r14 :: builtins.object*
    r19 = PyUnicode_Join(r5, r15)
    dec_ref r15
    if is_error(r19) goto L28 (error at to_hex_if_bytes:25) else goto L8
L8:
    r20 = faster_web3._utils.type_conversion.globals :: static
    r21 = 'Web3ValueError'
    r22 = CPyDict_GetItem(r20, r21)
    if is_error(r22) goto L31 (error at to_hex_if_bytes:25) else goto L9
L9:
    r23 = [r19]
    r24 = load_address r23
    r25 = PyObject_Vectorcall(r22, r24, 1, 0)
    dec_ref r22
    if is_error(r25) goto L31 (error at to_hex_if_bytes:25) else goto L10
L10:
    dec_ref r19
    CPy_Raise(r25)
    dec_ref r25
    if not 0 goto L28 (error at to_hex_if_bytes:25) else goto L11 :: bool
L11:
    unreachable
L12:
    inc_ref val
    r26 = cast(str, val)
    if is_error(r26) goto L28 (error at to_hex_if_bytes:26) else goto L13
L13:
    r27 = faster_web3._utils.type_conversion.globals :: static
    r28 = 'to_hex'
    r29 = CPyDict_GetItem(r27, r28)
    if is_error(r29) goto L32 (error at to_hex_if_bytes:26) else goto L14
L14:
    r30 = [r26]
    r31 = load_address r30
    r32 = ('hexstr',)
    r33 = PyObject_Vectorcall(r29, r31, 0, r32)
    dec_ref r29
    if is_error(r33) goto L32 (error at to_hex_if_bytes:26) else goto L15
L15:
    dec_ref r26
    r34 = cast(str, r33)
    if is_error(r34) goto L28 (error at to_hex_if_bytes:26) else goto L16
L16:
    return r34
L17:
    r35 = load_address PyBytes_Type
    r36 = builtins :: module
    r37 = 'bytearray'
    r38 = CPyObject_GetAttr(r36, r37)
    if is_error(r38) goto L28 (error at to_hex_if_bytes:28) else goto L18
L18:
    inc_ref r35
    r39 = (r35, r38)
    r40 = box(tuple[object, object], r39)
    r41 = PyObject_IsInstance(val, r40)
    dec_ref r40
    r42 = r41 >= 0 :: signed
    if not r42 goto L28 (error at to_hex_if_bytes:28) else goto L19 :: bool
L19:
    r43 = truncate r41: i32 to builtins.bool
    if r43 goto L20 else goto L23 :: bool
L20:
    r44 = faster_web3._utils.type_conversion.globals :: static
    r45 = 'to_hex'
    r46 = CPyDict_GetItem(r44, r45)
    if is_error(r46) goto L28 (error at to_hex_if_bytes:28) else goto L21
L21:
    r47 = [val]
    r48 = load_address r47
    r49 = PyObject_Vectorcall(r46, r48, 1, 0)
    dec_ref r46
    if is_error(r49) goto L28 (error at to_hex_if_bytes:28) else goto L22
L22:
    r50 = r49
    goto L26
L23:
    r51 = faster_web3._utils.type_conversion.globals :: static
    r52 = 'to_hex'
    r53 = CPyDict_GetItem(r51, r52)
    if is_error(r53) goto L28 (error at to_hex_if_bytes:28) else goto L24
L24:
    r54 = [val]
    r55 = load_address r54
    r56 = ('hexstr',)
    r57 = PyObject_Vectorcall(r53, r55, 0, r56)
    dec_ref r53
    if is_error(r57) goto L28 (error at to_hex_if_bytes:28) else goto L25
L25:
    r50 = r57
L26:
    r58 = cast(str, r50)
    if is_error(r58) goto L28 (error at to_hex_if_bytes:28) else goto L27
L27:
    return r58
L28:
    r59 = <error> :: str
    return r59
L29:
    dec_ref r8
    goto L28
L30:
    dec_ref r14
    goto L28
L31:
    dec_ref r19
    goto L28
L32:
    dec_ref r26
    goto L28

def to_bytes_if_hex(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1 :: str
    r2 :: dict
    r3 :: str
    r4 :: object
    r5 :: object[1]
    r6 :: object_ptr
    r7, r8 :: object
    r9 :: union[object, bytes]
    r10, r11 :: bytes
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L5 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L8 (error at to_bytes_if_hex:36) else goto L2
L2:
    r2 = faster_web3._utils.type_conversion.globals :: static
    r3 = 'to_bytes'
    r4 = CPyDict_GetItem(r2, r3)
    if is_error(r4) goto L9 (error at to_bytes_if_hex:36) else goto L3
L3:
    r5 = [r1]
    r6 = load_address r5
    r7 = ('hexstr',)
    r8 = PyObject_Vectorcall(r4, r6, 0, r7)
    dec_ref r4
    if is_error(r8) goto L9 (error at to_bytes_if_hex:36) else goto L4
L4:
    dec_ref r1
    r9 = r8
    goto L6
L5:
    inc_ref val
    r9 = val
L6:
    r10 = cast(bytes, r9)
    if is_error(r10) goto L8 (error at to_bytes_if_hex:36) else goto L7
L7:
    return r10
L8:
    r11 = <error> :: bytes
    return r11
L9:
    dec_ref r1
    goto L8

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16, r17 :: object
    r18 :: str
    r19 :: dict
    r20 :: object
    r21 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L8 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Union',)
    r6 = 'typing'
    r7 = faster_web3._utils.type_conversion.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L8 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('HexStr',)
    r10 = 'eth_typing'
    r11 = faster_web3._utils.type_conversion.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L8 (error at <module>:5) else goto L5
L5:
    eth_typing = r12 :: module
    dec_ref r12
    r13 = ('to_bytes', 'to_hex')
    r14 = 'eth_utils'
    r15 = faster_web3._utils.type_conversion.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L8 (error at <module>:8) else goto L6
L6:
    eth_utils = r16 :: module
    dec_ref r16
    r17 = ('Web3ValueError',)
    r18 = 'faster_web3.exceptions'
    r19 = faster_web3._utils.type_conversion.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L8 (error at <module>:13) else goto L7
L7:
    faster_web3.exceptions = r20 :: module
    dec_ref r20
    return 1
L8:
    r21 = <error> :: None
    return r21
