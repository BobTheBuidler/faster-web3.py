def percentile(values, percentile):
    values :: union[object, None]
    percentile :: union[float, None]
    r0, r1, r2, r3 :: object
    r4 :: tuple
    r5 :: list
    r6, r7 :: object
    r8 :: i32
    r9 :: bit
    r10 :: bool
    r11 :: object
    r12 :: i32
    r13 :: bit
    r14 :: bool
    r15 :: object
    r16 :: i32
    r17 :: bit
    r18 :: bool
    r19 :: int
    r20 :: native_int
    r21 :: bit
    r22 :: native_int
    r23, r24 :: bit
    r25 :: bool
    r26 :: bit
    r27, r28, r29, r30, r31 :: str
    r32 :: object[3]
    r33 :: object_ptr
    r34 :: object
    r35 :: str
    r36 :: list
    r37, r38, r39 :: ptr
    r40 :: str
    r41 :: dict
    r42 :: str
    r43 :: object
    r44 :: object[1]
    r45 :: object_ptr
    r46, r47 :: object
    r48 :: bit
    r49 :: str
    r50 :: None
    r51 :: object
    r52, r53 :: str
    r54 :: dict
    r55 :: str
    r56 :: object
    r57 :: object[1]
    r58 :: object_ptr
    r59 :: object
    r60 :: float
    r61, r62 :: bit
    r63 :: object
    r64 :: float
    r65, r66 :: bit
    r67 :: object
    r68 :: str
    r69 :: dict
    r70 :: str
    r71 :: object
    r72 :: object[1]
    r73 :: object_ptr
    r74 :: object
    r75 :: list
    r76 :: int
    r77 :: float
    r78 :: bit
    r79 :: float
    r80 :: bit
    r81 :: object
    r82, r83, r84 :: float
    r85 :: bit
    r86, r87 :: object
    r88 :: int
    r89 :: float
    r90 :: bit
    r91 :: object
    r92, r93 :: float
    r94, r95, r96, r97 :: bit
    r98, r99, fractional :: float
    r100 :: bit
    r101 :: int
    r102 :: object
    r103 :: int
    r104 :: float
    r105 :: bit
    r106 :: object
    r107 :: float
    r108 :: int
    r109 :: object
    r110, r111 :: int
    r112 :: object
    r113, r114 :: int
    r115 :: float
    r116 :: bit
    r117, r118 :: float
    r119 :: bit
    r120 :: object
    r121 :: float
    r122 :: object
    r123 :: float
L0:
    if is_error(values) goto L1 else goto L84
L1:
    r0 = box(None, 1)
    inc_ref r0
    values = r0
L2:
    if is_error(percentile) goto L3 else goto L85
L3:
    r1 = box(None, 1)
    inc_ref r1
    percentile = r1
L4:
    r2 = load_address PyTuple_Type
    r3 = PyObject_Vectorcall(r2, 0, 0, 0)
    if is_error(r3) goto L86 (error at percentile:16) else goto L5
L5:
    r4 = cast(tuple, r3)
    if is_error(r4) goto L86 (error at percentile:16) else goto L6
L6:
    r5 = PyList_New(0)
    if is_error(r5) goto L87 (error at percentile:16) else goto L7
L7:
    r6 = box(None, 1)
    r7 = PyObject_RichCompare(values, r6, 2)
    if is_error(r7) goto L88 (error at percentile:16) else goto L8
L8:
    r8 = PyObject_IsTrue(r7)
    dec_ref r7
    r9 = r8 >= 0 :: signed
    if not r9 goto L88 (error at percentile:16) else goto L9 :: bool
L9:
    r10 = truncate r8: i32 to builtins.bool
    if r10 goto L89 else goto L10 :: bool
L10:
    r11 = PyObject_RichCompare(values, r4, 2)
    dec_ref r4
    if is_error(r11) goto L90 (error at percentile:16) else goto L11
L11:
    r12 = PyObject_IsTrue(r11)
    dec_ref r11
    r13 = r12 >= 0 :: signed
    if not r13 goto L90 (error at percentile:16) else goto L12 :: bool
L12:
    r14 = truncate r12: i32 to builtins.bool
    if r14 goto L91 else goto L13 :: bool
L13:
    r15 = PyObject_RichCompare(values, r5, 2)
    dec_ref r5
    if is_error(r15) goto L86 (error at percentile:16) else goto L14
L14:
    r16 = PyObject_IsTrue(r15)
    dec_ref r15
    r17 = r16 >= 0 :: signed
    if not r17 goto L86 (error at percentile:16) else goto L15 :: bool
L15:
    r18 = truncate r16: i32 to builtins.bool
    if r18 goto L17 else goto L16 :: bool
L16:
    if 0 goto L92 else goto L18 :: bool
L17:
    if 1 goto L92 else goto L18 :: bool
L18:
    r19 = CPyObject_Size(values)
    if is_error(r19) goto L86 (error at percentile:16) else goto L19
L19:
    r20 = r19 & 1
    r21 = r20 != 0
    if r21 goto L21 else goto L20 :: bool
L20:
    r22 = 2 & 1
    r23 = r22 != 0
    if r23 goto L21 else goto L22 :: bool
L21:
    r24 = CPyTagged_IsLt_(r19, 2)
    r25 = r24
    goto L23
L22:
    r26 = r19 < 2 :: signed
    r25 = r26
L23:
    dec_ref r19 :: int
    if r25 goto L92 else goto L32 :: bool
L24:
    r27 = ''
    r28 = 'Expected a sequence of at least 1 integers, got '
    r29 = '{!r:{}}'
    r30 = ''
    r31 = 'format'
    r32 = [r29, values, r30]
    r33 = load_address r32
    r34 = PyObject_VectorcallMethod(r31, r33, 9223372036854775811, 0)
    if is_error(r34) goto L93 (error at percentile:18) else goto L25
L25:
    dec_ref values
    r35 = cast(str, r34)
    if is_error(r35) goto L83 (error at percentile:18) else goto L26
L26:
    r36 = PyList_New(2)
    if is_error(r36) goto L94 (error at percentile:18) else goto L27
L27:
    r37 = get_element_ptr r36 ob_item :: PyListObject
    r38 = load_mem r37 :: ptr*
    inc_ref r28
    set_mem r38, r28 :: builtins.object*
    r39 = r38 + 8
    set_mem r39, r35 :: builtins.object*
    r40 = PyUnicode_Join(r27, r36)
    dec_ref r36
    if is_error(r40) goto L83 (error at percentile:18) else goto L28
L28:
    r41 = faster_web3._utils.math.globals :: static
    r42 = 'InsufficientData'
    r43 = CPyDict_GetItem(r41, r42)
    if is_error(r43) goto L95 (error at percentile:17) else goto L29
L29:
    r44 = [r40]
    r45 = load_address r44
    r46 = PyObject_Vectorcall(r43, r45, 1, 0)
    dec_ref r43
    if is_error(r46) goto L95 (error at percentile:17) else goto L30
L30:
    dec_ref r40
    CPy_Raise(r46)
    dec_ref r46
    if not 0 goto L83 (error at percentile:17) else goto L31 :: bool
L31:
    unreachable
L32:
    r47 = load_address _Py_NoneStruct
    r48 = percentile == r47
    if r48 goto L96 else goto L40 :: bool
L33:
    r49 = 'Expected a percentile choice, got '
    r50 = unbox(None, percentile)
    dec_ref percentile
    if is_error(r50) goto L83 (error at percentile:21) else goto L34
L34:
    r51 = box(None, r50)
    r52 = PyObject_Str(r51)
    if is_error(r52) goto L83 (error at percentile:21) else goto L35
L35:
    r53 = CPyStr_Build(2, r49, r52)
    dec_ref r52
    if is_error(r53) goto L83 (error at percentile:21) else goto L36
L36:
    r54 = faster_web3._utils.math.globals :: static
    r55 = 'Web3ValueError'
    r56 = CPyDict_GetItem(r54, r55)
    if is_error(r56) goto L97 (error at percentile:21) else goto L37
L37:
    r57 = [r53]
    r58 = load_address r57
    r59 = PyObject_Vectorcall(r56, r58, 1, 0)
    dec_ref r56
    if is_error(r59) goto L97 (error at percentile:21) else goto L38
L38:
    dec_ref r53
    CPy_Raise(r59)
    dec_ref r59
    if not 0 goto L83 (error at percentile:21) else goto L39 :: bool
L39:
    unreachable
L40:
    r60 = unbox(float, percentile)
    r61 = r60 == -113.0
    if r61 goto L42 else goto L41 :: bool
L41:
    r62 = r60 < 0.0
    if r62 goto L98 else goto L43 :: bool
L42:
    r63 = PyErr_Occurred()
    if not is_error(r63) goto L86 (error at percentile:22) else goto L41
L43:
    r64 = unbox(float, percentile)
    r65 = r64 == -113.0
    if r65 goto L45 else goto L44 :: bool
L44:
    r66 = r64 > 100.0
    if r66 goto L98 else goto L50 :: bool
L45:
    r67 = PyErr_Occurred()
    if not is_error(r67) goto L86 (error at percentile:22) else goto L44
L46:
    r68 = 'percentile must be in the range [0, 100]'
    r69 = faster_web3._utils.math.globals :: static
    r70 = 'Web3ValueError'
    r71 = CPyDict_GetItem(r69, r70)
    if is_error(r71) goto L83 (error at percentile:23) else goto L47
L47:
    r72 = [r68]
    r73 = load_address r72
    r74 = PyObject_Vectorcall(r71, r73, 1, 0)
    dec_ref r71
    if is_error(r74) goto L83 (error at percentile:23) else goto L48
L48:
    CPy_Raise(r74)
    dec_ref r74
    if not 0 goto L83 (error at percentile:23) else goto L49 :: bool
L49:
    unreachable
L50:
    r75 = CPySequence_Sort(values)
    if is_error(r75) goto L86 (error at percentile:25) else goto L51
L51:
    r76 = CPyObject_Size(values)
    dec_ref values
    if is_error(r76) goto L99 (error at percentile:27) else goto L52
L52:
    r77 = unbox(float, percentile)
    dec_ref percentile
    r78 = r77 == -113.0
    if r78 goto L54 else goto L53 :: bool
L53:
    r79 = CPyFloat_FromTagged(r76)
    dec_ref r76 :: int
    r80 = r79 == -113.0
    if r80 goto L56 else goto L55 :: bool
L54:
    r81 = PyErr_Occurred()
    if not is_error(r81) goto L100 (error at percentile:27) else goto L53
L55:
    r82 = r79 * r77
    r83 = r82 / 100.0
    r84 = r83 - 1.0
    r85 = r84 < 0.0
    if r85 goto L57 else goto L62 :: bool
L56:
    r86 = PyErr_Occurred()
    if not is_error(r86) goto L101 (error at percentile:27) else goto L55
L57:
    r87 = CPyList_GetItemShort(r75, 0)
    dec_ref r75
    if is_error(r87) goto L83 (error at percentile:29) else goto L58
L58:
    r88 = unbox(int, r87)
    dec_ref r87
    if is_error(r88) goto L83 (error at percentile:29) else goto L59
L59:
    r89 = CPyFloat_FromTagged(r88)
    dec_ref r88 :: int
    r90 = r89 == -113.0
    if r90 goto L61 else goto L60 :: bool
L60:
    return r89
L61:
    r91 = PyErr_Occurred()
    if not is_error(r91) goto L83 (error at percentile:29) else goto L60
L62:
    r92 = r84 % 1.0
    r93 = r92
    r94 = r93 == 0.0
    if r94 goto L65 else goto L63 :: bool
L63:
    r95 = r84 < 0.0
    r96 = 1.0 < 0.0
    r97 = r95 == r96
    if r97 goto L66 else goto L64 :: bool
L64:
    r98 = r93 + 1.0
    r93 = r98
    goto L66
L65:
    r99 = copysign(0.0, 1.0)
    r93 = r99
L66:
    fractional = r93
    r100 = fractional == 0.0
    if r100 goto L67 else goto L73 :: bool
L67:
    r101 = CPyTagged_FromFloat(r84)
    if is_error(r101) goto L101 (error at percentile:33) else goto L68
L68:
    r102 = CPyList_GetItem(r75, r101)
    dec_ref r75
    dec_ref r101 :: int
    if is_error(r102) goto L83 (error at percentile:33) else goto L69
L69:
    r103 = unbox(int, r102)
    dec_ref r102
    if is_error(r103) goto L83 (error at percentile:33) else goto L70
L70:
    r104 = CPyFloat_FromTagged(r103)
    dec_ref r103 :: int
    r105 = r104 == -113.0
    if r105 goto L72 else goto L71 :: bool
L71:
    return r104
L72:
    r106 = PyErr_Occurred()
    if not is_error(r106) goto L83 (error at percentile:33) else goto L71
L73:
    r107 = r84 - fractional
    r108 = CPyTagged_FromFloat(r107)
    if is_error(r108) goto L101 (error at percentile:35) else goto L74
L74:
    r109 = CPyList_GetItem(r75, r108)
    if is_error(r109) goto L102 (error at percentile:36) else goto L75
L75:
    r110 = unbox(int, r109)
    dec_ref r109
    if is_error(r110) goto L102 (error at percentile:36) else goto L76
L76:
    r111 = CPyTagged_Add(r108, 2)
    dec_ref r108 :: int
    r112 = CPyList_GetItem(r75, r111)
    dec_ref r75
    dec_ref r111 :: int
    if is_error(r112) goto L103 (error at percentile:37) else goto L77
L77:
    r113 = unbox(int, r112)
    dec_ref r112
    if is_error(r113) goto L103 (error at percentile:37) else goto L78
L78:
    r114 = CPyTagged_Subtract(r113, r110)
    dec_ref r113 :: int
    r115 = CPyFloat_FromTagged(r114)
    dec_ref r114 :: int
    r116 = r115 == -113.0
    if r116 goto L80 else goto L79 :: bool
L79:
    r117 = fractional * r115
    r118 = CPyFloat_FromTagged(r110)
    dec_ref r110 :: int
    r119 = r118 == -113.0
    if r119 goto L82 else goto L81 :: bool
L80:
    r120 = PyErr_Occurred()
    if not is_error(r120) goto L103 (error at percentile:38) else goto L79
L81:
    r121 = r118 + r117
    return r121
L82:
    r122 = PyErr_Occurred()
    if not is_error(r122) goto L83 (error at percentile:38) else goto L81
L83:
    r123 = <error> :: float
    return r123
L84:
    inc_ref values
    goto L2
L85:
    inc_ref percentile
    goto L4
L86:
    dec_ref values
    dec_ref percentile
    goto L83
L87:
    dec_ref values
    dec_ref percentile
    dec_ref r4
    goto L83
L88:
    dec_ref values
    dec_ref percentile
    dec_ref r4
    dec_ref r5
    goto L83
L89:
    dec_ref r4
    dec_ref r5
    goto L17
L90:
    dec_ref values
    dec_ref percentile
    dec_ref r5
    goto L83
L91:
    dec_ref r5
    goto L17
L92:
    dec_ref percentile
    goto L24
L93:
    dec_ref values
    goto L83
L94:
    dec_ref r35
    goto L83
L95:
    dec_ref r40
    goto L83
L96:
    dec_ref values
    goto L33
L97:
    dec_ref r53
    goto L83
L98:
    dec_ref values
    dec_ref percentile
    goto L46
L99:
    dec_ref percentile
    dec_ref r75
    goto L83
L100:
    dec_ref r75
    dec_ref r76 :: int
    goto L83
L101:
    dec_ref r75
    goto L83
L102:
    dec_ref r75
    dec_ref r108 :: int
    goto L83
L103:
    dec_ref r110 :: int
    goto L83

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Optional', 'Sequence')
    r6 = 'typing'
    r7 = faster_web3._utils.math.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('InsufficientData', 'Web3ValueError')
    r10 = 'faster_web3.exceptions'
    r11 = faster_web3._utils.math.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L6 (error at <module>:6) else goto L5
L5:
    faster_web3.exceptions = r12 :: module
    dec_ref r12
    return 1
L6:
    r13 = <error> :: None
    return r13

def to_hex_if_bytes(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1, r2 :: str
    r3 :: i32
    r4 :: bool
    r5, r6, r7, r8, r9, r10 :: str
    r11 :: object[3]
    r12 :: object_ptr
    r13 :: object
    r14 :: str
    r15 :: list
    r16, r17, r18 :: ptr
    r19 :: str
    r20 :: dict
    r21 :: str
    r22 :: object
    r23 :: object[1]
    r24 :: object_ptr
    r25 :: object
    r26 :: str
    r27 :: object
    r28 :: bool
    r29 :: object[1]
    r30 :: object_ptr
    r31, r32 :: object
    r33 :: str
    r34, r35 :: object
    r36 :: str
    r37 :: object
    r38 :: tuple[object, object]
    r39 :: object
    r40 :: i32
    r41 :: bit
    r42 :: bool
    r43 :: object
    r44 :: bool
    r45 :: object[1]
    r46 :: object_ptr
    r47, r48, r49 :: object
    r50 :: bool
    r51 :: object[1]
    r52 :: object_ptr
    r53, r54 :: object
    r55, r56 :: str
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L19 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L34 (error at to_hex_if_bytes:26) else goto L2
L2:
    r2 = '0x'
    r3 = CPyStr_Startswith(r1, r2)
    dec_ref r1
    r4 = truncate r3: i32 to builtins.bool
    if r4 goto L12 else goto L3 :: bool
L3:
    r5 = ''
    r6 = 'Expected a hex string. Got: '
    r7 = '{!r:{}}'
    inc_ref val
    r8 = cast(str, val)
    if is_error(r8) goto L34 (error at to_hex_if_bytes:27) else goto L4
L4:
    r9 = ''
    r10 = 'format'
    r11 = [r7, r8, r9]
    r12 = load_address r11
    r13 = PyObject_VectorcallMethod(r10, r12, 9223372036854775811, 0)
    if is_error(r13) goto L35 (error at to_hex_if_bytes:27) else goto L5
L5:
    dec_ref r8
    r14 = cast(str, r13)
    if is_error(r14) goto L34 (error at to_hex_if_bytes:27) else goto L6
L6:
    r15 = PyList_New(2)
    if is_error(r15) goto L36 (error at to_hex_if_bytes:27) else goto L7
L7:
    r16 = get_element_ptr r15 ob_item :: PyListObject
    r17 = load_mem r16 :: ptr*
    inc_ref r6
    set_mem r17, r6 :: builtins.object*
    r18 = r17 + 8
    set_mem r18, r14 :: builtins.object*
    r19 = PyUnicode_Join(r5, r15)
    dec_ref r15
    if is_error(r19) goto L34 (error at to_hex_if_bytes:27) else goto L8
L8:
    r20 = faster_web3._utils.type_conversion.globals :: static
    r21 = 'Web3ValueError'
    r22 = CPyDict_GetItem(r20, r21)
    if is_error(r22) goto L37 (error at to_hex_if_bytes:27) else goto L9
L9:
    r23 = [r19]
    r24 = load_address r23
    r25 = PyObject_Vectorcall(r22, r24, 1, 0)
    dec_ref r22
    if is_error(r25) goto L37 (error at to_hex_if_bytes:27) else goto L10
L10:
    dec_ref r19
    CPy_Raise(r25)
    dec_ref r25
    if not 0 goto L34 (error at to_hex_if_bytes:27) else goto L11 :: bool
L11:
    unreachable
L12:
    inc_ref val
    r26 = cast(str, val)
    if is_error(r26) goto L34 (error at to_hex_if_bytes:28) else goto L13
L13:
    r27 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r27) goto L38 else goto L16
L14:
    r28 = raise NameError('value for final name "to_hex" was not set')
    if not r28 goto L34 (error at to_hex_if_bytes:28) else goto L15 :: bool
L15:
    unreachable
L16:
    r29 = [r26]
    r30 = load_address r29
    r31 = ('hexstr',)
    r32 = PyObject_Vectorcall(r27, r30, 0, r31)
    if is_error(r32) goto L39 (error at to_hex_if_bytes:28) else goto L17
L17:
    dec_ref r26
    r33 = cast(str, r32)
    if is_error(r33) goto L34 (error at to_hex_if_bytes:28) else goto L18
L18:
    return r33
L19:
    r34 = load_address PyBytes_Type
    r35 = builtins :: module
    r36 = 'bytearray'
    r37 = CPyObject_GetAttr(r35, r36)
    if is_error(r37) goto L34 (error at to_hex_if_bytes:30) else goto L20
L20:
    inc_ref r34
    r38 = (r34, r37)
    r39 = box(tuple[object, object], r38)
    r40 = PyObject_IsInstance(val, r39)
    dec_ref r39
    r41 = r40 >= 0 :: signed
    if not r41 goto L34 (error at to_hex_if_bytes:30) else goto L21 :: bool
L21:
    r42 = truncate r40: i32 to builtins.bool
    if r42 goto L22 else goto L27 :: bool
L22:
    r43 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r43) goto L23 else goto L25
L23:
    r44 = raise NameError('value for final name "to_hex" was not set')
    if not r44 goto L34 (error at to_hex_if_bytes:30) else goto L24 :: bool
L24:
    unreachable
L25:
    r45 = [val]
    r46 = load_address r45
    r47 = PyObject_Vectorcall(r43, r46, 1, 0)
    if is_error(r47) goto L34 (error at to_hex_if_bytes:30) else goto L26
L26:
    r48 = r47
    goto L32
L27:
    r49 = faster_web3._utils.type_conversion.to_hex :: static
    if is_error(r49) goto L28 else goto L30
L28:
    r50 = raise NameError('value for final name "to_hex" was not set')
    if not r50 goto L34 (error at to_hex_if_bytes:30) else goto L29 :: bool
L29:
    unreachable
L30:
    r51 = [val]
    r52 = load_address r51
    r53 = ('hexstr',)
    r54 = PyObject_Vectorcall(r49, r52, 0, r53)
    if is_error(r54) goto L34 (error at to_hex_if_bytes:30) else goto L31
L31:
    r48 = r54
L32:
    r55 = cast(str, r48)
    if is_error(r55) goto L34 (error at to_hex_if_bytes:30) else goto L33
L33:
    return r55
L34:
    r56 = <error> :: str
    return r56
L35:
    dec_ref r8
    goto L34
L36:
    dec_ref r14
    goto L34
L37:
    dec_ref r19
    goto L34
L38:
    dec_ref r26
    goto L14
L39:
    dec_ref r26
    goto L34

def to_bytes_if_hex(val):
    val :: union[str, bytes, object]
    r0 :: bit
    r1 :: str
    r2 :: object
    r3 :: bool
    r4 :: object[1]
    r5 :: object_ptr
    r6, r7 :: object
    r8 :: union[object, bytes]
    r9, r10 :: bytes
L0:
    r0 = PyUnicode_Check(val)
    if r0 goto L1 else goto L7 :: bool
L1:
    inc_ref val
    r1 = cast(str, val)
    if is_error(r1) goto L10 (error at to_bytes_if_hex:38) else goto L2
L2:
    r2 = faster_web3._utils.type_conversion.to_bytes :: static
    if is_error(r2) goto L11 else goto L5
L3:
    r3 = raise NameError('value for final name "to_bytes" was not set')
    if not r3 goto L10 (error at to_bytes_if_hex:38) else goto L4 :: bool
L4:
    unreachable
L5:
    r4 = [r1]
    r5 = load_address r4
    r6 = ('hexstr',)
    r7 = PyObject_Vectorcall(r2, r5, 0, r6)
    if is_error(r7) goto L12 (error at to_bytes_if_hex:38) else goto L6
L6:
    dec_ref r1
    r8 = r7
    goto L8
L7:
    inc_ref val
    r8 = val
L8:
    r9 = cast(bytes, r8)
    if is_error(r9) goto L10 (error at to_bytes_if_hex:38) else goto L9
L9:
    return r9
L10:
    r10 = <error> :: bytes
    return r10
L11:
    dec_ref r1
    goto L3
L12:
    dec_ref r1
    goto L10

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: object_ptr
    r10 :: object_ptr[1]
    r11 :: c_ptr
    r12 :: native_int[1]
    r13 :: c_ptr
    r14 :: object
    r15 :: dict
    r16, r17 :: str
    r18 :: bit
    r19 :: object
    r20 :: str
    r21 :: dict
    r22, r23 :: object
    r24 :: str
    r25 :: dict
    r26 :: object
    r27 :: dict
    r28 :: str
    r29 :: object
    r30 :: str
    r31 :: object
    r32 :: dict
    r33 :: str
    r34 :: i32
    r35 :: bit
    r36 :: dict
    r37 :: str
    r38 :: object
    r39 :: str
    r40 :: object
    r41 :: dict
    r42 :: str
    r43 :: i32
    r44 :: bit
    r45 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L14 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final', 'Union')
    r6 = 'typing'
    r7 = faster_web3._utils.type_conversion.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L14 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = load_address eth_utils :: module
    r10 = [r9]
    r11 = load_address r10
    r12 = [6]
    r13 = load_address r12
    r14 = (('eth_utils', 'eth_utils', 'eth_utils'),)
    r15 = faster_web3._utils.type_conversion.globals :: static
    r16 = 'faster_web3/_utils/type_conversion.py'
    r17 = '<module>'
    r18 = CPyImport_ImportMany(r14, r11, r15, r16, r17, r13)
    if not r18 goto L14 else goto L5 :: bool
L5:
    r19 = ('HexStr',)
    r20 = 'eth_typing'
    r21 = faster_web3._utils.type_conversion.globals :: static
    r22 = CPyImport_ImportFromMany(r20, r19, r19, r21)
    if is_error(r22) goto L14 (error at <module>:7) else goto L6
L6:
    eth_typing = r22 :: module
    dec_ref r22
    r23 = ('Web3ValueError',)
    r24 = 'faster_web3.exceptions'
    r25 = faster_web3._utils.type_conversion.globals :: static
    r26 = CPyImport_ImportFromMany(r24, r23, r23, r25)
    if is_error(r26) goto L14 (error at <module>:11) else goto L7
L7:
    faster_web3.exceptions = r26 :: module
    dec_ref r26
    r27 = faster_web3._utils.type_conversion.globals :: static
    r28 = 'eth_utils'
    r29 = CPyDict_GetItem(r27, r28)
    if is_error(r29) goto L14 (error at <module>:16) else goto L8
L8:
    r30 = 'to_bytes'
    r31 = CPyObject_GetAttr(r29, r30)
    dec_ref r29
    if is_error(r31) goto L14 (error at <module>:16) else goto L9
L9:
    faster_web3._utils.type_conversion.to_bytes = r31 :: static
    r32 = faster_web3._utils.type_conversion.globals :: static
    r33 = 'to_bytes'
    r34 = CPyDict_SetItem(r32, r33, r31)
    dec_ref r31
    r35 = r34 >= 0 :: signed
    if not r35 goto L14 (error at <module>:16) else goto L10 :: bool
L10:
    r36 = faster_web3._utils.type_conversion.globals :: static
    r37 = 'eth_utils'
    r38 = CPyDict_GetItem(r36, r37)
    if is_error(r38) goto L14 (error at <module>:17) else goto L11
L11:
    r39 = 'to_hex'
    r40 = CPyObject_GetAttr(r38, r39)
    dec_ref r38
    if is_error(r40) goto L14 (error at <module>:17) else goto L12
L12:
    faster_web3._utils.type_conversion.to_hex = r40 :: static
    r41 = faster_web3._utils.type_conversion.globals :: static
    r42 = 'to_hex'
    r43 = CPyDict_SetItem(r41, r42, r40)
    dec_ref r40
    r44 = r43 >= 0 :: signed
    if not r44 goto L14 (error at <module>:17) else goto L13 :: bool
L13:
    return 1
L14:
    r45 = <error> :: None
    return r45

def construct_user_agent(module, class_name):
    module, class_name :: str
    r0, r1 :: object
    r2 :: str
    r3 :: dict
    r4 :: object
    r5 :: str
    r6 :: dict
    r7 :: str
    r8 :: object
    r9, r10, r11, r12, r13 :: str
L0:
    r0 = ('__version__',)
    r1 = ('web3_version',)
    r2 = 'faster_web3'
    r3 = faster_web3._utils.http.globals :: static
    r4 = CPyImport_ImportFromMany(r2, r0, r1, r3)
    if is_error(r4) goto L5 (error at construct_user_agent:11) else goto L1
L1:
    faster_web3 = r4 :: module
    dec_ref r4
    r5 = 'faster_web3.py/'
    r6 = faster_web3._utils.http.globals :: static
    r7 = 'web3_version'
    r8 = CPyDict_GetItem(r6, r7)
    if is_error(r8) goto L5 (error at construct_user_agent:15) else goto L2
L2:
    r9 = cast(str, r8)
    if is_error(r9) goto L5 (error at construct_user_agent:15) else goto L3
L3:
    r10 = '/'
    r11 = '.'
    r12 = CPyStr_Build(6, r5, r9, r10, module, r11, class_name)
    dec_ref r9
    if is_error(r12) goto L5 (error at construct_user_agent:15) else goto L4
L4:
    return r12
L5:
    r13 = <error> :: str
    return r13

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: dict
    r10 :: str
    r11 :: object
    r12 :: i32
    r13 :: bit
    r14 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L6 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = faster_web3._utils.http.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L6 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = faster_web3._utils.http.globals :: static
    r10 = 'DEFAULT_HTTP_TIMEOUT'
    r11 = box(float, 30.0)
    r12 = CPyDict_SetItem(r9, r10, r11)
    dec_ref r11
    r13 = r12 >= 0 :: signed
    if not r13 goto L6 (error at <module>:4) else goto L5 :: bool
L5:
    return 1
L6:
    r14 = <error> :: None
    return r14
